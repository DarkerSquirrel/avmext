#line 1 "device\\hook.c"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"




#pragma warning(3:4092)   
#pragma warning(4:4096)   
#pragma warning(4:4121)   
#pragma warning(3:4125)   
#pragma warning(3:4130)   
#pragma warning(3:4132)   


#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"
#pragma warning(disable:4206) 
#pragma warning(4:4101)   
#pragma warning(4:4208)   
#pragma warning(3:4212)   
#pragma warning(3:4242)   



#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"
#pragma warning(4:4267)   
#pragma warning(disable:4312)   
#pragma warning(4:4313)        
#pragma warning(disable:4324)  
#pragma warning(error:4700)    
#pragma warning(error:4703)    
#pragma warning(error:4754)    
#pragma warning(error:4013)    
#pragma warning(error:4551)    
#pragma warning(error:4806)    
#pragma warning(disable:4826)  
#pragma warning(4:4509)   
#pragma warning(4:4177)   
#pragma warning(disable:4274)  
#pragma warning(disable:4786)  
#pragma warning(disable:4503)  
#pragma warning(disable:4263)  
#pragma warning(disable:4264)  
#pragma warning(disable:4710)  
#pragma warning(disable:4917)  
#pragma warning(error:4552)    
#pragma warning(error:4553)    
#pragma warning(3:4288)   
#pragma warning(3:4532)   
#pragma warning(error:4296)  
#pragma warning(3:4546)   




#pragma warning(disable:4306)   


#pragma warning(disable:4356)	
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"



#pragma warning(error:4028)   
#pragma warning(error:4029)   







#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"











#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"

#pragma warning(disable: 4068)	
				


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\suppress.h"
#pragma once






#line 9 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\suppress.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"



#pragma warning(disable:4430)	
#pragma warning(disable:4431)	
#pragma warning(disable:4812)	
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"




#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"

#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"





#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"



#pragma warning(disable:4603)   
#pragma warning(disable:4627)   
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"





#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\warning.h"

#line 1 "device\\hook.c"
#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hook.h"
#pragma once
#line 1 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\patch/patch.h"
#pragma once
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

























#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#pragma warning(disable:4116)       
                                    
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






#pragma warning(push)
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#pragma warning(disable:4115) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"























#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





#pragma warning(push)
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

#pragma warning(disable:4115) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#pragma warning(disable:4625) 
#pragma warning(disable:4626) 
#pragma warning(disable:4668) 
#pragma warning(disable:4820) 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






































#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#pragma warning(push)
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#pragma warning(disable:4115) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#pragma warning(disable:4365) 
#pragma warning(disable:4668) 
#pragma warning(disable:4820) 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




















#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"








#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"











#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"
















#pragma once
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"


#pragma warning(push)
#pragma warning(disable:4668) 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"



 

#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"
  
 #line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

 



  
 #line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

 
  
  
 #line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"







#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"



#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






































#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"


#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"

#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"





#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"



#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"











#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"









#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros




































































































































































































































































































































































































































































                                                




                                                

















































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






























#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"
























#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"












#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






































#line 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"


























































































































#line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






































































































#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"








































































































































































#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"





































































































#line 2169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"
























































































































































































































#line 2386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"
#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"



































































































































































































































#line 2615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"









































































































































































































































#line 2888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"









#line 2898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"


    
    
#line 2903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






#line 2910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"
#line 2911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"






#line 2918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"
#line 2919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"











#line 2931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"

































#line 2965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"





























#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ConcurrencySal.h"


















#pragma once




















































































































































































































































#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ConcurrencySal.h"





#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ConcurrencySal.h"
#line 2995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sal.h"


#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"




#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"
































#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"












#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"






































































































#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"






































































































#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"



























































#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"























































































#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"



















#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"





#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"


#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"




































































#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"










#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"






























#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"
















#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

















#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"




























#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"





























































































































































#pragma once
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_undef.h"








































































































































































































































































































































































































































































#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"
































































#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"






















































#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings_strict.h"

#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

















#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"




























































































































#line 1 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.15063.0\\shared\\sdv_driverspecs.h"





















#line 23 "c:\\program files (x86)\\windows kits\\10\\include\\10.0.15063.0\\shared\\sdv_driverspecs.h"
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"



#pragma once
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"



























































































































#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"

    
    
    
    
    
    
    
    
    
    
    

    
    

#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"

    
    
    



    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    



    
    


    
    
    
    
    
    
    
    
    
    
    
    


    
    


    
    


    
    



    
    









    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    


    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    


    




    
    
    
    
    

    


    
    
    
    
    


    


    
    
    
    
    
    

    


    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    


    
    

    
    
    
    

    

    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    

    
    


    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    


    
    
    
    
     
    

    
    
        
        
        
        
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
#line 699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"
    
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"
    


    
    
    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    
    

    
    

    
    
    
    
    
    


    
    
    

    
	

    
    


    
    


    
    
    


    
    
    


    
    











































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"

    
    
    

    
    
    





#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\driverspecs.h"


#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"












#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"


#pragma warning(pop)
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\specstrings.h"

#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#pragma pack(push,8)
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"













#pragma once
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"






#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"









#pragma pack(push,8)
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"

















#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"











#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"

#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"



typedef unsigned __int64    uintptr_t;


#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"

#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"





typedef   char *  va_list;
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"





#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"







#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"





#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"


#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"













#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"







#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"














#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"





#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"












#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"


extern void __cdecl __va_start(  va_list *, ...);


















#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"






#pragma pack(pop)
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"

#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\vadefs.h"
 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"















#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
















#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




        
            
        

#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"





#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
 
 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




 


#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
  
 #line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"










#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"








#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
    
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


  


    
  #line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"











    
        
        
    





#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"









#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

















#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"





#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"





#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"





#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"










#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"










#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



 
  
 



#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


 
  
  
 



#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


 
  
   
  

#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
 



#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"





#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



typedef unsigned __int64    size_t;


#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



typedef size_t rsize_t;

#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



typedef __int64             intptr_t;


#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"












typedef __int64             ptrdiff_t;


#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


typedef unsigned short wchar_t;

#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

typedef unsigned short wint_t;
typedef unsigned short wctype_t;














typedef int errcode;
typedef int errno_t;
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

typedef  long __time32_t;   


typedef __int64 __time64_t;     









typedef __time64_t time_t;      
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"














#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"












#line 635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"




#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

























































































































































#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"














#line 823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"














































































































































#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;

#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; 
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;

#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"









#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

void

__fastcall
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
_guard_check_icall (
      uintptr_t Target
    );

int
__cdecl
_guard_icall_checks_enforced (
    void
    );


int
__cdecl
_guard_rf_checks_enforced (
    void
    );
#line 2114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 2116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"







#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 2130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"






#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 2149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

    



#line 2155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
        
        
    #line 2158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"





#line 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"



#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"


#pragma pack(pop)
#line 2176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

#line 2178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"
 

#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"






#pragma pack(push,8)
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"








typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;




























struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct _DISPATCHER_CONTEXT;



 EXCEPTION_DISPOSITION __C_specific_handler (
      struct _EXCEPTION_RECORD * ExceptionRecord,
      void * EstablisherFrame,
      struct _CONTEXT * ContextRecord,
      struct _DISPATCHER_CONTEXT * DispatcherContext
);

#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"


#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"















unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);

#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"

















#pragma pack(pop)
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"

#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\excpt.h"
 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"














#pragma once
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 

#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"







#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"




















#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"













#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"













                                













   int __cdecl _isctype(  int _C,   int _Type);
   int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
    int __cdecl isalpha(  int _C);
   int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
    int __cdecl isupper(  int _C);
   int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
    int __cdecl islower(  int _C);
   int __cdecl _islower_l(  int _C,   _locale_t _Locale);
    int __cdecl isdigit(  int _C);
   int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
   int __cdecl isxdigit(  int _C);
   int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);
    int __cdecl isspace(  int _C);
   int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
   int __cdecl ispunct(  int _C);
   int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
    int __cdecl isalnum(  int _C);
   int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
   int __cdecl isprint(  int _C);
   int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
   int __cdecl isgraph(  int _C);
   int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
   int __cdecl iscntrl(  int _C);
   int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);
    int __cdecl toupper(  int _C);
    int __cdecl tolower(  int _C);
    int __cdecl _tolower(  int _C);
   int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
    int __cdecl _toupper(  int _C);
   int __cdecl _toupper_l(  int _C,   _locale_t _Locale);
   int __cdecl __isascii(  int _C);
   int __cdecl __toascii(  int _C);
   int __cdecl __iscsymf(  int _C);
   int __cdecl __iscsym(  int _C);

#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"







   int __cdecl iswalpha(  wint_t _C);
   int __cdecl _iswalpha_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswupper(  wint_t _C);
   int __cdecl _iswupper_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswlower(  wint_t _C);
   int __cdecl _iswlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswdigit(  wint_t _C);
   int __cdecl _iswdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswxdigit(  wint_t _C);
   int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswspace(  wint_t _C);
   int __cdecl _iswspace_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswpunct(  wint_t _C);
   int __cdecl _iswpunct_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswalnum(  wint_t _C);
   int __cdecl _iswalnum_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswprint(  wint_t _C);
   int __cdecl _iswprint_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswgraph(  wint_t _C);
   int __cdecl _iswgraph_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswcntrl(  wint_t _C);
   int __cdecl _iswcntrl_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswascii(  wint_t _C);
   int __cdecl isleadbyte(  int _C);
   int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

   wint_t __cdecl towupper(  wint_t _C);
   wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
   wint_t __cdecl towlower(  wint_t _C);
   wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswctype(  wint_t _C,   wctype_t _Type);
   int __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);

   int __cdecl __iswcsymf(  wint_t _C);
   int __cdecl _iswcsymf_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl __iswcsym(  wint_t _C);
   int __cdecl _iswcsym_l(  wint_t _C,   _locale_t _Locale);

__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details."))  int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);


#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"










































































































































































































































#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"

#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"





#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\ctype.h"
 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"



















#pragma warning(push)
#pragma warning(disable:4001) 
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"
#pragma once
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"



















#pragma warning(push)
#pragma warning(disable:4001) 
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"
#pragma once
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"



#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"


























































#pragma warning(pop)
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"

#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winpackagefamily.h"
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"





























































#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"

















































#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"



#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"






#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"





#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"



#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"











#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"






































 

















#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"



#pragma warning(pop)
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"

#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\winapifamily.h"
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


#pragma warning(push)
#pragma warning(disable:4201) 
#pragma warning(disable:4668) 
#pragma warning(disable:4820) 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

















#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"






































#pragma once
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"





    
    
    

    
    
    

    

#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"
    
    
    #line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"
    

#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"
    

#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    


    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    



















#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\kernelspecs.h"
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"










#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"













#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

















#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





















#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"






















#pragma warning(push)
#pragma warning(disable:4668) 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"


 
 typedef unsigned __int64 POINTER_64_INT;
 
  
 

#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"













#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"





#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"







#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"





#pragma once
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"





typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;







#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"

















#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"



    typedef __int64 INT_PTR, *PINT_PTR;
    typedef unsigned __int64 UINT_PTR, *PUINT_PTR;

    typedef __int64 LONG_PTR, *PLONG_PTR;
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;

    










#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"











typedef __int64 SHANDLE_PTR;
typedef unsigned __int64 HANDLE_PTR;
typedef unsigned int UHALF_PTR, *PUHALF_PTR;
typedef int HALF_PTR, *PHALF_PTR;


__inline
unsigned long
HandleToULong(
    const void *h
    )
{
    return((unsigned long) (ULONG_PTR) h );
}

__inline
long
HandleToLong(
    const void *h
    )
{
    return((long) (LONG_PTR) h );
}

__inline
void *
ULongToHandle(
    const unsigned long h
    )
{
    return((void *) (UINT_PTR) h );
}


__inline
void *
LongToHandle(
    const long h
    )
{
    return((void *) (INT_PTR) h );
}


__inline
unsigned long
PtrToUlong(
    const void  *p
    )
{
    return((unsigned long) (ULONG_PTR) p );
}

__inline
unsigned int
PtrToUint(
    const void  *p
    )
{
    return((unsigned int) (UINT_PTR) p );
}

__inline
unsigned short
PtrToUshort(
    const void  *p
    )
{
    return((unsigned short) (unsigned long) (ULONG_PTR) p );
}

__inline
long
PtrToLong(
    const void  *p
    )
{
    return((long) (LONG_PTR) p );
}

__inline
int
PtrToInt(
    const void  *p
    )
{
    return((int) (INT_PTR) p );
}

__inline
short
PtrToShort(
    const void  *p
    )
{
    return((short) (long) (LONG_PTR) p );
}

__inline
void *
IntToPtr(
    const int i
    )

{
    return( (void *)(INT_PTR)i );
}

__inline
void *
UIntToPtr(
    const unsigned int ui
    )

{
    return( (void *)(UINT_PTR)ui );
}

__inline
void *
LongToPtr(
    const long l
    )

{
    return( (void *)(LONG_PTR)l );
}

__inline
void *
ULongToPtr(
    const unsigned long ul
    )

{
    return( (void *)(ULONG_PTR)ul );
}






__inline
void *
Ptr32ToPtr(
    const void * __ptr32 p
    )
{
    return((void *) (ULONG_PTR) (unsigned long) p);
}

__inline
void *
Handle32ToHandle(
    const void * __ptr32 h
    )
{
    return((void *) (LONG_PTR) (long) h);
}

__inline
void * __ptr32
PtrToPtr32(
    const void *p
    )
{
    return((void * __ptr32) (unsigned long) (ULONG_PTR) p);
}



#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"




































































#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"























typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;









































#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;








#pragma warning(pop)
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"

#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\basetsd.h"
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"







#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
















#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




















#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"










#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"







typedef void *PVOID;
typedef void * __ptr64 PVOID64;







#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"












#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
















#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"











typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






typedef wchar_t WCHAR;    



#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef   WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef   PWSTR *PZPWSTR;
typedef   const PWSTR *PCZPWSTR;
typedef   WCHAR __unaligned *LPUWSTR, *PUWSTR;
typedef   const WCHAR *LPCWSTR, *PCWSTR;
typedef   PCWSTR *PZPCWSTR;
typedef   const PCWSTR *PCZPCWSTR;
typedef   const WCHAR __unaligned *LPCUWSTR, *PCUWSTR;

typedef   WCHAR *PZZWSTR;
typedef   const WCHAR *PCZZWSTR;
typedef   WCHAR __unaligned *PUZZWSTR;
typedef   const WCHAR __unaligned *PCUZZWSTR;

typedef  WCHAR *PNZWCH;
typedef  const WCHAR *PCNZWCH;
typedef  WCHAR __unaligned *PUNZWCH;
typedef  const WCHAR __unaligned *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR __unaligned *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;



















typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR __unaligned *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR __unaligned *PCUUCSSTR;

typedef UCSCHAR __unaligned *PUUCSCHAR;
typedef const UCSCHAR __unaligned *PCUUCSCHAR;

#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef   CHAR *NPSTR, *LPSTR, *PSTR;
typedef   PSTR *PZPSTR;
typedef   const PSTR *PCZPSTR;
typedef   const CHAR *LPCSTR, *PCSTR;
typedef   PCSTR *PZPCSTR;
typedef   const PCSTR *PCZPCSTR;

typedef   CHAR *PZZSTR;
typedef   const CHAR *PCZZSTR;

typedef  CHAR *PNZCH;
typedef  const CHAR *PCNZCH;

































typedef char TCHAR, *PTCHAR;
typedef unsigned char TUCHAR, *PTUCHAR;

#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;


#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"










typedef double DOUBLE;

typedef struct _QUAD {
    union {
        __int64 UseThisFieldToCopy;
        double  DoNotUseThisField;
    } ;

} QUAD;





typedef SHORT *PSHORT;  
typedef LONG *PLONG;    
typedef QUAD *PQUAD;








typedef unsigned char UCHAR;
typedef unsigned short USHORT;
typedef unsigned long ULONG;
typedef QUAD UQUAD;





typedef UCHAR *PUCHAR;
typedef USHORT *PUSHORT;
typedef ULONG *PULONG;
typedef UQUAD *PUQUAD;









typedef const UCHAR *PCUCHAR;
typedef const USHORT *PCUSHORT;
typedef const ULONG *PCULONG;
typedef const UQUAD *PCUQUAD;

#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





typedef signed char SCHAR;
typedef SCHAR *PSCHAR;



typedef const SCHAR *PCSCHAR;

#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"










typedef struct _PROCESSOR_NUMBER {
    USHORT Group;
    UCHAR Number;
    UCHAR Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    USHORT Group;
    USHORT Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;









#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"










typedef void *HANDLE;


#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
typedef HANDLE *PHANDLE;







typedef UCHAR  FCHAR;
typedef USHORT FSHORT;
typedef ULONG  FLONG;










typedef   long HRESULT;
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








    
    
    
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"













#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"














































typedef char CCHAR;          
typedef short CSHORT;
typedef ULONG CLONG;

typedef CCHAR *PCCHAR;
typedef CSHORT *PCSHORT;
typedef CLONG *PCLONG;









typedef ULONG LCID;         
typedef PULONG PLCID;       
typedef USHORT LANGID;      










typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;

#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









typedef ULONG LOGICAL;
typedef ULONG *PLOGICAL;











typedef   LONG NTSTATUS;
  
typedef NTSTATUS *PNTSTATUS;
  


typedef const NTSTATUS *PCNTSTATUS;
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









































#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"









#line 1008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"














typedef long SECURITY_STATUS;

#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
































#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;













typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;


















#line 1098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;





#line 1111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
typedef union _LARGE_INTEGER {
    struct {
        ULONG LowPart;
        LONG HighPart;
    } ;
    struct {
        ULONG LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
} LARGE_INTEGER;
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

typedef LARGE_INTEGER *PLARGE_INTEGER;





#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
typedef union _ULARGE_INTEGER {
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } ;
    struct {
        ULONG LowPart;
        ULONG HighPart;
    } u;
    ULONGLONG QuadPart;
} ULARGE_INTEGER;
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

typedef ULARGE_INTEGER *PULARGE_INTEGER;





typedef LONG_PTR RTL_REFERENCE_COUNT, *PRTL_REFERENCE_COUNT;
typedef LONG RTL_REFERENCE_COUNT32, *PRTL_REFERENCE_COUNT32;









typedef struct _LUID {
    ULONG LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;












typedef LARGE_INTEGER PHYSICAL_ADDRESS, *PPHYSICAL_ADDRESS;




































































































































#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
















unsigned char
__cdecl
_rotl8 (
      unsigned char Value,
      unsigned char Shift
    );

unsigned short
__cdecl
_rotl16 (
      unsigned short Value,
      unsigned char Shift
    );

unsigned char
__cdecl
_rotr8 (
      unsigned char Value,
      unsigned char Shift
    );

unsigned short
__cdecl
_rotr16 (
      unsigned short Value,
      unsigned char Shift
    );

#pragma intrinsic(_rotl8)
#pragma intrinsic(_rotl16)
#pragma intrinsic(_rotr8)
#pragma intrinsic(_rotr16)

#line 1368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








unsigned int
__cdecl
_rotl (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
      unsigned __int64 Value,
      int Shift
    );

unsigned int
__cdecl
_rotr (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
      unsigned __int64 Value,
      int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)

#line 1410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"












typedef enum _EVENT_TYPE {
    NotificationEvent,
    SynchronizationEvent
} EVENT_TYPE;






typedef enum _TIMER_TYPE {
    NotificationTimer,
    SynchronizationTimer
} TIMER_TYPE;





typedef enum _WAIT_TYPE {
    WaitAll,
    WaitAny,
    WaitNotification,
    WaitDequeue
} WAIT_TYPE;







typedef   CHAR *PSZ;
typedef   const char *PCSZ;






typedef USHORT RTL_STRING_LENGTH_TYPE;

typedef struct _STRING {
    USHORT Length;
    USHORT MaximumLength;



      PCHAR Buffer;
} STRING;
typedef STRING *PSTRING;
typedef STRING ANSI_STRING;
typedef PSTRING PANSI_STRING;



typedef STRING OEM_STRING;
typedef PSTRING POEM_STRING;
typedef const STRING* PCOEM_STRING;





typedef struct _CSTRING {
    USHORT Length;
    USHORT MaximumLength;
    const char *Buffer;
} CSTRING;
typedef CSTRING *PCSTRING;




typedef STRING CANSI_STRING;
typedef PSTRING PCANSI_STRING;






typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;



      PWCH   Buffer;
#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
} UNICODE_STRING;
typedef UNICODE_STRING *PUNICODE_STRING;
typedef const UNICODE_STRING *PCUNICODE_STRING;






























#line 1546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"








typedef UCHAR BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       









typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;









#pragma warning(push)
#pragma warning(disable:4214)

typedef struct _RTL_BALANCED_NODE {
    union {
        struct _RTL_BALANCED_NODE *Children[2];
        struct {
            struct _RTL_BALANCED_NODE *Left;
            struct _RTL_BALANCED_NODE *Right;
        } ;
    } ;



    union {
        UCHAR Red : 1;
        UCHAR Balance : 2;
        ULONG_PTR ParentValue;
    } ;
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE;

#pragma warning(pop)













typedef struct LIST_ENTRY32 {
    ULONG Flink;
    ULONG Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;



typedef struct _SINGLE_LIST_ENTRY32 {
    ULONG Next;
} SINGLE_LIST_ENTRY32, *PSINGLE_LIST_ENTRY32;


__inline
void
ListEntry32To64(
      PLIST_ENTRY32 l32,
      PLIST_ENTRY64 l64
    )
{
    l64->Flink = (ULONGLONG)(ULONG)l32->Flink;
    l64->Blink = (ULONGLONG)(ULONG)l32->Blink;
}

__inline
void
ListEntry64To32(
      PLIST_ENTRY64 l64,
      PLIST_ENTRY32 l32
    )
{
    l32->Flink = (ULONG)l64->Flink;
    l32->Blink = (ULONG)l64->Blink;
}
#line 1663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"











typedef struct _WNF_STATE_NAME {
    ULONG Data[2];
} WNF_STATE_NAME;

typedef struct _WNF_STATE_NAME* PWNF_STATE_NAME;
typedef const struct _WNF_STATE_NAME* PCWNF_STATE_NAME;
#line 1681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


typedef struct _STRING32 {
    USHORT   Length;
    USHORT   MaximumLength;
    ULONG  Buffer;
} STRING32;
typedef STRING32 *PSTRING32;

typedef STRING32 UNICODE_STRING32;
typedef UNICODE_STRING32 *PUNICODE_STRING32;

typedef STRING32 ANSI_STRING32;
typedef ANSI_STRING32 *PANSI_STRING32;


typedef struct _STRING64 {
    USHORT   Length;
    USHORT   MaximumLength;
    ULONGLONG  Buffer;
} STRING64;
typedef STRING64 *PSTRING64;

typedef STRING64 UNICODE_STRING64;
typedef UNICODE_STRING64 *PUNICODE_STRING64;

typedef STRING64 ANSI_STRING64;
typedef ANSI_STRING64 *PANSI_STRING64;























typedef struct _OBJECT_ATTRIBUTES64 {
    ULONG Length;
    ULONG64 RootDirectory;
    ULONG64 ObjectName;
    ULONG Attributes;
    ULONG64 SecurityDescriptor;
    ULONG64 SecurityQualityOfService;
} OBJECT_ATTRIBUTES64;
typedef OBJECT_ATTRIBUTES64 *POBJECT_ATTRIBUTES64;
typedef const OBJECT_ATTRIBUTES64 *PCOBJECT_ATTRIBUTES64;

typedef struct _OBJECT_ATTRIBUTES32 {
    ULONG Length;
    ULONG RootDirectory;
    ULONG ObjectName;
    ULONG Attributes;
    ULONG SecurityDescriptor;
    ULONG SecurityQualityOfService;
} OBJECT_ATTRIBUTES32;
typedef OBJECT_ATTRIBUTES32 *POBJECT_ATTRIBUTES32;
typedef const OBJECT_ATTRIBUTES32 *PCOBJECT_ATTRIBUTES32;



typedef struct _OBJECT_ATTRIBUTES {
    ULONG Length;
    HANDLE RootDirectory;
    PUNICODE_STRING ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;        
    PVOID SecurityQualityOfService;  
} OBJECT_ATTRIBUTES;
typedef OBJECT_ATTRIBUTES *POBJECT_ATTRIBUTES;
typedef const OBJECT_ATTRIBUTES *PCOBJECT_ATTRIBUTES;



















































#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"






#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"




















#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"






#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"




























#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"







#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"







#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"







#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"







#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"

#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\crtdefs.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 

#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"


#pragma warning(push)
#pragma warning(disable:4995) 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"








#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"













 void *  __cdecl _memccpy(   void * _Dst,   const void * _Src,   int _Val,   size_t _MaxCount);
    void *  __cdecl memchr(   const void * _Buf ,   int _Val,   size_t _MaxCount);
   int     __cdecl _memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
   int     __cdecl _memicmp_l(  const void * _Buf1,   const void * _Buf2,   size_t _Size,   _locale_t _Locale);
  int     __cdecl memcmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
 
 

void *  __cdecl memcpy(  void * _Dst,   const void * _Src,   size_t _MaxCount);

 errno_t  __cdecl memcpy_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"


#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

 

void *  __cdecl memset(  void * _Dst,   int _Val,   size_t _Size);



  void * __cdecl memccpy(  void * _Dst,   const void * _Src,   int _Val,   size_t _Size);
    int __cdecl memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

  errno_t __cdecl _strset_s(  char * _Dst,   size_t _DstSize,   int _Value);

  char * __cdecl _strset( char *_Dest,  int _Value);

  errno_t __cdecl strcpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#pragma prefast (suppress: 28719, "Banned API")
  char * __cdecl strcpy( char *_Dest,  const char * _Source);

  errno_t __cdecl strcat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#pragma prefast (suppress: 28719, "Banned API")
  char * __cdecl strcat( char *_Dest,  const char * _Source);
          int     __cdecl strcmp(  const char * _Str1,   const char * _Str2);
        size_t  __cdecl strlen(  const char * _Str);



size_t  __cdecl strnlen(   const char * _Str,   size_t _MaxCount);

static __inline


size_t  __cdecl strnlen_s(   const char * _Str,   size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

  errno_t __cdecl memmove_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"



#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"
         void *  __cdecl memmove(  void * _Dst,   const void * _Src,   size_t _Size);


#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"




#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

   char *  __cdecl _strdup(  const char * _Src);



#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

    char *  __cdecl strchr(  const char * _Str,   int _Val);
   int     __cdecl _stricmp(   const char * _Str1,    const char * _Str2);
   int     __cdecl _strcmpi(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricmp_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl strcoll(   const char * _Str1,    const  char * _Str2);
   int     __cdecl _strcoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _stricoll(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _strncoll  (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strncoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int     __cdecl _strnicoll (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   size_t  __cdecl strcspn(   const char * _Str,    const char * _Control);
    char *  __cdecl _strerror(  const char * _ErrMsg);
  errno_t __cdecl _strerror_s(  char * _Buf,   size_t _SizeInBytes,   const char * _ErrMsg);

    char *  __cdecl strerror(  int);

  errno_t __cdecl strerror_s(  char * _Buf,   size_t _SizeInBytes,   int _ErrNum);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

  errno_t __cdecl _strlwr_s(  char * _Str,   size_t _Size);

  char * __cdecl _strlwr( char *_String);
  errno_t __cdecl _strlwr_s_l(  char * _Str,   size_t _Size,   _locale_t _Locale);

  char * __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);

  errno_t __cdecl strncat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#pragma warning(push)

#pragma warning(disable:6059)
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"


  char * __cdecl strncat(  char *_Dest,   const char * _Source,   size_t _Count);
#pragma warning(pop)


#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"
   int     __cdecl strncmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"
   int     __cdecl _strnicmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);

  errno_t __cdecl strncpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

  char * __cdecl strncpy(    char *_Dest,   const char * _Source,   size_t _Count);
  errno_t __cdecl _strnset_s(  char * _Str,   size_t _SizeInBytes,   int _Val,   size_t _MaxCount);

  char * __cdecl _strnset(  char *_Dest,   int _Val,   size_t _Count);
    char *  __cdecl strpbrk(  const char * _Str,   const char * _Control);
    char *  __cdecl strrchr(  const char * _Str,   int _Ch);
 char *  __cdecl _strrev(  char * _Str);
 
   size_t  __cdecl strspn(  const char * _Str,   const char * _Control);
    char *  __cdecl strstr(  const char * _Str,   const char * _SubStr);
    char *  __cdecl strtok(  char * _Str,   const char * _Delim);

   char *  __cdecl strtok_s(  char * _Str,   const char * _Delim,     char ** _Context);
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"
  errno_t __cdecl _strupr_s(  char * _Str,   size_t _Size);

  char * __cdecl _strupr( char *_String);
  errno_t __cdecl _strupr_s_l(  char * _Str,   size_t _Size, _locale_t _Locale);

  char * __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
  size_t  __cdecl strxfrm (    char * _Dst,   const char * _Src,   size_t _MaxCount);
  size_t  __cdecl _strxfrm_l(    char * _Dst,   const char * _Src,   size_t _MaxCount,   _locale_t _Locale);





























#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

    char * __cdecl strdup(  const char * _Src);



#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"


    int __cdecl strcmpi(  const char * _Str1,   const char * _Str2);
    int __cdecl stricmp(  const char * _Str1,   const char * _Str2);
  char * __cdecl strlwr(  char * _Str);
    int __cdecl strnicmp(  const char * _Str1,   const char * _Str,   size_t _MaxCount);
  char * __cdecl strnset(  char * _Str,   int _Val,   size_t _MaxCount);
  char * __cdecl strrev(  char * _Str);
         char * __cdecl strset(  char * _Str,   int _Val);
  char * __cdecl strupr(  char * _Str);

#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"









#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

   wchar_t * __cdecl _wcsdup(  const wchar_t * _Str);



#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"


  errno_t __cdecl wcscat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#pragma prefast (suppress: 28719, "Banned API")
  wchar_t * __cdecl wcscat( wchar_t *_Dest,  const wchar_t * _Source);
  

  wchar_t * __cdecl wcschr(  const wchar_t * _Str, wchar_t _Ch);
   int __cdecl wcscmp(  const wchar_t * _Str1,   const wchar_t * _Str2);

  errno_t __cdecl wcscpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#pragma prefast (suppress: 28719, "Banned API")
  wchar_t * __cdecl wcscpy( wchar_t *_Dest,  const wchar_t * _Source);
   size_t __cdecl wcscspn(  const wchar_t * _Str,   const wchar_t * _Control);
 size_t __cdecl wcslen(  const wchar_t * _Str);



size_t __cdecl wcsnlen(  const wchar_t * _Src,   size_t _MaxCount);

static __inline


size_t __cdecl wcsnlen_s(  const wchar_t * _Src,   size_t _MaxCount)
{
    return (_Src == ((void *)0)) ? 0 : wcsnlen(_Src, _MaxCount);
}
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

  errno_t __cdecl wcsncat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#pragma prefast(push)
#pragma prefast(disable:6059,"CRTs")
  wchar_t * __cdecl wcsncat(  wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
#pragma prefast(pop)
   int __cdecl wcsncmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);

  errno_t __cdecl wcsncpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

  wchar_t * __cdecl wcsncpy(    wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
    wchar_t * __cdecl wcspbrk(  const wchar_t * _Str,   const wchar_t * _Control);
    wchar_t * __cdecl wcsrchr(  const wchar_t * _Str,   wchar_t _Ch);
 
   size_t __cdecl wcsspn(  const wchar_t * _Str,   const wchar_t * _Control);
  

  wchar_t * __cdecl wcsstr(  const wchar_t * _Str,   const wchar_t * _SubStr);
    wchar_t * __cdecl wcstok(  wchar_t * _Str,   const wchar_t * _Delim);

   wchar_t * __cdecl wcstok_s(  wchar_t * _Str,   const wchar_t * _Delim,     wchar_t ** _Context);
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"
    wchar_t * __cdecl _wcserror(  int _ErrNum);
  errno_t __cdecl _wcserror_s(  wchar_t * _Buf,   size_t _SizeInWords,   int _ErrNum);

    wchar_t * __cdecl __wcserror(  const wchar_t * _Str);
  errno_t __cdecl __wcserror_s(  wchar_t * _Buffer,   size_t _SizeInWords,   const wchar_t * _ErrMsg);


   int __cdecl _wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
  errno_t __cdecl _wcsnset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Val,   size_t _MaxCount);

  wchar_t * __cdecl _wcsnset(  wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
 wchar_t * __cdecl _wcsrev(  wchar_t * _Str);
  errno_t __cdecl _wcsset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Value);

  wchar_t * __cdecl _wcsset(  wchar_t *_Str, wchar_t _Val);

  errno_t __cdecl _wcslwr_s(  wchar_t * _Str,   size_t _SizeInWords);

  wchar_t * __cdecl _wcslwr( wchar_t *_String);
  errno_t __cdecl _wcslwr_s_l(  wchar_t * _Str,   size_t _SizeInWords,   _locale_t _Locale);

  wchar_t * __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
  errno_t __cdecl _wcsupr_s(  wchar_t * _Str,   size_t _Size);

  wchar_t * __cdecl _wcsupr( wchar_t *_String);
  errno_t __cdecl _wcsupr_s_l(  wchar_t * _Str,   size_t _Size,   _locale_t _Locale);

  wchar_t * __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
  size_t __cdecl wcsxfrm(    wchar_t * _Dst,   const wchar_t * _Src,   size_t _MaxCount);
  size_t __cdecl _wcsxfrm_l(    wchar_t * _Dst,   const wchar_t *_Src,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl wcscoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcscoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicoll_l(  const wchar_t * _Str1,   const wchar_t *_Str2,   _locale_t _Locale);
   int __cdecl _wcsncoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsncoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl _wcsnicoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);




























#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

    wchar_t * __cdecl wcsdup(  const wchar_t * _Str);



#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"





    int __cdecl wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
    int __cdecl wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
  wchar_t * __cdecl wcsnset(  wchar_t * _Str,   wchar_t _Val,   size_t _MaxCount);
  wchar_t * __cdecl wcsrev(  wchar_t * _Str);
  wchar_t * __cdecl wcsset(  wchar_t * _Str, wchar_t _Val);
  wchar_t * __cdecl wcslwr(  wchar_t * _Str);
  wchar_t * __cdecl wcsupr(  wchar_t * _Str);
    int __cdecl wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);

#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"


#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"







#pragma warning(pop)
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"

#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\crt\\string.h"
 

#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"



























#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"



























#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    ULONG Uniquifier;
} OBJECTID;
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

























































































































































#line 1994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 1996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"





#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"







































#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"
































char _RTL_CONSTANT_STRING_type_check(const void *s);

#line 2079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


































typedef
 
 
EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
      struct _EXCEPTION_RECORD *ExceptionRecord,
      PVOID EstablisherFrame,
      struct _CONTEXT *ContextRecord,
      PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;










typedef UCHAR KIRQL;

typedef KIRQL *PKIRQL;









typedef enum _NT_PRODUCT_TYPE {
    NtProductWinNt = 1,
    NtProductLanManNt,
    NtProductServer
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;








typedef   enum _SUITE_TYPE {
    SmallBusiness,
    Enterprise,
    BackOffice,
    CommunicationServer,
    TerminalServer,
    SmallBusinessRestricted,
    EmbeddedNT,
    DataCenter,
    SingleUserTS,
    Personal,
    Blade,
    EmbeddedRestricted,
    SecurityAppliance,
    StorageServer,
    ComputeServer,
    WHServer,
    PhoneNT,
    MaxSuiteType
} SUITE_TYPE;
































































































































































































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



















#pragma warning(push)
#pragma warning(disable:4668) 
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"
#pragma warning(disable:4001) 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#pragma once






















































































































































#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"






#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"






#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"






#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"











#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"






























#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"





#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"


#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"








#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"



#pragma warning(pop)


#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\sdkddkver.h"

#line 2374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"























































































































































































































































































































































































































































































































































































































































#line 3006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


























#line 3033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


























#line 3060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



































































#line 3128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

























#line 3154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"



#line 3158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"

#line 3160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"




#pragma warning(pop)
#line 3166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


#line 3169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntdef.h"


#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntstatus.h"

































#pragma once
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntstatus.h"




  















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntstatus.h"















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 23698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntstatus.h"


  


#line 23704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntstatus.h"
#line 23705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntstatus.h"

#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\bugcodes.h"

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\bugcodes.h"

#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntiologc.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ntiologc.h"


#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__pragma(warning(disable: 28110 28111 28161 28162)) typedef   int __prefast_analysis_mode_flag0;
__pragma(warning(disable: 28110 28111 28161 28162)) typedef   int __prefast_analysis_mode_flag1;










typedef struct _ACCESS_STATE *PACCESS_STATE;
typedef struct _CALLBACK_OBJECT *PCALLBACK_OBJECT;



#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
typedef struct _KPROCESS *PEPROCESS;
typedef struct _KTHREAD *PETHREAD;



#line 87 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
typedef struct _IO_TIMER *PIO_TIMER;
typedef struct _KINTERRUPT *PKINTERRUPT;
typedef struct _KTHREAD *PKTHREAD, *PRKTHREAD;
typedef struct _KPROCESS *PKPROCESS, *PRKPROCESS;
typedef struct _OBJECT_TYPE *POBJECT_TYPE;
typedef struct _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;






typedef struct _CONTEXT *PCONTEXT;
typedef struct _IO_STACK_LOCATION *PIO_STACK_LOCATION;
typedef struct _VPB *PVPB;
typedef struct _FILE_GET_QUOTA_INFORMATION *PFILE_GET_QUOTA_INFORMATION;




ULONG64
__readgsqword (
      ULONG Offset
    );

#pragma intrinsic(__readgsqword)

__forceinline
PKTHREAD
KeGetCurrentThread (
    void
    )

{
    return (struct _KTHREAD *)__readgsqword(0x188);
}

#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"























#pragma once


#pragma warning(push)
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"





typedef enum {
    HAL_MCE_RECORD,
    HAL_MCA_RECORD
} MCA_EXCEPTION_TYPE;







typedef union _MCI_ADDR{
    struct {
        ULONG Address;
        ULONG Reserved;
    } ;

    ULONGLONG   QuadPart;
} MCI_ADDR, *PMCI_ADDR;

























#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"
typedef union _MCI_STATS {
    struct {
        USHORT  McaErrorCode;
        USHORT  ModelErrorCode;
        ULONG   OtherInformation : 25;
        ULONG   ContextCorrupt : 1;
        ULONG   AddressValid : 1;
        ULONG   MiscValid : 1;
        ULONG   ErrorEnabled : 1;
        ULONG   UncorrectedError : 1;
        ULONG   StatusOverFlow : 1;
        ULONG   Valid : 1;
    } MciStatus;

    ULONG64 QuadPart;
} MCI_STATS, *PMCI_STATS;
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"

#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"

























#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"











typedef struct _MCA_EXCEPTION {

    
    ULONG               VersionNumber;      
    MCA_EXCEPTION_TYPE  ExceptionType;      
    LARGE_INTEGER       TimeStamp;          
    ULONG               ProcessorNumber;
    ULONG               Reserved1;

    union {
        struct {
            UCHAR           BankNumber;
            UCHAR           Reserved2[7];
            MCI_STATS       Status;
            MCI_ADDR        Address;
            ULONGLONG       Misc;
        } Mca;

        struct {
            ULONGLONG       Address;        
            ULONGLONG       Type;           
        } Mce;
    } u;
    

    
    ULONG                   ExtCnt;
    ULONG                   Reserved3;
    ULONGLONG               ExtReg[24];
    

} MCA_EXCEPTION, *PMCA_EXCEPTION;

























#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"

typedef MCA_EXCEPTION CMC_EXCEPTION, *PCMC_EXCEPTION;    
typedef MCA_EXCEPTION CPE_EXCEPTION, *PCPE_EXCEPTION;    




#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"

#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"










typedef UCHAR ERROR_SEVERITY, *PERROR_SEVERITY;

typedef enum _ERROR_SEVERITY_VALUE  {
    ErrorRecoverable = 0,
    ErrorFatal       = 1,
    ErrorCorrected   = 2,
    ErrorOthers      = 3,   
} ERROR_SEVERITY_VALUE;

#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"










#line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"


#pragma warning(pop)
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"

#line 1408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\mce.h"



#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









extern __declspec(dllimport) volatile CCHAR KeNumberProcessors;


#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















typedef struct _KSYSTEM_TIME {
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME;






typedef LONG KPRIORITY;








typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;






























typedef ULONG64 KSPIN_LOCK_QUEUE_NUMBER;











































#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _KSPIN_LOCK_QUEUE {
    struct _KSPIN_LOCK_QUEUE * volatile Next;
    PKSPIN_LOCK volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE;

typedef struct _KLOCK_QUEUE_HANDLE {
    KSPIN_LOCK_QUEUE LockQueue;
    KIRQL OldIrql;
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE;




typedef enum _KPROFILE_SOURCE {
    ProfileTime,
    ProfileAlignmentFixup,
    ProfileTotalIssues,
    ProfilePipelineDry,
    ProfileLoadInstructions,
    ProfilePipelineFrozen,
    ProfileBranchInstructions,
    ProfileTotalNonissues,
    ProfileDcacheMisses,
    ProfileIcacheMisses,
    ProfileCacheMisses,
    ProfileBranchMispredictions,
    ProfileStoreInstructions,
    ProfileFpInstructions,
    ProfileIntegerInstructions,
    Profile2Issue,
    Profile3Issue,
    Profile4Issue,
    ProfileSpecialInstructions,
    ProfileTotalCycles,
    ProfileIcacheIssues,
    ProfileDcacheAccesses,
    ProfileMemoryBarrierCycles,
    ProfileLoadLinkedIssues,
    ProfileMaximum
} KPROFILE_SOURCE;










typedef struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK {
    ULONG Signature;
    USHORT Revision;
    USHORT Size;
    USHORT DpcWatchdogProfileOffset;
    ULONG DpcWatchdogProfileLength;
} DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK, *PDPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK;







typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    USHORT ControlWord;
    USHORT StatusWord;
    UCHAR TagWord;
    UCHAR Reserved1;
    USHORT ErrorOpcode;
    ULONG ErrorOffset;
    USHORT ErrorSelector;
    USHORT Reserved2;
    ULONG DataOffset;
    USHORT DataSelector;
    USHORT Reserved3;
    ULONG MxCsr;
    ULONG MxCsr_Mask;
    M128A FloatRegisters[8];



    M128A XmmRegisters[16];
    UCHAR Reserved4[96];






#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved2[6];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    ULONG64 Mask;
    ULONG Length;
    ULONG Reserved1;
      PXSAVE_AREA Area;



#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    PVOID Buffer;



#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} XSTATE_CONTEXT, *PXSTATE_CONTEXT;



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
BOOLEAN
_bittest (
      LONG const *Base,
      LONG Offset
    );

BOOLEAN
_bittestandcomplement (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandreset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_bittest64 (
      LONG64 const *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandcomplement64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandset64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_bittestandreset64 (
      LONG64 *Base,
      LONG64 Offset
    );

BOOLEAN
_interlockedbittestandset64 (
       LONG64 volatile *Base,
      LONG64 Offset
    );

BOOLEAN
_interlockedbittestandreset64 (
       LONG64 volatile *Base,
      LONG64 Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)

#pragma intrinsic(_bittest64)
#pragma intrinsic(_bittestandcomplement64)
#pragma intrinsic(_bittestandset64)
#pragma intrinsic(_bittestandreset64)
#pragma intrinsic(_interlockedbittestandset64)
#pragma intrinsic(_interlockedbittestandreset64)










 
BOOLEAN
_BitScanForward (
      ULONG *Index,
      ULONG Mask
    );

 
BOOLEAN
_BitScanReverse (
      ULONG *Index,
      ULONG Mask
    );

 
BOOLEAN
_BitScanForward64 (
      ULONG *Index,
      ULONG64 Mask
    );

 
BOOLEAN
_BitScanReverse64 (
      ULONG *Index,
      ULONG64 Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)
#pragma intrinsic(_BitScanForward64)
#pragma intrinsic(_BitScanReverse64)













































































































SHORT
_InterlockedIncrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedDecrement16 (
       SHORT volatile *Addend
    );

SHORT
_InterlockedCompareExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange,
      SHORT Comperand
    );

LONG
_InterlockedAnd (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedOr (
       LONG volatile *Destination,
      LONG Value
    );

LONG
_InterlockedXor (
       LONG volatile *Destination,
      LONG Value
    );

LONG64
_InterlockedAnd64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG64
_InterlockedOr64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG64
_InterlockedXor64 (
       LONG64 volatile *Destination,
      LONG64 Value
    );

LONG
_InterlockedIncrement (
       LONG volatile *Addend
    );

LONG
_InterlockedDecrement (
       LONG volatile *Addend
    );

LONG
_InterlockedExchange (
       LONG volatile *Target,
      LONG Value
    );

LONG
_InterlockedExchangeAdd (
       LONG volatile *Addend,
      LONG Value
    );



__forceinline
LONG
_InlineInterlockedAdd (
       LONG volatile *Addend,
      LONG Value
    )

{
    return _InterlockedExchangeAdd(Addend, Value) + Value;
}

#line 1739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

LONG
_InterlockedCompareExchange (
       LONG volatile *Destination,
      LONG ExChange,
      LONG Comperand
    );

LONG64
_InterlockedIncrement64 (
       LONG64 volatile *Addend
    );

LONG64
_InterlockedDecrement64 (
       LONG64 volatile *Addend
    );

LONG64
_InterlockedExchange64 (
       LONG64 volatile *Target,
      LONG64 Value
    );

LONG64
_InterlockedExchangeAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    );



__forceinline
LONG64
_InlineInterlockedAdd64 (
       LONG64 volatile *Addend,
      LONG64 Value
    )

{
    return _InterlockedExchangeAdd64(Addend, Value) + Value;
}

#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

LONG64
_InterlockedCompareExchange64 (
       LONG64 volatile *Destination,
      LONG64 ExChange,
      LONG64 Comperand
    );

BOOLEAN
_InterlockedCompareExchange128 (
       LONG64 volatile *Destination,
      LONG64 ExchangeHigh,
      LONG64 ExchangeLow,
      LONG64 *ComparandResult
    );

  PVOID
_InterlockedCompareExchangePointer (
      
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
     PVOID volatile *Destination,
      PVOID Exchange,
      PVOID Comperand
    );

  PVOID
_InterlockedExchangePointer(
      
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
     PVOID volatile *Target,
      PVOID Value
    );

#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedAnd)
#pragma intrinsic(_InterlockedOr)
#pragma intrinsic(_InterlockedXor)
#pragma intrinsic(_InterlockedIncrement)
#pragma intrinsic(_InterlockedDecrement)
#pragma intrinsic(_InterlockedExchange)
#pragma intrinsic(_InterlockedExchangeAdd)
#pragma intrinsic(_InterlockedCompareExchange)
#pragma intrinsic(_InterlockedAnd64)
#pragma intrinsic(_InterlockedOr64)
#pragma intrinsic(_InterlockedXor64)
#pragma intrinsic(_InterlockedIncrement64)
#pragma intrinsic(_InterlockedDecrement64)
#pragma intrinsic(_InterlockedExchange64)
#pragma intrinsic(_InterlockedExchangeAdd64)
#pragma intrinsic(_InterlockedCompareExchange64)



#pragma intrinsic(_InterlockedCompareExchange128)

#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#pragma intrinsic(_InterlockedExchangePointer)
#pragma intrinsic(_InterlockedCompareExchangePointer)






CHAR
_InterlockedExchange8 (
       CHAR volatile *Target,
      CHAR Value
    );

SHORT
_InterlockedExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange8)
#pragma intrinsic(_InterlockedExchange16)

#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











char 
_InterlockedExchangeAdd8 (
       char volatile * _Addend, 
      char _Value
    );

char
_InterlockedAnd8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedOr8 (
       char volatile *Destination,
      char Value
    );

char
_InterlockedXor8 (
       char volatile *Destination,
      char Value
    );

SHORT
_InterlockedAnd16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedOr16(
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedXor16(
       SHORT volatile *Destination,
      SHORT Value
    );

#pragma intrinsic (_InterlockedExchangeAdd8)
#pragma intrinsic (_InterlockedAnd8)
#pragma intrinsic (_InterlockedOr8)
#pragma intrinsic (_InterlockedXor8)
#pragma intrinsic (_InterlockedAnd16)
#pragma intrinsic (_InterlockedOr16)
#pragma intrinsic (_InterlockedXor16)

#line 1930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









void
__cpuidex (
    int CPUInfo[4],
    int Function,
    int SubLeaf
    );

#pragma intrinsic(__cpuidex)









void
_mm_clflush (
      void const *Address
    );

#pragma intrinsic(_mm_clflush)




void
_ReadWriteBarrier (
    void
    );

#pragma intrinsic(_ReadWriteBarrier)

















void
__faststorefence (
    void
    );




void
_mm_lfence (
    void
    );

void
_mm_mfence (
    void
    );

void
_mm_sfence (
    void
    );

void
_mm_pause (
    void
    );

void
_mm_prefetch (
      CHAR const *a,
      int sel
    );

void
_m_prefetchw (
      volatile const void *Source
    );













#pragma intrinsic(__faststorefence)




#pragma intrinsic(_mm_pause)
#pragma intrinsic(_mm_prefetch)
#pragma intrinsic(_mm_lfence)
#pragma intrinsic(_mm_mfence)
#pragma intrinsic(_mm_sfence)
#pragma intrinsic(_m_prefetchw)























unsigned int
_mm_getcsr (
    void
    );

void
_mm_setcsr (
      unsigned int MxCsr
    );

#pragma intrinsic(_mm_getcsr)
#pragma intrinsic(_mm_setcsr)







unsigned __int32
__getcallerseflags (
    void
    );

#pragma intrinsic(__getcallerseflags)







ULONG
__segmentlimit (
      ULONG Selector
    );

#pragma intrinsic(__segmentlimit)







ULONG64
__readpmc (
      ULONG Counter
    );

#pragma intrinsic(__readpmc)







ULONG64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)





void
__movsb (
      PUCHAR Destination,
      UCHAR const *Source,
      SIZE_T Count
    );

void
__movsw (
      PUSHORT Destination,
      USHORT const *Source,
      SIZE_T Count
    );

void
__movsd (
      PULONG Destination,
      ULONG const *Source,
      SIZE_T Count
    );

void
__movsq (
      PULONG64 Destination,
      ULONG64 const *Source,
      SIZE_T Count
    );

#pragma intrinsic(__movsb)
#pragma intrinsic(__movsw)
#pragma intrinsic(__movsd)
#pragma intrinsic(__movsq)





void
__stosb (
      PUCHAR Destination,
      UCHAR Value,
      SIZE_T Count
    );

void
__stosw (
      PUSHORT Destination,
      USHORT Value,
      SIZE_T Count
    );

void
__stosd (
      PULONG Destination,
      ULONG Value,
      SIZE_T Count
    );

void
__stosq (
      PULONG64 Destination,
      ULONG64 Value,
      SIZE_T Count
    );

#pragma intrinsic(__stosb)
#pragma intrinsic(__stosw)
#pragma intrinsic(__stosd)
#pragma intrinsic(__stosq)








LONGLONG
__mulh (
      LONG64 Multiplier,
      LONG64 Multiplicand
    );

ULONGLONG
__umulh (
      ULONG64 Multiplier,
      ULONG64 Multiplicand
    );

#pragma intrinsic(__mulh)
#pragma intrinsic(__umulh)







ULONG64
__popcnt64 (
      ULONG64 operand
    );



#pragma intrinsic(__popcnt64)

#line 2251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








ULONG64
__shiftleft128 (
      ULONG64 LowPart,
      ULONG64 HighPart,
      UCHAR Shift
    );

ULONG64
__shiftright128 (
      ULONG64 LowPart,
      ULONG64 HighPart,
      UCHAR Shift
    );

#pragma intrinsic(__shiftleft128)
#pragma intrinsic(__shiftright128)







LONG64
_mul128 (
      LONG64 Multiplier,
      LONG64 Multiplicand,
      LONG64 *HighProduct
    );

#pragma intrinsic(_mul128)





ULONG64
_umul128 (
      ULONG64 Multiplier,
      ULONG64 Multiplicand,
      ULONG64 *HighProduct
    );

#pragma intrinsic(_umul128)

#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

__forceinline
LONG64
MultiplyExtract128 (
      LONG64 Multiplier,
      LONG64 Multiplicand,
      UCHAR Shift
    )

{

    LONG64 extractedProduct;
    LONG64 highProduct;
    LONG64 lowProduct;
    BOOLEAN negate;
    ULONG64 uhighProduct;
    ULONG64 ulowProduct;

    lowProduct = _mul128(Multiplier, Multiplicand, &highProduct);
    negate = 0;
    uhighProduct = (ULONG64)highProduct;
    ulowProduct = (ULONG64)lowProduct;
    if (highProduct < 0) {
        negate = 1;
        uhighProduct = (ULONG64)(-highProduct);
        ulowProduct = (ULONG64)(-lowProduct);
        if (ulowProduct != 0) {
            uhighProduct -= 1;
        }
    }

    extractedProduct = (LONG64)__shiftright128(ulowProduct, uhighProduct, Shift);
    if (negate != 0) {
        extractedProduct = -extractedProduct;
    }

    return extractedProduct;
}

__forceinline
ULONG64
UnsignedMultiplyExtract128 (
      ULONG64 Multiplier,
      ULONG64 Multiplicand,
      UCHAR Shift
    )

{

    ULONG64 extractedProduct;
    ULONG64 highProduct;
    ULONG64 lowProduct;

    lowProduct = _umul128(Multiplier, Multiplicand, &highProduct);
    extractedProduct = __shiftright128(lowProduct, highProduct, Shift);
    return extractedProduct;
}





UCHAR
__readgsbyte (
      ULONG Offset
    );

USHORT
__readgsword (
      ULONG Offset
    );

ULONG
__readgsdword (
      ULONG Offset
    );

ULONG64
__readgsqword (
      ULONG Offset
    );

void
__writegsbyte (
      ULONG Offset,
      UCHAR Data
    );

void
__writegsword (
      ULONG Offset,
      USHORT Data
    );

void
__writegsdword (
      ULONG Offset,
      ULONG Data
    );

void
__writegsqword (
      ULONG Offset,
      ULONG64 Data
    );

#pragma intrinsic(__readgsbyte)
#pragma intrinsic(__readgsword)
#pragma intrinsic(__readgsdword)
#pragma intrinsic(__readgsqword)
#pragma intrinsic(__writegsbyte)
#pragma intrinsic(__writegsword)
#pragma intrinsic(__writegsdword)
#pragma intrinsic(__writegsqword)



void
__incgsbyte (
      ULONG Offset
    );

void
__addgsbyte (
      ULONG Offset,
      UCHAR Value
    );

void
__incgsword (
      ULONG Offset
    );

void
__addgsword (
      ULONG Offset,
      USHORT Value
    );

void
__incgsdword (
      ULONG Offset
    );

void
__addgsdword (
      ULONG Offset,
      ULONG Value
    );

void
__incgsqword (
      ULONG Offset
    );

void
__addgsqword (
      ULONG Offset,
      ULONG64 Value
    );










#line 2476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 2478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 2485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;




















#line 2511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#line 2516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__forceinline
CHAR
ReadAcquire8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}





#line 4208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





__forceinline
CHAR
ReadRaw8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
       LONG volatile *Destination,
      LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
UCHAR
ReadUCharAcquire (
       UCHAR const volatile *Source
    )

{

    return (UCHAR)ReadAcquire8((PCHAR)Source);
}

__forceinline
UCHAR
ReadUCharNoFence (
       UCHAR const volatile *Source
    )

{

    return (UCHAR)ReadNoFence8((PCHAR)Source);
}

__forceinline
UCHAR
ReadBooleanAcquire (
       BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadAcquire8((PCHAR)Source);
}

__forceinline
UCHAR
ReadBooleanNoFence (
       BOOLEAN const volatile *Source
    )

{

    return (BOOLEAN)ReadNoFence8((PCHAR)Source);
}

__forceinline
UCHAR
ReadUCharRaw (
       UCHAR const volatile *Source
    )

{

    return (UCHAR)ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
       UCHAR volatile *Destination,
      UCHAR Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
       UCHAR volatile *Destination,
      UCHAR Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteBooleanRelease (
       BOOLEAN volatile *Destination,
      BOOLEAN Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteBooleanNoFence (
       BOOLEAN volatile *Destination,
      BOOLEAN Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
       UCHAR volatile *Destination,
      UCHAR Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
USHORT
ReadUShortAcquire (
       USHORT const volatile *Source
    )

{

    return (USHORT)ReadAcquire16((PSHORT)Source);
}

__forceinline
USHORT
ReadUShortNoFence (
       USHORT const volatile *Source
    )

{

    return (USHORT)ReadNoFence16((PSHORT)Source);
}

__forceinline
USHORT
ReadUShortRaw (
       USHORT const volatile *Source
    )

{

    return (USHORT)ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
       USHORT volatile *Destination,
      USHORT Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
       USHORT volatile *Destination,
      USHORT Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
       USHORT volatile *Destination,
      USHORT Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
ULONG
ReadULongAcquire (
       ULONG const volatile *Source
    )

{

    return (ULONG)ReadAcquire((PLONG)Source);
}

__forceinline
ULONG
ReadULongNoFence (
       ULONG const volatile *Source
    )

{

    return (ULONG)ReadNoFence((PLONG)Source);
}

__forceinline
ULONG
ReadULongRaw (
       ULONG const volatile *Source
    )

{

    return (ULONG)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
       ULONG volatile *Destination,
      ULONG Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
       ULONG volatile *Destination,
      ULONG Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
       ULONG volatile *Destination,
      ULONG Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
ULONG64
ReadULong64Acquire (
       ULONG64 const volatile *Source
    )

{

    return (ULONG64)ReadAcquire64((PLONG64)Source);
}

__forceinline
ULONG64
ReadULong64NoFence (
       ULONG64 const volatile *Source
    )

{

    return (ULONG64)ReadNoFence64((PLONG64)Source);
}

__forceinline
ULONG64
ReadULong64Raw (
       ULONG64 const volatile *Source
    )

{

    return (ULONG64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
       ULONG64 volatile *Destination,
      ULONG64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
       ULONG64 volatile *Destination,
      ULONG64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
       ULONG64 volatile *Destination,
      ULONG64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}















































































































#line 4772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

__forceinline
PVOID
ReadPointerAcquire (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence64((PLONG64)Source);
}

__forceinline
PVOID
ReadPointerRaw (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WritePointerRelease (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WritePointerRaw (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}

























#line 4870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 4872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























#line 4896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





void
__int2c (
    void
    );

#pragma intrinsic(__int2c)





#line 4913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 4915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










































































































#line 5022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 5023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












#line 5036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 5045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 5047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























































#line 5105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















#line 5124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 5126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef PVOID PACCESS_TOKEN;            





typedef PVOID PSECURITY_DESCRIPTOR;     





typedef PVOID PSID;     





typedef PVOID PCLAIMS_BLOB;     


typedef ULONG ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;

















































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"
#line 5225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    ULONG Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 5234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















typedef struct _ACL {
    UCHAR AclRevision;
    UCHAR Sbz1;
    USHORT AclSize;
    USHORT AceCount;
    USHORT Sbz2;
} ACL;
typedef ACL *PACL;






































typedef struct _PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;






















































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;












typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    ULONG Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;


typedef ULONG SECURITY_INFORMATION, *PSECURITY_INFORMATION;














































typedef enum _SE_ADT_PARAMETER_TYPE {

    SeAdtParmTypeNone = 0,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeString,            
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    



    SeAdtParmTypeFileSpec,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    




    SeAdtParmTypeUlong,             
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    


    SeAdtParmTypeSid,               
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    




    SeAdtParmTypeLogonId,           
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    


    SeAdtParmTypeNoLogonId,         
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeAccessMask,        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    



    SeAdtParmTypePrivs,             
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeObjectTypes,       
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeHexUlong,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    



    SeAdtParmTypePtr,               
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    





    SeAdtParmTypeTime,              
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

                                    
    SeAdtParmTypeGuid,              
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    





    SeAdtParmTypeLuid,              
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeHexInt64,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeStringList,        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeSidList,           
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeDuration,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeUserAccountControl,
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeNoUac,             
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeMessage,           
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeDateTime,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeSockAddr,          
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    





    SeAdtParmTypeSD,                
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeLogonHours,        
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeLogonIdNoSid,      
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeUlongNoConv,       
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeSockAddrNoPort,    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    




    SeAdtParmTypeAccessReason,      
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    




    SeAdtParmTypeStagingReason,     
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeResourceAttribute, 
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeClaims,            
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeLogonIdAsSid,      
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeMultiSzString,     
                                    
                                    
                                    
                                    
                                    
                                    
                                    

    SeAdtParmTypeLogonIdEx,         
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    

} SE_ADT_PARAMETER_TYPE, *PSE_ADT_PARAMETER_TYPE;





typedef struct _SE_ADT_OBJECT_TYPE {
    GUID ObjectType;
    USHORT Flags;

    USHORT Level;
    ACCESS_MASK AccessMask;
} SE_ADT_OBJECT_TYPE, *PSE_ADT_OBJECT_TYPE;

typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {

    SE_ADT_PARAMETER_TYPE Type;
    ULONG Length;
    ULONG_PTR Data[2];
    PVOID Address;

} SE_ADT_PARAMETER_ARRAY_ENTRY, *PSE_ADT_PARAMETER_ARRAY_ENTRY;


typedef struct _SE_ADT_ACCESS_REASON{
    ACCESS_MASK AccessMask;
    ULONG  AccessReasons[32];
    ULONG  ObjectTypeIndex;
    ULONG AccessGranted;
    PSECURITY_DESCRIPTOR SecurityDescriptor;    
} SE_ADT_ACCESS_REASON, *PSE_ADT_ACCESS_REASON;

typedef struct _SE_ADT_CLAIMS {

    ULONG Length;
    PCLAIMS_BLOB Claims; 

} SE_ADT_CLAIMS, *PSE_ADT_CLAIMS;









typedef struct _SE_ADT_PARAMETER_ARRAY {

    ULONG CategoryId;
    ULONG AuditId;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[ 32 ];

} SE_ADT_PARAMETER_ARRAY, *PSE_ADT_PARAMETER_ARRAY;

typedef struct _SE_ADT_PARAMETER_ARRAY_EX {

    ULONG CategoryId;
    ULONG AuditId;
    ULONG Version;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[ 32 ];

} SE_ADT_PARAMETER_ARRAY_EX, *PSE_ADT_PARAMETER_ARRAY_EX;


















#line 6012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


#line 6015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































































































































































































































































#line 6275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 6287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 6293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























#line 6319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#line 6336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









































#line 6378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


#line 6381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























































































typedef struct _IO_STATUS_BLOCK {
    union {
        NTSTATUS Status;
        PVOID Pointer;
    } ;

    ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;



typedef struct _IO_STATUS_BLOCK32 {
    NTSTATUS Status;
    ULONG Information;
} IO_STATUS_BLOCK32, *PIO_STATUS_BLOCK32;







typedef
void
(__stdcall *PIO_APC_ROUTINE) (
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG Reserved
    );








typedef enum _IO_SESSION_EVENT {
    IoSessionEventIgnore         = 0,
    IoSessionEventCreated,      
    IoSessionEventTerminated,   
    IoSessionEventConnected,    
    IoSessionEventDisconnected, 
    IoSessionEventLogon,        
    IoSessionEventLogoff,       
    IoSessionEventMax
} IO_SESSION_EVENT, *PIO_SESSION_EVENT;

typedef enum _IO_SESSION_STATE {
    IoSessionStateCreated                = 1,
    IoSessionStateInitialized,          
    IoSessionStateConnected,            
    IoSessionStateDisconnected,         
    IoSessionStateDisconnectedLoggedOn, 
    IoSessionStateLoggedOn,             
    IoSessionStateLoggedOff,            
    IoSessionStateTerminated,           
    IoSessionStateMax
} IO_SESSION_STATE, *PIO_SESSION_STATE;























typedef struct _IO_SESSION_CONNECT_INFO {
    ULONG SessionId;
    BOOLEAN LocalSession;
} IO_SESSION_CONNECT_INFO, *PIO_SESSION_CONNECT_INFO;









typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation         = 1,
    FileFullDirectoryInformation,   
    FileBothDirectoryInformation,   
    FileBasicInformation,           
    FileStandardInformation,        
    FileInternalInformation,        
    FileEaInformation,              
    FileAccessInformation,          
    FileNameInformation,            
    FileRenameInformation,          
    FileLinkInformation,            
    FileNamesInformation,           
    FileDispositionInformation,     
    FilePositionInformation,        
    FileFullEaInformation,          
    FileModeInformation,            
    FileAlignmentInformation,       
    FileAllInformation,             
    FileAllocationInformation,      
    FileEndOfFileInformation,       
    FileAlternateNameInformation,   
    FileStreamInformation,          
    FilePipeInformation,            
    FilePipeLocalInformation,       
    FilePipeRemoteInformation,      
    FileMailslotQueryInformation,   
    FileMailslotSetInformation,     
    FileCompressionInformation,     
    FileObjectIdInformation,        
    FileCompletionInformation,      
    FileMoveClusterInformation,     
    FileQuotaInformation,           
    FileReparsePointInformation,    
    FileNetworkOpenInformation,     
    FileAttributeTagInformation,    
    FileTrackingInformation,        
    FileIdBothDirectoryInformation, 
    FileIdFullDirectoryInformation, 
    FileValidDataLengthInformation, 
    FileShortNameInformation,       
    FileIoCompletionNotificationInformation, 
    FileIoStatusBlockRangeInformation,       
    FileIoPriorityHintInformation,           
    FileSfioReserveInformation,              
    FileSfioVolumeInformation,               
    FileHardLinkInformation,                 
    FileProcessIdsUsingFileInformation,      
    FileNormalizedNameInformation,           
    FileNetworkPhysicalNameInformation,      
    FileIdGlobalTxDirectoryInformation,      
    FileIsRemoteDeviceInformation,           
    FileUnusedInformation,                   
    FileNumaNodeInformation,                 
    FileStandardLinkInformation,             
    FileRemoteProtocolInformation,           

        
        
        
        
        
        
        

    FileRenameInformationBypassAccessCheck,  
    FileLinkInformationBypassAccessCheck,    

        
        
        

    FileVolumeNameInformation,               
    FileIdInformation,                       
    FileIdExtdDirectoryInformation,          
    FileReplaceCompletionInformation,        
    FileHardLinkFullIdInformation,           
    FileIdExtdBothDirectoryInformation,      
    FileDispositionInformationEx,            
    FileRenameInformationEx,                 
    FileRenameInformationExBypassAccessCheck, 
    FileDesiredStorageClassInformation,      
    FileStatInformation,                     
    FileMaximumInformation
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;





typedef struct _FILE_BASIC_INFORMATION {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;

typedef struct _FILE_STANDARD_INFORMATION {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;











#line 6680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef struct _FILE_POSITION_INFORMATION {
    LARGE_INTEGER CurrentByteOffset;
} FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION;


typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;


typedef struct _FILE_FULL_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[1];
} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;






typedef struct _FILE_SFIO_RESERVE_INFORMATION {
    ULONG RequestsPerPeriod;
    ULONG Period;
    BOOLEAN RetryFailures;
    BOOLEAN Discardable;
    ULONG RequestSize;
    ULONG NumOutstandingRequests;
} FILE_SFIO_RESERVE_INFORMATION, *PFILE_SFIO_RESERVE_INFORMATION;





typedef struct _FILE_SFIO_VOLUME_INFORMATION {
    ULONG MaximumRequestsPerPeriod;
    ULONG MinimumPeriod;
    ULONG MinimumTransferSize;
} FILE_SFIO_VOLUME_INFORMATION, *PFILE_SFIO_VOLUME_INFORMATION;





typedef enum _IO_PRIORITY_HINT {
    IoPriorityVeryLow = 0,          
    IoPriorityLow,                  
    IoPriorityNormal,               
    IoPriorityHigh,                 
    IoPriorityCritical,             
    MaxIoPriorityTypes
} IO_PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION {
    IO_PRIORITY_HINT   PriorityHint;
} FILE_IO_PRIORITY_HINT_INFORMATION, *PFILE_IO_PRIORITY_HINT_INFORMATION;

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX {
    IO_PRIORITY_HINT   PriorityHint;
    BOOLEAN            BoostOutstanding;
} FILE_IO_PRIORITY_HINT_INFORMATION_EX, *PFILE_IO_PRIORITY_HINT_INFORMATION_EX;

















typedef  struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
    ULONG Flags;
} FILE_IO_COMPLETION_NOTIFICATION_INFORMATION, *PFILE_IO_COMPLETION_NOTIFICATION_INFORMATION;

typedef  struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION {
    ULONG NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} FILE_PROCESS_IDS_USING_FILE_INFORMATION, *PFILE_PROCESS_IDS_USING_FILE_INFORMATION;

typedef struct _FILE_IS_REMOTE_DEVICE_INFORMATION {
    BOOLEAN IsRemote;
} FILE_IS_REMOTE_DEVICE_INFORMATION, *PFILE_IS_REMOTE_DEVICE_INFORMATION;

typedef struct _FILE_NUMA_NODE_INFORMATION {
    USHORT NodeNumber;
} FILE_NUMA_NODE_INFORMATION, *PFILE_NUMA_NODE_INFORMATION;





typedef struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION {
    PUCHAR       IoStatusBlockRange;
    ULONG        Length;
} FILE_IOSTATUSBLOCK_RANGE_INFORMATION, *PFILE_IOSTATUSBLOCK_RANGE_INFORMATION;







typedef enum _FSINFOCLASS {
    FileFsVolumeInformation          = 1,
    FileFsLabelInformation,         
    FileFsSizeInformation,          
    FileFsDeviceInformation,        
    FileFsAttributeInformation,     
    FileFsControlInformation,       
    FileFsFullSizeInformation,      
    FileFsObjectIdInformation,      
    FileFsDriverPathInformation,    
    FileFsVolumeFlagsInformation,   
    FileFsSectorSizeInformation,    
    FileFsDataCopyInformation,      
    FileFsMetadataSizeInformation,  
    FileFsMaximumInformation
} FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;


typedef struct _FILE_FS_DEVICE_INFORMATION {
    ULONG DeviceType;
    ULONG Characteristics;
} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;



















































#line 6884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













#line 6898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef enum _INTERFACE_TYPE {
    InterfaceTypeUndefined = -1,
    Internal,
    Isa,
    Eisa,
    MicroChannel,
    TurboChannel,
    PCIBus,
    VMEBus,
    NuBus,
    PCMCIABus,
    CBus,
    MPIBus,
    MPSABus,
    ProcessorInternal,
    InternalPowerBus,
    PNPISABus,
    PNPBus,
    Vmcs,
    ACPIBus,
    MaximumInterfaceType
}INTERFACE_TYPE, *PINTERFACE_TYPE;








typedef enum _DMA_WIDTH {
    Width8Bits,
    Width16Bits,
    Width32Bits,
    Width64Bits,
    WidthNoWrap,
    MaximumDmaWidth
}DMA_WIDTH, *PDMA_WIDTH;





typedef enum _DMA_SPEED {
    Compatible,
    TypeA,
    TypeB,
    TypeC,
    TypeF,
    MaximumDmaSpeed
}DMA_SPEED, *PDMA_SPEED;







typedef void (*PINTERFACE_REFERENCE)(PVOID Context);
typedef void (*PINTERFACE_DEREFERENCE)(PVOID Context);






typedef struct _IO_ERROR_LOG_PACKET {
    UCHAR MajorFunctionCode;
    UCHAR RetryCount;
    USHORT DumpDataSize;
    USHORT NumberOfStrings;
    USHORT StringOffset;
    USHORT EventCategory;
    NTSTATUS ErrorCode;
    ULONG UniqueErrorValue;
    NTSTATUS FinalStatus;
    ULONG SequenceNumber;
    ULONG IoControlCode;
    LARGE_INTEGER DeviceOffset;
    ULONG DumpData[1];
}IO_ERROR_LOG_PACKET, *PIO_ERROR_LOG_PACKET;






typedef struct _IO_ERROR_LOG_MESSAGE {
    USHORT Type;
    USHORT Size;
    USHORT DriverNameLength;
    LARGE_INTEGER TimeStamp;
    ULONG DriverNameOffset;
    IO_ERROR_LOG_PACKET EntryData;
}IO_ERROR_LOG_MESSAGE, *PIO_ERROR_LOG_MESSAGE;
















































#line 7049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


























































                                                    


                                                    


                                                    


                                                    
                                                    




                                                    
                                                    
                                                    


































































                                                      












typedef struct _KEY_BASIC_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   NameLength;
    WCHAR   Name[1];            
} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION;

typedef struct _KEY_NODE_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   ClassOffset;
    ULONG   ClassLength;
    ULONG   NameLength;
    WCHAR   Name[1];            

} KEY_NODE_INFORMATION, *PKEY_NODE_INFORMATION;

typedef struct _KEY_FULL_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   ClassOffset;
    ULONG   ClassLength;
    ULONG   SubKeys;
    ULONG   MaxNameLen;
    ULONG   MaxClassLen;
    ULONG   Values;
    ULONG   MaxValueNameLen;
    ULONG   MaxValueDataLen;
    WCHAR   Class[1];           
} KEY_FULL_INFORMATION, *PKEY_FULL_INFORMATION;

typedef enum _KEY_INFORMATION_CLASS {
    KeyBasicInformation,
    KeyNodeInformation,
    KeyFullInformation,
    KeyNameInformation,
    KeyCachedInformation,
    KeyFlagsInformation,
    KeyVirtualizationInformation,
    KeyHandleTagsInformation,
    KeyTrustInformation,
    KeyLayerInformation,
    MaxKeyInfoClass  
} KEY_INFORMATION_CLASS;

typedef struct _KEY_WRITE_TIME_INFORMATION {
    LARGE_INTEGER LastWriteTime;
} KEY_WRITE_TIME_INFORMATION, *PKEY_WRITE_TIME_INFORMATION;

typedef struct _KEY_WOW64_FLAGS_INFORMATION {
    ULONG   UserFlags;
} KEY_WOW64_FLAGS_INFORMATION, *PKEY_WOW64_FLAGS_INFORMATION;

typedef struct _KEY_CONTROL_FLAGS_INFORMATION {
    ULONG   ControlFlags;
} KEY_CONTROL_FLAGS_INFORMATION, *PKEY_CONTROL_FLAGS_INFORMATION;

typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION {
    ULONG   VirtualTarget           : 1; 
    ULONG   VirtualStore                : 1; 
    ULONG   VirtualSource           : 1; 
    ULONG   Reserved                : 29;
} KEY_SET_VIRTUALIZATION_INFORMATION, *PKEY_SET_VIRTUALIZATION_INFORMATION;


typedef enum _KEY_SET_INFORMATION_CLASS {
    KeyWriteTimeInformation,
    KeyWow64FlagsInformation,
    KeyControlFlagsInformation,
    KeySetVirtualizationInformation,
    KeySetDebugInformation,
    KeySetHandleTagsInformation,
    KeySetLayerInformation,
    MaxKeySetInfoClass  
} KEY_SET_INFORMATION_CLASS;






typedef struct _KEY_VALUE_BASIC_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   NameLength;
    WCHAR   Name[1];            
} KEY_VALUE_BASIC_INFORMATION, *PKEY_VALUE_BASIC_INFORMATION;

typedef struct _KEY_VALUE_FULL_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   DataOffset;
    ULONG   DataLength;
    ULONG   NameLength;
    WCHAR   Name[1];            

} KEY_VALUE_FULL_INFORMATION, *PKEY_VALUE_FULL_INFORMATION;

typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
    ULONG   TitleIndex;
    ULONG   Type;
    ULONG   DataLength;
      UCHAR Data[1]; 
} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION;

typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
    ULONG   Type;
    ULONG   DataLength;
      UCHAR   Data[1];            
} KEY_VALUE_PARTIAL_INFORMATION_ALIGN64, *PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64;

typedef struct _KEY_VALUE_LAYER_INFORMATION {
    ULONG   IsTombstone     : 1;
    ULONG   Reserved        : 31;
} KEY_VALUE_LAYER_INFORMATION, *PKEY_VALUE_LAYER_INFORMATION;

typedef struct _KEY_VALUE_ENTRY {
    PUNICODE_STRING ValueName;
    ULONG           DataLength;
    ULONG           DataOffset;
    ULONG           Type;
} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY;

typedef enum _KEY_VALUE_INFORMATION_CLASS {
    KeyValueBasicInformation,
    KeyValueFullInformation,
    KeyValuePartialInformation,
    KeyValueFullInformationAlign64,
    KeyValuePartialInformationAlign64,
    KeyValueLayerInformation,
    MaxKeyValueInfoClass  
} KEY_VALUE_INFORMATION_CLASS;



typedef struct _KEY_TRUST_INFORMATION {
    ULONG   TrustedKey      : 1; 
    ULONG   Reserved        : 31;
} KEY_TRUST_INFORMATION, *PKEY_TRUST_INFORMATION;










































typedef struct _OBJECT_NAME_INFORMATION {
    UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;










typedef enum _SECTION_INHERIT {
    ViewShare = 1,
    ViewUnmap = 2
} SECTION_INHERIT;














































































































#line 7513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















#line 7535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _CLIENT_ID {
    HANDLE UniqueProcess;
    HANDLE UniqueThread;
} CLIENT_ID;
typedef CLIENT_ID *PCLIENT_ID;





















extern const GUID  GUID_MAX_POWER_SAVINGS;






extern const GUID  GUID_MIN_POWER_SAVINGS;






extern const GUID  GUID_TYPICAL_POWER_SAVINGS;







extern const GUID  NO_SUBGROUP_GUID;







extern const GUID  ALL_POWERSCHEMES_GUID;




































extern const GUID  GUID_POWERSCHEME_PERSONALITY;








extern const GUID  GUID_ACTIVE_POWERSCHEME;














extern const GUID  GUID_IDLE_RESILIENCY_SUBGROUP;







extern const GUID  GUID_IDLE_RESILIENCY_PERIOD;





extern const GUID  GUID_DEEP_SLEEP_ENABLED;








extern const GUID  GUID_DEEP_SLEEP_PLATFORM_STATE;






extern const GUID  GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;












extern const GUID  GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;










extern const GUID  GUID_VIDEO_SUBGROUP;







extern const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT;








extern const GUID  GUID_VIDEO_ANNOYANCE_TIMEOUT;








extern const GUID  GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;







extern const GUID  GUID_VIDEO_DIM_TIMEOUT;







extern const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN;






extern const GUID  GUID_MONITOR_POWER_ON;






extern const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;






extern const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;






extern const GUID  GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;







extern const GUID  GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;






extern const GUID  GUID_CONSOLE_DISPLAY_STATE;







extern const GUID  GUID_ALLOW_DISPLAY_REQUIRED;








extern const GUID  GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern const GUID  GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern const GUID  GUID_NON_ADAPTIVE_INPUT_TIMEOUT;






extern const GUID  GUID_ADAPTIVE_INPUT_CONTROLLER_STATE;







extern const GUID  GUID_DISK_SUBGROUP;




extern const GUID  GUID_DISK_MAX_POWER;





extern const GUID  GUID_DISK_POWERDOWN_TIMEOUT;






extern const GUID  GUID_DISK_IDLE_TIMEOUT;








extern const GUID  GUID_DISK_BURST_IGNORE_THRESHOLD;





extern const GUID  GUID_DISK_ADAPTIVE_POWERDOWN;








extern const GUID  GUID_SLEEP_SUBGROUP;







extern const GUID  GUID_SLEEP_IDLE_THRESHOLD;





extern const GUID  GUID_STANDBY_TIMEOUT;








extern const GUID  GUID_UNATTEND_SLEEP_TIMEOUT;





extern const GUID  GUID_HIBERNATE_TIMEOUT;





extern const GUID  GUID_HIBERNATE_FASTS4_POLICY;








extern const GUID  GUID_CRITICAL_POWER_TRANSITION;





extern const GUID  GUID_SYSTEM_AWAYMODE;






extern const GUID  GUID_ALLOW_AWAYMODE;






extern const GUID  GUID_USER_PRESENCE_PREDICTION;






extern const GUID  GUID_STANDBY_BUDGET_GRACE_PERIOD;






extern const GUID  GUID_STANDBY_BUDGET_PERCENT;






extern const GUID  GUID_STANDBY_RESERVE_GRACE_PERIOD;






extern const GUID  GUID_STANDBY_RESERVE_TIME;






extern const GUID  GUID_STANDBY_RESET_PERCENT;







extern const GUID  GUID_ALLOW_STANDBY_STATES;






extern const GUID  GUID_ALLOW_RTC_WAKE;







extern const GUID  GUID_ALLOW_SYSTEM_REQUIRED;








extern const GUID  GUID_POWER_SAVING_STATUS;







extern const GUID  GUID_ENERGY_SAVER_SUBGROUP;






extern const GUID  GUID_ENERGY_SAVER_BATTERY_THRESHOLD;






extern const GUID  GUID_ENERGY_SAVER_BRIGHTNESS;






extern const GUID  GUID_ENERGY_SAVER_POLICY;








extern const GUID  GUID_SYSTEM_BUTTON_SUBGROUP;




















extern const GUID  GUID_POWERBUTTON_ACTION;





extern const GUID  GUID_SLEEPBUTTON_ACTION;






extern const GUID  GUID_USERINTERFACEBUTTON_ACTION;





extern const GUID  GUID_LIDCLOSE_ACTION;
extern const GUID  GUID_LIDOPEN_POWERSTATE;








extern const GUID  GUID_BATTERY_SUBGROUP;











extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_0;
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0;
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0;

extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_1;
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1;
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1;

extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_2;
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2;
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2;

extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_3;
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3;
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3;










extern const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern const GUID  GUID_PROCESSOR_THROTTLE_POLICY;

















extern const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM;









extern const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM_1;









extern const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM;









extern const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM_1;






extern const GUID  GUID_PROCESSOR_FREQUENCY_LIMIT;
#line 8203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


extern const GUID  GUID_PROCESSOR_FREQUENCY_LIMIT_1;
#line 8207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







extern const GUID  GUID_PROCESSOR_ALLOW_THROTTLING;









extern const GUID  GUID_PROCESSOR_IDLESTATE_POLICY;





extern const GUID  GUID_PROCESSOR_PERFSTATE_POLICY;







extern const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;








extern const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1;







extern const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;








extern const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1;







extern const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY;








extern const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY_1;







extern const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY;








extern const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY_1;








extern const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME;








extern const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME_1;








extern const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME;








extern const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME_1;







extern const GUID  GUID_PROCESSOR_PERF_TIME_CHECK;







extern const GUID  GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 8352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










extern const GUID  GUID_PROCESSOR_PERF_BOOST_MODE;
#line 8364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















extern const GUID  GUID_PROCESSOR_PERF_AUTONOMOUS_MODE;
#line 8382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









extern const GUID  GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE;
#line 8393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









extern const GUID  GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW;
#line 8404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








extern const GUID  GUID_PROCESSOR_DUTY_CYCLING;
#line 8414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










extern const GUID  GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern const GUID  GUID_PROCESSOR_IDLE_DISABLE;








extern const GUID  GUID_PROCESSOR_IDLE_STATE_MAXIMUM;








extern const GUID  GUID_PROCESSOR_IDLE_TIME_CHECK;








extern const GUID  GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern const GUID  GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;








extern const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;








extern const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;












extern const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES;







extern const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES;







extern const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern const GUID  GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern const GUID  GUID_PROCESSOR_PARKING_PERF_STATE;







extern const GUID  GUID_PROCESSOR_PARKING_PERF_STATE_1;







extern const GUID  GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern const GUID  GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;







extern const GUID  GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD;






extern const GUID  GUID_PROCESSOR_PERF_HISTORY;







extern const GUID  GUID_PROCESSOR_PERF_HISTORY_1;









extern const GUID  GUID_PROCESSOR_PERF_INCREASE_HISTORY;









extern const GUID  GUID_PROCESSOR_PERF_DECREASE_HISTORY;









extern const GUID  GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY;









extern const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT;






extern const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF;







extern const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1;







extern const GUID  GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK;







extern const GUID  GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1;







extern const GUID  GUID_PROCESSOR_DISTRIBUTE_UTILITY;










extern const GUID  GUID_PROCESSOR_HETEROGENEOUS_POLICY;







extern const GUID  GUID_PROCESSOR_HETERO_DECREASE_TIME;







extern const GUID  GUID_PROCESSOR_HETERO_INCREASE_TIME;








extern const GUID  GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD;








extern const GUID  GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD;








extern const GUID  GUID_PROCESSOR_CLASS0_FLOOR_PERF;








extern const GUID  GUID_PROCESSOR_CLASS1_INITIAL_PERF;







extern const GUID  GUID_SYSTEM_COOLING_POLICY;









extern const GUID  GUID_LOCK_CONSOLE_ON_WAKE;









extern const GUID  GUID_DEVICE_IDLE_POLICY;








extern const GUID  GUID_CONNECTIVITY_IN_STANDBY;









extern const GUID  GUID_DISCONNECTED_STANDBY_MODE;




















extern const GUID  GUID_ACDC_POWER_SOURCE;















extern const GUID  GUID_LIDSWITCH_STATE_CHANGE;
















extern const GUID  GUID_BATTERY_PERCENTAGE_REMAINING;












extern const GUID  GUID_BATTERY_COUNT;






extern const GUID  GUID_GLOBAL_USER_PRESENCE;










extern const GUID  GUID_SESSION_DISPLAY_STATUS;









extern const GUID  GUID_SESSION_USER_PRESENCE;






extern const GUID  GUID_IDLE_BACKGROUND_TASK;






extern const GUID  GUID_BACKGROUND_TASK_NOTIFICATION;







extern const GUID  GUID_APPLAUNCH_BUTTON;










extern const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern const GUID  GUID_PCIEXPRESS_ASPM_POLICY;











extern const GUID  GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;






extern const GUID  GUID_INTSTEER_SUBGROUP;
#line 9004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


extern const GUID  GUID_INTSTEER_MODE;
#line 9008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


extern const GUID  GUID_INTSTEER_LOAD_PER_PROC_TRIGGER;
#line 9012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


extern const GUID  GUID_INTSTEER_TIME_UNPARK_TRIGGER;
#line 9016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject,
    PowerActionDisplayOff
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;





typedef union _POWER_STATE {
    SYSTEM_POWER_STATE SystemState;
    DEVICE_POWER_STATE DeviceState;
} POWER_STATE, *PPOWER_STATE;

typedef enum _POWER_STATE_TYPE {
    SystemPowerState = 0,
    DevicePowerState
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;


typedef struct _SYSTEM_POWER_STATE_CONTEXT {
    union {
        struct {
            ULONG   Reserved1             : 8;
            ULONG   TargetSystemState     : 4;
            ULONG   EffectiveSystemState  : 4;
            ULONG   CurrentSystemState    : 4;
            ULONG   IgnoreHibernationPath : 1;
            ULONG   PseudoTransition      : 1;
            ULONG   Reserved2             : 10;
        } ;

        ULONG ContextAsUlong;
    } ;
} SYSTEM_POWER_STATE_CONTEXT, *PSYSTEM_POWER_STATE_CONTEXT;
#line 9102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




typedef struct _COUNTED_REASON_CONTEXT {
    ULONG Version;
    ULONG Flags;
    union {
        struct {
            UNICODE_STRING ResourceFileName;
            USHORT ResourceReasonId;
            ULONG StringCount;
              PUNICODE_STRING ReasonStrings;
        } ;

        UNICODE_STRING SimpleString;
    } ;
} COUNTED_REASON_CONTEXT, *PCOUNTED_REASON_CONTEXT;

#line 9122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



























typedef ULONG EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;


















typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;




















typedef struct CM_Power_Data_s {
    ULONG               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    ULONG               PD_Capabilities;
    ULONG               PD_D1Latency;
    ULONG               PD_D2Latency;
    ULONG               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;

#line 9211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence,
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    RegisterSpmPowerSettings,
    PlatformIdleStates,
    ProcessorIdleVeto,
    PlatformIdleVeto,
    SystemBatteryStatePrecise,
    ThermalEvent,
    PowerRequestActionInternal,
    BatteryDeviceState,
    PowerInformationInternal,
    ThermalStandby,
    SystemHiberFileType,
    PhysicalPowerButtonPress,
    QueryPotentialDripsConstraint,
    EnergyTrackerCreate,
    EnergyTrackerQuery,
    UpdateBlackBoxRecorder,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
    POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;  
    BOOLEAN Console;    
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    ULONG InputTimeout;
    ULONG DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;  
    ULONG LastInputTime; 
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    ULONG SessionId; 
    BOOLEAN Console; 
    BOOLEAN Locked; 
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    ULONG CoalescingTimeout;
    ULONG IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonSleepButton,
    MonitorRequestReasonLid,
    MonitorRequestReasonBatteryCountChange,
    MonitorRequestReasonGracePeriod,
    MonitorRequestReasonPnP,
    MonitorRequestReasonDP,
    MonitorRequestReasonSxTransition,
    MonitorRequestReasonSystemIdle,
    MonitorRequestReasonNearProximity,
    MonitorRequestReasonThermalStandby,
    MonitorRequestReasonResumePdc,
    MonitorRequestReasonResumeS4,
    MonitorRequestReasonTerminal,
    MonitorRequestReasonPdcSignal,
    MonitorRequestReasonAcDcDisplayBurstSuppressed,
    MonitorRequestReasonSystemStateEntered, 
                                            
                                            
    MonitorRequestReasonWinrt,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;

typedef enum _POWER_MONITOR_REQUEST_TYPE {
    MonitorRequestTypeOff,
    MonitorRequestTypeOnAndPresent,
    MonitorRequestTypeToggleOn
} POWER_MONITOR_REQUEST_TYPE;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    ULONG PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {

    
    
    
    
    ULONG       Version;


    
    
    
    GUID        Guid;


    
    
    
    
    SYSTEM_POWER_CONDITION PowerCondition;

    
    
    
    ULONG       DataLength;

    
    
    
    UCHAR   Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {

    
    
    
    
    LARGE_INTEGER       ActivationTime;

    
    
    
    ULONG               Flags;

    
    
    
    ULONG               ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer, 
    PlatformRoleSlate,             
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;












#line 9533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#line 9538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    ULONG       Granularity;
    ULONG       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
#line 9553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


#line 9556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtPowerInformation(
      POWER_INFORMATION_LEVEL InformationLevel,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );









                                            







































































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
















































































typedef int CM_RESOURCE_TYPE;

























typedef enum _CM_SHARE_DISPOSITION {
    CmResourceShareUndetermined = 0,    
    CmResourceShareDeviceExclusive,
    CmResourceShareDriverExclusive,
    CmResourceShareShared
} CM_SHARE_DISPOSITION;












































































































































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"
#line 9925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR Type;
    UCHAR ShareDisposition;
    USHORT Flags;
    union {

        
        
        
        
        

        struct {
            PHYSICAL_ADDRESS Start;
            ULONG Length;
        } Generic;

        
        

        struct {
            PHYSICAL_ADDRESS Start;
            ULONG Length;
        } Port;

        
        

        struct {



#line 9958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
            ULONG Level;
#line 9960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
            ULONG Vector;
            KAFFINITY Affinity;
        } Interrupt;

        
        
        
        

        struct {
            union {
               struct {


#line 9975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
                   USHORT Reserved;
#line 9977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
                   USHORT MessageCount;
                   ULONG Vector;
                   KAFFINITY Affinity;
               } Raw;

               struct {



#line 9987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
                   ULONG Level;
#line 9989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
                   ULONG Vector;
                   KAFFINITY Affinity;
               } Translated;
            } ;
        } MessageInterrupt;

        
        
        
        
        

        struct {
            PHYSICAL_ADDRESS Start;    
            ULONG Length;
        } Memory;

        
        
        

        struct {
            ULONG Channel;
            ULONG Port;
            ULONG Reserved1;
        } Dma;

        struct {
            ULONG Channel;
            ULONG RequestLine;
            UCHAR TransferWidth;
            UCHAR Reserved1;
            UCHAR Reserved2;
            UCHAR Reserved3;
        } DmaV3;

        
        
        
        

        struct {
            ULONG Data[3];
        } DevicePrivate;

        
        
        

        struct {
            ULONG Start;
            ULONG Length;
            ULONG Reserved;
        } BusNumber;

        
        
        
        
        
        

        struct {
            ULONG DataSize;
            ULONG Reserved1;
            ULONG Reserved2;
        } DeviceSpecificData;

        
        
        struct {
            PHYSICAL_ADDRESS Start;
            ULONG Length40;
        } Memory40;

        struct {
            PHYSICAL_ADDRESS Start;
            ULONG Length48;
        } Memory48;

        struct {
            PHYSICAL_ADDRESS Start;
            ULONG Length64;
        } Memory64;

        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;

    } u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 10086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














typedef struct _CM_PARTIAL_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;
    ULONG Count;
    CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST;












typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {
    INTERFACE_TYPE InterfaceType; 
    ULONG BusNumber; 
    CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR;






typedef struct _CM_RESOURCE_LIST {
    ULONG Count;
    CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;













typedef struct _DEVICE_FLAGS {
    ULONG Failed : 1;
    ULONG ReadOnly : 1;
    ULONG Removable : 1;
    ULONG ConsoleIn : 1;
    ULONG ConsoleOut : 1;
    ULONG Input : 1;
    ULONG Output : 1;
} DEVICE_FLAGS, *PDEVICE_FLAGS;





typedef struct _CM_COMPONENT_INFORMATION {
    DEVICE_FLAGS Flags;
    ULONG Version;
    ULONG Key;
    KAFFINITY AffinityMask;
} CM_COMPONENT_INFORMATION, *PCM_COMPONENT_INFORMATION;












typedef struct _CM_ROM_BLOCK {
    ULONG Address;
    ULONG Size;
} CM_ROM_BLOCK, *PCM_ROM_BLOCK;



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 10186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef struct _CM_INT13_DRIVE_PARAMETER {
    USHORT DriveSelect;
    ULONG MaxCylinders;
    USHORT SectorsPerTrack;
    USHORT MaxHeads;
    USHORT NumberDrives;
} CM_INT13_DRIVE_PARAMETER, *PCM_INT13_DRIVE_PARAMETER;







typedef struct _CM_MCA_POS_DATA {
    USHORT AdapterId;
    UCHAR PosData1;
    UCHAR PosData2;
    UCHAR PosData3;
    UCHAR PosData4;
} CM_MCA_POS_DATA, *PCM_MCA_POS_DATA;





typedef struct _EISA_MEMORY_TYPE {
    UCHAR ReadWrite: 1;
    UCHAR Cached : 1;
    UCHAR Reserved0 :1;
    UCHAR Type:2;
    UCHAR Shared:1;
    UCHAR Reserved1 :1;
    UCHAR MoreEntries : 1;
} EISA_MEMORY_TYPE, *PEISA_MEMORY_TYPE;

typedef struct _EISA_MEMORY_CONFIGURATION {
    EISA_MEMORY_TYPE ConfigurationByte;
    UCHAR DataSize;
    USHORT AddressLowWord;
    UCHAR AddressHighByte;
    USHORT MemorySize;
} EISA_MEMORY_CONFIGURATION, *PEISA_MEMORY_CONFIGURATION;






typedef struct _EISA_IRQ_DESCRIPTOR {
    UCHAR Interrupt : 4;
    UCHAR Reserved :1;
    UCHAR LevelTriggered :1;
    UCHAR Shared : 1;
    UCHAR MoreEntries : 1;
} EISA_IRQ_DESCRIPTOR, *PEISA_IRQ_DESCRIPTOR;

typedef struct _EISA_IRQ_CONFIGURATION {
    EISA_IRQ_DESCRIPTOR ConfigurationByte;
    UCHAR Reserved;
} EISA_IRQ_CONFIGURATION, *PEISA_IRQ_CONFIGURATION;






typedef struct _DMA_CONFIGURATION_BYTE0 {
    UCHAR Channel : 3;
    UCHAR Reserved : 3;
    UCHAR Shared :1;
    UCHAR MoreEntries :1;
} DMA_CONFIGURATION_BYTE0;

typedef struct _DMA_CONFIGURATION_BYTE1 {
    UCHAR Reserved0 : 2;
    UCHAR TransferSize : 2;
    UCHAR Timing : 2;
    UCHAR Reserved1 : 2;
} DMA_CONFIGURATION_BYTE1;

typedef struct _EISA_DMA_CONFIGURATION {
    DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
    DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
} EISA_DMA_CONFIGURATION, *PEISA_DMA_CONFIGURATION;






typedef struct _EISA_PORT_DESCRIPTOR {
    UCHAR NumberPorts : 5;
    UCHAR Reserved :1;
    UCHAR Shared :1;
    UCHAR MoreEntries : 1;
} EISA_PORT_DESCRIPTOR, *PEISA_PORT_DESCRIPTOR;

typedef struct _EISA_PORT_CONFIGURATION {
    EISA_PORT_DESCRIPTOR Configuration;
    USHORT PortAddress;
} EISA_PORT_CONFIGURATION, *PEISA_PORT_CONFIGURATION;








typedef struct _CM_EISA_SLOT_INFORMATION {
    UCHAR ReturnCode;
    UCHAR ReturnFlags;
    UCHAR MajorRevision;
    UCHAR MinorRevision;
    USHORT Checksum;
    UCHAR NumberFunctions;
    UCHAR FunctionInformation;
    ULONG CompressedId;
} CM_EISA_SLOT_INFORMATION, *PCM_EISA_SLOT_INFORMATION;






typedef struct _CM_EISA_FUNCTION_INFORMATION {
    ULONG CompressedId;
    UCHAR IdSlotFlags1;
    UCHAR IdSlotFlags2;
    UCHAR MinorRevision;
    UCHAR MajorRevision;
    UCHAR Selections[26];
    UCHAR FunctionFlags;
    UCHAR TypeString[80];
    EISA_MEMORY_CONFIGURATION EisaMemory[9];
    EISA_IRQ_CONFIGURATION EisaIrq[7];
    EISA_DMA_CONFIGURATION EisaDma[4];
    EISA_PORT_CONFIGURATION EisaPort[20];
    UCHAR InitializationData[60];
} CM_EISA_FUNCTION_INFORMATION, *PCM_EISA_FUNCTION_INFORMATION;



















typedef struct _CM_PNP_BIOS_DEVICE_NODE {
    USHORT Size;
    UCHAR Node;
    ULONG ProductId;
    UCHAR DeviceType[3];
    USHORT DeviceAttributes;
    
    
} CM_PNP_BIOS_DEVICE_NODE,*PCM_PNP_BIOS_DEVICE_NODE;





typedef struct _CM_PNP_BIOS_INSTALLATION_CHECK {
    UCHAR Signature[4];             
    UCHAR Revision;
    UCHAR Length;
    USHORT ControlField;
    UCHAR Checksum;
    ULONG EventFlagAddress;         
    USHORT RealModeEntryOffset;
    USHORT RealModeEntrySegment;
    USHORT ProtectedModeEntryOffset;
    ULONG ProtectedModeCodeBaseAddress;
    ULONG OemDeviceId;
    USHORT RealModeDataBaseAddress;
    ULONG ProtectedModeDataBaseAddress;
} CM_PNP_BIOS_INSTALLATION_CHECK, *PCM_PNP_BIOS_INSTALLATION_CHECK;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 10384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















































typedef struct _CM_SCSI_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR HostIdentifier;
} CM_SCSI_DEVICE_DATA, *PCM_SCSI_DEVICE_DATA;









typedef struct _CM_VIDEO_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG VideoClock;
} CM_VIDEO_DEVICE_DATA, *PCM_VIDEO_DEVICE_DATA;





typedef struct _CM_SONIC_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT DataConfigurationRegister;
    UCHAR EthernetAddress[8];
} CM_SONIC_DEVICE_DATA, *PCM_SONIC_DEVICE_DATA;





typedef struct _CM_SERIAL_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    ULONG BaudClock;
} CM_SERIAL_DEVICE_DATA, *PCM_SERIAL_DEVICE_DATA;









typedef struct _CM_MONITOR_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    USHORT HorizontalScreenSize;
    USHORT VerticalScreenSize;
    USHORT HorizontalResolution;
    USHORT VerticalResolution;
    USHORT HorizontalDisplayTimeLow;
    USHORT HorizontalDisplayTime;
    USHORT HorizontalDisplayTimeHigh;
    USHORT HorizontalBackPorchLow;
    USHORT HorizontalBackPorch;
    USHORT HorizontalBackPorchHigh;
    USHORT HorizontalFrontPorchLow;
    USHORT HorizontalFrontPorch;
    USHORT HorizontalFrontPorchHigh;
    USHORT HorizontalSyncLow;
    USHORT HorizontalSync;
    USHORT HorizontalSyncHigh;
    USHORT VerticalBackPorchLow;
    USHORT VerticalBackPorch;
    USHORT VerticalBackPorchHigh;
    USHORT VerticalFrontPorchLow;
    USHORT VerticalFrontPorch;
    USHORT VerticalFrontPorchHigh;
    USHORT VerticalSyncLow;
    USHORT VerticalSync;
    USHORT VerticalSyncHigh;
} CM_MONITOR_DEVICE_DATA, *PCM_MONITOR_DEVICE_DATA;





typedef struct _CM_FLOPPY_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    CHAR Size[8];
    ULONG MaxDensity;
    ULONG MountDensity;
    
    
    
    UCHAR StepRateHeadUnloadTime;
    UCHAR HeadLoadTime;
    UCHAR MotorOffTime;
    UCHAR SectorLengthCode;
    UCHAR SectorPerTrack;
    UCHAR ReadWriteGapLength;
    UCHAR DataTransferLength;
    UCHAR FormatGapLength;
    UCHAR FormatFillCharacter;
    UCHAR HeadSettleTime;
    UCHAR MotorSettleTime;
    UCHAR MaximumTrackValue;
    UCHAR DataTransferRate;
} CM_FLOPPY_DEVICE_DATA, *PCM_FLOPPY_DEVICE_DATA;














typedef struct _CM_KEYBOARD_DEVICE_DATA {
    USHORT Version;
    USHORT Revision;
    UCHAR Type;
    UCHAR Subtype;
    USHORT KeyboardFlags;
} CM_KEYBOARD_DEVICE_DATA, *PCM_KEYBOARD_DEVICE_DATA;





typedef struct _CM_DISK_GEOMETRY_DEVICE_DATA {
    ULONG BytesPerSector;
    ULONG NumberOfCylinders;
    ULONG SectorsPerTrack;
    ULONG NumberOfHeads;
} CM_DISK_GEOMETRY_DEVICE_DATA, *PCM_DISK_GEOMETRY_DEVICE_DATA;































#line 10606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _IRQ_DEVICE_POLICY {
    IrqPolicyMachineDefault = 0,
    IrqPolicyAllCloseProcessors,
    IrqPolicyOneCloseProcessor,
    IrqPolicyAllProcessorsInMachine,
    IrqPolicySpecifiedProcessors,
    IrqPolicySpreadMessagesAcrossAllProcessors,
    IrqPolicyAllProcessorsInMachineWhenSteered
} IRQ_DEVICE_POLICY, *PIRQ_DEVICE_POLICY;

#line 10618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef enum _IRQ_PRIORITY {
    IrqPriorityUndefined = 0,
    IrqPriorityLow,
    IrqPriorityNormal,
    IrqPriorityHigh
} IRQ_PRIORITY, *PIRQ_PRIORITY;





typedef enum _IRQ_GROUP_POLICY {
    GroupAffinityAllGroupZero = 0,
    GroupAffinityDontCare
} IRQ_GROUP_POLICY, *PIRQ_GROUP_POLICY;





typedef struct _IO_RESOURCE_DESCRIPTOR {
    UCHAR Option;
    UCHAR Type;                         
    UCHAR ShareDisposition;             
    UCHAR Spare1;
    USHORT Flags;                       
    USHORT Spare2;                      

    union {
        struct {
            ULONG Length;
            ULONG Alignment;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Port;

        struct {
            ULONG Length;
            ULONG Alignment;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Memory;

        struct {
            ULONG MinimumVector;
            ULONG MaximumVector;



#line 10673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
            IRQ_DEVICE_POLICY AffinityPolicy;
#line 10675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
            IRQ_PRIORITY PriorityPolicy;
            KAFFINITY TargetedProcessors;
        } Interrupt;

        struct {
            ULONG MinimumChannel;
            ULONG MaximumChannel;
        } Dma;

        struct {
            ULONG RequestLine;
            ULONG Reserved;
            ULONG Channel;
            ULONG TransferWidth;
        } DmaV3;

        struct {
            ULONG Length;
            ULONG Alignment;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Generic;

        struct {
            ULONG Data[3];
        } DevicePrivate;

        
        
        

        struct {
            ULONG Length;
            ULONG MinBusNumber;
            ULONG MaxBusNumber;
            ULONG Reserved;
        } BusNumber;

        struct {
            ULONG Priority;   
            ULONG Reserved1;
            ULONG Reserved2;
        } ConfigData;

        
        
        
        

        struct {
            ULONG Length40;
            ULONG Alignment40;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Memory40;

        struct {
            ULONG Length48;
            ULONG Alignment48;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Memory48;

        struct {
            ULONG Length64;
            ULONG Alignment64;
            PHYSICAL_ADDRESS MinimumAddress;
            PHYSICAL_ADDRESS MaximumAddress;
        } Memory64;

        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;

    } u;

} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR;


typedef struct _IO_RESOURCE_LIST {
    USHORT Version;
    USHORT Revision;

    ULONG Count;
    IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST;


typedef struct _IO_RESOURCE_REQUIREMENTS_LIST {
    ULONG ListSize;
    INTERFACE_TYPE InterfaceType; 
    ULONG BusNumber; 
    ULONG SlotNumber;
    ULONG Reserved[3];
    ULONG AlternativeLists;
    IO_RESOURCE_LIST  List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST;












#line 10790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#pragma warning(push)
#pragma warning(disable:4324)   

typedef struct __declspec(align(16)) _SLIST_ENTRY {
    struct _SLIST_ENTRY *Next;
} SLIST_ENTRY, *PSLIST_ENTRY;

#pragma warning(pop)





#line 10820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



typedef union __declspec(align(16)) _SLIST_HEADER {
    struct {  
        ULONGLONG Alignment;
        ULONGLONG Region;
    } ;
    struct {  
        ULONGLONG Depth:16;
        ULONGLONG Sequence:48;
        ULONGLONG Reserved:4;
        ULONGLONG NextEntry:60; 
    } HeaderX64;
} SLIST_HEADER, *PSLIST_HEADER;







































#line 10875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 10877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)

void
__stdcall
RtlAssert(
      PVOID VoidFailedAssertion,
      PVOID VoidFileName,
      ULONG LineNumber,
      PSTR MutableMessage
    );










































#line 10939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#pragma warning(push)
#pragma warning(disable:4714) 
#pragma warning(disable:4793) 
































































__declspec(noreturn)
void
__fastfail(
      unsigned int Code
    );

#pragma intrinsic(__fastfail)

#line 11020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































__declspec(noreturn)
__forceinline
void
RtlFailFast(
      ULONG Code
    )

{

    __fastfail(Code);
}

#line 11068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













#line 11082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















__forceinline
void
InitializeListHead(
      PLIST_ENTRY ListHead
    )

{

    ListHead->Flink = ListHead->Blink = ListHead;
    return;
}

 
BOOLEAN
__forceinline
IsListEmpty(
      const LIST_ENTRY * ListHead
    )

{

    return (BOOLEAN)(ListHead->Flink == ListHead);
}

__forceinline
BOOLEAN
RemoveEntryListUnsafe(
      PLIST_ENTRY Entry
    )

{

    PLIST_ENTRY Blink;
    PLIST_ENTRY Flink;

    Flink = Entry->Flink;
    Blink = Entry->Blink;
    Blink->Flink = Flink;
    Flink->Blink = Blink;
    return (BOOLEAN)(Flink == Blink);
}


















































































































#line 11255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




























__forceinline
void
FatalListEntryError(
      PVOID p1,
      PVOID p2,
      PVOID p3
    )

{

    (p1);
    (p2);
    (p3);

    RtlFailFast(3);
}

__forceinline
void
RtlpCheckListEntry(
      PLIST_ENTRY Entry
    )

{

    if ((((Entry->Flink)->Blink) != Entry) || (((Entry->Blink)->Flink) != Entry)) {
        FatalListEntryError((PVOID)(Entry),
                            (PVOID)((Entry->Flink)->Blink),
                            (PVOID)((Entry->Blink)->Flink));
    }
}


__forceinline
BOOLEAN
RemoveEntryList(
      PLIST_ENTRY Entry
    )

{

    PLIST_ENTRY PrevEntry;
    PLIST_ENTRY NextEntry;

    NextEntry = Entry->Flink;
    PrevEntry = Entry->Blink;
    if ((NextEntry->Blink != Entry) || (PrevEntry->Flink != Entry)) {
        FatalListEntryError((PVOID)PrevEntry,
                            (PVOID)Entry,
                            (PVOID)NextEntry);
    }

    PrevEntry->Flink = NextEntry;
    NextEntry->Blink = PrevEntry;
    return (BOOLEAN)(PrevEntry == NextEntry);
}

__forceinline
PLIST_ENTRY
RemoveHeadList(
      PLIST_ENTRY ListHead
    )

{

    PLIST_ENTRY Entry;
    PLIST_ENTRY NextEntry;

    Entry = ListHead->Flink;



    RtlpCheckListEntry(ListHead);

#line 11358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    NextEntry = Entry->Flink;
    if ((Entry->Blink != ListHead) || (NextEntry->Blink != Entry)) {
        FatalListEntryError((PVOID)ListHead,
                            (PVOID)Entry,
                            (PVOID)NextEntry);
    }

    ListHead->Flink = NextEntry;
    NextEntry->Blink = ListHead;

    return Entry;
}

__forceinline
PLIST_ENTRY
RemoveTailList(
      PLIST_ENTRY ListHead
    )
{

    PLIST_ENTRY Entry;
    PLIST_ENTRY PrevEntry;

    Entry = ListHead->Blink;



    RtlpCheckListEntry(ListHead);

#line 11389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    PrevEntry = Entry->Blink;
    if ((Entry->Flink != ListHead) || (PrevEntry->Flink != Entry)) {
        FatalListEntryError((PVOID)PrevEntry,
                            (PVOID)Entry,
                            (PVOID)ListHead);
    }

    ListHead->Blink = PrevEntry;
    PrevEntry->Flink = ListHead;
    return Entry;
}


__forceinline
void
InsertTailList(
      PLIST_ENTRY ListHead,
        PLIST_ENTRY Entry
    )
{

    PLIST_ENTRY PrevEntry;



    RtlpCheckListEntry(ListHead);

#line 11418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    PrevEntry = ListHead->Blink;
    if (PrevEntry->Flink != ListHead) {
        FatalListEntryError((PVOID)PrevEntry,
                            (PVOID)ListHead,
                            (PVOID)PrevEntry->Flink);
    }

    Entry->Flink = ListHead;
    Entry->Blink = PrevEntry;
    PrevEntry->Flink = Entry;
    ListHead->Blink = Entry;
    return;
}


__forceinline
void
InsertHeadList(
      PLIST_ENTRY ListHead,
        PLIST_ENTRY Entry
    )

{

    PLIST_ENTRY NextEntry;



    RtlpCheckListEntry(ListHead);

#line 11450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    NextEntry = ListHead->Flink;
    if (NextEntry->Blink != ListHead) {
        FatalListEntryError((PVOID)ListHead,
                            (PVOID)NextEntry,
                            (PVOID)NextEntry->Blink);
    }

    Entry->Flink = NextEntry;
    Entry->Blink = ListHead;
    NextEntry->Blink = Entry;
    ListHead->Flink = Entry;
    return;
}

__forceinline
void
AppendTailList(
      PLIST_ENTRY ListHead,
      PLIST_ENTRY ListToAppend
    )
{
    PLIST_ENTRY ListEnd = ListHead->Blink;

    RtlpCheckListEntry(ListHead);
    RtlpCheckListEntry(ListToAppend);
    ListHead->Blink->Flink = ListToAppend;
    ListHead->Blink = ListToAppend->Blink;
    ListToAppend->Blink->Flink = ListHead;
    ListToAppend->Blink = ListEnd;
    return;
}

#line 11484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__forceinline
PSINGLE_LIST_ENTRY
PopEntryList(
      PSINGLE_LIST_ENTRY ListHead
    )
{

    PSINGLE_LIST_ENTRY FirstEntry;

    FirstEntry = ListHead->Next;
    if (FirstEntry != ((void *)0)) {
        ListHead->Next = FirstEntry->Next;
    }

    return FirstEntry;
}


__forceinline
void
PushEntryList(
      PSINGLE_LIST_ENTRY ListHead,
        PSINGLE_LIST_ENTRY Entry
    )

{

    Entry->Next = ListHead->Next;
    ListHead->Next = Entry;
    return;
}





#pragma warning(pop)

#line 11526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 

__declspec(dllimport)
NTSTATUS
__stdcall
RtlIntegerToUnicodeString (
      ULONG Value,
      ULONG Base,
      PUNICODE_STRING String
    );
#line 11543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 

__declspec(dllimport)
NTSTATUS
__stdcall
RtlInt64ToUnicodeString (
      ULONGLONG Value,
      ULONG Base,
      PUNICODE_STRING String
    );
#line 11556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 11562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToInteger (
      PCUNICODE_STRING String,
      ULONG Base,
      PULONG Value
    );
#line 11574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


NTSTATUS
RtlUnicodeStringToInt64 (
      PCUNICODE_STRING String,
      ULONG Base,
      PLONG64 Number,
      PWSTR *EndPointer
    );
#line 11584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















#line 11602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

extern BOOLEAN (*NlsMbCodePageTag);     
extern BOOLEAN (*NlsMbOemCodePageTag); 




 
__declspec(dllimport)
void
__stdcall
RtlInitString(
      PSTRING DestinationString,
        PCSZ SourceString
    );
#line 11618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
__stdcall
RtlInitAnsiString(
      PANSI_STRING DestinationString,
        PCSZ SourceString
    );
#line 11629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 



__declspec(dllimport)
void
__stdcall
RtlInitUnicodeString(
      PUNICODE_STRING DestinationString,
        PCWSTR SourceString
    );











__forceinline
void
RtlInitEmptyUnicodeString(
      PUNICODE_STRING UnicodeString,
     
    
      PWCHAR Buffer,
      USHORT BufferSize
    )
{
    UnicodeString->Length = 0;
    UnicodeString->MaximumLength = BufferSize;
    UnicodeString->Buffer = Buffer;
}






__forceinline
void
RtlInitEmptyAnsiString(
      PANSI_STRING AnsiString,
          PCHAR Buffer,
      USHORT BufferSize
    )
{
    AnsiString->Length = 0;
    AnsiString->MaximumLength = BufferSize;
    AnsiString->Buffer = Buffer;
}
#line 11687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef
 
 
 
NTSTATUS
__stdcall
RTL_QUERY_REGISTRY_ROUTINE(
      PWSTR ValueName,
      ULONG ValueType,
      PVOID ValueData,
      ULONG ValueLength,
      PVOID Context,
      PVOID EntryContext
    );
typedef RTL_QUERY_REGISTRY_ROUTINE *PRTL_QUERY_REGISTRY_ROUTINE;

typedef struct _RTL_QUERY_REGISTRY_TABLE {
    PRTL_QUERY_REGISTRY_ROUTINE QueryRoutine;
    ULONG Flags;
    PWSTR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;

} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE;








                                                
                                                


                                                


                                                


                                                
                                                


                                                
                                                
                                                


                                                
                                                
                                                
                                                
                                                
                                                
                                                


                                                


                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                


                                                
                                                
                                                










 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlQueryRegistryValues(
          ULONG RelativeTo,
          PCWSTR Path,
      
        PRTL_QUERY_REGISTRY_TABLE QueryTable,
      PVOID Context,
      PVOID Environment
    );
#line 11794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















































#line 11844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#line 11849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlWriteRegistryValue(
      ULONG RelativeTo,
      PCWSTR Path,
      PCWSTR ValueName,
      ULONG ValueType,
      PVOID ValueData,
      ULONG ValueLength
    );
#line 11864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDeleteRegistryValue(
      ULONG RelativeTo,
      PCWSTR Path,
      PCWSTR ValueName
    );
#line 11876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateRegistryKey(
      ULONG RelativeTo,
      PWSTR Path
    );
#line 11887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCheckRegistryKey(
      ULONG RelativeTo,
      PWSTR Path
    );
#line 11899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitAnsiStringEx(
      PANSI_STRING DestinationString,
        PCSZ SourceString
    );
#line 11928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 11939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAnsiStringToUnicodeString(
    
    
        PUNICODE_STRING DestinationString,
      PCANSI_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 11961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 11968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 11971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
 

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToAnsiString(
    
    
        PANSI_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 11984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







 
 
__declspec(dllimport)
LONG
__stdcall
RtlCompareUnicodeStrings(
      PCWCH String1,
      SIZE_T String1Length,
      PCWCH String2,
      SIZE_T String2Length,
      BOOLEAN CaseInSensitive
    );

 
 
__declspec(dllimport)
LONG
__stdcall
RtlCompareUnicodeString(
      PCUNICODE_STRING String1,
      PCUNICODE_STRING String2,
      BOOLEAN CaseInSensitive
    );
#line 12015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualUnicodeString(
      PCUNICODE_STRING String1,
      PCUNICODE_STRING String2,
      BOOLEAN CaseInSensitive
    );
#line 12028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlHashUnicodeString(
      PCUNICODE_STRING String,
      BOOLEAN CaseInSensitive,
      ULONG HashAlgorithm,
      PULONG HashValue
    );

#line 12048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 

#line 12059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
void
__stdcall
RtlCopyUnicodeString(
      PUNICODE_STRING DestinationString,
      PCUNICODE_STRING SourceString
    );
#line 12067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 

#line 12076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 12079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendUnicodeStringToString (
      PUNICODE_STRING Destination,
      PCUNICODE_STRING Source
    );
#line 12087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 

#line 12096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 12099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendUnicodeToString (
      PUNICODE_STRING Destination,
      PCWSTR Source
    );
#line 12107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 
__declspec(dllimport)
WCHAR
__stdcall
RtlUpcaseUnicodeChar(
      WCHAR SourceCharacter
    );
#line 12120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
WCHAR
__stdcall
RtlDowncaseUnicodeChar(
      WCHAR SourceCharacter
    );
#line 12130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void
__stdcall
RtlFreeUnicodeString(
      
        PUNICODE_STRING UnicodeString
    );




 
__declspec(dllimport)
void
__stdcall
RtlFreeAnsiString(
      
        PANSI_STRING AnsiString
    );
#line 12155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
ULONG
__stdcall
RtlxUnicodeStringToAnsiSize(
      PCUNICODE_STRING UnicodeString
    );
#line 12166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















 
__declspec(dllimport)
ULONG
__stdcall
RtlxAnsiStringToUnicodeSize(
      PCANSI_STRING AnsiString
    );
#line 12192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToUTF8N(
      PCHAR  UTF8StringDestination,
                                     ULONG  UTF8StringMaxByteCount,
                                    PULONG UTF8StringActualByteCount,
      PCWCH UnicodeStringSource,
                                     ULONG  UnicodeStringByteCount
    );
#line 12222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUTF8ToUnicodeN(
      PWSTR  UnicodeStringDestination,
                                  ULONG  UnicodeStringMaxByteCount,
                                 PULONG UnicodeStringActualByteCount,
      PCCH   UTF8StringSource,
                                  ULONG  UTF8StringByteCount
    );
#line 12237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"
























































#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"








#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\guiddef.h"











































































































































#line 12241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




    
#line 12247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


    
#line 12251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


    
    





        

    #line 12263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 12264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlStringFromGUID(
      const GUID * const Guid,
      
        PUNICODE_STRING GuidString
    );


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlGUIDFromString(
      PCUNICODE_STRING GuidString,
      GUID* Guid
    );















#line 12309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





























#line 12339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











__forceinline
PVOID
RtlSecureZeroMemory(
      PVOID ptr,
      SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;



    __stosb((PUCHAR)((ULONG64)vptr), 0, cnt);



















#line 12382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    return ptr;
}

#line 12387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
void
__stdcall
RtlCopyMemoryNonTemporal (
     void __unaligned *Destination,
     const void __unaligned *Source,
     SIZE_T Length
   );





#line 12410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void

RtlPrefetchMemoryNonTemporal(
      PVOID Source,
      SIZE_T Length
    );

#line 12421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



























#line 12449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 12451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





__declspec(dllimport)
void
__stdcall
DbgBreakPointWithStatus(
      ULONG Status
    );
#line 12463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





























#line 12493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





ULONG
__cdecl
DbgPrint (
        PCSTR Format,
    ...
    );




__declspec(dllimport)
ULONG
__cdecl
DbgPrintEx (
      ULONG ComponentId,
      ULONG Level,
        PCSTR Format,
    ...
    );
#line 12518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






__declspec(dllimport)
ULONG
__stdcall
vDbgPrintEx(
      ULONG ComponentId,
      ULONG Level,
      PCCH Format,
      va_list arglist
    );

__declspec(dllimport)
ULONG
__stdcall
vDbgPrintExWithPrefix (
      PCCH Prefix,
      ULONG ComponentId,
      ULONG Level,
      PCCH Format,
      va_list arglist
    );

#line 12546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 12548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




__declspec(dllimport)
ULONG
__cdecl
DbgPrintReturnControlC (
        PCCH Format,
    ...
    );
#line 12560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
__stdcall
DbgQueryDebugFilterState (
      ULONG ComponentId,
      ULONG Level
    );
#line 12570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
__stdcall
DbgSetDebugFilterState (
      ULONG ComponentId,
      ULONG Level,
      BOOLEAN State
    );
#line 12581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef
void
(*PDEBUG_PRINT_CALLBACK) (
      PSTRING Output,
      ULONG ComponentId,
      ULONG Level
    );

__declspec(dllimport)
NTSTATUS
__stdcall
DbgSetDebugPrintCallback (
      PDEBUG_PRINT_CALLBACK DebugPrintCallback,
      BOOLEAN Enable
    );
#line 12599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 12601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerAdd (
      LARGE_INTEGER Addend1,
      LARGE_INTEGER Addend2
    )
{
    LARGE_INTEGER Sum;

    Sum.QuadPart = Addend1.QuadPart + Addend2.QuadPart;
    return Sum;
}





__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlEnlargedIntegerMultiply (
      LONG Multiplicand,
      LONG Multiplier
    )
{
    LARGE_INTEGER Product;

    Product.QuadPart = (LONGLONG)Multiplicand * (ULONGLONG)Multiplier;
    return Product;
}





__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlEnlargedUnsignedMultiply (
      ULONG Multiplicand,
      ULONG Multiplier
    )
{
    LARGE_INTEGER Product;

    Product.QuadPart = (ULONGLONG)Multiplicand * (ULONGLONG)Multiplier;
    return Product;
}





__declspec(deprecated)         
 
__inline
ULONG
__stdcall
RtlEnlargedUnsignedDivide (
      ULARGE_INTEGER Dividend,
      ULONG Divisor,
      PULONG Remainder
    )
{
    ULONG Quotient;

    Quotient = (ULONG)(Dividend.QuadPart / Divisor);
    if (( (CHAR *)((ULONG_PTR)(Remainder)) != (CHAR *)(((void *)0)) )) {
        *Remainder = (ULONG)(Dividend.QuadPart % Divisor);
    }

    return Quotient;
}





__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerNegate (
      LARGE_INTEGER Subtrahend
    )
{
    LARGE_INTEGER Difference;

    Difference.QuadPart = -Subtrahend.QuadPart;
    return Difference;
}





__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerSubtract (
      LARGE_INTEGER Minuend,
      LARGE_INTEGER Subtrahend
    )
{
    LARGE_INTEGER Difference;

    Difference.QuadPart = Minuend.QuadPart - Subtrahend.QuadPart;
    return Difference;
}







__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlExtendedMagicDivide (
      LARGE_INTEGER Dividend,
      LARGE_INTEGER MagicDivisor,
      CCHAR ShiftCount
    )

{

    LARGE_INTEGER Quotient;

    if (Dividend.QuadPart >= 0) {
        Quotient.QuadPart = __umulh(Dividend.QuadPart,
                                                 (ULONG64)MagicDivisor.QuadPart);

    } else {
        Quotient.QuadPart = __umulh(-Dividend.QuadPart,
                                                 (ULONG64)MagicDivisor.QuadPart);
    }

    Quotient.QuadPart = (ULONG64)Quotient.QuadPart >> ShiftCount;
    if (Dividend.QuadPart < 0) {
        Quotient.QuadPart = - Quotient.QuadPart;
    }

    return Quotient;
}

#line 12773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#line 12790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlExtendedLargeIntegerDivide (
      LARGE_INTEGER Dividend,
      ULONG Divisor,
      PULONG Remainder
    )
{
    LARGE_INTEGER Quotient;

    Quotient.QuadPart = (ULONG64)Dividend.QuadPart / Divisor;
    if (( (CHAR *)((ULONG_PTR)(Remainder)) != (CHAR *)(((void *)0)) )) {
        *Remainder = (ULONG)((ULONG64)Dividend.QuadPart % Divisor);
    }

    return Quotient;
}





__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlExtendedIntegerMultiply (
      LARGE_INTEGER Multiplicand,
      LONG Multiplier
    )
{
    LARGE_INTEGER Product;

    Product.QuadPart = Multiplicand.QuadPart * Multiplier;
    return Product;
}







































#line 12879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#pragma deprecated(RtlLargeIntegerAnd)      
#line 12888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(deprecated)         
__inline
LARGE_INTEGER
__stdcall
RtlConvertLongToLargeInteger (
      LONG SignedInteger
    )
{
    LARGE_INTEGER Result;

    Result.QuadPart = SignedInteger;
    return Result;
}





__declspec(deprecated)         
__inline
LARGE_INTEGER
__stdcall
RtlConvertUlongToLargeInteger (
      ULONG UnsignedInteger
    )
{
    LARGE_INTEGER Result;

    Result.QuadPart = UnsignedInteger;
    return Result;
}





__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerShiftLeft (
      LARGE_INTEGER LargeInteger,
      CCHAR ShiftCount
    )
{
    LARGE_INTEGER Result;

    Result.QuadPart = LargeInteger.QuadPart << ShiftCount;
    return Result;
}

__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerShiftRight (
      LARGE_INTEGER LargeInteger,
      CCHAR ShiftCount
    )
{
    LARGE_INTEGER Result;

    Result.QuadPart = (ULONG64)LargeInteger.QuadPart >> ShiftCount;
    return Result;
}

__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerArithmeticShift (
      LARGE_INTEGER LargeInteger,
      CCHAR ShiftCount
    )
{
    LARGE_INTEGER Result;

    Result.QuadPart = LargeInteger.QuadPart >> ShiftCount;
    return Result;
}







#pragma deprecated(RtlLargeIntegerGreaterThan)      
#pragma deprecated(RtlLargeIntegerGreaterThanOrEqualTo)      
#pragma deprecated(RtlLargeIntegerEqualTo)      
#pragma deprecated(RtlLargeIntegerNotEqualTo)      
#pragma deprecated(RtlLargeIntegerLessThan)      
#pragma deprecated(RtlLargeIntegerLessThanOrEqualTo)      
#pragma deprecated(RtlLargeIntegerGreaterThanZero)      
#pragma deprecated(RtlLargeIntegerGreaterOrEqualToZero)      
#pragma deprecated(RtlLargeIntegerEqualToZero)      
#pragma deprecated(RtlLargeIntegerNotEqualToZero)      
#pragma deprecated(RtlLargeIntegerLessThanZero)      
#pragma deprecated(RtlLargeIntegerLessOrEqualToZero)      
#line 12998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























































#line 13054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 




typedef struct _TIME_FIELDS {
    CSHORT Year;        
    CSHORT Month;       
    CSHORT Day;         
    CSHORT Hour;        
    CSHORT Minute;      
    CSHORT Second;      
    CSHORT Milliseconds;
    CSHORT Weekday;     
} TIME_FIELDS;
typedef TIME_FIELDS *PTIME_FIELDS;



__declspec(dllimport)
void
__stdcall
RtlTimeToTimeFields (
      PLARGE_INTEGER Time,
      PTIME_FIELDS TimeFields
    );
#line 13082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlTimeFieldsToTime (
      PTIME_FIELDS TimeFields,
      PLARGE_INTEGER Time
    );
#line 13097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








































































#line 13170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















































#line 13219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










































#line 13262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































#line 13298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









































#line 13340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















































#line 13388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef struct _RTL_BITMAP {
    ULONG SizeOfBitMap;                     
    PULONG Buffer;                          
} RTL_BITMAP;
typedef RTL_BITMAP *PRTL_BITMAP;








__declspec(dllimport)
void
__stdcall
RtlInitializeBitMap (
      PRTL_BITMAP BitMapHeader,
        PULONG BitMapBuffer,
      ULONG SizeOfBitMap
    );
#line 13418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
__stdcall
RtlClearBit (
      PRTL_BITMAP BitMapHeader,
      ULONG BitNumber
    );
#line 13433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
__stdcall
RtlSetBit (
      PRTL_BITMAP BitMapHeader,
      ULONG BitNumber
    );
#line 13443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlTestBit (
      PRTL_BITMAP BitMapHeader,
      ULONG BitNumber
    );
#line 13454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
__stdcall
RtlClearAllBits (
      PRTL_BITMAP BitMapHeader
    );
#line 13468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
__stdcall
RtlSetAllBits (
      PRTL_BITMAP BitMapHeader
    );
#line 13477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












 
 
__declspec(dllimport)
ULONG
__stdcall
RtlFindClearBits (
      PRTL_BITMAP BitMapHeader,
      ULONG NumberToFind,
      ULONG HintIndex
    );
#line 13500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
ULONG
__stdcall
RtlFindSetBits (
      PRTL_BITMAP BitMapHeader,
      ULONG NumberToFind,
      ULONG HintIndex
    );
#line 13513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













 
__declspec(dllimport)
ULONG
__stdcall
RtlFindClearBitsAndSet (
      PRTL_BITMAP BitMapHeader,
      ULONG NumberToFind,
      ULONG HintIndex
    );
#line 13536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
ULONG
__stdcall
RtlFindSetBitsAndClear (
      PRTL_BITMAP BitMapHeader,
      ULONG NumberToFind,
      ULONG HintIndex
    );
#line 13548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
__stdcall
RtlClearBits (
      PRTL_BITMAP BitMapHeader,
      ULONG StartingIndex,
      ULONG NumberToClear
    );
#line 13564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
__stdcall
RtlSetBits (
      PRTL_BITMAP BitMapHeader,
      ULONG StartingIndex,
      ULONG NumberToSet
    );
#line 13575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef struct _RTL_BITMAP_RUN {

    ULONG StartingIndex;
    ULONG NumberOfBits;

} RTL_BITMAP_RUN;
typedef RTL_BITMAP_RUN *PRTL_BITMAP_RUN;


__declspec(dllimport)
ULONG
__stdcall
RtlFindClearRuns (
      PRTL_BITMAP BitMapHeader,
      PRTL_BITMAP_RUN RunArray,
      ULONG SizeOfRunArray,
      BOOLEAN LocateLongestRuns
    );
#line 13603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
ULONG
__stdcall
RtlFindLongestRunClear (
      PRTL_BITMAP BitMapHeader,
      PULONG StartingIndex
    );
#line 13620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
ULONG
__stdcall
RtlFindFirstRunClear (
      PRTL_BITMAP BitMapHeader,
      PULONG StartingIndex
    );
#line 13637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















 
__forceinline
BOOLEAN
RtlCheckBit (
      PRTL_BITMAP BitMapHeader,
      ULONG BitPosition
    )

{
    return _bittest64((LONG64 const *)BitMapHeader->Buffer, (LONG64)BitPosition);
}





#line 13674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


























#line 13701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
__stdcall
RtlNumberOfClearBits (
      PRTL_BITMAP BitMapHeader
    );
#line 13710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
__stdcall
RtlNumberOfSetBits (
      PRTL_BITMAP BitMapHeader
    );
#line 13719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlAreBitsClear (
      PRTL_BITMAP BitMapHeader,
      ULONG StartingIndex,
      ULONG Length
    );
#line 13736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlAreBitsSet (
      PRTL_BITMAP BitMapHeader,
      ULONG StartingIndex,
      ULONG Length
    );
#line 13748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
__stdcall
RtlFindNextForwardRunClear (
      PRTL_BITMAP BitMapHeader,
      ULONG FromIndex,
      PULONG StartingRunIndex
    );
#line 13759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
__stdcall
RtlFindLastBackwardRunClear (
      PRTL_BITMAP BitMapHeader,
      ULONG FromIndex,
      PULONG StartingRunIndex
    );
#line 13770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
 
__declspec(dllimport)
CCHAR
__stdcall
RtlFindLeastSignificantBit (
      ULONGLONG Set
    );
#line 13787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
CCHAR
__stdcall
RtlFindMostSignificantBit (
      ULONGLONG Set
    );
#line 13798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
ULONG
__stdcall
RtlNumberOfSetBitsUlongPtr (
      ULONG_PTR Target
    );
#line 13812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















#line 13835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
































 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      ULONG Revision
    );
#line 13876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 13888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
ULONG
__stdcall
RtlLengthSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 13898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidRelativeSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptorInput,
      ULONG SecurityDescriptorLength,
      SECURITY_INFORMATION RequiredInformation
    );
#line 13911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetDaclSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      BOOLEAN DaclPresent,
      PACL Dacl,
      BOOLEAN DaclDefaulted
    );
#line 13925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
































  unsigned short __cdecl _byteswap_ushort(  unsigned short);
  unsigned long  __cdecl _byteswap_ulong (  unsigned long);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);



#pragma intrinsic(_byteswap_ushort)
#pragma intrinsic(_byteswap_ulong)
#pragma intrinsic(_byteswap_uint64)

































#line 14000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef struct _OSVERSIONINFOA {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 14028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _OSVERSIONINFOEXA {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    ULONG dwOSVersionInfoSize;
    ULONG dwMajorVersion;
    ULONG dwMinorVersion;
    ULONG dwBuildNumber;
    ULONG dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    USHORT wServicePackMajor;
    USHORT wServicePackMinor;
    USHORT wSuiteMask;
    UCHAR wProductType;
    UCHAR wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 14064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















































#pragma region Desktop Family or OneCore Family


















__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      ULONG TypeMask,
      UCHAR Condition
    );

#line 14140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 14142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 14144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#pragma endregion






 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetVersion(
     
    
    
#line 14160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
        PRTL_OSVERSIONINFOW lpVersionInformation
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlVerifyVersionInfo(
      PRTL_OSVERSIONINFOEXW VersionInfo,
      ULONG TypeMask,
      ULONGLONG  ConditionMask
    );
#line 14174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




typedef BOOLEAN (*PFN_RTL_IS_NTDDI_VERSION_AVAILABLE)(
      ULONG Version
    );

typedef BOOLEAN (*PFN_RTL_IS_SERVICE_PACK_VERSION_INSTALLED)(
      ULONG Version
    );

BOOLEAN
RtlIsNtDdiVersionAvailable (
      ULONG Version
    );

BOOLEAN
RtlIsServicePackVersionInstalled (
      ULONG Version
    );




























#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\dpfilter.h"










typedef enum _DPFLTR_TYPE {
    DPFLTR_SYSTEM_ID = 0,
    DPFLTR_SMSS_ID = 1,
    DPFLTR_SETUP_ID = 2,
    DPFLTR_NTFS_ID = 3,
    DPFLTR_FSTUB_ID = 4,
    DPFLTR_CRASHDUMP_ID = 5,
    DPFLTR_CDAUDIO_ID = 6,
    DPFLTR_CDROM_ID = 7,
    DPFLTR_CLASSPNP_ID = 8,
    DPFLTR_DISK_ID = 9,
    DPFLTR_REDBOOK_ID = 10,
    DPFLTR_STORPROP_ID = 11,
    DPFLTR_SCSIPORT_ID = 12,
    DPFLTR_SCSIMINIPORT_ID = 13,
    DPFLTR_CONFIG_ID = 14,
    DPFLTR_I8042PRT_ID = 15,
    DPFLTR_SERMOUSE_ID = 16,
    DPFLTR_LSERMOUS_ID = 17,
    DPFLTR_KBDHID_ID = 18,
    DPFLTR_MOUHID_ID = 19,
    DPFLTR_KBDCLASS_ID = 20,
    DPFLTR_MOUCLASS_ID = 21,
    DPFLTR_TWOTRACK_ID = 22,
    DPFLTR_WMILIB_ID = 23,
    DPFLTR_ACPI_ID = 24,
    DPFLTR_AMLI_ID = 25,
    DPFLTR_HALIA64_ID = 26,
    DPFLTR_VIDEO_ID = 27,
    DPFLTR_SVCHOST_ID = 28,
    DPFLTR_VIDEOPRT_ID = 29,
    DPFLTR_TCPIP_ID = 30,
    DPFLTR_DMSYNTH_ID = 31,
    DPFLTR_NTOSPNP_ID = 32,
    DPFLTR_FASTFAT_ID = 33,
    DPFLTR_SAMSS_ID = 34,
    DPFLTR_PNPMGR_ID = 35,
    DPFLTR_NETAPI_ID = 36,
    DPFLTR_SCSERVER_ID = 37,
    DPFLTR_SCCLIENT_ID = 38,
    DPFLTR_SERIAL_ID = 39,
    DPFLTR_SERENUM_ID = 40,
    DPFLTR_UHCD_ID = 41,
    DPFLTR_RPCPROXY_ID = 42,
    DPFLTR_AUTOCHK_ID = 43,
    DPFLTR_DCOMSS_ID = 44,
    DPFLTR_UNIMODEM_ID = 45,
    DPFLTR_SIS_ID = 46,
    DPFLTR_FLTMGR_ID = 47,
    DPFLTR_WMICORE_ID = 48,
    DPFLTR_BURNENG_ID = 49,
    DPFLTR_IMAPI_ID = 50,
    DPFLTR_SXS_ID = 51,
    DPFLTR_FUSION_ID = 52,
    DPFLTR_IDLETASK_ID = 53,
    DPFLTR_SOFTPCI_ID = 54,
    DPFLTR_TAPE_ID = 55,
    DPFLTR_MCHGR_ID = 56,
    DPFLTR_IDEP_ID = 57,
    DPFLTR_PCIIDE_ID = 58,
    DPFLTR_FLOPPY_ID = 59,
    DPFLTR_FDC_ID = 60,
    DPFLTR_TERMSRV_ID = 61,
    DPFLTR_W32TIME_ID = 62,
    DPFLTR_PREFETCHER_ID = 63,
    DPFLTR_RSFILTER_ID = 64,
    DPFLTR_FCPORT_ID = 65,
    DPFLTR_PCI_ID = 66,
    DPFLTR_DMIO_ID = 67,
    DPFLTR_DMCONFIG_ID = 68,
    DPFLTR_DMADMIN_ID = 69,
    DPFLTR_WSOCKTRANSPORT_ID = 70,
    DPFLTR_VSS_ID = 71,
    DPFLTR_PNPMEM_ID = 72,
    DPFLTR_PROCESSOR_ID = 73,
    DPFLTR_DMSERVER_ID = 74,
    DPFLTR_SR_ID = 75,
    DPFLTR_INFINIBAND_ID = 76,
    DPFLTR_IHVDRIVER_ID = 77,
    DPFLTR_IHVVIDEO_ID = 78,
    DPFLTR_IHVAUDIO_ID = 79,
    DPFLTR_IHVNETWORK_ID = 80,
    DPFLTR_IHVSTREAMING_ID = 81,
    DPFLTR_IHVBUS_ID = 82,
    DPFLTR_HPS_ID = 83,
    DPFLTR_RTLTHREADPOOL_ID = 84,
    DPFLTR_LDR_ID = 85,
    DPFLTR_TCPIP6_ID = 86,
    DPFLTR_ISAPNP_ID = 87,
    DPFLTR_SHPC_ID = 88,
    DPFLTR_STORPORT_ID = 89,
    DPFLTR_STORMINIPORT_ID = 90,
    DPFLTR_PRINTSPOOLER_ID = 91,
    DPFLTR_VSSDYNDISK_ID = 92,
    DPFLTR_VERIFIER_ID = 93,
    DPFLTR_VDS_ID = 94,
    DPFLTR_VDSBAS_ID = 95,
    DPFLTR_VDSDYN_ID = 96,
    DPFLTR_VDSDYNDR_ID = 97,
    DPFLTR_VDSLDR_ID = 98,
    DPFLTR_VDSUTIL_ID = 99,
    DPFLTR_DFRGIFC_ID = 100,
    DPFLTR_DEFAULT_ID = 101,
    DPFLTR_MM_ID = 102,
    DPFLTR_DFSC_ID = 103,
    DPFLTR_WOW64_ID = 104,
    DPFLTR_ALPC_ID = 105,
    DPFLTR_WDI_ID = 106,
    DPFLTR_PERFLIB_ID = 107,
    DPFLTR_KTM_ID = 108,
    DPFLTR_IOSTRESS_ID = 109,
    DPFLTR_HEAP_ID = 110,
    DPFLTR_WHEA_ID = 111,
    DPFLTR_USERGDI_ID = 112,
    DPFLTR_MMCSS_ID = 113,
    DPFLTR_TPM_ID = 114,
    DPFLTR_THREADORDER_ID = 115,
    DPFLTR_ENVIRON_ID = 116,
    DPFLTR_EMS_ID = 117,
    DPFLTR_WDT_ID = 118,
    DPFLTR_FVEVOL_ID = 119,
    DPFLTR_NDIS_ID = 120,
    DPFLTR_NVCTRACE_ID = 121,
    DPFLTR_LUAFV_ID = 122,
    DPFLTR_APPCOMPAT_ID = 123,
    DPFLTR_USBSTOR_ID = 124,
    DPFLTR_SBP2PORT_ID = 125,
    DPFLTR_COVERAGE_ID = 126,
    DPFLTR_CACHEMGR_ID = 127,
    DPFLTR_MOUNTMGR_ID = 128,
    DPFLTR_CFR_ID = 129,
    DPFLTR_TXF_ID = 130,
    DPFLTR_KSECDD_ID = 131,
    DPFLTR_FLTREGRESS_ID = 132,
    DPFLTR_MPIO_ID = 133,
    DPFLTR_MSDSM_ID = 134,
    DPFLTR_UDFS_ID = 135,
    DPFLTR_PSHED_ID = 136,
    DPFLTR_STORVSP_ID = 137,
    DPFLTR_LSASS_ID = 138,
    DPFLTR_SSPICLI_ID = 139,
    DPFLTR_CNG_ID = 140,
    DPFLTR_EXFAT_ID = 141,
    DPFLTR_FILETRACE_ID = 142,
    DPFLTR_XSAVE_ID = 143,
    DPFLTR_SE_ID = 144,
    DPFLTR_DRIVEEXTENDER_ID = 145,
    DPFLTR_POWER_ID = 146,
    DPFLTR_CRASHDUMPXHCI_ID = 147,
    DPFLTR_GPIO_ID = 148,
    DPFLTR_REFS_ID = 149,
    DPFLTR_WER_ID = 150,
    DPFLTR_CAPIMG_ID = 151,
    DPFLTR_VPCI_ID = 152,
    DPFLTR_STORAGECLASSMEMORY_ID = 153,
    DPFLTR_FSLIB_ID = 154,
    DPFLTR_ENDOFTABLE_ID
} DPFLTR_TYPE;

#line 14224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 14225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
NTSTATUS
__stdcall
RtlIoEncodeMemIoResource (
      PIO_RESOURCE_DESCRIPTOR Descriptor,
      UCHAR Type,
      ULONGLONG Length,
      ULONGLONG Alignment,
      ULONGLONG MinimumAddress,
      ULONGLONG MaximumAddress
    );
#line 14240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlCmEncodeMemIoResource (
      PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor,
      UCHAR Type,
      ULONGLONG Length,
      ULONGLONG Start
    );
#line 14252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONGLONG
__stdcall
RtlIoDecodeMemIoResource (
      PIO_RESOURCE_DESCRIPTOR Descriptor,
      PULONGLONG Alignment,
      PULONGLONG MinimumAddress,
      PULONGLONG MaximumAddress
    );
#line 14264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONGLONG
__stdcall
RtlCmDecodeMemIoResource (
      PCM_PARTIAL_RESOURCE_DESCRIPTOR Descriptor,
      PULONGLONG Start
    );
#line 14274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlFindClosestEncodableLength (
      ULONGLONG SourceLength,
      PULONGLONG TargetLength
    );
#line 14284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














#line 14299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 14309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#line 14326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 14328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
































#line 14361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 14363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 14375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








































#line 14416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























#line 14442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\apiset.h"





































#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\apiset.h"





















































































#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\apiset.h"



#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\apiset.h"

#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\apiset.h"
#line 14444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#pragma region Desktop Family or OneCore Family









 
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
      const void * Source1,
      const void * Source2,
      SIZE_T Length
    );


#line 14467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 14469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 14471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#pragma endregion










#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ktmtypes.h"


























#pragma warning(push)
#pragma warning(disable:4820) 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ktmtypes.h"

typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;

















































typedef ULONG NOTIFICATION_MASK;






















































typedef struct _TRANSACTION_NOTIFICATION {
    PVOID         TransactionKey;
    ULONG         TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID   EnlistmentId;
    UOW    UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID  UOW;
    GUID  TmIdentity;
    ULONG BufferLength;
    
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID  UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG              VersionMajor;
    ULONG              VersionMinor;
    ULONG              NumProtocols;
    ULONG              Unused;        
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW                UOW;
    GUID               TmIdentity;
    ULONG              IsolationLevel;
    ULONG              IsolationFlags;
    ULONG              Timeout;
    WCHAR              Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID    ProtocolId;
      ULONG StaticInfoLength;
    ULONG              TransactionIdInfoLength; 
    ULONG              Unused1;        
    ULONG              Unused2;        
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


#pragma warning(pop)
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ktmtypes.h"





#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\ktmtypes.h"
#line 14483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 14488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











































































































































































typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID    TransactionId;
    ULONG   State;
    ULONG   Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID    TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID  LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    ULONG LogPathLength;
      WCHAR LogPath[1]; 

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG  LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;




typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    ULONG              IsolationLevel;
    ULONG              IsolationFlags;
    LARGE_INTEGER      Timeout;
    ULONG              Outcome;
    ULONG              DescriptionLength;
    WCHAR              Description[1];            

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID   EnlistmentId;
    GUID   ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    ULONG                       NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID    ResourceManagerId;
    ULONG   DescriptionLength;
    WCHAR   Description[1];            
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE    IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;

typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation
} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID    EnlistmentId;
    GUID    TransactionId;
    GUID    ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID   CrmTransactionManagerId;
    GUID   CrmResourceManagerId;
    GUID   CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW    UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    ULONG   NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;









typedef struct _KTMOBJECT_CURSOR {

    
    
    

    GUID    LastQuery;

    
    
    

    ULONG   ObjectIdCount;

    
    
    

    GUID    ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;








  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCreateTransactionManager (
      PHANDLE TmHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PUNICODE_STRING LogFileName,
      ULONG CreateOptions,
      ULONG CommitStrength
    );
#line 14862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenTransactionManager (
      PHANDLE TmHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PUNICODE_STRING LogFileName,
      LPGUID TmIdentity,
      ULONG OpenOptions
    );
#line 14879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRenameTransactionManager (
      PUNICODE_STRING LogFileName,
      LPGUID ExistingTransactionManagerGuid
    );
#line 14892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRollforwardTransactionManager (
      HANDLE TransactionManagerHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 14905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRecoverTransactionManager (
      HANDLE TransactionManagerHandle
    );
#line 14917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationTransactionManager (
      HANDLE TransactionManagerHandle,
      TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
      PVOID TransactionManagerInformation,
      ULONG TransactionManagerInformationLength,
      PULONG ReturnLength
    );
#line 14933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationTransactionManager (
      HANDLE TmHandle,
      TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
      PVOID TransactionManagerInformation,
      ULONG TransactionManagerInformationLength
    );
#line 14948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS 
__stdcall
NtEnumerateTransactionObject (
      HANDLE RootObjectHandle,
      KTMOBJECT_TYPE QueryType,
      PKTMOBJECT_CURSOR ObjectCursor,
      ULONG ObjectCursorLength,
      PULONG ReturnLength
    );
#line 14964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef NTSTATUS (__stdcall * PFN_NT_CREATE_TRANSACTION)(
      PHANDLE TransactionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      LPGUID Uow,
      HANDLE TmHandle,
      ULONG CreateOptions,
      ULONG IsolationLevel,
      ULONG IsolationFlags,
      PLARGE_INTEGER Timeout,
      PUNICODE_STRING Description
    );    



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCreateTransaction (
      PHANDLE TransactionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      LPGUID Uow,
      HANDLE TmHandle,
      ULONG CreateOptions,
      ULONG IsolationLevel,
      ULONG IsolationFlags,
      PLARGE_INTEGER Timeout,
      PUNICODE_STRING Description
    );
#line 14999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef NTSTATUS (__stdcall *PFN_NT_OPEN_TRANSACTION)(
      PHANDLE TransactionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      LPGUID Uow,
      HANDLE TmHandle
    );



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenTransaction (
      PHANDLE TransactionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      LPGUID Uow,
      HANDLE TmHandle
    );
#line 15024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef NTSTATUS (__stdcall * PFN_NT_QUERY_INFORMATION_TRANSACTION)(
      HANDLE TransactionHandle,
      TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
      PVOID TransactionInformation,
      ULONG TransactionInformationLength,
      PULONG ReturnLength
    );



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationTransaction (
      HANDLE TransactionHandle,
      TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
      PVOID TransactionInformation,
      ULONG TransactionInformationLength,
      PULONG ReturnLength
    );
#line 15049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef NTSTATUS (__stdcall * PFN_NT_SET_INFORMATION_TRANSACTION)(
      HANDLE TransactionHandle,
      TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
      PVOID TransactionInformation,
      ULONG TransactionInformationLength
    );



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationTransaction (
      HANDLE TransactionHandle,
      TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
      PVOID TransactionInformation,
      ULONG TransactionInformationLength
    );
#line 15072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef NTSTATUS (__stdcall * PFN_NT_COMMIT_TRANSACTION)(
      HANDLE  TransactionHandle,
      BOOLEAN Wait
    );



  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCommitTransaction (
      HANDLE TransactionHandle,
      BOOLEAN Wait
    );
#line 15090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef NTSTATUS (__stdcall * PFN_NT_ROLLBACK_TRANSACTION)(
      HANDLE TransactionHandle,
      BOOLEAN Wait
    );



  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRollbackTransaction (
      HANDLE TransactionHandle,
      BOOLEAN Wait
    );
#line 15108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCreateEnlistment (
      PHANDLE EnlistmentHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE ResourceManagerHandle,
      HANDLE TransactionHandle,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG CreateOptions,
      NOTIFICATION_MASK NotificationMask,
      PVOID EnlistmentKey
    );
#line 15127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenEnlistment (
      PHANDLE EnlistmentHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE ResourceManagerHandle,
      LPGUID EnlistmentGuid,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 15143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationEnlistment (
      HANDLE EnlistmentHandle,
      ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
      PVOID EnlistmentInformation,
      ULONG EnlistmentInformationLength,
      PULONG ReturnLength
    );
#line 15159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationEnlistment (
      HANDLE EnlistmentHandle,
      ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
      PVOID EnlistmentInformation,
      ULONG EnlistmentInformationLength
    );
#line 15174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRecoverEnlistment (
      HANDLE EnlistmentHandle,
      PVOID EnlistmentKey
    );
#line 15187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtPrePrepareEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtPrepareEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCommitEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRollbackEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall 
NtPrePrepareComplete (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall 
NtPrepareComplete (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall 
NtCommitComplete (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall 
NtReadOnlyEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall 
NtRollbackComplete (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall 
NtSinglePhaseReject (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 15310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCreateResourceManager (
      PHANDLE ResourceManagerHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE TmHandle,
      LPGUID RmGuid,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG CreateOptions,
      PUNICODE_STRING Description
    );
#line 15328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenResourceManager (
      PHANDLE ResourceManagerHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE TmHandle,
      LPGUID ResourceManagerGuid,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 15344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRecoverResourceManager (
      HANDLE ResourceManagerHandle
    );
#line 15356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtGetNotificationResourceManager (
      HANDLE ResourceManagerHandle,
      PTRANSACTION_NOTIFICATION TransactionNotification,
      ULONG NotificationLength,
      PLARGE_INTEGER Timeout,
      PULONG ReturnLength,
      ULONG Asynchronous,
      ULONG_PTR AsynchronousContext
    );
#line 15374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationResourceManager (
      HANDLE ResourceManagerHandle,
      RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
      PVOID ResourceManagerInformation,
      ULONG ResourceManagerInformationLength,
      PULONG ReturnLength
    );
#line 15390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationResourceManager (
      HANDLE ResourceManagerHandle,
      RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
      PVOID ResourceManagerInformation,
      ULONG ResourceManagerInformationLength
    );
#line 15405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtRegisterProtocolAddressInformation(
      HANDLE ResourceManager,
      PCRM_PROTOCOL_ID ProtocolId,
      ULONG ProtocolInformationSize,
      PVOID ProtocolInformation,
      ULONG CreateOptions
    );
#line 15421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtPropagationComplete(
      HANDLE ResourceManagerHandle,
      ULONG RequestCookie,
      ULONG BufferLength,
      PVOID Buffer
    );
#line 15435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 __declspec(dllimport)
NTSTATUS
__stdcall
NtPropagationFailed(
      HANDLE ResourceManagerHandle,
      ULONG RequestCookie,
      NTSTATUS PropStatus
    );
#line 15448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#pragma warning(pop)
#line 15454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 15460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















































#line 15515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 15523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 15535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 15545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 15549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef   enum _POOL_TYPE POOL_TYPE;



typedef
 
 
PVOID
ALLOCATE_FUNCTION (
      POOL_TYPE PoolType,
      SIZE_T NumberOfBytes,
      ULONG Tag
    );
typedef ALLOCATE_FUNCTION *PALLOCATE_FUNCTION;

typedef
 
 
void
FREE_FUNCTION (
        PVOID Buffer
    );
typedef FREE_FUNCTION *PFREE_FUNCTION;

typedef struct _LOOKASIDE_LIST_EX *PLOOKASIDE_LIST_EX;

typedef
 
 
PVOID
ALLOCATE_FUNCTION_EX (
      POOL_TYPE PoolType,
      SIZE_T NumberOfBytes,
      ULONG Tag,
      PLOOKASIDE_LIST_EX Lookaside
    );
typedef ALLOCATE_FUNCTION_EX *PALLOCATE_FUNCTION_EX;

typedef
 
 
void
FREE_FUNCTION_EX (
        PVOID Buffer,
      PLOOKASIDE_LIST_EX Lookaside
    );
typedef FREE_FUNCTION_EX *PFREE_FUNCTION_EX;





#line 15609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 15613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























































#pragma warning(push)
#pragma warning(disable:4324) 
#line 15673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct __declspec(align(64)) _GENERAL_LOOKASIDE {
    union { SLIST_HEADER ListHead; SINGLE_LIST_ENTRY SingleListHead; } ; USHORT Depth; USHORT MaximumDepth; ULONG TotalAllocates; union { ULONG AllocateMisses; ULONG AllocateHits; } ; ULONG TotalFrees; union { ULONG FreeMisses; ULONG FreeHits; } ; POOL_TYPE Type; ULONG Tag; ULONG Size; union { PALLOCATE_FUNCTION_EX AllocateEx; PALLOCATE_FUNCTION Allocate; } ; union { PFREE_FUNCTION_EX FreeEx; PFREE_FUNCTION Free; } ; LIST_ENTRY ListEntry; ULONG LastTotalAllocates; union { ULONG LastAllocateMisses; ULONG LastAllocateHits; } ; ULONG Future[2];
} GENERAL_LOOKASIDE;

typedef GENERAL_LOOKASIDE *PGENERAL_LOOKASIDE;


#pragma warning(pop)
#line 15683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef struct _GENERAL_LOOKASIDE_POOL {
    union { SLIST_HEADER ListHead; SINGLE_LIST_ENTRY SingleListHead; } ; USHORT Depth; USHORT MaximumDepth; ULONG TotalAllocates; union { ULONG AllocateMisses; ULONG AllocateHits; } ; ULONG TotalFrees; union { ULONG FreeMisses; ULONG FreeHits; } ; POOL_TYPE Type; ULONG Tag; ULONG Size; union { PALLOCATE_FUNCTION_EX AllocateEx; PALLOCATE_FUNCTION Allocate; } ; union { PFREE_FUNCTION_EX FreeEx; PFREE_FUNCTION Free; } ; LIST_ENTRY ListEntry; ULONG LastTotalAllocates; union { ULONG LastAllocateMisses; ULONG LastAllocateHits; } ; ULONG Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;









typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((GENERAL_LOOKASIDE *)0)->TotalFrees))==((LONG)(LONG_PTR)&(((GENERAL_LOOKASIDE_POOL *)0)->TotalFrees)))?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((GENERAL_LOOKASIDE *)0)->Tag))==((LONG)(LONG_PTR)&(((GENERAL_LOOKASIDE_POOL *)0)->Tag)))?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((GENERAL_LOOKASIDE *)0)->Future))==((LONG)(LONG_PTR)&(((GENERAL_LOOKASIDE_POOL *)0)->Future)))?1:-1];











typedef CCHAR KPROCESSOR_MODE;

typedef enum _MODE {
    KernelMode,
    UserMode,
    MaximumMode
} MODE;



typedef
 
  
 
BOOLEAN
KSYNCHRONIZE_ROUTINE (
      PVOID SynchronizeContext
    );
typedef KSYNCHRONIZE_ROUTINE *PKSYNCHRONIZE_ROUTINE;

typedef struct _KAPC {                  
    UCHAR Type;                         
    UCHAR SpareByte0;                   
    UCHAR Size;                         
    UCHAR SpareByte1;                   
    ULONG SpareLong0;                   
    struct _KTHREAD *Thread;            
    LIST_ENTRY ApcListEntry;            
    PVOID Reserved[3];                  
    PVOID NormalContext;                
    PVOID SystemArgument1;              
    PVOID SystemArgument2;              
    CCHAR ApcStateIndex;                
    KPROCESSOR_MODE ApcMode;            
    BOOLEAN Inserted;                   
} KAPC, *PKAPC, *PRKAPC;        














struct _KDPC;

 
 
 
 
 
typedef
void
KDEFERRED_ROUTINE (
      struct _KDPC *Dpc,
      PVOID DeferredContext,
      PVOID SystemArgument1,
      PVOID SystemArgument2
    );

typedef KDEFERRED_ROUTINE *PKDEFERRED_ROUTINE;


















































typedef enum _KDPC_IMPORTANCE {
    LowImportance,
    MediumImportance,
    HighImportance,
    MediumHighImportance
} KDPC_IMPORTANCE;

















typedef struct _KDPC {
    union {
        ULONG TargetInfoAsUlong;
        struct {
            UCHAR Type;
            UCHAR Importance;
            volatile USHORT Number;
        } ;
    } ;

    SINGLE_LIST_ENTRY DpcListEntry;
    KAFFINITY ProcessorHistory;
    PKDEFERRED_ROUTINE DeferredRoutine;
    PVOID DeferredContext;
    PVOID SystemArgument1;
    PVOID SystemArgument2;
     PVOID DpcData;
} KDPC, *PKDPC, *PRKDPC;





















#line 15900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















































#line 15954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





























typedef
     
#line 15986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
  struct _MDL {
    struct _MDL *Next;
    CSHORT Size;
    CSHORT MdlFlags;

    struct _EPROCESS *Process;
    PVOID MappedSystemVa;   
    PVOID StartVa;   
    ULONG ByteCount;
    ULONG ByteOffset;
} MDL, *PMDL;

typedef   MDL *PMDLX;










































#line 16042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 16048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 16059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 16067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 16071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 16075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 16086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 16098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _DISPATCHER_HEADER {
    union {
        union {
            volatile LONG Lock;
            LONG LockNV;
        } ;

        struct {                            
            UCHAR Type;                     
            UCHAR Signalling;
            UCHAR Size;
            UCHAR Reserved1;
        } ;

        struct {                            
            UCHAR TimerType;
            union {
                UCHAR TimerControlFlags;
                struct {
                    UCHAR Absolute : 1;
                    UCHAR Wake : 1;
                    UCHAR EncodedTolerableDelay : 6;
                } ;
            };

            UCHAR Hand;
            union {
                UCHAR TimerMiscFlags;
                struct {



                    UCHAR Index : 6;






#line 16143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

                    UCHAR Inserted : 1;
                    volatile UCHAR Expired : 1;
                } ;
            } ;
        } ;

        struct {                            
            UCHAR Timer2Type;
            union {
                UCHAR Timer2Flags;
                struct {
                    UCHAR Timer2Inserted : 1;
                    UCHAR Timer2Expiring : 1;
                    UCHAR Timer2CancelPending : 1;
                    UCHAR Timer2SetPending : 1;
                    UCHAR Timer2Running : 1;
                    UCHAR Timer2Disabled : 1;
                    UCHAR Timer2ReservedFlags : 2;
                } ;
            } ;

            UCHAR Timer2ComponentId;
            UCHAR Timer2RelativeId;
        } ;

        struct {                            
            UCHAR QueueType;
            union {
                UCHAR QueueControlFlags;
                struct {
                    UCHAR Abandoned : 1;
                    UCHAR DisableIncrement : 1;
                    UCHAR QueueReservedControlFlags : 6;
                } ;
            } ;

            UCHAR QueueSize;
            UCHAR QueueReserved;
        } ;

        struct {                            
            UCHAR ThreadType;
            UCHAR ThreadReserved;
            union {
                UCHAR ThreadControlFlags;
                struct {
                    UCHAR CycleProfiling : 1;
                    UCHAR CounterProfiling : 1;
                    UCHAR GroupScheduling : 1;
                    UCHAR AffinitySet : 1;
                    UCHAR Tagged : 1;
                    UCHAR EnergyProfiling: 1;



                    UCHAR ThreadReservedControlFlags : 2;






#line 16207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

                } ;
            } ;

            union {
                UCHAR DebugActive;



                struct {
                    BOOLEAN ActiveDR7 : 1;
                    BOOLEAN Instrumented : 1;
                    BOOLEAN Minimal : 1;
                    BOOLEAN Reserved4 : 3;
                    BOOLEAN UmsScheduled : 1;
                    BOOLEAN UmsPrimary : 1;
                } ;

#line 16226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

            } ;
        } ;

        struct {                         
            UCHAR MutantType;
            UCHAR MutantSize;
            BOOLEAN DpcActive;
            UCHAR MutantReserved;
        } ;
    } ;

    LONG SignalState;                   
    LIST_ENTRY WaitListHead;            
} DISPATCHER_HEADER, *PDISPATCHER_HEADER;






typedef struct _KEVENT {
    DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT, *PRKEVENT;









typedef struct _KGATE {
    DISPATCHER_HEADER Header;
} KGATE, *PKGATE;







typedef struct _KTIMER {
    DISPATCHER_HEADER Header;
    ULARGE_INTEGER DueTime;
    LIST_ENTRY TimerListEntry;
    struct _KDPC *Dpc;



    ULONG Processor;

#line 16280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    ULONG Period;
} KTIMER, *PKTIMER, *PRKTIMER;






typedef enum _LOCK_OPERATION {
    IoReadAccess,
    IoWriteAccess,
    IoModifyAccess
} LOCK_OPERATION;




typedef struct _FAST_MUTEX {
    LONG Count;
    PVOID Owner;
    ULONG Contention;
    KEVENT Event;
    ULONG OldIrql;
} FAST_MUTEX, *PFAST_MUTEX, KGUARDED_MUTEX, *PKGUARDED_MUTEX;


























































































































































































































































































































































































































































































































































































































































#line 16940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














UCHAR
__inbyte (
      USHORT Port
    );

USHORT
__inword (
      USHORT Port
    );

ULONG
__indword (
      USHORT Port
    );

void
__outbyte (
      USHORT Port,
      UCHAR Data
    );

void
__outword (
      USHORT Port,
      USHORT Data
    );

void
__outdword (
      USHORT Port,
      ULONG Data
    );

void
__inbytestring (
      USHORT Port,
      PUCHAR Buffer,
      ULONG Count
    );

void
__inwordstring (
      USHORT Port,
      PUSHORT Buffer,
      ULONG Count
    );

void
__indwordstring (
      USHORT Port,
      PULONG Buffer,
      ULONG Count
    );

void
__outbytestring (
      USHORT Port,
      PUCHAR Buffer,
      ULONG Count
    );

void
__outwordstring (
      USHORT Port,
      PUSHORT Buffer,
      ULONG Count
    );

void
__outdwordstring (
      USHORT Port,
      PULONG Buffer,
      ULONG Count
    );

#pragma intrinsic(__inbyte)
#pragma intrinsic(__inword)
#pragma intrinsic(__indword)
#pragma intrinsic(__outbyte)
#pragma intrinsic(__outword)
#pragma intrinsic(__outdword)
#pragma intrinsic(__inbytestring)
#pragma intrinsic(__inwordstring)
#pragma intrinsic(__indwordstring)
#pragma intrinsic(__outbytestring)
#pragma intrinsic(__outwordstring)
#pragma intrinsic(__outdwordstring)





#line 17047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef ULONG PFN_COUNT;
typedef LONG64 SPFN_NUMBER, *PSPFN_NUMBER;
typedef ULONG64 PFN_NUMBER, *PPFN_NUMBER;


























 
 
ULONG64
__readcr8 (
    void
    );



 
 
void
__writecr8 (
      ULONG64 Data
    );

#pragma intrinsic(__readcr8)
#pragma intrinsic(__writecr8)























__forceinline
UCHAR
READ_REGISTER_UCHAR (
        volatile UCHAR *Register
    )
{
    _ReadWriteBarrier();
    return *Register;
}

__forceinline
USHORT
READ_REGISTER_USHORT (
        volatile USHORT *Register
    )
{
    _ReadWriteBarrier();
    return *Register;
}

__forceinline
ULONG
READ_REGISTER_ULONG (
        volatile ULONG *Register
    )
{
    _ReadWriteBarrier();
    return *Register;
}

__forceinline
ULONG64
READ_REGISTER_ULONG64 (
        volatile ULONG64 *Register
    )
{
    _ReadWriteBarrier();
    return *Register;
}

__forceinline
void
READ_REGISTER_BUFFER_UCHAR (
        volatile UCHAR *Register,
      PUCHAR Buffer,
      ULONG Count
    )
{
    _ReadWriteBarrier();
    __movsb(Buffer, (PUCHAR)Register, Count);
    return;
}

__forceinline
void
READ_REGISTER_BUFFER_USHORT (
        volatile USHORT *Register,
      PUSHORT Buffer,
      ULONG Count
    )
{
    _ReadWriteBarrier();
    __movsw(Buffer, (PUSHORT)Register, Count);
    return;
}

__forceinline
void
READ_REGISTER_BUFFER_ULONG (
        volatile ULONG *Register,
      PULONG Buffer,
      ULONG Count
    )
{
    _ReadWriteBarrier();
    __movsd(Buffer, (PULONG)Register, Count);
    return;
}

__forceinline
void
READ_REGISTER_BUFFER_ULONG64 (
        volatile ULONG64 *Register,
      PULONG64 Buffer,
      ULONG Count
    )
{
    _ReadWriteBarrier();
    __movsq(Buffer, (PULONG64)Register, Count);
    return;
}

__forceinline
void
WRITE_REGISTER_UCHAR (
        volatile UCHAR *Register,
      UCHAR Value
    )
{

    *Register = Value;
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_USHORT (
        volatile USHORT *Register,
      USHORT Value
    )
{

    *Register = Value;
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_ULONG (
        volatile ULONG *Register,
      ULONG Value
    )
{

    *Register = Value;
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_ULONG64 (
        volatile ULONG64 *Register,
      ULONG64 Value
    )
{

    *Register = Value;
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_BUFFER_UCHAR (
        volatile UCHAR *Register,
      PUCHAR Buffer,
      ULONG Count
    )
{

    __movsb((PUCHAR)Register, Buffer, Count);
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_BUFFER_USHORT (
        volatile USHORT *Register,
      PUSHORT Buffer,
      ULONG Count
    )
{

    __movsw((PUSHORT)Register, Buffer, Count);
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_BUFFER_ULONG (
        volatile ULONG *Register,
      PULONG Buffer,
      ULONG Count
    )
{

    __movsd((PULONG)Register, Buffer, Count);
    __faststorefence();
    return;
}

__forceinline
void
WRITE_REGISTER_BUFFER_ULONG64 (
        volatile ULONG64 *Register,
      PULONG64 Buffer,
      ULONG Count
    )
{

    __movsq((PULONG64)Register, Buffer, Count);
    __faststorefence();
    return;
}




__forceinline
UCHAR
READ_PORT_UCHAR (
        PUCHAR Port
    )

{
    UCHAR Result;

    _ReadWriteBarrier();
    Result = __inbyte((USHORT)((ULONG_PTR)Port));
    _ReadWriteBarrier();
    return Result;
}

__forceinline
USHORT
READ_PORT_USHORT (
        PUSHORT Port
    )

{
    USHORT Result;

    _ReadWriteBarrier();
    Result = __inword((USHORT)((ULONG_PTR)Port));
    _ReadWriteBarrier();
    return Result;
}

__forceinline
ULONG
READ_PORT_ULONG (
        PULONG Port
    )

{
    ULONG Result;

    _ReadWriteBarrier();
    Result = __indword((USHORT)((ULONG_PTR)Port));
    _ReadWriteBarrier();
    return Result;
}


__forceinline
void
READ_PORT_BUFFER_UCHAR (
        PUCHAR Port,
      PUCHAR Buffer,
      ULONG Count
    )

{
    _ReadWriteBarrier();
    __inbytestring((USHORT)((ULONG_PTR)Port), Buffer, Count);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
READ_PORT_BUFFER_USHORT (
        PUSHORT Port,
      PUSHORT Buffer,
      ULONG Count
    )

{
    _ReadWriteBarrier();
    __inwordstring((USHORT)((ULONG_PTR)Port), Buffer, Count);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
READ_PORT_BUFFER_ULONG (
        PULONG Port,
      PULONG Buffer,
      ULONG Count
    )

{
    _ReadWriteBarrier();
    __indwordstring((USHORT)((ULONG_PTR)Port), Buffer, Count);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
WRITE_PORT_UCHAR (
        PUCHAR Port,
      UCHAR Value
    )

{
    _ReadWriteBarrier();
    __outbyte((USHORT)((ULONG_PTR)Port), Value);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
WRITE_PORT_USHORT (
        PUSHORT Port,
      USHORT Value
    )

{
    _ReadWriteBarrier();
    __outword((USHORT)((ULONG_PTR)Port), Value);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
WRITE_PORT_ULONG (
        PULONG Port,
      ULONG Value
    )

{
    _ReadWriteBarrier();
    __outdword((USHORT)((ULONG_PTR)Port), Value);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
WRITE_PORT_BUFFER_UCHAR (
        PUCHAR Port,
      PUCHAR Buffer,
      ULONG Count
    )

{
    _ReadWriteBarrier();
    __outbytestring((USHORT)((ULONG_PTR)Port), Buffer, Count);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
WRITE_PORT_BUFFER_USHORT (
        PUSHORT Port,
      PUSHORT Buffer,
      ULONG Count
    )

{
    _ReadWriteBarrier();
    __outwordstring((USHORT)((ULONG_PTR)Port), Buffer, Count);
    _ReadWriteBarrier();
    return;
}

__forceinline
void
WRITE_PORT_BUFFER_ULONG (
        PULONG Port,
      PULONG Buffer,
      ULONG Count
    )

{
    _ReadWriteBarrier();
    __outdwordstring((USHORT)((ULONG_PTR)Port), Buffer, Count);
    _ReadWriteBarrier();
    return;
}








#line 17513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#pragma deprecated(KeGetDcacheFillSize)      
#line 17525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













#line 17539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 17543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef struct _KFLOATING_SAVE {
    ULONG Dummy;
} KFLOATING_SAVE, *PKFLOATING_SAVE;








__forceinline
ULONG
KeGetCurrentProcessorIndex (
    void
    )

{

    return __readgsdword(0x1a4);
}

#line 17577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




__forceinline
void
KeMemoryBarrier (
    void
    )

















{

    __faststorefence();
    return;
}































#line 17640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


#pragma warning(push)
#pragma warning(suppress:28104 28161 6001 6101) 

 
 


__forceinline
NTSTATUS
KeSaveFloatingPointState (
      PKFLOATING_SAVE FloatSave
    )
{

    (FloatSave);

    return ((NTSTATUS)0x00000000L);
}

#pragma warning(pop)

#pragma warning(push)
#pragma warning (suppress:28103 28162) 

 
 
 

__forceinline
NTSTATUS
KeRestoreFloatingPointState (
      PKFLOATING_SAVE FloatSave
    )
{

    (FloatSave);

    return ((NTSTATUS)0x00000000L);
}

#pragma warning(pop)


#line 17686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










 
 
__forceinline
KIRQL
KeGetCurrentIrql (
    void
    )

















{

    return (KIRQL)__readcr8();
}





















#line 17747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__forceinline
void
KzLowerIrql (
          KIRQL NewIrql
   )

















{

    (((void) 0), ((!(KeGetCurrentIrql() >= NewIrql)) ? (__annotation(L"Debug", L"AssertFail", L"KeGetCurrentIrql() >= NewIrql"), __int2c(), 0) : 1));

    __writecr8(NewIrql);
    return;
}

 
 
 
__forceinline
KIRQL
KzRaiseIrql (
      KIRQL NewIrql
    )


















{

    KIRQL OldIrql;

    OldIrql = KeGetCurrentIrql();

    (((void) 0), ((!(OldIrql <= NewIrql)) ? (__annotation(L"Debug", L"AssertFail", L"OldIrql <= NewIrql"), __int2c(), 0) : 1));

    __writecr8(NewIrql);
    return OldIrql;
}




#line 17821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 17823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 17829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














































































































































































































































































































































































































































































































































































































































































































































































#line 18580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





































#line 18618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 18624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





































#line 19513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    UCHAR  Level;
    UCHAR  Associativity;
    USHORT LineSize;
    ULONG  Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR   ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            UCHAR Flags;
        } ProcessorCore;
        struct {
            ULONG NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG  Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    UCHAR Flags;
    UCHAR EfficiencyClass;
    UCHAR Reserved[20];
    USHORT GroupCount;
      GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    ULONG NodeNumber;
    UCHAR Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    UCHAR Level;
    UCHAR Associativity;
    USHORT LineSize;
    ULONG CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    UCHAR Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    UCHAR MaximumProcessorCount;
    UCHAR ActiveProcessorCount;
    UCHAR Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    USHORT MaximumGroupCount;
    USHORT ActiveGroupCount;
    UCHAR Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

  struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    ULONG Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

typedef enum _CPU_SET_INFORMATION_TYPE {
    CpuSetInformation
} CPU_SET_INFORMATION_TYPE, *PCPU_SET_INFORMATION_TYPE;

  struct _SYSTEM_CPU_SET_INFORMATION {
    ULONG Size;
    CPU_SET_INFORMATION_TYPE Type;
    union {
        struct {
            ULONG Id;
            USHORT Group;
            UCHAR LogicalProcessorIndex;
            UCHAR CoreIndex;
            UCHAR LastLevelCacheIndex;
            UCHAR NumaNodeIndex;
            UCHAR EfficiencyClass;
            union {






                UCHAR AllFlags;
                struct {
                    UCHAR Parked : 1;
                    UCHAR Allocated : 1;
                    UCHAR AllocatedToTargetProcess : 1;
                    UCHAR RealTime : 1;
                    UCHAR ReservedFlags : 4;
                } ;
            } ;
            ULONG Reserved;
            ULONG64 AllocationTag;
        } CpuSet;
    } ;
};

typedef struct _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION;









































typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE {
    StandardDesign,                 
    NEC98x86,                       
    EndAlternatives                 
} ALTERNATIVE_ARCHITECTURE_TYPE;







#line 19723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 19727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 19731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 19735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 19737 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





































typedef struct _EXCEPTION_RECORD {
    NTSTATUS ExceptionCode;
    ULONG ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    ULONG NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    NTSTATUS ExceptionCode;
    ULONG ExceptionFlags;
    ULONG ExceptionRecord;
    ULONG ExceptionAddress;
    ULONG NumberParameters;
    ULONG ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    NTSTATUS ExceptionCode;
    ULONG ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG NumberParameters;
    ULONG __unusedAlignment;
    ULONG64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
















#line 19829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 19835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef enum _KINTERRUPT_MODE {
    LevelSensitive,
    Latched
} KINTERRUPT_MODE;



typedef enum _KINTERRUPT_POLARITY {
    InterruptPolarityUnknown,
    InterruptActiveHigh,
    InterruptRisingEdge = InterruptActiveHigh,
    InterruptActiveLow,
    InterruptFallingEdge = InterruptActiveLow,





#line 19863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 19870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} KINTERRUPT_POLARITY, *PKINTERRUPT_POLARITY;







typedef enum _KWAIT_REASON {
    Executive,
    FreePage,
    PageIn,
    PoolAllocation,
    DelayExecution,
    Suspended,
    UserRequest,
    WrExecutive,
    WrFreePage,
    WrPageIn,
    WrPoolAllocation,
    WrDelayExecution,
    WrSuspended,
    WrUserRequest,
    WrSpare0,
    WrQueue,
    WrLpcReceive,
    WrLpcReply,
    WrVirtualMemory,
    WrPageOut,
    WrRendezvous,
    WrKeyedEvent,
    WrTerminated,
    WrProcessInSwap,
    WrCpuRateControl,
    WrCalloutStack,
    WrKernel,
    WrResource,
    WrPushLock,
    WrMutex,
    WrQuantumEnd,
    WrDispatchInt,
    WrPreempted,
    WrYieldExecution,
    WrFastMutex,
    WrGuardedMutex,
    WrRundown,
    WrAlertByThreadId,
    WrDeferredPreempt,
    MaximumWaitReason
} KWAIT_REASON;



typedef struct _KWAIT_BLOCK {
    LIST_ENTRY WaitListEntry;
    UCHAR WaitType;
    volatile UCHAR BlockState;
    USHORT WaitKey;



    LONG SpareLong;

#line 19935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    union {
        struct _KTHREAD *Thread;
        struct _KQUEUE *NotificationQueue;
    };

    PVOID Object;
    PVOID SparePtr;

} KWAIT_BLOCK, *PKWAIT_BLOCK, *PRKWAIT_BLOCK;





typedef
 
 
void
KSTART_ROUTINE (
      PVOID StartContext
    );
typedef KSTART_ROUTINE *PKSTART_ROUTINE;











typedef struct _KDEVICE_QUEUE {
    CSHORT Type;
    CSHORT Size;
    LIST_ENTRY DeviceListHead;
    KSPIN_LOCK Lock;



    union {
        BOOLEAN Busy;
        struct {
            LONG64 Reserved : 8;
            LONG64 Hint : 56;
        };
    };





#line 19990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} KDEVICE_QUEUE, *PKDEVICE_QUEUE, *PRKDEVICE_QUEUE;

typedef struct _KDEVICE_QUEUE_ENTRY {
    LIST_ENTRY DeviceListEntry;
    ULONG SortKey;
    BOOLEAN Inserted;
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY, *PRKDEVICE_QUEUE_ENTRY;






typedef
 
  
 
BOOLEAN
KSERVICE_ROUTINE (
      struct _KINTERRUPT *Interrupt,
      PVOID ServiceContext
    );

typedef KSERVICE_ROUTINE *PKSERVICE_ROUTINE;

typedef
 
 
BOOLEAN
KMESSAGE_SERVICE_ROUTINE (
      struct _KINTERRUPT *Interrupt,
      PVOID ServiceContext,
      ULONG MessageID
    );

typedef KMESSAGE_SERVICE_ROUTINE *PKMESSAGE_SERVICE_ROUTINE;





typedef struct _KMUTANT {
    DISPATCHER_HEADER Header;
    LIST_ENTRY MutantListEntry;
    struct _KTHREAD *OwnerThread;
    BOOLEAN Abandoned;
    UCHAR ApcDisable;
} KMUTANT, *PKMUTANT, *PRKMUTANT, KMUTEX, *PKMUTEX, *PRKMUTEX;








typedef struct _KSEMAPHORE {
    DISPATCHER_HEADER Header;
    LONG Limit;
} KSEMAPHORE, *PKSEMAPHORE, *PRKSEMAPHORE;









__declspec(dllimport)
void
KeInitializeDpc (
        PRKDPC Dpc,
      PKDEFERRED_ROUTINE DeferredRoutine,
        PVOID DeferredContext
    );
#line 20068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
KeInitializeThreadedDpc (
      PRKDPC Dpc,
      PKDEFERRED_ROUTINE DeferredRoutine,
      PVOID DeferredContext
    );
#line 20078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
BOOLEAN
KeInsertQueueDpc (
      PRKDPC Dpc,
      PVOID SystemArgument1,
        PVOID SystemArgument2
    );
#line 20088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeRemoveQueueDpc (
      PRKDPC Dpc
    );
#line 20097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 20107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




__declspec(dllimport)
NTSTATUS
KeInitializeCrashDumpHeader(
      ULONG DumpType,
      ULONG Flags,
      PVOID Buffer,
      ULONG BufferSize,
      PULONG BufferNeeded
    );
#line 20121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
KeSetImportanceDpc (
      PRKDPC Dpc,
      KDPC_IMPORTANCE Importance
    );
#line 20130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
KeSetTargetProcessorDpc (
      PRKDPC Dpc,
      CCHAR Number
    );
#line 20139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void
KeFlushQueuedDpcs (
    void
    );
#line 20150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
__declspec(dllimport)
void
KeInitializeDeviceQueue (
      PKDEVICE_QUEUE DeviceQueue
    );
#line 20163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeInsertDeviceQueue (
      PKDEVICE_QUEUE DeviceQueue,
      PKDEVICE_QUEUE_ENTRY DeviceQueueEntry
    );
#line 20173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeInsertByKeyDeviceQueue (
      PKDEVICE_QUEUE DeviceQueue,
      PKDEVICE_QUEUE_ENTRY DeviceQueueEntry,
      ULONG SortKey
    );
#line 20184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PKDEVICE_QUEUE_ENTRY
KeRemoveDeviceQueue (
      PKDEVICE_QUEUE DeviceQueue
    );
#line 20193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PKDEVICE_QUEUE_ENTRY
KeRemoveByKeyDeviceQueue (
      PKDEVICE_QUEUE DeviceQueue,
      ULONG SortKey
    );
#line 20203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PKDEVICE_QUEUE_ENTRY
KeRemoveByKeyDeviceQueueIfBusy (
      PKDEVICE_QUEUE DeviceQueue,
      ULONG SortKey
    );
#line 20213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeRemoveEntryDeviceQueue (
      PKDEVICE_QUEUE DeviceQueue,
      PKDEVICE_QUEUE_ENTRY DeviceQueueEntry
    );
#line 20223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
__declspec(dllimport)
BOOLEAN
KeSynchronizeExecution (
      PKINTERRUPT Interrupt,
      PKSYNCHRONIZE_ROUTINE SynchronizeRoutine,
        PVOID SynchronizeContext
    );
#line 20235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




  
 
  
__declspec(dllimport)
KIRQL
KeAcquireInterruptSpinLock (
      PKINTERRUPT Interrupt
    );
#line 20248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




  
__declspec(dllimport)
void
KeReleaseInterruptSpinLock (
      PKINTERRUPT Interrupt,
        KIRQL OldIrql
    );
#line 20260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
KeInitializeEvent (
      PRKEVENT Event,
      EVENT_TYPE Type,
      BOOLEAN State
    );

 
__declspec(dllimport)
void
KeClearEvent (
      PRKEVENT Event
    );



 
__declspec(dllimport)
LONG
KeReadStateEvent (
      PRKEVENT Event
    );
#line 20291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG
KeResetEvent (
      PRKEVENT Event
    );
#line 20300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 20308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
LONG
KeSetEvent (
      PRKEVENT Event,
      KPRIORITY Increment,
        BOOLEAN Wait
    );
#line 20316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






__declspec(dllimport)
void
KeInitializeMutex (
      PRKMUTEX Mutex,
      ULONG Level
    );
#line 20329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG
KeReadStateMutex (
      PRKMUTEX Mutex
    );
#line 20338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 20346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
LONG
KeReleaseMutex (
      PRKMUTEX Mutex,
      BOOLEAN Wait
    );
#line 20353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
__declspec(dllimport)
void
KeInitializeSemaphore (
      PRKSEMAPHORE Semaphore,
      LONG Count,
      LONG Limit
    );
#line 20368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG
KeReadStateSemaphore (
      PRKSEMAPHORE Semaphore
    );
#line 20377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 20385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
LONG
KeReleaseSemaphore (
      PRKSEMAPHORE Semaphore,
      KPRIORITY Increment,
      LONG Adjustment,
        BOOLEAN Wait
    );
#line 20394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
NTSTATUS
KeDelayExecutionThread (
      KPROCESSOR_MODE WaitMode,
      BOOLEAN Alertable,
      PLARGE_INTEGER Interval
    );
#line 20407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
KPRIORITY
KeQueryPriorityThread (
      PKTHREAD Thread
    );
#line 20417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
ULONG
KeQueryRuntimeThread (
      PKTHREAD Thread,
      PULONG UserTime
    );
#line 20427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
ULONG64
KeQueryTotalCycleTimeThread (
      PKTHREAD Thread,
      PULONG64 CycleTimeStamp
    );
#line 20438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
KeSetTargetProcessorDpcEx (
      PKDPC Dpc,
      PPROCESSOR_NUMBER ProcNumber
    );
#line 20449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
void
KeRevertToUserAffinityThread (
    void
    );
#line 20459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
void
KeSetSystemAffinityThread (
      KAFFINITY Affinity
    );
#line 20469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
void
KeRevertToUserAffinityThreadEx (
      KAFFINITY Affinity
    );
#line 20479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
void
KeSetSystemGroupAffinityThread (
      PGROUP_AFFINITY Affinity,
      PGROUP_AFFINITY PreviousAffinity
    );

 
 
__declspec(dllimport)
void
KeRevertToUserGroupAffinityThread (
      PGROUP_AFFINITY PreviousAffinity
    );
#line 20498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
KAFFINITY
KeSetSystemAffinityThreadEx (
      KAFFINITY Affinity
    );
#line 20508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
KPRIORITY
KeSetPriorityThread (
      PKTHREAD Thread,
      KPRIORITY Priority
    );
#line 20519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 
__declspec(dllimport)
void
KeEnterCriticalRegion (
    void
    );
#line 20531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
KeLeaveCriticalRegion (
    void
    );
#line 20541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
KeEnterGuardedRegion (
    void
    );
#line 20551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
KeLeaveGuardedRegion (
    void
    );
#line 20561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
BOOLEAN
KeAreApcsDisabled (
    void
    );
#line 20571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
__declspec(dllimport)
void
KeInitializeTimer (
      PKTIMER Timer
    );
#line 20586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
KeInitializeTimerEx (
      PKTIMER Timer,
      TIMER_TYPE Type
    );
#line 20596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeCancelTimer (
      PKTIMER
    );
#line 20605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeReadStateTimer (
      PKTIMER Timer
    );
#line 20614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeSetTimer (
      PKTIMER Timer,
      LARGE_INTEGER DueTime,
      PKDPC Dpc
    );
#line 20625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeSetTimerEx (
      PKTIMER Timer,
      LARGE_INTEGER DueTime,
      LONG Period,
      PKDPC Dpc
    );
#line 20637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeSetCoalescableTimer (
      PKTIMER Timer,
      LARGE_INTEGER DueTime,
      ULONG Period,
      ULONG TolerableDelay,
      PKDPC Dpc
    );
#line 20650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 


__declspec(dllimport)
NTSTATUS
KeWaitForMultipleObjects (
      ULONG Count,
      PVOID Object[],
        WAIT_TYPE WaitType,
        KWAIT_REASON WaitReason,
        KPROCESSOR_MODE WaitMode,
      BOOLEAN Alertable,
      PLARGE_INTEGER Timeout,
      PKWAIT_BLOCK WaitBlockArray
    );
#line 20671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 


__declspec(dllimport)
NTSTATUS
KeWaitForSingleObject (
        PVOID Object,
        KWAIT_REASON WaitReason,
        KPROCESSOR_MODE WaitMode,
      BOOLEAN Alertable,
      PLARGE_INTEGER Timeout
    );
#line 20686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef
 
 
 
ULONG_PTR
KIPI_BROADCAST_WORKER (
      ULONG_PTR Argument
    );

typedef KIPI_BROADCAST_WORKER *PKIPI_BROADCAST_WORKER;


 
 
__declspec(dllimport)
ULONG_PTR
KeIpiGenericCall (
      PKIPI_BROADCAST_WORKER BroadcastFunction,
      ULONG_PTR Context
    );
#line 20712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















#line 20733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

__forceinline
void
__stdcall
KzInitializeSpinLock (
      PKSPIN_LOCK SpinLock
    )

















{

    *SpinLock = 0;
    return;
}



#line 20766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
BOOLEAN

KeTestSpinLock (
      PKSPIN_LOCK SpinLock
    );
#line 20778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
__declspec(dllimport)
BOOLEAN

KeTryToAcquireSpinLockAtDpcLevel (
      
    
    PKSPIN_LOCK SpinLock
    );
#line 20792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





























































#line 20854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













 
__declspec(dllimport)
void
KeAcquireSpinLockAtDpcLevel (
      PKSPIN_LOCK SpinLock
    );
#line 20874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
 
__declspec(dllimport)
KIRQL
KeAcquireSpinLockRaiseToDpc (
      PKSPIN_LOCK SpinLock
    );
#line 20887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void
KeReleaseSpinLock (
      PKSPIN_LOCK SpinLock,
        KIRQL NewIrql
    );
#line 20899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void
KeReleaseSpinLockFromDpcLevel (
      PKSPIN_LOCK SpinLock
    );
#line 20910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 20912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
 
__declspec(dllimport)
KIRQL

KeAcquireSpinLockForDpc (
      PKSPIN_LOCK SpinLock
    );
#line 20927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void

KeReleaseSpinLockForDpc (
      PKSPIN_LOCK SpinLock,
        KIRQL OldIrql
    );
#line 20940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














 
 
 
__declspec(dllimport)
void

KeAcquireInStackQueuedSpinLock (
      PKSPIN_LOCK SpinLock,
      PKLOCK_QUEUE_HANDLE LockHandle
    );
#line 20965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
void

KeReleaseInStackQueuedSpinLock (
      PKLOCK_QUEUE_HANDLE LockHandle
    );
#line 20978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










 
__declspec(dllimport)
void

KeAcquireInStackQueuedSpinLockAtDpcLevel (
      PKSPIN_LOCK SpinLock,
      PKLOCK_QUEUE_HANDLE LockHandle
    );
#line 20997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void

KeReleaseInStackQueuedSpinLockFromDpcLevel (
      PKLOCK_QUEUE_HANDLE LockHandle
    );
#line 21009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










 
 
__declspec(dllimport)
void

KeAcquireInStackQueuedSpinLockForDpc (
      PKSPIN_LOCK SpinLock,
      PKLOCK_QUEUE_HANDLE LockHandle
    );
#line 21029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
void

KeReleaseInStackQueuedSpinLockForDpc (
      PKLOCK_QUEUE_HANDLE LockHandle
    );
#line 21042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _KDPC_WATCHDOG_INFORMATION {
    ULONG DpcTimeLimit;
    ULONG DpcTimeCount;
    ULONG DpcWatchdogLimit;
    ULONG DpcWatchdogCount;
    ULONG Reserved;
} KDPC_WATCHDOG_INFORMATION, *PKDPC_WATCHDOG_INFORMATION;


 
__declspec(dllimport)
NTSTATUS
KeQueryDpcWatchdogInformation (
      PKDPC_WATCHDOG_INFORMATION WatchdogInformation
    );
#line 21063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _KBUGCHECK_BUFFER_DUMP_STATE {
    BufferEmpty,
    BufferInserted,
    BufferStarted,
    BufferFinished,
    BufferIncomplete
} KBUGCHECK_BUFFER_DUMP_STATE;

typedef
 
 
void
KBUGCHECK_CALLBACK_ROUTINE (
     PVOID Buffer,
     ULONG Length
    );
typedef KBUGCHECK_CALLBACK_ROUTINE *PKBUGCHECK_CALLBACK_ROUTINE;

typedef struct _KBUGCHECK_CALLBACK_RECORD {
    LIST_ENTRY Entry;
    PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine;
      PVOID Buffer;
    ULONG Length;
    PUCHAR Component;
    ULONG_PTR Checksum;
    UCHAR State;
} KBUGCHECK_CALLBACK_RECORD, *PKBUGCHECK_CALLBACK_RECORD;





 
__declspec(dllimport)
BOOLEAN
KeDeregisterBugCheckCallback (
      PKBUGCHECK_CALLBACK_RECORD CallbackRecord
    );
#line 21103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeRegisterBugCheckCallback (
      PKBUGCHECK_CALLBACK_RECORD CallbackRecord,
      PKBUGCHECK_CALLBACK_ROUTINE CallbackRoutine,
      PVOID Buffer,
      ULONG Length,
      PUCHAR Component
    );
#line 21116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _KBUGCHECK_CALLBACK_REASON {
    KbCallbackInvalid,
    KbCallbackReserved1,
    KbCallbackSecondaryDumpData,
    KbCallbackDumpIo,
    KbCallbackAddPages,
    KbCallbackSecondaryMultiPartDumpData,
    KbCallbackRemovePages
} KBUGCHECK_CALLBACK_REASON;

typedef
 
 
void
KBUGCHECK_REASON_CALLBACK_ROUTINE (
      KBUGCHECK_CALLBACK_REASON Reason,
      struct _KBUGCHECK_REASON_CALLBACK_RECORD* Record,
      PVOID ReasonSpecificData,
      ULONG ReasonSpecificDataLength
    );
typedef KBUGCHECK_REASON_CALLBACK_ROUTINE *PKBUGCHECK_REASON_CALLBACK_ROUTINE;

KBUGCHECK_REASON_CALLBACK_ROUTINE BugCheckSecondaryMultiPartDumpDataCallback;

typedef struct _KBUGCHECK_REASON_CALLBACK_RECORD {
    LIST_ENTRY Entry;
    PKBUGCHECK_REASON_CALLBACK_ROUTINE CallbackRoutine;
    PUCHAR Component;
    ULONG_PTR Checksum;
    KBUGCHECK_CALLBACK_REASON Reason;
    UCHAR State;
} KBUGCHECK_REASON_CALLBACK_RECORD, *PKBUGCHECK_REASON_CALLBACK_RECORD;

typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA {
     PVOID InBuffer;
     ULONG InBufferLength;
     ULONG MaximumAllowed;
     GUID Guid;
     PVOID OutBuffer;
     ULONG OutBufferLength;
} KBUGCHECK_SECONDARY_DUMP_DATA, *PKBUGCHECK_SECONDARY_DUMP_DATA;

typedef struct _KBUGCHECK_SECONDARY_DUMP_DATA_EX {
         PVOID InBuffer;
         ULONG InBufferLength;
         ULONG MaximumAllowed;
        GUID  Guid;
      PVOID OutBuffer;
      ULONG OutBufferLength;
      PVOID Context;
      ULONG Flags;         
         ULONG DumpType;      
         ULONG BugCheckCode;
         ULONG_PTR BugCheckParameter1;
         ULONG_PTR BugCheckParameter2;
         ULONG_PTR BugCheckParameter3;
         ULONG_PTR BugCheckParameter4;
} KBUGCHECK_SECONDARY_DUMP_DATA_EX, *PKBUGCHECK_SECONDARY_DUMP_DATA_EX;




typedef enum _KBUGCHECK_DUMP_IO_TYPE {
    KbDumpIoInvalid,
    KbDumpIoHeader,
    KbDumpIoBody,
    KbDumpIoSecondaryData,
    KbDumpIoComplete
} KBUGCHECK_DUMP_IO_TYPE;

typedef struct _KBUGCHECK_DUMP_IO {
     ULONG64 Offset;
     PVOID Buffer;
     ULONG BufferLength;
     KBUGCHECK_DUMP_IO_TYPE Type;
} KBUGCHECK_DUMP_IO, *PKBUGCHECK_DUMP_IO;









typedef struct _KBUGCHECK_ADD_PAGES {
      PVOID Context;      
      ULONG Flags;        
      ULONG BugCheckCode;
      ULONG_PTR Address;
      ULONG_PTR Count;
} KBUGCHECK_ADD_PAGES, *PKBUGCHECK_ADD_PAGES;









typedef struct _KBUGCHECK_REMOVE_PAGES {
      PVOID Context;      
      ULONG Flags;        
      ULONG BugCheckCode;
      ULONG_PTR Address;
      ULONG_PTR Count;
} KBUGCHECK_REMOVE_PAGES, *PKBUGCHECK_REMOVE_PAGES;























 
__declspec(dllimport)
BOOLEAN
KeDeregisterBugCheckReasonCallback (
      PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord
    );
#line 21255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
KeRegisterBugCheckReasonCallback (
      PKBUGCHECK_REASON_CALLBACK_RECORD CallbackRecord,
      PKBUGCHECK_REASON_CALLBACK_ROUTINE CallbackRoutine,
      KBUGCHECK_CALLBACK_REASON Reason,
      PUCHAR Component
    );
#line 21267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef
 
 
BOOLEAN
NMI_CALLBACK(
      PVOID Context,
      BOOLEAN Handled
    );
typedef NMI_CALLBACK *PNMI_CALLBACK;


 
__declspec(dllimport)
PVOID
KeRegisterNmiCallback (
      PNMI_CALLBACK CallbackRoutine,
      PVOID Context
    );
#line 21287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
KeDeregisterNmiCallback (
      PVOID Handle
    );
#line 21296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 21307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 21317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 21326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 21335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 21337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
#line 21343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
KeBugCheckEx(
      ULONG BugCheckCode,
      ULONG_PTR BugCheckParameter1,
      ULONG_PTR BugCheckParameter2,
      ULONG_PTR BugCheckParameter3,
      ULONG_PTR BugCheckParameter4
    );
#line 21355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



















#line 21375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 21383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 21391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
ULONG64
KeQueryUnbiasedInterruptTimePrecise (
      PULONG64 QpcTimeStamp
    );
#line 21399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeQueryTimeIncrement (
    void
    );
#line 21407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONGLONG
KeQueryUnbiasedInterruptTime (
    void
    );
#line 21415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeGetRecommendedSharedDataAlignment (
    void
    );
#line 21423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




__declspec(dllimport)
KAFFINITY
KeQueryActiveProcessors (
    void
    );
#line 21433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeQueryActiveProcessorCount (
      PKAFFINITY ActiveProcessors
    );
#line 21441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeQueryActiveProcessorCountEx (
      USHORT GroupNumber
    );
#line 21449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeQueryMaximumProcessorCount (
    void
    );
#line 21457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeQueryMaximumProcessorCountEx (
      USHORT GroupNumber
    );
#line 21465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
USHORT
KeQueryActiveGroupCount (
    void
    );
#line 21473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
USHORT
KeQueryMaximumGroupCount (
    void
    );
#line 21481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
KAFFINITY
KeQueryGroupAffinity (
      USHORT GroupNumber
    );
#line 21489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
KeGetCurrentProcessorNumberEx (
      PPROCESSOR_NUMBER ProcNumber
    );
#line 21497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
KeQueryNodeActiveAffinity (
      USHORT NodeNumber,
      PGROUP_AFFINITY Affinity,
      PUSHORT Count
    );
#line 21507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
USHORT
KeQueryNodeMaximumProcessorCount (
      USHORT NodeNumber
    );
#line 21515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
USHORT
KeQueryHighestNodeNumber (
    void
    );
#line 21523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
USHORT
KeGetCurrentNodeNumber (
    void
    );
#line 21531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 

__declspec(dllimport)
NTSTATUS
KeQueryLogicalProcessorRelationship (
      PPROCESSOR_NUMBER ProcessorNumber,
      LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Information,
     PULONG Length
    );
#line 21544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__declspec(dllimport)
LOGICAL
KeShouldYieldProcessor (
    void
    );






#line 21558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




typedef enum _MEMORY_CACHING_TYPE_ORIG {
    MmFrameBufferCached = 2
} MEMORY_CACHING_TYPE_ORIG;

typedef enum _MEMORY_CACHING_TYPE {
    MmNonCached = 0,
    MmCached = 1,
    MmWriteCombined = MmFrameBufferCached,
    MmHardwareCoherentCached,
    MmNonCachedUnordered,       
    MmUSWCCached,
    MmMaximumCacheType,
    MmNotMapped = -1
} MEMORY_CACHING_TYPE;




 
 
__declspec(dllimport)
BOOLEAN
KeAreAllApcsDisabled (
    void
    );
#line 21588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
void

KeInitializeGuardedMutex (
      PKGUARDED_MUTEX Mutex
    );
#line 21599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 
 
__declspec(dllimport)
void

KeAcquireGuardedMutex (
      PKGUARDED_MUTEX Mutex
    );
#line 21613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 
__declspec(dllimport)
void

KeReleaseGuardedMutex (
      PKGUARDED_MUTEX Mutex
    );
#line 21626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
 
__declspec(dllimport)
BOOLEAN

KeTryToAcquireGuardedMutex (
     
      PKGUARDED_MUTEX Mutex
    );
#line 21640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
void

KeAcquireGuardedMutexUnsafe (
      PKGUARDED_MUTEX FastMutex
    );
#line 21653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void

KeReleaseGuardedMutexUnsafe (
      PKGUARDED_MUTEX FastMutex
    );
#line 21665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef enum {
    KeProcessorAddStartNotify = 0,
    KeProcessorAddCompleteNotify,
    KeProcessorAddFailureNotify
} KE_PROCESSOR_CHANGE_NOTIFY_STATE;

typedef struct _KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT {
    KE_PROCESSOR_CHANGE_NOTIFY_STATE State;
    ULONG NtNumber;
    NTSTATUS Status;



    PROCESSOR_NUMBER ProcNumber;

#line 21687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


} KE_PROCESSOR_CHANGE_NOTIFY_CONTEXT, *PKE_PROCESSOR_CHANGE_NOTIFY_CONTEXT;

typedef
 
 
void
PROCESSOR_CALLBACK_FUNCTION (
      PVOID CallbackContext,
      PKE_PROCESSOR_CHANGE_NOTIFY_CONTEXT ChangeContext,
      PNTSTATUS OperationStatus
    );

typedef PROCESSOR_CALLBACK_FUNCTION *PPROCESSOR_CALLBACK_FUNCTION;




 
PVOID
KeRegisterProcessorChangeCallback (
      PPROCESSOR_CALLBACK_FUNCTION CallbackFunction,
      PVOID CallbackContext,
      ULONG Flags
    );
#line 21714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
void
KeDeregisterProcessorChangeCallback (
      PVOID CallbackHandle
    );
#line 21722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




NTSTATUS
KeGetProcessorNumberFromIndex (
      ULONG ProcIndex,
      PPROCESSOR_NUMBER ProcNumber
    );

ULONG
KeGetProcessorIndexFromNumber (
      PPROCESSOR_NUMBER ProcNumber
    );


typedef struct _XSTATE_SAVE {



    struct _XSTATE_SAVE* Prev;
    struct _KTHREAD* Thread;
    UCHAR Level;
    XSTATE_CONTEXT XStateContext;


























#line 21773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
} XSTATE_SAVE, *PXSTATE_SAVE;



 
 


__declspec(dllimport)
NTSTATUS
__stdcall
KeSaveExtendedProcessorState (
      ULONG64 Mask,
      PXSTATE_SAVE XStateSave
    );

 
 

__declspec(dllimport)
void
__stdcall
KeRestoreExtendedProcessorState (
      PXSTATE_SAVE XStateSave
    );

#line 21800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef struct _EXT_SET_PARAMETERS_V0 {
    ULONG Version;
    ULONG Reserved;
    LONGLONG NoWakeTolerance;
} EXT_SET_PARAMETERS, *PEXT_SET_PARAMETERS;

typedef EXT_SET_PARAMETERS KT2_SET_PARAMETERS, *PKT2_SET_PARAMETERS;






































#line 21848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























#line 21872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef struct _KWAIT_CHAIN {
    PVOID Head;
} KWAIT_CHAIN, *PKWAIT_CHAIN;







extern PBOOLEAN KdDebuggerNotPresent;
extern PBOOLEAN KdDebuggerEnabled;










#line 21897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
KdDisableDebugger(
    void
    );
#line 21905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
KdEnableDebugger(
    void
    );
#line 21913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












__declspec(dllimport)
BOOLEAN
KdRefreshDebuggerNotPresent(
    void
    );
#line 21931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _KD_OPTION {
    KD_OPTION_SET_BLOCK_ENABLE,
} KD_OPTION;


NTSTATUS
KdChangeOption(
      KD_OPTION Option,
      ULONG InBufferBytes ,
      PVOID InBuffer,
      ULONG OutBufferBytes ,
      PVOID OutBuffer,
      PULONG OutBufferNeeded 
    );
#line 21947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef   enum _POOL_TYPE {
    NonPagedPool,
    NonPagedPoolExecute = NonPagedPool,
    PagedPool,
    NonPagedPoolMustSucceed = NonPagedPool + 2,
    DontUseThisType,
    NonPagedPoolCacheAligned = NonPagedPool + 4,
    PagedPoolCacheAligned,
    NonPagedPoolCacheAlignedMustS = NonPagedPool + 6,
    MaxPoolType,

    
    
    
    

    NonPagedPoolBase = 0,
    NonPagedPoolBaseMustSucceed = NonPagedPoolBase + 2,
    NonPagedPoolBaseCacheAligned = NonPagedPoolBase + 4,
    NonPagedPoolBaseCacheAlignedMustS = NonPagedPoolBase + 6,

    
    
    
    

    NonPagedPoolSession = 32,
    PagedPoolSession = NonPagedPoolSession + 1,
    NonPagedPoolMustSucceedSession = PagedPoolSession + 1,
    DontUseThisTypeSession = NonPagedPoolMustSucceedSession + 1,
    NonPagedPoolCacheAlignedSession = DontUseThisTypeSession + 1,
    PagedPoolCacheAlignedSession = NonPagedPoolCacheAlignedSession + 1,
    NonPagedPoolCacheAlignedMustSSession = PagedPoolCacheAlignedSession + 1,

    NonPagedPoolNx = 512,
    NonPagedPoolNxCacheAligned = NonPagedPoolNx + 4,
    NonPagedPoolSessionNx = NonPagedPoolNx + 32,

}   POOL_TYPE;




















































#line 22045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 22052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#line 22057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(deprecated)                     
 
#line 22069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
 



#line 22075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
 
__declspec(dllimport)
PVOID
ExAllocatePool (
        POOL_TYPE PoolType,
      SIZE_T NumberOfBytes
    );

#line 22090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(deprecated)                     
 
#line 22096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
 



#line 22102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__declspec(dllimport)
PVOID
ExAllocatePoolWithQuota (
        POOL_TYPE PoolType,
      SIZE_T NumberOfBytes
    );

#line 22114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 



#line 22123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
 
__declspec(dllimport)
PVOID
__stdcall
ExAllocatePoolWithTag (
        POOL_TYPE PoolType,
      SIZE_T NumberOfBytes,
      ULONG Tag
    );

#line 22140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


























typedef   enum _EX_POOL_PRIORITY {
    LowPoolPriority,
    LowPoolPrioritySpecialPoolOverrun = 8,
    LowPoolPrioritySpecialPoolUnderrun = 9,
    NormalPoolPriority = 16,
    NormalPoolPrioritySpecialPoolOverrun = 24,
    NormalPoolPrioritySpecialPoolUnderrun = 25,
    HighPoolPriority = 32,
    HighPoolPrioritySpecialPoolOverrun = 40,
    HighPoolPrioritySpecialPoolUnderrun = 41
} EX_POOL_PRIORITY;



 



#line 22186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
 
__declspec(dllimport)
PVOID
__stdcall
ExAllocatePoolWithTagPriority (
        POOL_TYPE PoolType,
      SIZE_T NumberOfBytes,
      ULONG Tag,
        EX_POOL_PRIORITY Priority
    );

#line 22204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







 



#line 22217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__declspec(dllimport)
PVOID
ExAllocatePoolWithQuotaTag (
        POOL_TYPE PoolType,
      SIZE_T NumberOfBytes,
      ULONG Tag
    );

#line 22230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







 
__declspec(dllimport)
void
__stdcall
ExFreePool (
        PVOID P
    );

#line 22246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void
ExFreePoolWithTag (
        PVOID P,
      ULONG Tag
    );

#line 22259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__forceinline
void
ExInitializeFastMutex (
      PFAST_MUTEX FastMutex
    )

















{

    WriteRaw(&FastMutex->Count, 0x1);
    FastMutex->Owner = ((void *)0);
    FastMutex->Contention = 0;
    KeInitializeEvent(&FastMutex->Event, SynchronizationEvent, 0);
    return;
}



 

__declspec(dllimport)
void

ExAcquireFastMutexUnsafe(
       
    PFAST_MUTEX FastMutex
    );

#line 22312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 

__declspec(dllimport)
void

ExReleaseFastMutexUnsafe(
       
    PFAST_MUTEX FastMutex
    );

#line 22326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
void

ExAcquireFastMutex (
       
    PFAST_MUTEX FastMutex
    );

#line 22341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
void

ExReleaseFastMutex (
       
    PFAST_MUTEX FastMutex
    );

#line 22355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
 
 
__declspec(dllimport)
BOOLEAN

ExTryToAcquireFastMutex (
       
    PFAST_MUTEX FastMutex
    );

#line 22371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























#line 22397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#line 22402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





__declspec(dllimport)
LARGE_INTEGER
ExInterlockedAddLargeInteger (
      PLARGE_INTEGER Addend,
      LARGE_INTEGER Increment,
       PKSPIN_LOCK Lock
    );

#line 22416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




__declspec(dllimport)
ULONG

ExInterlockedAddUlong (
      PULONG Addend,
      ULONG Increment,
       PKSPIN_LOCK Lock
    );

#line 22430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















#line 22452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
PLIST_ENTRY

ExInterlockedInsertHeadList (
      PLIST_ENTRY ListHead,
        PLIST_ENTRY ListEntry,
       PKSPIN_LOCK Lock
    );

#line 22465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
PLIST_ENTRY

ExInterlockedInsertTailList (
      PLIST_ENTRY ListHead,
        PLIST_ENTRY ListEntry,
       PKSPIN_LOCK Lock
    );

#line 22478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
PLIST_ENTRY

ExInterlockedRemoveHeadList (
      PLIST_ENTRY ListHead,
       PKSPIN_LOCK Lock
    );

#line 22490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
PSINGLE_LIST_ENTRY

ExInterlockedPopEntryList (
      PSINGLE_LIST_ENTRY ListHead,
       PKSPIN_LOCK Lock
    );

#line 22502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
PSINGLE_LIST_ENTRY

ExInterlockedPushEntryList (
      PSINGLE_LIST_ENTRY ListHead,
        PSINGLE_LIST_ENTRY ListEntry,
       PKSPIN_LOCK Lock
    );

#line 22515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















__declspec(dllimport)
void
InitializeSListHead (
      PSLIST_HEADER SListHead
    );






















































#line 22595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
PSLIST_ENTRY
FirstEntrySList (
      PSLIST_HEADER SListHead
    );









__declspec(dllimport)
USHORT
ExQueryDepthSList (
      PSLIST_HEADER SListHead
    );





































#line 22661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





#line 22667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 22674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





























#line 22704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

__declspec(dllimport)
PSLIST_ENTRY
ExpInterlockedPopEntrySList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
ExpInterlockedPushEntrySList (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
ExpInterlockedFlushSList (
      PSLIST_HEADER ListHead
    );





























































#line 22785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef struct _LOOKASIDE_LIST_EX {
    GENERAL_LOOKASIDE_POOL L;
} LOOKASIDE_LIST_EX, *PLOOKASIDE_LIST_EX;









 
__declspec(dllimport)
NTSTATUS
ExInitializeLookasideListEx (
      PLOOKASIDE_LIST_EX Lookaside,
      PALLOCATE_FUNCTION_EX Allocate,
      PFREE_FUNCTION_EX Free,
      POOL_TYPE PoolType,
      ULONG Flags,
      SIZE_T Size,
      ULONG Tag,
      USHORT Depth
    );

 
__declspec(dllimport)
void
ExDeleteLookasideListEx (
      PLOOKASIDE_LIST_EX Lookaside
    );

 
__declspec(dllimport)
void
ExFlushLookasideListEx (
      PLOOKASIDE_LIST_EX Lookaside
    );

 
 
 
__forceinline
PVOID
#pragma warning(suppress: 28195) 
ExAllocateFromLookasideListEx (
      PLOOKASIDE_LIST_EX Lookaside
    )




















{

    PVOID Entry;

    Lookaside->L.TotalAllocates += 1;
    Entry = ExpInterlockedPopEntrySList(&Lookaside->L.ListHead);
    if (Entry == ((void *)0)) {
        Lookaside->L.AllocateMisses += 1;
        Entry = (Lookaside->L.AllocateEx)(Lookaside->L.Type,
                                          Lookaside->L.Size,
                                          Lookaside->L.Tag,
                                          Lookaside);
    }

    return Entry;
}

 
__forceinline
void
ExFreeToLookasideListEx (
      PLOOKASIDE_LIST_EX Lookaside,
        PVOID Entry
    )





















{

    Lookaside->L.TotalFrees += 1;
    if (ExQueryDepthSList(&Lookaside->L.ListHead) >= Lookaside->L.Depth) {
        Lookaside->L.FreeMisses += 1;
        (Lookaside->L.FreeEx)(Entry, Lookaside);

    } else {
        ExpInterlockedPushEntrySList(&Lookaside->L.ListHead, (PSLIST_ENTRY)Entry);
    }

    return;
}

#line 22923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct __declspec(align(64)) _NPAGED_LOOKASIDE_LIST {

    GENERAL_LOOKASIDE L;





#line 22933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} NPAGED_LOOKASIDE_LIST, *PNPAGED_LOOKASIDE_LIST;



 
__declspec(dllimport)
void
ExInitializeNPagedLookasideList (
      PNPAGED_LOOKASIDE_LIST Lookaside,
      PALLOCATE_FUNCTION Allocate,
      PFREE_FUNCTION Free,
      ULONG Flags,
      SIZE_T Size,
      ULONG Tag,
      USHORT Depth
    );










































#line 22993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 22995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
void
ExDeleteNPagedLookasideList (
      PNPAGED_LOOKASIDE_LIST Lookaside
    );

#line 23007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
 
__inline
 
 
PVOID
#pragma warning(suppress: 28195) 
ExAllocateFromNPagedLookasideList (
      PNPAGED_LOOKASIDE_LIST Lookaside
    )




















{

    PVOID Entry;

    Lookaside->L.TotalAllocates += 1;






#line 23050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    Entry = ExpInterlockedPopEntrySList(&Lookaside->L.ListHead);

#line 23054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    if (Entry == ((void *)0)) {
        Lookaside->L.AllocateMisses += 1;
        Entry = (Lookaside->L.Allocate)(Lookaside->L.Type,
                                        Lookaside->L.Size,
                                        Lookaside->L.Tag);
    }

    return Entry;
}

 
__inline
void
ExFreeToNPagedLookasideList (
      PNPAGED_LOOKASIDE_LIST Lookaside,
        PVOID Entry
    )





















{

    Lookaside->L.TotalFrees += 1;
    if (ExQueryDepthSList(&Lookaside->L.ListHead) >= Lookaside->L.Depth) {
        Lookaside->L.FreeMisses += 1;
        (Lookaside->L.Free)(Entry);

    } else {







#line 23109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

        ExpInterlockedPushEntrySList(&Lookaside->L.ListHead, (PSLIST_ENTRY)Entry);

#line 23113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    }

    return;
}



typedef struct __declspec(align(64)) _PAGED_LOOKASIDE_LIST {

    GENERAL_LOOKASIDE L;





#line 23130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;




 
__declspec(dllimport)
void
ExInitializePagedLookasideList (
      PPAGED_LOOKASIDE_LIST Lookaside,
      PALLOCATE_FUNCTION Allocate,
      PFREE_FUNCTION Free,
      ULONG Flags,
      SIZE_T Size,
      ULONG Tag,
      USHORT Depth
    );

#line 23150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExDeletePagedLookasideList (
      PPAGED_LOOKASIDE_LIST Lookaside
    );

#line 23161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 23172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#pragma warning(push)
#pragma warning(disable: 28195) 
 
 
__inline
PVOID
ExAllocateFromPagedLookasideList (
      PPAGED_LOOKASIDE_LIST Lookaside
    )




















{

    PVOID Entry;

    Lookaside->L.TotalAllocates += 1;
    Entry = ExpInterlockedPopEntrySList(&Lookaside->L.ListHead);
    if (Entry == ((void *)0)) {
        Lookaside->L.AllocateMisses += 1;
        Entry = (Lookaside->L.Allocate)(Lookaside->L.Type,
                                        Lookaside->L.Size,
                                        Lookaside->L.Tag);
    }

    return Entry;
}

#pragma warning(pop)

#line 23221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 23233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__inline
void
ExFreeToPagedLookasideList (
      PPAGED_LOOKASIDE_LIST Lookaside,
        PVOID Entry
    )





















{

    Lookaside->L.TotalFrees += 1;
    if (ExQueryDepthSList(&Lookaside->L.ListHead) >= Lookaside->L.Depth) {
        Lookaside->L.FreeMisses += 1;
        (Lookaside->L.Free)(Entry);

    } else {
        ExpInterlockedPushEntrySList(&Lookaside->L.ListHead, (PSLIST_ENTRY)Entry);
#line 23272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    }

    return;
}

#line 23278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



















#line 23298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
 
__declspec(dllimport)
void
__stdcall
ProbeForRead (
       volatile void *Address,
      SIZE_T Length,
      ULONG Alignment
    );

#line 23311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 23313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 23315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







 
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExRaiseStatus (
      NTSTATUS Status
    );

#line 23332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









 
 
__declspec(dllimport)
void
__stdcall
ProbeForWrite (
       volatile void *Address,
      SIZE_T Length,
      ULONG Alignment
    );

#line 23353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef   enum _WORK_QUEUE_TYPE {
    CriticalWorkQueue,
    DelayedWorkQueue,
    HyperCriticalWorkQueue,
    NormalWorkQueue,
    BackgroundWorkQueue,
    RealTimeWorkQueue,
    SuperCriticalWorkQueue,
    MaximumWorkQueue,
    CustomPriorityWorkQueue = 32
} WORK_QUEUE_TYPE;

typedef
 
 
 
void
WORKER_THREAD_ROUTINE (
      PVOID Parameter
    );

typedef WORKER_THREAD_ROUTINE *PWORKER_THREAD_ROUTINE;

typedef struct _WORK_QUEUE_ITEM {
    LIST_ENTRY List;
    PWORKER_THREAD_ROUTINE WorkerRoutine;
     PVOID Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;

__declspec(deprecated)                  
__forceinline
void
ExInitializeWorkItem (
         PWORK_QUEUE_ITEM Item,
      PWORKER_THREAD_ROUTINE Routine,
      PVOID Context
    )
{
    Item->WorkerRoutine = Routine;
    Item->Parameter = Context;
    Item->List.Flink = ((void *)0);
}









#line 23415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 23417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__declspec(deprecated) 
__declspec(dllimport)
void
ExQueueWorkItem(
        PWORK_QUEUE_ITEM WorkItem,
      WORK_QUEUE_TYPE QueueType
    );

#line 23428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
#line 23435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
BOOLEAN
ExIsProcessorFeaturePresent(
      ULONG ProcessorFeature
    );

#line 23442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef ULONG_PTR ERESOURCE_THREAD;
typedef ERESOURCE_THREAD *PERESOURCE_THREAD;

typedef struct _OWNER_ENTRY {
    ERESOURCE_THREAD OwnerThread;
    union {
        struct {
            ULONG IoPriorityBoosted : 1;
            ULONG OwnerReferenced   : 1;
            ULONG IoQoSPriorityBoosted : 1;
            ULONG OwnerCount        : 29;
        };
        ULONG TableSize;
    };

} OWNER_ENTRY, *POWNER_ENTRY;

typedef struct _ERESOURCE {
    LIST_ENTRY SystemResourcesList;
    POWNER_ENTRY OwnerTable;

    
    
    
    
    
    

    SHORT ActiveCount;
    union {
        USHORT Flag;
        struct {
            UCHAR ReservedLowFlags;
            UCHAR WaiterPriority;
        };
    };

    PVOID SharedWaiters;
    PVOID ExclusiveWaiters;

    
    
    
    
    
    
    

    OWNER_ENTRY OwnerEntry;
    ULONG ActiveEntries;
    ULONG ContentionCount;
    ULONG NumberOfSharedWaiters;
    ULONG NumberOfExclusiveWaiters;



    PVOID Reserved2;

#line 23507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

    union {
        PVOID Address;
        ULONG_PTR CreatorBackTraceIndex;
    };

    KSPIN_LOCK SpinLock;
} ERESOURCE, *PERESOURCE;












typedef struct _RESOURCE_HASH_ENTRY {
    LIST_ENTRY ListEntry;
    PVOID Address;
    ULONG ContentionCount;
    ULONG Number;
} RESOURCE_HASH_ENTRY, *PRESOURCE_HASH_ENTRY;

typedef struct _RESOURCE_PERFORMANCE_DATA {
    ULONG ActiveResourceCount;
    ULONG TotalResourceCount;
    ULONG ExclusiveAcquire;
    ULONG SharedFirstLevel;
    ULONG SharedSecondLevel;
    ULONG StarveFirstLevel;
    ULONG StarveSecondLevel;
    ULONG WaitForExclusive;
    ULONG OwnerTableExpands;
    ULONG MaximumTableExpand;
    LIST_ENTRY HashTable[64];
} RESOURCE_PERFORMANCE_DATA, *PRESOURCE_PERFORMANCE_DATA;







 
__declspec(dllimport)
NTSTATUS
ExInitializeResourceLite (
      PERESOURCE Resource
    );

#line 23562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
ExReinitializeResourceLite (
      PERESOURCE Resource
    );

#line 23573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 



__declspec(dllimport)
BOOLEAN
ExAcquireResourceSharedLite (
      
    
    PERESOURCE Resource,
      BOOLEAN Wait
    );

#line 23590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 

__declspec(dllimport)
PVOID
ExEnterCriticalRegionAndAcquireResourceShared (
       
    PERESOURCE Resource
    );

#line 23603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 



__declspec(dllimport)
BOOLEAN
ExAcquireResourceExclusiveLite (
      
    
    PERESOURCE Resource,
        BOOLEAN Wait
    );

#line 23621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 

__declspec(dllimport)
PVOID
ExEnterCriticalRegionAndAcquireResourceExclusive (
       
    PERESOURCE Resource
    );

#line 23634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 



__declspec(dllimport)
BOOLEAN
ExAcquireSharedStarveExclusive(
      
    
    PERESOURCE Resource,
      BOOLEAN Wait
    );

#line 23652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 



__declspec(dllimport)
BOOLEAN
ExAcquireSharedWaitForExclusive(
      
    
    PERESOURCE Resource,
      BOOLEAN Wait
    );

#line 23669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 

__declspec(dllimport)
PVOID
ExEnterCriticalRegionAndAcquireSharedWaitForExclusive (
       
    PERESOURCE Resource
    );

#line 23682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#pragma deprecated(ExReleaseResource)       
#line 23693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
__declspec(dllimport)
void

ExReleaseResourceLite(
      PERESOURCE Resource
    );

#line 23710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 

__declspec(dllimport)
void

ExReleaseResourceAndLeaveCriticalRegion(
       
    PERESOURCE Resource
    );

#line 23724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 

__declspec(dllimport)
void
ExReleaseResourceForThreadLite(
       
    PERESOURCE Resource,
      ERESOURCE_THREAD ResourceThreadId
    );

#line 23739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExSetResourceOwnerPointer(
      PERESOURCE Resource,
      PVOID OwnerPointer
    );

#line 23751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExSetResourceOwnerPointerEx(
      PERESOURCE Resource,
      PVOID OwnerPointer,
      ULONG Flags
    );



#line 23766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExConvertExclusiveToSharedLite(
       PERESOURCE Resource
    );

#line 23777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
ExDeleteResourceLite (
      PERESOURCE Resource
    );

#line 23788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
ULONG
ExGetExclusiveWaiterCount (
      PERESOURCE Resource
    );

#line 23799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
ULONG
ExGetSharedWaiterCount (
      PERESOURCE Resource
    );

#line 23810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













 
__declspec(dllimport)
BOOLEAN
ExIsResourceAcquiredExclusiveLite (
      PERESOURCE Resource
    );

#line 23831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
ULONG
ExIsResourceAcquiredSharedLite (
      PERESOURCE Resource
    );

#line 23842 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













typedef struct _EX_RUNDOWN_REF {





    union {
         ULONG_PTR Count;
         PVOID Ptr;
    };
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF;





typedef struct _EX_RUNDOWN_REF_CACHE_AWARE  *PEX_RUNDOWN_REF_CACHE_AWARE;








 
__declspec(dllimport)
KPROCESSOR_MODE
ExGetPreviousMode(
    void
    );

#line 23888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
__declspec(dllimport)
ULONG
ExSetTimerResolution (
      ULONG DesiredTime,
      BOOLEAN SetResolution
    );

#line 23905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















#line 23921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
ExSystemTimeToLocalTime (
      PLARGE_INTEGER SystemTime,
      PLARGE_INTEGER LocalTime
    );

#line 23936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
ExLocalTimeToSystemTime (
      PLARGE_INTEGER LocalTime,
      PLARGE_INTEGER SystemTime
    );

#line 23951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef struct _EX_TIMER *PEX_TIMER;

 
 
 
typedef
void
EXT_CALLBACK (
      PEX_TIMER Timer,
      PVOID Context
    );

typedef EXT_CALLBACK *PEXT_CALLBACK;

 
 
 
typedef
void
EXT_DELETE_CALLBACK (
      PVOID Context
    );

typedef EXT_DELETE_CALLBACK *PEXT_DELETE_CALLBACK;
typedef PVOID PEXT_CANCEL_PARAMETERS;
typedef struct _EXT_DELETE_PARAMETERS {
    ULONG Version;
    ULONG Reserved;
    PEXT_DELETE_CALLBACK DeleteCallback;
    PVOID DeleteContext;
} EXT_DELETE_PARAMETERS, *PEXT_DELETE_PARAMETERS;

















































































































#line 24098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef struct _CALLBACK_OBJECT *PCALLBACK_OBJECT;

typedef
 
 
void
CALLBACK_FUNCTION (
      PVOID CallbackContext,
      PVOID Argument1,
      PVOID Argument2
    );

typedef CALLBACK_FUNCTION *PCALLBACK_FUNCTION;




 
__declspec(dllimport)
NTSTATUS
ExCreateCallback (
     PCALLBACK_OBJECT *CallbackObject,
      POBJECT_ATTRIBUTES ObjectAttributes,
      BOOLEAN Create,
      BOOLEAN AllowMultipleCallbacks
    );

#line 24132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
PVOID
ExRegisterCallback (
      PCALLBACK_OBJECT CallbackObject,
      PCALLBACK_FUNCTION CallbackFunction,
      PVOID CallbackContext
    );

#line 24145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExUnregisterCallback (
      PVOID CallbackRegistration
    );

#line 24156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExNotifyCallback (
      PVOID CallbackObject,
      PVOID Argument1,
      PVOID Argument2
    );

#line 24169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
BOOLEAN
ExVerifySuite(
        SUITE_TYPE SuiteType
    );

#line 24184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
void

ExInitializeRundownProtection (
      PEX_RUNDOWN_REF RunRef
    );

#line 24200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExReInitializeRundownProtection (
      PEX_RUNDOWN_REF RunRef
    );

#line 24211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
BOOLEAN

ExAcquireRundownProtection (
      PEX_RUNDOWN_REF RunRef
    );

#line 24224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
BOOLEAN

ExAcquireRundownProtectionEx (
      PEX_RUNDOWN_REF RunRef,
      ULONG Count
    );

#line 24238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void

ExReleaseRundownProtection (
      PEX_RUNDOWN_REF RunRef
    );

#line 24250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void

ExReleaseRundownProtectionEx (
      PEX_RUNDOWN_REF RunRef,
      ULONG Count
    );

#line 24263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExRundownCompleted (
      PEX_RUNDOWN_REF RunRef
    );

#line 24274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void

ExWaitForRundownProtectionRelease (
      PEX_RUNDOWN_REF RunRef
    );

#line 24286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
PEX_RUNDOWN_REF_CACHE_AWARE
ExAllocateCacheAwareRundownProtection(
        POOL_TYPE PoolType,
      ULONG PoolTag
    );

#line 24299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
SIZE_T
ExSizeOfRundownProtectionCacheAware(
    void
    );

#line 24310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExInitializeRundownProtectionCacheAware(
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware,
      SIZE_T RunRefSize
    );

#line 24322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
ExFreeCacheAwareRundownProtection(
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware
    );

#line 24333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
BOOLEAN

ExAcquireRundownProtectionCacheAware (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware
    );

#line 24346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExReleaseRundownProtectionCacheAware (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware
    );

#line 24357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
BOOLEAN

ExAcquireRundownProtectionCacheAwareEx (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware,
      ULONG Count
    );

#line 24371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExReleaseRundownProtectionCacheAwareEx (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRef,
      ULONG Count
    );

#line 24383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExWaitForRundownProtectionReleaseCacheAware (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRef
    );

#line 24394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExReInitializeRundownProtectionCacheAware (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware
    );

#line 24405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void

ExRundownCompletedCacheAware (
      PEX_RUNDOWN_REF_CACHE_AWARE RunRefCacheAware
    );

#line 24416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















#line 24439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














#line 24454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef volatile LONG EX_SPIN_LOCK, *PEX_SPIN_LOCK;




 
__declspec(dllimport)
void
ExAcquireSpinLockSharedAtDpcLevel (
       
    PEX_SPIN_LOCK SpinLock
    );

 
 
__declspec(dllimport)
KIRQL
ExAcquireSpinLockShared (
       
    PEX_SPIN_LOCK SpinLock
    );

 
__declspec(dllimport)
void
ExReleaseSpinLockSharedFromDpcLevel (
       
    PEX_SPIN_LOCK SpinLock
    );

 
__declspec(dllimport)
void
ExReleaseSpinLockShared (
       
    PEX_SPIN_LOCK SpinLock,
        KIRQL OldIrql
    );

 
 
 
__declspec(dllimport)
LOGICAL
ExTryConvertSharedSpinLockExclusive (
      PEX_SPIN_LOCK SpinLock
    );

 
__declspec(dllimport)
void
ExAcquireSpinLockExclusiveAtDpcLevel (
       
    PEX_SPIN_LOCK SpinLock
    );

 
 
__declspec(dllimport)
KIRQL
ExAcquireSpinLockExclusive (
       
    PEX_SPIN_LOCK SpinLock
    );

 
__declspec(dllimport)
void
ExReleaseSpinLockExclusiveFromDpcLevel (
       
    PEX_SPIN_LOCK SpinLock
    );

 
__declspec(dllimport)
void
ExReleaseSpinLockExclusive (
       
    PEX_SPIN_LOCK SpinLock,
        KIRQL OldIrql
    );

#line 24543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



















#line 24563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef
 
 
NTSTATUS
EX_CALLBACK_FUNCTION (
      PVOID CallbackContext,
      PVOID Argument1,
      PVOID Argument2
    );

typedef EX_CALLBACK_FUNCTION *PEX_CALLBACK_FUNCTION;






















#line 24603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 24612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























#line 24636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef enum _REG_NOTIFY_CLASS {
    RegNtDeleteKey,
    RegNtPreDeleteKey = RegNtDeleteKey,
    RegNtSetValueKey,
    RegNtPreSetValueKey = RegNtSetValueKey,
    RegNtDeleteValueKey,
    RegNtPreDeleteValueKey = RegNtDeleteValueKey,
    RegNtSetInformationKey,
    RegNtPreSetInformationKey = RegNtSetInformationKey,
    RegNtRenameKey,
    RegNtPreRenameKey = RegNtRenameKey,
    RegNtEnumerateKey,
    RegNtPreEnumerateKey = RegNtEnumerateKey,
    RegNtEnumerateValueKey,
    RegNtPreEnumerateValueKey = RegNtEnumerateValueKey,
    RegNtQueryKey,
    RegNtPreQueryKey = RegNtQueryKey,
    RegNtQueryValueKey,
    RegNtPreQueryValueKey = RegNtQueryValueKey,
    RegNtQueryMultipleValueKey,
    RegNtPreQueryMultipleValueKey = RegNtQueryMultipleValueKey,
    RegNtPreCreateKey,
    RegNtPostCreateKey,
    RegNtPreOpenKey,
    RegNtPostOpenKey,
    RegNtKeyHandleClose,
    RegNtPreKeyHandleClose = RegNtKeyHandleClose,
    
    
    
    RegNtPostDeleteKey,
    RegNtPostSetValueKey,
    RegNtPostDeleteValueKey,
    RegNtPostSetInformationKey,
    RegNtPostRenameKey,
    RegNtPostEnumerateKey,
    RegNtPostEnumerateValueKey,
    RegNtPostQueryKey,
    RegNtPostQueryValueKey,
    RegNtPostQueryMultipleValueKey,
    RegNtPostKeyHandleClose,
    RegNtPreCreateKeyEx,
    RegNtPostCreateKeyEx,
    RegNtPreOpenKeyEx,
    RegNtPostOpenKeyEx,
    
    
    
    RegNtPreFlushKey,
    RegNtPostFlushKey,
    RegNtPreLoadKey,
    RegNtPostLoadKey,
    RegNtPreUnLoadKey,
    RegNtPostUnLoadKey,
    RegNtPreQueryKeySecurity,
    RegNtPostQueryKeySecurity,
    RegNtPreSetKeySecurity,
    RegNtPostSetKeySecurity,
    
    
    
    RegNtCallbackObjectContextCleanup,
    
    
    
    RegNtPreRestoreKey,
    RegNtPostRestoreKey,
    RegNtPreSaveKey,
    RegNtPostSaveKey,
    RegNtPreReplaceKey,
    RegNtPostReplaceKey,
    
    
    
    RegNtPreQueryKeyName,
    RegNtPostQueryKeyName,

    MaxRegNtNotifyClass 
} REG_NOTIFY_CLASS;




typedef struct _REG_DELETE_KEY_INFORMATION {
    PVOID    Object;                      
    PVOID    CallContext;  
    PVOID    ObjectContext;
    PVOID    Reserved;     
} REG_DELETE_KEY_INFORMATION, *PREG_DELETE_KEY_INFORMATION

, REG_FLUSH_KEY_INFORMATION, *PREG_FLUSH_KEY_INFORMATION
#line 24738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
;

typedef struct _REG_SET_VALUE_KEY_INFORMATION {
    PVOID               Object;                         
    PUNICODE_STRING     ValueName;                      
    ULONG               TitleIndex;                     
    ULONG               Type;                           
    PVOID               Data;                           
    ULONG               DataSize;                       
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_SET_VALUE_KEY_INFORMATION, *PREG_SET_VALUE_KEY_INFORMATION;

typedef struct _REG_DELETE_VALUE_KEY_INFORMATION {
    PVOID               Object;                         
    PUNICODE_STRING     ValueName;                      
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_DELETE_VALUE_KEY_INFORMATION, *PREG_DELETE_VALUE_KEY_INFORMATION;

typedef struct _REG_SET_INFORMATION_KEY_INFORMATION {
    PVOID                       Object;                 
    KEY_SET_INFORMATION_CLASS   KeySetInformationClass; 
    PVOID                       KeySetInformation;      
    ULONG                       KeySetInformationLength;
    PVOID                       CallContext;  
    PVOID                       ObjectContext;
    PVOID                       Reserved;     
} REG_SET_INFORMATION_KEY_INFORMATION, *PREG_SET_INFORMATION_KEY_INFORMATION;

typedef struct _REG_ENUMERATE_KEY_INFORMATION {
    PVOID                       Object;                 
    ULONG                       Index;                  
    KEY_INFORMATION_CLASS       KeyInformationClass;    
    PVOID                       KeyInformation;         
    ULONG                       Length;                 
    PULONG                      ResultLength;           
    PVOID                       CallContext;  
    PVOID                       ObjectContext;
    PVOID                       Reserved;     
} REG_ENUMERATE_KEY_INFORMATION, *PREG_ENUMERATE_KEY_INFORMATION;

typedef struct _REG_ENUMERATE_VALUE_KEY_INFORMATION {
    PVOID                           Object;                     
    ULONG                           Index;                      
    KEY_VALUE_INFORMATION_CLASS     KeyValueInformationClass;   
    PVOID                           KeyValueInformation;        
    ULONG                           Length;                     
    PULONG                          ResultLength;               
    PVOID                           CallContext;  
    PVOID                           ObjectContext;
    PVOID                           Reserved;     
} REG_ENUMERATE_VALUE_KEY_INFORMATION, *PREG_ENUMERATE_VALUE_KEY_INFORMATION;

typedef struct _REG_QUERY_KEY_INFORMATION {
    PVOID                       Object;                 
    KEY_INFORMATION_CLASS       KeyInformationClass;    
    PVOID                       KeyInformation;         
    ULONG                       Length;                 
    PULONG                      ResultLength;           
    PVOID                       CallContext;  
    PVOID                       ObjectContext;
    PVOID                       Reserved;     
} REG_QUERY_KEY_INFORMATION, *PREG_QUERY_KEY_INFORMATION;

typedef struct _REG_QUERY_VALUE_KEY_INFORMATION {
    PVOID                           Object;                     
    PUNICODE_STRING                 ValueName;                  
    KEY_VALUE_INFORMATION_CLASS     KeyValueInformationClass;   
    PVOID                           KeyValueInformation;        
    ULONG                           Length;                     
    PULONG                          ResultLength;               
    PVOID                           CallContext;  
    PVOID                           ObjectContext;
    PVOID                           Reserved;     
} REG_QUERY_VALUE_KEY_INFORMATION, *PREG_QUERY_VALUE_KEY_INFORMATION;

typedef struct _REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION {
    PVOID               Object;                 
    PKEY_VALUE_ENTRY    ValueEntries;           
    ULONG               EntryCount;             
    PVOID               ValueBuffer;            
    PULONG              BufferLength;           
    PULONG              RequiredBufferLength;   
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION, *PREG_QUERY_MULTIPLE_VALUE_KEY_INFORMATION;

typedef struct _REG_RENAME_KEY_INFORMATION {
    PVOID            Object;    
    PUNICODE_STRING  NewName;   
    PVOID            CallContext;  
    PVOID            ObjectContext;
    PVOID            Reserved;     
} REG_RENAME_KEY_INFORMATION, *PREG_RENAME_KEY_INFORMATION;


typedef struct _REG_KEY_HANDLE_CLOSE_INFORMATION {
    PVOID               Object;         
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_KEY_HANDLE_CLOSE_INFORMATION, *PREG_KEY_HANDLE_CLOSE_INFORMATION;


typedef struct _REG_CREATE_KEY_INFORMATION {
    PUNICODE_STRING     CompleteName; 
    PVOID               RootObject;   
    PVOID               ObjectType;   
    ULONG               CreateOptions;
    PUNICODE_STRING     Class;        
    PVOID               SecurityDescriptor;
    PVOID               SecurityQualityOfService;
    ACCESS_MASK         DesiredAccess;
    ACCESS_MASK         GrantedAccess;
                                      
                                      
    PULONG              Disposition;  
                                      
                                      
    PVOID               *ResultObject;
                                      
                                      
    PVOID               CallContext;  
    PVOID               RootObjectContext;  
    PVOID               Transaction;  
    PVOID               Reserved;     

} REG_CREATE_KEY_INFORMATION, REG_OPEN_KEY_INFORMATION,*PREG_CREATE_KEY_INFORMATION, *PREG_OPEN_KEY_INFORMATION;

typedef struct _REG_CREATE_KEY_INFORMATION_V1 {
    PUNICODE_STRING     CompleteName; 
    PVOID               RootObject;   
    PVOID               ObjectType;   
    ULONG               Options;      
    PUNICODE_STRING     Class;        
    PVOID               SecurityDescriptor;
    PVOID               SecurityQualityOfService;
    ACCESS_MASK         DesiredAccess;
    ACCESS_MASK         GrantedAccess;
                                      
                                      
    PULONG              Disposition;  
                                      
                                      
    PVOID               *ResultObject;
                                      
                                      
    PVOID               CallContext;  
    PVOID               RootObjectContext;  
    PVOID               Transaction;  

    ULONG_PTR           Version;      
    PUNICODE_STRING     RemainingName;
    ULONG               Wow64Flags;   
    ULONG               Attributes;   
    KPROCESSOR_MODE     CheckAccessMode;  

} REG_CREATE_KEY_INFORMATION_V1, REG_OPEN_KEY_INFORMATION_V1,*PREG_CREATE_KEY_INFORMATION_V1, *PREG_OPEN_KEY_INFORMATION_V1;



typedef struct _REG_POST_OPERATION_INFORMATION {
    PVOID               Object;         
    NTSTATUS            Status;         
    PVOID               PreInformation; 
                                        
    NTSTATUS            ReturnStatus;   
                                        
    PVOID               CallContext;    
    PVOID               ObjectContext;  
    PVOID               Reserved;       
} REG_POST_OPERATION_INFORMATION,*PREG_POST_OPERATION_INFORMATION;



typedef struct _REG_PRE_CREATE_KEY_INFORMATION {
    PUNICODE_STRING     CompleteName;   
} REG_PRE_CREATE_KEY_INFORMATION, REG_PRE_OPEN_KEY_INFORMATION,*PREG_PRE_CREATE_KEY_INFORMATION, *PREG_PRE_OPEN_KEY_INFORMATION;;

typedef struct _REG_POST_CREATE_KEY_INFORMATION {
    PUNICODE_STRING     CompleteName;   
    PVOID               Object;         
    NTSTATUS            Status;         
} REG_POST_CREATE_KEY_INFORMATION,REG_POST_OPEN_KEY_INFORMATION, *PREG_POST_CREATE_KEY_INFORMATION, *PREG_POST_OPEN_KEY_INFORMATION;




typedef struct _REG_LOAD_KEY_INFORMATION {
    PVOID               Object;
    PUNICODE_STRING     KeyName;
    PUNICODE_STRING     SourceFile;
    ULONG               Flags;
    PVOID               TrustClassObject;
    PVOID               UserEvent;
    ACCESS_MASK         DesiredAccess;
    PHANDLE             RootHandle;
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_LOAD_KEY_INFORMATION, *PREG_LOAD_KEY_INFORMATION;

typedef struct _REG_UNLOAD_KEY_INFORMATION {
    PVOID    Object;                      
    PVOID    UserEvent;
    PVOID    CallContext;  
    PVOID    ObjectContext;
    PVOID    Reserved;     
} REG_UNLOAD_KEY_INFORMATION, *PREG_UNLOAD_KEY_INFORMATION;

typedef struct _REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION {
    PVOID   Object;
    PVOID   ObjectContext;  
    PVOID   Reserved;     
} REG_CALLBACK_CONTEXT_CLEANUP_INFORMATION, *PREG_CALLBACK_CONTEXT_CLEANUP_INFORMATION;

typedef struct _REG_QUERY_KEY_SECURITY_INFORMATION {
    PVOID                   Object;
    PSECURITY_INFORMATION   SecurityInformation;  
    PSECURITY_DESCRIPTOR    SecurityDescriptor;   
    PULONG                  Length;               
    PVOID                   CallContext;  
    PVOID                   ObjectContext;
    PVOID                   Reserved;     
} REG_QUERY_KEY_SECURITY_INFORMATION, *PREG_QUERY_KEY_SECURITY_INFORMATION;

typedef struct _REG_SET_KEY_SECURITY_INFORMATION {
    PVOID                   Object;
    PSECURITY_INFORMATION   SecurityInformation;  
    PSECURITY_DESCRIPTOR    SecurityDescriptor;   
    PVOID                   CallContext;  
    PVOID                   ObjectContext;
    PVOID                   Reserved;     
} REG_SET_KEY_SECURITY_INFORMATION, *PREG_SET_KEY_SECURITY_INFORMATION;


typedef struct _REG_RESTORE_KEY_INFORMATION {
    PVOID               Object;
    HANDLE              FileHandle;
    ULONG               Flags;
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_RESTORE_KEY_INFORMATION, *PREG_RESTORE_KEY_INFORMATION;

typedef struct _REG_SAVE_KEY_INFORMATION {
    PVOID               Object;
    HANDLE              FileHandle;
    ULONG               Format;
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_SAVE_KEY_INFORMATION, *PREG_SAVE_KEY_INFORMATION;

typedef struct _REG_REPLACE_KEY_INFORMATION {
    PVOID               Object;
    PUNICODE_STRING     OldFileName;
    PUNICODE_STRING     NewFileName;
    PVOID               CallContext;  
    PVOID               ObjectContext;
    PVOID               Reserved;     
} REG_REPLACE_KEY_INFORMATION, *PREG_REPLACE_KEY_INFORMATION;
#line 25005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _REG_QUERY_KEY_NAME {
    PVOID                       Object;
    POBJECT_NAME_INFORMATION    ObjectNameInfo;
    ULONG                       Length;
    PULONG                      ReturnLength;
    PVOID                       CallContext;
    PVOID                       ObjectContext;
    PVOID                       Reserved;
} REG_QUERY_KEY_NAME, *PREG_QUERY_KEY_NAME;


 
__declspec(dllimport)
NTSTATUS
CmRegisterCallback(      PEX_CALLBACK_FUNCTION Function,
                     PVOID                 Context,
                        PLARGE_INTEGER        Cookie
                    );

 
__declspec(dllimport)
NTSTATUS
CmUnRegisterCallback(  LARGE_INTEGER    Cookie);

#line 25031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
CmRegisterCallbackEx (           PEX_CALLBACK_FUNCTION   Function,
                                 PCUNICODE_STRING        Altitude,
                                 PVOID                   Driver, 
                             PVOID                   Context,
                                PLARGE_INTEGER          Cookie,
                           PVOID                   Reserved
                    );

 
__declspec(dllimport)
void 
CmGetCallbackVersion (      PULONG  Major,
                            PULONG  Minor
                        );

 
__declspec(dllimport)
NTSTATUS
CmSetCallbackObjectContext (      PVOID           Object,
                                     PLARGE_INTEGER  Cookie,
                                     PVOID           NewContext,
                                PVOID           *OldContext
                           );

 
__declspec(dllimport)
NTSTATUS
CmCallbackGetKeyObjectID (               PLARGE_INTEGER      Cookie,
                                         PVOID               Object,
                                    PULONG_PTR          ObjectID,
                             PCUNICODE_STRING    *ObjectName
                           );

 
__declspec(dllimport)
PVOID
CmGetBoundTransaction(   PLARGE_INTEGER  Cookie,
                         PVOID           Object );

#line 25076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















#line 25098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



























































































































extern PBOOLEAN Mm64BitPhysicalAddress;








extern PVOID MmBadPointer;









#pragma deprecated(MmBadPointer)  









































































































































#pragma deprecated(COMPUTE_PAGES_SPANNED)   
#line 25380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"































































































































typedef enum _MM_SYSTEM_SIZE {
    MmSmallSystem,
    MmMediumSystem,
    MmLargeSystem
} MM_SYSTEMSIZE;


__declspec(dllimport)
MM_SYSTEMSIZE
MmQuerySystemSize (
    void
    );
#line 25520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
MmIsVerifierEnabled (
      PULONG VerifierFlags
    );
#line 25530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
MmAddVerifierThunks (
      PVOID ThunkBuffer,
      ULONG ThunkBufferSize
    );
#line 25540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
MmAddVerifierSpecialThunks(
      ULONG_PTR EntryRoutine,
      PVOID ThunkBuffer,
      ULONG ThunkBufferSize
    );
#line 25551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
__declspec(dllimport)
void
MmProbeAndLockSelectedPages (
      PMDL MemoryDescriptorList,
      PFILE_SEGMENT_ELEMENT SegmentArray,
      KPROCESSOR_MODE AccessMode,
      LOCK_OPERATION Operation
    );


 
__declspec(dllimport)
void
MmProbeAndLockProcessPages (
      PMDL MemoryDescriptorList,
      PEPROCESS Process,
      KPROCESSOR_MODE AccessMode,
      LOCK_OPERATION Operation
    );
#line 25578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
#line 25583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
void
MmProbeAndLockPages (
      PMDL MemoryDescriptorList,
      KPROCESSOR_MODE AccessMode,
      LOCK_OPERATION Operation
    );
#line 25591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmUnlockPages (
      PMDL MemoryDescriptorList
    );
#line 25600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmBuildMdlForNonPagedPool (
      PMDL MemoryDescriptorList
    );
#line 25609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
























#line 25634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















#line 25650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
  
#line 25656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__declspec(deprecated)
__declspec(dllimport)
PVOID
MmMapLockedPages (
      PMDL MemoryDescriptorList,
        
    KPROCESSOR_MODE AccessMode
    );
#line 25667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LOGICAL
MmIsIoSpaceActive (
      PHYSICAL_ADDRESS StartAddress,
      SIZE_T NumberOfBytes
    );
#line 25677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PVOID
__stdcall
MmGetSystemRoutineAddress (
      PUNICODE_STRING SystemRoutineName
    );
#line 25687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
MmAdvanceMdl (
      PMDL Mdl,
      ULONG NumberOfBytes
    );
#line 25697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
NTSTATUS
MmProtectMdlSystemAddress (
      PMDL MemoryDescriptorList,
      ULONG NewProtect
    );
#line 25708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















typedef enum _MM_PAGE_PRIORITY {
    LowPagePriority,
    NormalPagePriority = 16,
    HighPagePriority = 32
} MM_PAGE_PRIORITY;












 


 
#line 25752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
  
 
__declspec(dllimport)
PVOID
MmMapLockedPagesSpecifyCache (
      PMDL MemoryDescriptorList,
        
            KPROCESSOR_MODE AccessMode,
        MEMORY_CACHING_TYPE CacheType,
      PVOID RequestedAddress,
          ULONG BugCheckOnFailure,
          ULONG Priority  
    );














































#line 25812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 25814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmUnmapLockedPages (
      PVOID BaseAddress,
      PMDL MemoryDescriptorList
    );
#line 25824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
 PVOID
MmAllocateMappingAddress (
       SIZE_T NumberOfBytes,
       ULONG PoolTag
     );
#line 25835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmFreeMappingAddress (
       PVOID BaseAddress,
       ULONG PoolTag
     );
#line 25845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
  
#line 25852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
  
 
__declspec(dllimport)
PVOID
MmMapLockedPagesWithReservedMapping (
         PVOID MappingAddress,
         ULONG PoolTag,
      PMDL MemoryDescriptorList,
           MEMORY_CACHING_TYPE CacheType
    );
#line 25863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmUnmapReservedMapping (
       PVOID BaseAddress,
       ULONG PoolTag,
       PMDL MemoryDescriptorList
     );
#line 25874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























#line 25900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#line 25917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
PMDL
MmAllocatePagesForMdlEx (
      PHYSICAL_ADDRESS LowAddress,
      PHYSICAL_ADDRESS HighAddress,
      PHYSICAL_ADDRESS SkipBytes,
      SIZE_T TotalBytes,
      MEMORY_CACHING_TYPE CacheType,
      ULONG Flags
    );
#line 25932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
PMDL
MmAllocatePagesForMdl (
      PHYSICAL_ADDRESS LowAddress,
      PHYSICAL_ADDRESS HighAddress,
      PHYSICAL_ADDRESS SkipBytes,
      SIZE_T TotalBytes
    );
#line 25945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












#line 25958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmFreePagesFromMdl (
      PMDL MemoryDescriptorList
    );
#line 25967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
  
PVOID
MmMapIoSpace (
      PHYSICAL_ADDRESS PhysicalAddress,
      SIZE_T NumberOfBytes,
      MEMORY_CACHING_TYPE CacheType
    );
#line 25980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmUnmapIoSpace (
      PVOID BaseAddress,
      SIZE_T NumberOfBytes
    );
#line 25990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












#line 26003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



  
 
__declspec(dllimport)
 PVOID
MmAllocateContiguousMemory (
      SIZE_T NumberOfBytes,
      PHYSICAL_ADDRESS HighestAcceptableAddress
    );
#line 26015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
 PVOID
MmAllocateContiguousMemorySpecifyCache (
      SIZE_T NumberOfBytes,
      PHYSICAL_ADDRESS LowestAcceptableAddress,
      PHYSICAL_ADDRESS HighestAcceptableAddress,
      PHYSICAL_ADDRESS BoundaryAddressMultiple,
      MEMORY_CACHING_TYPE CacheType
    );
#line 26029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef ULONG NODE_REQUIREMENT;





#line 26041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
 PVOID
MmAllocateContiguousMemorySpecifyCacheNode (
      SIZE_T NumberOfBytes,
      PHYSICAL_ADDRESS LowestAcceptableAddress,
      PHYSICAL_ADDRESS HighestAcceptableAddress,
      PHYSICAL_ADDRESS BoundaryAddressMultiple,
      MEMORY_CACHING_TYPE CacheType,
      NODE_REQUIREMENT PreferredNode
    );
#line 26056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














#line 26071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmFreeContiguousMemory (
      PVOID BaseAddress
    );
#line 26080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmFreeContiguousMemorySpecifyCache (
      PVOID BaseAddress,
      SIZE_T NumberOfBytes,
      MEMORY_CACHING_TYPE CacheType
    );
#line 26091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
SIZE_T
MmSizeOfMdl (
      PVOID Base,
      SIZE_T Length
    );
#line 26101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(deprecated)                 
 
__declspec(dllimport)
PMDL
MmCreateMdl (
      PMDL MemoryDescriptorList,
      PVOID Base,
      SIZE_T Length
    );
#line 26113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















#line 26131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


  
 
__declspec(dllimport)
PVOID
MmLockPagableDataSection (
      PVOID AddressWithinSection
    );
#line 26141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmResetDriverPaging (
      PVOID AddressWithinSection
    );
#line 26150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PVOID
MmPageEntireDriver (
      PVOID AddressWithinSection
    );
#line 26159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
MmUnlockPagableImageSection (
      PVOID ImageSectionHandle
    );
#line 26168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__forceinline
void
MmInitializeMdl (
     
             PMDL MemoryDescriptorList,
      PVOID BaseVa,
          SIZE_T Length
    )



















{
    MemoryDescriptorList->Next = (PMDL) ((void *)0);
    MemoryDescriptorList->Size = (CSHORT)(sizeof(MDL) +
            (sizeof(PFN_NUMBER) * ((((ULONG)((LONG_PTR)(BaseVa) & (0x1000 - 1))) + ((SIZE_T) (Length)) + (0x1000 - 1)) >> 12L)));
    MemoryDescriptorList->MdlFlags = 0;
    MemoryDescriptorList->StartVa = (PVOID) ((PVOID)((ULONG_PTR)(BaseVa) & ~(0x1000 - 1)));
    MemoryDescriptorList->ByteOffset = ((ULONG)((LONG_PTR)(BaseVa) & (0x1000 - 1)));
    MemoryDescriptorList->ByteCount = (ULONG)Length;
}


 
 
 
#line 26213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
  
 
__forceinline
PVOID
MmGetSystemAddressForMdlSafe (
      PMDL Mdl,
         ULONG Priority  
    )



























{
    if (Mdl->MdlFlags & (0x0001 | 0x0004)) {
        return Mdl->MappedSystemVa;
    } else {
        return MmMapLockedPagesSpecifyCache(Mdl, KernelMode, MmCached,   
                                            ((void *)0), 0, Priority);
    }
}
#line 26257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
































#pragma deprecated(MmGetSystemAddressForMdl)    
#line 26291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







 
void
__forceinline
MmPrepareMdlForReuse (
      PMDL MDL
    )
















{
    if ((MDL->MdlFlags & 0x0020) != 0) {
        (((void) 0), ((!((MDL->MdlFlags & 0x0010) != 0)) ? (__annotation(L"Debug", L"AssertFail", L"(MDL->MdlFlags & 0x0010) != 0"), __int2c(), 0) : 1));
        MmUnmapLockedPages( MDL->MappedSystemVa, MDL );
    } else if ((MDL->MdlFlags & 0x0010) == 0) {
        (((void) 0), ((!((MDL->MdlFlags & 0x0001) == 0)) ? (__annotation(L"Debug", L"AssertFail", L"(MDL->MdlFlags & 0x0001) == 0"), __int2c(), 0) : 1));
    }
}

typedef NTSTATUS (*PMM_DLL_INITIALIZE) (
      PUNICODE_STRING RegistryPath
    );

typedef NTSTATUS (*PMM_DLL_UNLOAD) (
    void
    );







struct _DRIVER_OBJECT;







#line 26352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
LOGICAL
MmIsDriverVerifying (
      struct _DRIVER_OBJECT *DriverObject
    );
#line 26360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LOGICAL
MmIsDriverVerifyingByAddress (
      PVOID AddressWithinSection
    );
#line 26369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef enum _SECURITY_OPERATION_CODE {
    SetSecurityDescriptor,
    QuerySecurityDescriptor,
    DeleteSecurityDescriptor,
    AssignSecurityDescriptor
} SECURITY_OPERATION_CODE, *PSECURITY_OPERATION_CODE;









typedef struct _SECURITY_SUBJECT_CONTEXT {
    PACCESS_TOKEN ClientToken;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    PACCESS_TOKEN PrimaryToken;
    PVOID ProcessAuditId;
} SECURITY_SUBJECT_CONTEXT, *PSECURITY_SUBJECT_CONTEXT;
















typedef struct _INITIAL_PRIVILEGE_SET {
    ULONG PrivilegeCount;
    ULONG Control;
    LUID_AND_ATTRIBUTES Privilege[3];
} INITIAL_PRIVILEGE_SET, *PINITIAL_PRIVILEGE_SET;








typedef struct _ACCESS_STATE {
   LUID OperationID;                
   BOOLEAN SecurityEvaluated;
   BOOLEAN GenerateAudit;
   BOOLEAN GenerateOnClose;
   BOOLEAN PrivilegesAllocated;
   ULONG Flags;
   ACCESS_MASK RemainingDesiredAccess;
   ACCESS_MASK PreviouslyGrantedAccess;
   ACCESS_MASK OriginalDesiredAccess;
   SECURITY_SUBJECT_CONTEXT SubjectSecurityContext;
   PSECURITY_DESCRIPTOR SecurityDescriptor; 
   PVOID AuxData;
   union {
      INITIAL_PRIVILEGE_SET InitialPrivilegeSet;
      PRIVILEGE_SET PrivilegeSet;
      } Privileges;

   BOOLEAN AuditPrivileges;
   UNICODE_STRING ObjectName;
   UNICODE_STRING ObjectTypeName;

} ACCESS_STATE, *PACCESS_STATE;


typedef
void
NTFS_DEREF_EXPORTED_SECURITY_DESCRIPTOR(
      PVOID  Vcb,
      PSECURITY_DESCRIPTOR SecurityDescriptor);
typedef NTFS_DEREF_EXPORTED_SECURITY_DESCRIPTOR *PNTFS_DEREF_EXPORTED_SECURITY_DESCRIPTOR;




__declspec(dllimport)
void
SeCaptureSubjectContext (
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 26465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
SeLockSubjectContext(
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 26473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
SeUnlockSubjectContext(
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 26481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
SeReleaseSubjectContext (
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 26489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
SeAssignSecurity (
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR ExplicitDescriptor,
      PSECURITY_DESCRIPTOR *NewDescriptor,
      BOOLEAN IsDirectoryObject,
      PSECURITY_SUBJECT_CONTEXT SubjectContext,
      PGENERIC_MAPPING GenericMapping,
      POOL_TYPE PoolType
    );
#line 26505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
SeComputeAutoInheritByObjectType(
      PVOID ObjectType,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_DESCRIPTOR ParentSecurityDescriptor
    );
#line 26515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
SeAssignSecurityEx (
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR ExplicitDescriptor,
      PSECURITY_DESCRIPTOR *NewDescriptor,
      GUID *ObjectType,
      BOOLEAN IsDirectoryObject,
      ULONG AutoInheritFlags,
      PSECURITY_SUBJECT_CONTEXT SubjectContext,
      PGENERIC_MAPPING GenericMapping,
      POOL_TYPE PoolType
    );
#line 26531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
SeDeassignSecurity (
      PSECURITY_DESCRIPTOR *SecurityDescriptor
    );
#line 26540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
SeObjectCreateSaclAccessBits(
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );

 
__declspec(dllimport)
BOOLEAN
SeAccessCheck (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
      BOOLEAN SubjectContextLocked,
      ACCESS_MASK DesiredAccess,
      ACCESS_MASK PreviouslyGrantedAccess,
     PPRIVILEGE_SET *Privileges,
      PGENERIC_MAPPING GenericMapping,
      KPROCESSOR_MODE AccessMode,
      PACCESS_MASK GrantedAccess,
      PNTSTATUS AccessStatus
    );
#line 26564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















NTSTATUS
SeSetAuditParameter(
      PSE_ADT_PARAMETER_ARRAY AuditParameters,
      SE_ADT_PARAMETER_TYPE Type,
      ULONG Index,
      PVOID Data
    );
#line 26589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


NTSTATUS
SeReportSecurityEvent(
      ULONG Flags,
      PUNICODE_STRING SourceName,
      PSID UserSid,
      PSE_ADT_PARAMETER_ARRAY AuditParameters
    );
#line 26599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
BOOLEAN
SeValidSecurityDescriptor(
      ULONG Length,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 26610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef enum _SE_IMAGE_TYPE
{
  SeImageTypeElamDriver = 0,
  SeImageTypeDriver,
  SeImageTypeMax
} SE_IMAGE_TYPE, *PSE_IMAGE_TYPE;

typedef struct _BDCB_IMAGE_INFORMATION *PBDCB_IMAGE_INFORMATION;

typedef
 
 
void
SE_IMAGE_VERIFICATION_CALLBACK_FUNCTION (
      PVOID CallbackContext,
      SE_IMAGE_TYPE ImageType,
      PBDCB_IMAGE_INFORMATION ImageInformation
    );

typedef SE_IMAGE_VERIFICATION_CALLBACK_FUNCTION *PSE_IMAGE_VERIFICATION_CALLBACK_FUNCTION;

typedef enum _SE_IMAGE_VERIFICATION_CALLBACK_TYPE {
    SeImageVerificationCallbackInformational = 0
} SE_IMAGE_VERIFICATION_CALLBACK_TYPE, *PSE_IMAGE_VERIFICATION_CALLBACK_TYPE;

typedef PVOID SE_IMAGE_VERIFICATION_CALLBACK_TOKEN, *PSE_IMAGE_VERIFICATION_CALLBACK_TOKEN;




















#line 26663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
__forceinline
PETHREAD
PsGetCurrentThread (
    void
    )

















{

    return (PETHREAD)KeGetCurrentThread();
}

#line 26698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
 
NTSTATUS
PsCreateSystemThread(
      PHANDLE ThreadHandle,
      ULONG DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
       HANDLE ProcessHandle,
      PCLIENT_ID ClientId,
      PKSTART_ROUTINE StartRoutine,
       PVOID StartContext
    );
#line 26715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
PsTerminateSystemThread(
      NTSTATUS ExitStatus
    );
#line 26724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

__declspec(dllimport)
NTSTATUS
PsWrapApcWow64Thread (
      PVOID *ApcContext,
      PVOID *ApcRoutine);




 
 
__declspec(dllimport)
BOOLEAN
PsGetVersion(
      PULONG MajorVersion,
      PULONG MinorVersion,
      PULONG BuildNumber,
      PUNICODE_STRING CSDVersion
    );
#line 26745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 26754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














































































































#line 26865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"























































typedef enum _CREATE_FILE_TYPE {
    CreateFileTypeNone,
    CreateFileTypeNamedPipe,
    CreateFileTypeMailslot
} CREATE_FILE_TYPE;








typedef struct _NAMED_PIPE_CREATE_PARAMETERS {
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    LARGE_INTEGER DefaultTimeout;
    BOOLEAN TimeoutSpecified;
} NAMED_PIPE_CREATE_PARAMETERS, *PNAMED_PIPE_CREATE_PARAMETERS;








typedef struct _MAILSLOT_CREATE_PARAMETERS {
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    LARGE_INTEGER ReadTimeout;
    BOOLEAN TimeoutSpecified;
} MAILSLOT_CREATE_PARAMETERS, *PMAILSLOT_CREATE_PARAMETERS;










struct _DEVICE_DESCRIPTION;
struct _DEVICE_OBJECT;
struct _DMA_ADAPTER;
struct _DRIVER_OBJECT;
struct _DRIVE_LAYOUT_INFORMATION;
struct _DISK_PARTITION;

struct _FILE_OBJECT;







#line 26983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



struct __declspec(align(16)) _IRP;
struct _SCSI_REQUEST_BLOCK;
struct _SCATTER_GATHER_LIST;





 
 
 
 
typedef
void
IO_DPC_ROUTINE (
      PKDPC Dpc,
      struct _DEVICE_OBJECT *DeviceObject,
      struct _IRP *Irp,
      PVOID Context
    );

typedef IO_DPC_ROUTINE *PIO_DPC_ROUTINE;





 
 
typedef
void
IO_TIMER_ROUTINE (
      struct _DEVICE_OBJECT *DeviceObject,
      PVOID Context
    );

typedef IO_TIMER_ROUTINE *PIO_TIMER_ROUTINE;





 
 
 
typedef
NTSTATUS
DRIVER_INITIALIZE (
      struct _DRIVER_OBJECT *DriverObject,
      PUNICODE_STRING RegistryPath
    );

typedef DRIVER_INITIALIZE *PDRIVER_INITIALIZE;






 


 
 
typedef
void
DRIVER_CANCEL (
      struct _DEVICE_OBJECT *DeviceObject,
        struct _IRP *Irp
    );

typedef DRIVER_CANCEL *PDRIVER_CANCEL;








 
 
 
typedef
NTSTATUS
DRIVER_DISPATCH (
      struct _DEVICE_OBJECT *DeviceObject,
      struct _IRP *Irp
    );

typedef DRIVER_DISPATCH *PDRIVER_DISPATCH;




typedef DRIVER_DISPATCH DRIVER_DISPATCH_RAISED;









 
 
 
typedef
NTSTATUS
DRIVER_DISPATCH_PAGED (
      struct _DEVICE_OBJECT *DeviceObject,
      struct _IRP *Irp
    );

typedef DRIVER_DISPATCH_PAGED *PDRIVER_DISPATCH_PAGED;





 
 
 
 
typedef
void
DRIVER_STARTIO (
      struct _DEVICE_OBJECT *DeviceObject,
      struct _IRP *Irp
    );

typedef DRIVER_STARTIO *PDRIVER_STARTIO;




 
 
 
typedef
void
DRIVER_UNLOAD (
      struct _DRIVER_OBJECT *DriverObject
    );

typedef DRIVER_UNLOAD *PDRIVER_UNLOAD;





 
 
 

typedef
NTSTATUS
DRIVER_ADD_DEVICE (
      struct _DRIVER_OBJECT *DriverObject,
      struct _DEVICE_OBJECT *PhysicalDeviceObject
    );

typedef DRIVER_ADD_DEVICE *PDRIVER_ADD_DEVICE;








 
 
 
typedef
BOOLEAN
FAST_IO_CHECK_IF_POSSIBLE (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      ULONG LockKey,
      BOOLEAN CheckForReadOperation,
     
    
    
    PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_CHECK_IF_POSSIBLE *PFAST_IO_CHECK_IF_POSSIBLE;

 
 
typedef
BOOLEAN
FAST_IO_READ (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      ULONG LockKey,
      PVOID Buffer,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_READ *PFAST_IO_READ;

 
 
typedef
BOOLEAN
FAST_IO_WRITE (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      ULONG LockKey,
      PVOID Buffer,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_WRITE *PFAST_IO_WRITE;





 
 
 
typedef
BOOLEAN
FAST_IO_QUERY_BASIC_INFO (
      struct _FILE_OBJECT *FileObject,
      BOOLEAN Wait,
      PFILE_BASIC_INFORMATION Buffer,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_QUERY_BASIC_INFO *PFAST_IO_QUERY_BASIC_INFO;

 
 
 
typedef
BOOLEAN
FAST_IO_QUERY_STANDARD_INFO (
      struct _FILE_OBJECT *FileObject,
      BOOLEAN Wait,
      PFILE_STANDARD_INFORMATION Buffer,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_QUERY_STANDARD_INFO *PFAST_IO_QUERY_STANDARD_INFO;





 
 
typedef
BOOLEAN
FAST_IO_LOCK (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      PLARGE_INTEGER Length,
      PEPROCESS ProcessId,
      ULONG Key,
      BOOLEAN FailImmediately,
      BOOLEAN ExclusiveLock,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_LOCK *PFAST_IO_LOCK;

 
 
typedef
BOOLEAN
FAST_IO_UNLOCK_SINGLE (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      PLARGE_INTEGER Length,
      PEPROCESS ProcessId,
      ULONG Key,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_UNLOCK_SINGLE *PFAST_IO_UNLOCK_SINGLE;

 
 
typedef
BOOLEAN
FAST_IO_UNLOCK_ALL (
      struct _FILE_OBJECT *FileObject,
      PEPROCESS ProcessId,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_UNLOCK_ALL *PFAST_IO_UNLOCK_ALL;

 
 
typedef
BOOLEAN
FAST_IO_UNLOCK_ALL_BY_KEY (
      struct _FILE_OBJECT *FileObject,
      PVOID ProcessId,
      ULONG Key,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_UNLOCK_ALL_BY_KEY *PFAST_IO_UNLOCK_ALL_BY_KEY;





 
 
typedef
BOOLEAN
FAST_IO_DEVICE_CONTROL (
      struct _FILE_OBJECT *FileObject,
      BOOLEAN Wait,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength,
      ULONG IoControlCode,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_DEVICE_CONTROL *PFAST_IO_DEVICE_CONTROL;







 
 
typedef
void
FAST_IO_ACQUIRE_FILE (
      struct _FILE_OBJECT *FileObject
    );

typedef FAST_IO_ACQUIRE_FILE *PFAST_IO_ACQUIRE_FILE;

 
 
typedef
void
FAST_IO_RELEASE_FILE (
      struct _FILE_OBJECT *FileObject
    );

typedef FAST_IO_RELEASE_FILE *PFAST_IO_RELEASE_FILE;







 
 
typedef
void
FAST_IO_DETACH_DEVICE (
      struct _DEVICE_OBJECT *SourceDevice,
      struct _DEVICE_OBJECT *TargetDevice
    );

typedef FAST_IO_DETACH_DEVICE *PFAST_IO_DETACH_DEVICE;








 
 
 
typedef
BOOLEAN
FAST_IO_QUERY_NETWORK_OPEN_INFO (
      struct _FILE_OBJECT *FileObject,
      BOOLEAN Wait,
      struct _FILE_NETWORK_OPEN_INFORMATION *Buffer,
      struct _IO_STATUS_BLOCK *IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_QUERY_NETWORK_OPEN_INFO *PFAST_IO_QUERY_NETWORK_OPEN_INFO;





 
 
typedef
BOOLEAN
FAST_IO_MDL_READ (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG LockKey,
      PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_MDL_READ *PFAST_IO_MDL_READ;

 
 
typedef
BOOLEAN
FAST_IO_MDL_READ_COMPLETE (
      struct _FILE_OBJECT *FileObject,
      PMDL MdlChain,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_MDL_READ_COMPLETE *PFAST_IO_MDL_READ_COMPLETE;

 
 
typedef
BOOLEAN
FAST_IO_PREPARE_MDL_WRITE (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG LockKey,
      PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_PREPARE_MDL_WRITE *PFAST_IO_PREPARE_MDL_WRITE;

 
 
typedef
BOOLEAN
FAST_IO_MDL_WRITE_COMPLETE (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      PMDL MdlChain,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_MDL_WRITE_COMPLETE *PFAST_IO_MDL_WRITE_COMPLETE;






 
 
typedef
NTSTATUS
FAST_IO_ACQUIRE_FOR_MOD_WRITE (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER EndingOffset,
      struct _ERESOURCE **ResourceToRelease,
      struct _DEVICE_OBJECT *DeviceObject
             );

typedef FAST_IO_ACQUIRE_FOR_MOD_WRITE *PFAST_IO_ACQUIRE_FOR_MOD_WRITE;

 
 
typedef
NTSTATUS
FAST_IO_RELEASE_FOR_MOD_WRITE (
      struct _FILE_OBJECT *FileObject,
      struct _ERESOURCE *ResourceToRelease,
      struct _DEVICE_OBJECT *DeviceObject
             );

typedef FAST_IO_RELEASE_FOR_MOD_WRITE *PFAST_IO_RELEASE_FOR_MOD_WRITE;






 
 
typedef
NTSTATUS
FAST_IO_ACQUIRE_FOR_CCFLUSH (
      struct _FILE_OBJECT *FileObject,
      struct _DEVICE_OBJECT *DeviceObject
             );

typedef FAST_IO_ACQUIRE_FOR_CCFLUSH *PFAST_IO_ACQUIRE_FOR_CCFLUSH;

 
 
typedef
NTSTATUS
FAST_IO_RELEASE_FOR_CCFLUSH (
      struct _FILE_OBJECT *FileObject,
      struct _DEVICE_OBJECT *DeviceObject
             );

typedef FAST_IO_RELEASE_FOR_CCFLUSH *PFAST_IO_RELEASE_FOR_CCFLUSH;

 
 
typedef
BOOLEAN
FAST_IO_READ_COMPRESSED (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG LockKey,
      PVOID Buffer,
      PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus,
      struct _COMPRESSED_DATA_INFO *CompressedDataInfo,
      ULONG CompressedDataInfoLength,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_READ_COMPRESSED *PFAST_IO_READ_COMPRESSED;

 
 
typedef
BOOLEAN
FAST_IO_WRITE_COMPRESSED (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG LockKey,
      PVOID Buffer,
      PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus,
      struct _COMPRESSED_DATA_INFO *CompressedDataInfo,
      ULONG CompressedDataInfoLength,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_WRITE_COMPRESSED *PFAST_IO_WRITE_COMPRESSED;

 
 
typedef
BOOLEAN
FAST_IO_MDL_READ_COMPLETE_COMPRESSED (
      struct _FILE_OBJECT *FileObject,
      PMDL MdlChain,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_MDL_READ_COMPLETE_COMPRESSED *PFAST_IO_MDL_READ_COMPLETE_COMPRESSED;

 
 
typedef
BOOLEAN
FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED (
      struct _FILE_OBJECT *FileObject,
      PLARGE_INTEGER FileOffset,
      PMDL MdlChain,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_MDL_WRITE_COMPLETE_COMPRESSED *PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED;

 
 
typedef
BOOLEAN
FAST_IO_QUERY_OPEN (
      struct _IRP *Irp,
      PFILE_NETWORK_OPEN_INFORMATION NetworkInformation,
      struct _DEVICE_OBJECT *DeviceObject
    );

typedef FAST_IO_QUERY_OPEN *PFAST_IO_QUERY_OPEN;







typedef struct _FAST_IO_DISPATCH {
    ULONG SizeOfFastIoDispatch;
    PFAST_IO_CHECK_IF_POSSIBLE FastIoCheckIfPossible;
    PFAST_IO_READ FastIoRead;
    PFAST_IO_WRITE FastIoWrite;
    PFAST_IO_QUERY_BASIC_INFO FastIoQueryBasicInfo;
    PFAST_IO_QUERY_STANDARD_INFO FastIoQueryStandardInfo;
    PFAST_IO_LOCK FastIoLock;
    PFAST_IO_UNLOCK_SINGLE FastIoUnlockSingle;
    PFAST_IO_UNLOCK_ALL FastIoUnlockAll;
    PFAST_IO_UNLOCK_ALL_BY_KEY FastIoUnlockAllByKey;
    PFAST_IO_DEVICE_CONTROL FastIoDeviceControl;
    PFAST_IO_ACQUIRE_FILE AcquireFileForNtCreateSection;
    PFAST_IO_RELEASE_FILE ReleaseFileForNtCreateSection;
    PFAST_IO_DETACH_DEVICE FastIoDetachDevice;
    PFAST_IO_QUERY_NETWORK_OPEN_INFO FastIoQueryNetworkOpenInfo;
    PFAST_IO_ACQUIRE_FOR_MOD_WRITE AcquireForModWrite;
    PFAST_IO_MDL_READ MdlRead;
    PFAST_IO_MDL_READ_COMPLETE MdlReadComplete;
    PFAST_IO_PREPARE_MDL_WRITE PrepareMdlWrite;
    PFAST_IO_MDL_WRITE_COMPLETE MdlWriteComplete;
    PFAST_IO_READ_COMPRESSED FastIoReadCompressed;
    PFAST_IO_WRITE_COMPRESSED FastIoWriteCompressed;
    PFAST_IO_MDL_READ_COMPLETE_COMPRESSED MdlReadCompleteCompressed;
    PFAST_IO_MDL_WRITE_COMPLETE_COMPRESSED MdlWriteCompleteCompressed;
    PFAST_IO_QUERY_OPEN FastIoQueryOpen;
    PFAST_IO_RELEASE_FOR_MOD_WRITE ReleaseForModWrite;
    PFAST_IO_ACQUIRE_FOR_CCFLUSH AcquireForCcFlush;
    PFAST_IO_RELEASE_FOR_CCFLUSH ReleaseForCcFlush;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;






typedef enum _IO_ALLOCATION_ACTION {
    KeepObject = 1,
    DeallocateObject,
    DeallocateObjectKeepRegisters
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;





typedef
 
 
IO_ALLOCATION_ACTION
DRIVER_CONTROL (
      struct _DEVICE_OBJECT *DeviceObject,
      struct _IRP *Irp,
      PVOID MapRegisterBase,
      PVOID Context
    );
typedef DRIVER_CONTROL *PDRIVER_CONTROL;







typedef struct _IO_SECURITY_CONTEXT {
    PSECURITY_QUALITY_OF_SERVICE SecurityQos;
    PACCESS_STATE AccessState;
    ACCESS_MASK DesiredAccess;
    ULONG FullCreateOptions;
} IO_SECURITY_CONTEXT, *PIO_SECURITY_CONTEXT;



















typedef struct _VPB {
    CSHORT Type;
    CSHORT Size;
    USHORT Flags;
    USHORT VolumeLabelLength; 
    struct _DEVICE_OBJECT *DeviceObject;
    struct _DEVICE_OBJECT *RealDevice;
    ULONG SerialNumber;
    ULONG ReferenceCount;
    WCHAR VolumeLabel[(32 * sizeof(WCHAR)) / sizeof(WCHAR)];
} VPB, *PVPB;









#line 27708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 27715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 27717 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef struct _DMA_ADAPTER *PADAPTER_OBJECT;













#line 27740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _WAIT_CONTEXT_BLOCK {
    union {
        KDEVICE_QUEUE_ENTRY WaitQueueEntry;
        struct {
            LIST_ENTRY DmaWaitEntry;
            ULONG NumberOfChannels;
            ULONG SyncCallback : 1;
            ULONG DmaContext : 1;
            ULONG ZeroMapRegisters : 1;
            ULONG Reserved : 29;
        };
    };
    PDRIVER_CONTROL DeviceRoutine;
    PVOID DeviceContext;
    ULONG NumberOfMapRegisters;
    PVOID DeviceObject;
    PVOID CurrentIrp;
    PKDPC BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;

























#pragma warning(push)
#pragma warning(disable:4324) 
#line 27792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct __declspec(align(16)) _DEVICE_OBJECT {
    CSHORT Type;
    USHORT Size;
    LONG ReferenceCount;
    struct _DRIVER_OBJECT *DriverObject;
    struct _DEVICE_OBJECT *NextDevice;
    struct _DEVICE_OBJECT *AttachedDevice;
    struct _IRP *CurrentIrp;
    PIO_TIMER Timer;
    ULONG Flags;                                
    ULONG Characteristics;                      
     PVPB Vpb;
    PVOID DeviceExtension;
    ULONG DeviceType;
    CCHAR StackSize;
    union {
        LIST_ENTRY ListEntry;
        WAIT_CONTEXT_BLOCK Wcb;
    } Queue;
    ULONG AlignmentRequirement;
    KDEVICE_QUEUE DeviceQueue;
    KDPC Dpc;

    
    
    
    

    ULONG ActiveThreadCount;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
    KEVENT DeviceLock;

    USHORT SectorSize;
    USHORT Spare1;

    struct _DEVOBJ_EXTENSION  *DeviceObjectExtension;
    PVOID  Reserved;

} DEVICE_OBJECT;

typedef struct _DEVICE_OBJECT *PDEVICE_OBJECT; 


#pragma warning(pop)
#line 27838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


struct  _DEVICE_OBJECT_POWER_EXTENSION;

typedef struct _DEVOBJ_EXTENSION {

    CSHORT          Type;
    USHORT          Size;

    PDEVICE_OBJECT  DeviceObject;               

    
    
    

    ULONG           PowerFlags;                             
    struct          _DEVICE_OBJECT_POWER_EXTENSION  *Dope;  
    ULONG ExtensionFlags;                                   
    PVOID           DeviceNode;                             
    PDEVICE_OBJECT  AttachedTo;                             
     LONG StartIoCount;                           
    LONG           StartIoKey;                              
    ULONG          StartIoFlags;                            
    PVPB           Vpb;                                     
    PVOID DependencyNode;                                   
    PVOID InterruptContext;                                 

     PVOID VerifierContext;

} DEVOBJ_EXTENSION, *PDEVOBJ_EXTENSION;









typedef struct _DRIVER_EXTENSION {

    
    
    

    struct _DRIVER_OBJECT *DriverObject;

    
    
    
    
    

    PDRIVER_ADD_DEVICE AddDevice;

    
    
    
    

    ULONG Count;

    
    
    
    

    UNICODE_STRING ServiceKeyName;

    
    
    


} DRIVER_EXTENSION, *PDRIVER_EXTENSION;

typedef struct _DRIVER_OBJECT {
    CSHORT Type;
    CSHORT Size;

    
    
    
    
    

    PDEVICE_OBJECT DeviceObject;
    ULONG Flags;

    
    
    
    
    

    PVOID DriverStart;
    ULONG DriverSize;
    PVOID DriverSection;
    PDRIVER_EXTENSION DriverExtension;

    
    
    
    

    UNICODE_STRING DriverName;

    
    
    
    

    PUNICODE_STRING HardwareDatabase;

    
    
    
    
    
    
    
    

    PFAST_IO_DISPATCH FastIoDispatch;

    
    
    
    
    

    PDRIVER_INITIALIZE DriverInit;
    PDRIVER_STARTIO DriverStartIo;
    PDRIVER_UNLOAD DriverUnload;
    PDRIVER_DISPATCH MajorFunction[0x1b + 1];

} DRIVER_OBJECT;
typedef struct _DRIVER_OBJECT *PDRIVER_OBJECT; 








typedef struct _SECTION_OBJECT_POINTERS {
    PVOID DataSectionObject;
    PVOID SharedCacheMap;
    PVOID ImageSectionObject;
} SECTION_OBJECT_POINTERS;
typedef SECTION_OBJECT_POINTERS *PSECTION_OBJECT_POINTERS;





typedef struct _IO_COMPLETION_CONTEXT {
    PVOID Port;
    PVOID Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;














































typedef struct _FILE_OBJECT {
    CSHORT Type;
    CSHORT Size;
    PDEVICE_OBJECT DeviceObject;
    PVPB Vpb;
    PVOID FsContext;
    PVOID FsContext2;
    PSECTION_OBJECT_POINTERS SectionObjectPointer;
    PVOID PrivateCacheMap;
    NTSTATUS FinalStatus;
    struct _FILE_OBJECT *RelatedFileObject;
    BOOLEAN LockOperation;
    BOOLEAN DeletePending;
    BOOLEAN ReadAccess;
    BOOLEAN WriteAccess;
    BOOLEAN DeleteAccess;
    BOOLEAN SharedRead;
    BOOLEAN SharedWrite;
    BOOLEAN SharedDelete;
    ULONG Flags;
    UNICODE_STRING FileName;
    LARGE_INTEGER CurrentByteOffset;
     ULONG Waiters;
     ULONG Busy;
    PVOID LastLock;
    KEVENT Lock;
    KEVENT Event;
     PIO_COMPLETION_CONTEXT CompletionContext;
    KSPIN_LOCK IrpListLock;
    LIST_ENTRY IrpList;
     PVOID FileObjectExtension;
} FILE_OBJECT;
typedef struct _FILE_OBJECT *PFILE_OBJECT; 






































typedef struct __declspec(align(16)) _IRP {
    CSHORT Type;
    USHORT Size;


    
    
    

    
    
    
    

    PMDL MdlAddress;

    
    
    

    ULONG Flags;

    
    
    
    
    
    
    
    
    
    
    
    
    

    union {
        struct _IRP *MasterIrp;
         LONG IrpCount;
        PVOID SystemBuffer;
    } AssociatedIrp;

    
    
    
    

    LIST_ENTRY ThreadListEntry;

    
    
    

    IO_STATUS_BLOCK IoStatus;

    
    
    

    KPROCESSOR_MODE RequestorMode;

    
    
    
    

    BOOLEAN PendingReturned;

    
    
    

    CHAR StackCount;
    CHAR CurrentLocation;

    
    
    

    BOOLEAN Cancel;

    
    
    

    KIRQL CancelIrql;

    
    
    
    

    CCHAR ApcEnvironment;

    
    
    

    UCHAR AllocationFlags;

    
    
    

    PIO_STATUS_BLOCK UserIosb;
    PKEVENT UserEvent;
    union {
        struct {
            union {
                PIO_APC_ROUTINE UserApcRoutine;
                PVOID IssuingProcess;
            };
            PVOID UserApcContext;
        } AsynchronousParameters;
        LARGE_INTEGER AllocationSize;
    } Overlay;

    
    
    
    

     PDRIVER_CANCEL CancelRoutine;

    
    
    
    
    
    
    

    PVOID UserBuffer;

    
    
    
    
    
    
    
    
    

    union {

        struct {

            union {

                
                
                
                

                KDEVICE_QUEUE_ENTRY DeviceQueueEntry;

                struct {

                    
                    
                    
                    
                    

                    PVOID DriverContext[4];

                } ;

            } ;

            
            
            

            PETHREAD Thread;

            
            
            
            
            

            PCHAR AuxiliaryBuffer;

            
            
            
            
            

            struct {

                
                
                
                

                LIST_ENTRY ListEntry;

                union {

                    
                    
                    
                    
                    
                    

                    struct _IO_STACK_LOCATION *CurrentStackLocation;

                    
                    
                    

                    ULONG PacketType;
                };
            };

            
            
            
            
            

            PFILE_OBJECT OriginalFileObject;

        } Overlay;

        
        
        
        
        
        
        

        KAPC Apc;

        
        
        
        

        PVOID CompletionKey;

    } Tail;

} IRP;

typedef IRP *PIRP;






 
 
 
typedef
NTSTATUS
IO_COMPLETION_ROUTINE (
      PDEVICE_OBJECT DeviceObject,
      PIRP Irp,
      PVOID Context
    );

typedef IO_COMPLETION_ROUTINE *PIO_COMPLETION_ROUTINE;















































































































































typedef enum _DEVICE_RELATION_TYPE {
    BusRelations,
    EjectionRelations,
    PowerRelations,
    RemovalRelations,
    TargetDeviceRelation,
    SingleBusRelations,
    TransportRelations
} DEVICE_RELATION_TYPE, *PDEVICE_RELATION_TYPE;

typedef struct _DEVICE_RELATIONS {
    ULONG Count;
      PDEVICE_OBJECT Objects[1];  
} DEVICE_RELATIONS, *PDEVICE_RELATIONS;









typedef enum _DEVICE_USAGE_NOTIFICATION_TYPE {
    DeviceUsageTypeUndefined,
    DeviceUsageTypePaging,
    DeviceUsageTypeHibernation,
    DeviceUsageTypeDumpFile,
    DeviceUsageTypeBoot,
    DeviceUsageTypePostDisplay
} DEVICE_USAGE_NOTIFICATION_TYPE;







typedef struct _INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;
    
} INTERFACE, *PINTERFACE;



typedef   struct _DEVICE_CAPABILITIES {
      USHORT Size;
    USHORT Version;  
    ULONG DeviceD1:1;
    ULONG DeviceD2:1;
    ULONG LockSupported:1;
    ULONG EjectSupported:1; 
    ULONG Removable:1;
    ULONG DockDevice:1;
    ULONG UniqueID:1;
    ULONG SilentInstall:1;
    ULONG RawDeviceOK:1;
    ULONG SurpriseRemovalOK:1;
    ULONG WakeFromD0:1;
    ULONG WakeFromD1:1;
    ULONG WakeFromD2:1;
    ULONG WakeFromD3:1;
    ULONG HardwareDisabled:1;
    ULONG NonDynamic:1;
    ULONG WarmEjectSupported:1;
    ULONG NoDisplayInUI:1;
    ULONG Reserved1:1;
    ULONG WakeFromInterrupt:1;
    ULONG SecureDevice:1;
    ULONG Reserved:11;

    ULONG Address;
    ULONG UINumber;

    DEVICE_POWER_STATE DeviceState[7];
      SYSTEM_POWER_STATE SystemWake;
      DEVICE_POWER_STATE DeviceWake;
    ULONG D1Latency;
    ULONG D2Latency;
    ULONG D3Latency;
} DEVICE_CAPABILITIES, *PDEVICE_CAPABILITIES;

typedef struct _POWER_SEQUENCE {
    ULONG SequenceD1;
    ULONG SequenceD2;
    ULONG SequenceD3;
} POWER_SEQUENCE, *PPOWER_SEQUENCE;

typedef enum {
    BusQueryDeviceID = 0,       
    BusQueryHardwareIDs = 1,    
    BusQueryCompatibleIDs = 2,  
    BusQueryInstanceID = 3,     
    BusQueryDeviceSerialNumber = 4,   
    BusQueryContainerID = 5     
} BUS_QUERY_ID_TYPE, *PBUS_QUERY_ID_TYPE;

typedef ULONG PNP_DEVICE_STATE, *PPNP_DEVICE_STATE;









typedef enum {
    DeviceTextDescription = 0,            
    DeviceTextLocationInformation = 1     
} DEVICE_TEXT_TYPE, *PDEVICE_TEXT_TYPE;








#line 28652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 28660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




#pragma warning(push)
#pragma warning(disable:4324) 
#line 28667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _IO_STACK_LOCATION {
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    UCHAR Flags;
    UCHAR Control;

    
    
    
    
    

    union {

        
        
        

        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT __declspec(align(8)) FileAttributes;
            USHORT ShareAccess;
            ULONG __declspec(align(8)) EaLength;
        } Create;

        
        
        
        
        
        
        
        

        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT __declspec(align(8)) Reserved;
            USHORT ShareAccess;
            PNAMED_PIPE_CREATE_PARAMETERS Parameters;
        } CreatePipe;

        
        
        
        
        
        
        
        

        struct {
            PIO_SECURITY_CONTEXT SecurityContext;
            ULONG Options;
            USHORT __declspec(align(8)) Reserved;
            USHORT ShareAccess;
            PMAILSLOT_CREATE_PARAMETERS Parameters;
        } CreateMailslot;

        
        
        

        struct {
            ULONG Length;
            ULONG __declspec(align(8)) Key;
            LARGE_INTEGER ByteOffset;
        } Read;

        
        
        

        struct {
            ULONG Length;
            ULONG __declspec(align(8)) Key;
            LARGE_INTEGER ByteOffset;
        } Write;

        
        
        

        struct {
            ULONG Length;
            PUNICODE_STRING FileName;
            FILE_INFORMATION_CLASS FileInformationClass;
            ULONG __declspec(align(8)) FileIndex;
        } QueryDirectory;

        
        
        

        struct {
            ULONG Length;
            ULONG __declspec(align(8)) CompletionFilter;
        } NotifyDirectory;

        
        
        

        struct {
            ULONG Length;
            FILE_INFORMATION_CLASS __declspec(align(8)) FileInformationClass;
        } QueryFile;

        
        
        

        struct {
            ULONG Length;
            FILE_INFORMATION_CLASS __declspec(align(8)) FileInformationClass;
            PFILE_OBJECT FileObject;
            union {
                struct {
                    BOOLEAN ReplaceIfExists;
                    BOOLEAN AdvanceOnly;
                };
                ULONG ClusterCount;
                HANDLE DeleteHandle;
            };
        } SetFile;



        
        
        

        struct {
            ULONG Length;
            PVOID EaList;
            ULONG EaListLength;
            ULONG __declspec(align(8)) EaIndex;
        } QueryEa;

        
        
        

        struct {
            ULONG Length;
        } SetEa;



        
        
        

        struct {
            ULONG Length;
            FS_INFORMATION_CLASS __declspec(align(8)) FsInformationClass;
        } QueryVolume;



        
        
        

        struct {
            ULONG Length;
            FS_INFORMATION_CLASS __declspec(align(8)) FsInformationClass;
        } SetVolume;

        
        
        
        
        
        

        struct {
            ULONG OutputBufferLength;
            ULONG __declspec(align(8)) InputBufferLength;
            ULONG __declspec(align(8)) FsControlCode;
            PVOID Type3InputBuffer;
        } FileSystemControl;
        
        
        

        struct {
            PLARGE_INTEGER Length;
            ULONG __declspec(align(8)) Key;
            LARGE_INTEGER ByteOffset;
        } LockControl;

        
        
        
        
        



        
        
        
        
        



        
        
        
        
        
        

        struct {
            ULONG OutputBufferLength;
            ULONG __declspec(align(8)) InputBufferLength;
            ULONG __declspec(align(8)) IoControlCode;
            PVOID Type3InputBuffer;
        } DeviceIoControl;

        
        
        

        struct {
            SECURITY_INFORMATION SecurityInformation;
            ULONG __declspec(align(8)) Length;
        } QuerySecurity;

        
        
        

        struct {
            SECURITY_INFORMATION SecurityInformation;
            PSECURITY_DESCRIPTOR SecurityDescriptor;
        } SetSecurity;

        
        
        
        
        

        struct {
            PVPB Vpb;
            PDEVICE_OBJECT DeviceObject;
        } MountVolume;

        
        
        

        struct {
            PVPB Vpb;
            PDEVICE_OBJECT DeviceObject;
        } VerifyVolume;

        
        
        

        struct {
            struct _SCSI_REQUEST_BLOCK *Srb;
        } Scsi;



        
        
        

        struct {
            ULONG Length;
            PSID StartSid;
            PFILE_GET_QUOTA_INFORMATION SidList;
            ULONG SidListLength;
        } QueryQuota;

        
        
        

        struct {
            ULONG Length;
        } SetQuota;



        
        
        

        struct {
            DEVICE_RELATION_TYPE Type;
        } QueryDeviceRelations;

        
        
        

        struct {
            const GUID *InterfaceType;
            USHORT Size;
            USHORT Version;
            PINTERFACE Interface;
            PVOID InterfaceSpecificData;
        } QueryInterface;

        
        
        

        struct {
            PDEVICE_CAPABILITIES Capabilities;
        } DeviceCapabilities;

        
        
        

        struct {
            PIO_RESOURCE_REQUIREMENTS_LIST IoResourceRequirementList;
        } FilterResourceRequirements;

        
        
        

        struct {
            ULONG WhichSpace;
            PVOID Buffer;
            ULONG Offset;
            ULONG __declspec(align(8)) Length;
        } ReadWriteConfig;

        
        
        

        struct {
            BOOLEAN Lock;
        } SetLock;

        
        
        

        struct {
            BUS_QUERY_ID_TYPE IdType;
        } QueryId;

        
        
        

        struct {
            DEVICE_TEXT_TYPE DeviceTextType;
            LCID __declspec(align(8)) LocaleId;
        } QueryDeviceText;

        
        
        

        struct {
            BOOLEAN InPath;
            BOOLEAN Reserved[3];
            DEVICE_USAGE_NOTIFICATION_TYPE __declspec(align(8)) Type;
        } UsageNotification;

        
        
        

        struct {
            SYSTEM_POWER_STATE PowerState;
        } WaitWake;

        
        
        

        struct {
            PPOWER_SEQUENCE PowerSequence;
        } PowerSequence;

        
        
        


        struct {
            union {
                ULONG SystemContext;
                SYSTEM_POWER_STATE_CONTEXT SystemPowerStateContext;
            };
            POWER_STATE_TYPE __declspec(align(8)) Type;
            POWER_STATE __declspec(align(8)) State;
            POWER_ACTION __declspec(align(8)) ShutdownType;
        } Power;







#line 29080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

        
        
        

        struct {
            PCM_RESOURCE_LIST AllocatedResources;
            PCM_RESOURCE_LIST AllocatedResourcesTranslated;
        } StartDevice;

        
        
        
        
        

        
        
        

        struct {
            ULONG_PTR ProviderId;
            PVOID DataPath;
            ULONG BufferSize;
            PVOID Buffer;
        } WMI;

        
        
        

        struct {
            PVOID Argument1;
            PVOID Argument2;
            PVOID Argument3;
            PVOID Argument4;
        } Others;

    } Parameters;

    
    
    
    

    PDEVICE_OBJECT DeviceObject;

    
    
    
    

    PFILE_OBJECT FileObject;

    
    
    
    

    PIO_COMPLETION_ROUTINE CompletionRoutine;

    
    
    
    

    PVOID Context;

} IO_STACK_LOCATION, *PIO_STACK_LOCATION;


#pragma warning(pop)
#line 29153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 29157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef struct _SHARE_ACCESS {
    ULONG OpenCount;
    ULONG Readers;
    ULONG Writers;
    ULONG Deleters;
    ULONG SharedRead;
    ULONG SharedWrite;
    ULONG SharedDelete;
} SHARE_ACCESS, *PSHARE_ACCESS;








 
 
__declspec(dllimport)
void
IoAcquireCancelSpinLock(
       PKIRQL Irql
    );
#line 29188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
NTSTATUS
IoAllocateDriverObjectExtension(
       PDRIVER_OBJECT DriverObject,
       PVOID ClientIdentificationAddress,
       ULONG DriverObjectExtensionSize,
    
     
#line 29202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    
    PVOID *DriverObjectExtension
    );
#line 29206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PVOID
IoAllocateErrorLogEntry(
      PVOID IoObject,
      UCHAR EntrySize
    );
#line 29216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
PIRP
IoAllocateIrp(
      CCHAR StackSize,
      BOOLEAN ChargeQuota
    );
#line 29227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 29239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 29243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PMDL
IoAllocateMdl(
        PVOID VirtualAddress,
      ULONG Length,
      BOOLEAN SecondaryBuffer,
      BOOLEAN ChargeQuota,
      PIRP Irp
    );
#line 29256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _IO_PAGING_PRIORITY {
    IoPagingPriorityInvalid,        
    IoPagingPriorityNormal,         
    IoPagingPriorityHigh,           
    IoPagingPriorityReserved1,      
    IoPagingPriorityReserved2       
} IO_PAGING_PRIORITY;


 
 
__declspec(dllimport)
NTSTATUS
IoAttachDevice(
      
    PDEVICE_OBJECT SourceDevice,
       PUNICODE_STRING TargetDevice,
      PDEVICE_OBJECT *AttachedDevice
    );
#line 29277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
PDEVICE_OBJECT
IoAttachDeviceToDeviceStack(
      
    PDEVICE_OBJECT SourceDevice,
      PDEVICE_OBJECT TargetDevice
    );
#line 29290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
__declspec(dllimport)
PIRP
IoBuildAsynchronousFsdRequest(
      ULONG MajorFunction,
      PDEVICE_OBJECT DeviceObject,
      PVOID Buffer,
      ULONG Length,
      PLARGE_INTEGER StartingOffset,
      PIO_STATUS_BLOCK IoStatusBlock
    );
#line 29306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
__declspec(dllimport)
PIRP
IoBuildDeviceIoControlRequest(
       ULONG IoControlCode,
       PDEVICE_OBJECT DeviceObject,
       PVOID InputBuffer,
       ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength,
      BOOLEAN InternalDeviceIoControl,
      PKEVENT Event,
      PIO_STATUS_BLOCK IoStatusBlock
    );
#line 29325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoBuildPartialMdl(
      PMDL SourceMdl,
      PMDL TargetMdl,
      PVOID VirtualAddress,
      ULONG Length
    );
#line 29337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _BOOTDISK_INFORMATION {
    LONGLONG BootPartitionOffset;
    LONGLONG SystemPartitionOffset;
    ULONG BootDeviceSignature;
    ULONG SystemDeviceSignature;
} BOOTDISK_INFORMATION, *PBOOTDISK_INFORMATION;




typedef struct _BOOTDISK_INFORMATION_EX {
    LONGLONG BootPartitionOffset;
    LONGLONG SystemPartitionOffset;
    ULONG BootDeviceSignature;
    ULONG SystemDeviceSignature;
    GUID BootDeviceGuid;
    GUID SystemDeviceGuid;
    BOOLEAN BootDeviceIsGpt;
    BOOLEAN SystemDeviceIsGpt;
} BOOTDISK_INFORMATION_EX, *PBOOTDISK_INFORMATION_EX;


typedef struct _LOADER_PARTITION_INFORMATION_EX {
    ULONG PartitionStyle;
    ULONG PartitionNumber;
    union {
        ULONG Signature;
        GUID DeviceId;
    };
    ULONG Flags;
} LOADER_PARTITION_INFORMATION_EX, *PLOADER_PARTITION_INFORMATION_EX;

typedef struct _BOOTDISK_INFORMATION_LITE {
    ULONG NumberEntries;
    LOADER_PARTITION_INFORMATION_EX Entries[1];
} BOOTDISK_INFORMATION_LITE, *PBOOTDISK_INFORMATION_LITE;













#line 29388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoGetBootDiskInformation(
      PBOOTDISK_INFORMATION BootDiskInformation,
      ULONG Size
    );
#line 29397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoGetBootDiskInformationLite(
     PBOOTDISK_INFORMATION_LITE *BootDiskInformation
    );

#line 29406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
 
 
__declspec(dllimport)
PIRP
IoBuildSynchronousFsdRequest(
       ULONG MajorFunction,
       PDEVICE_OBJECT DeviceObject,
    PVOID Buffer,
      ULONG Length,
      PLARGE_INTEGER StartingOffset,
       PKEVENT Event,
      PIO_STATUS_BLOCK IoStatusBlock
    );
#line 29427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS

IofCallDriver(
      PDEVICE_OBJECT DeviceObject,
        PIRP Irp
    );
#line 29439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






 
__declspec(dllimport)
BOOLEAN
IoCancelIrp(
      PIRP Irp
    );
#line 29452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
IoCheckShareAccess(
      ACCESS_MASK DesiredAccess,
      ULONG DesiredShareAccess,
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess,
      BOOLEAN Update
    );
#line 29466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoCheckShareAccessEx(
      ACCESS_MASK DesiredAccess,
      ULONG DesiredShareAccess,
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess,
      BOOLEAN Update,
      PBOOLEAN WritePermission
    );
#line 29479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef enum _IO_COMPLETION_ROUTINE_RESULT {

    ContinueCompletion = ((NTSTATUS)0x00000000L),
    StopCompletion = ((NTSTATUS)0xC0000016L)

} IO_COMPLETION_ROUTINE_RESULT, *PIO_COMPLETION_ROUTINE_RESULT;


 
__declspec(dllimport)
void

IofCompleteRequest(
      PIRP Irp,
      CCHAR PriorityBoost
    );
#line 29507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 
__declspec(dllimport)
NTSTATUS
IoConnectInterrupt(
      PKINTERRUPT *InterruptObject,
       PKSERVICE_ROUTINE ServiceRoutine,
      PVOID ServiceContext,
      PKSPIN_LOCK SpinLock,
       ULONG Vector,
       KIRQL Irql,
       KIRQL SynchronizeIrql,
       KINTERRUPT_MODE InterruptMode,
       BOOLEAN ShareVector,
       KAFFINITY ProcessorEnableMask,
       BOOLEAN FloatingSave
    );
#line 29529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _IO_INTERRUPT_MESSAGE_INFO_ENTRY {

    
    
    
    

    PHYSICAL_ADDRESS MessageAddress;

    
    
    
    

    KAFFINITY TargetProcessorSet;

    
    
    
    

    PKINTERRUPT InterruptObject;

    
    
    
    

    ULONG MessageData;

    
    
    
    
    
    
    

    ULONG Vector;
    KIRQL Irql;
    KINTERRUPT_MODE Mode;
    KINTERRUPT_POLARITY Polarity;

} IO_INTERRUPT_MESSAGE_INFO_ENTRY, *PIO_INTERRUPT_MESSAGE_INFO_ENTRY;





typedef struct _IO_INTERRUPT_MESSAGE_INFO {

    
    
    
    
    
    
    
    
    
    
    
    
    

    KIRQL UnifiedIrql;

    
    
    
    

    ULONG MessageCount;

    
    
    
    
    
    

    IO_INTERRUPT_MESSAGE_INFO_ENTRY MessageInfo[1];

} IO_INTERRUPT_MESSAGE_INFO, *PIO_INTERRUPT_MESSAGE_INFO;






typedef struct _IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS {

    
    
    
    
    
    

      PDEVICE_OBJECT PhysicalDeviceObject;

    
    
    
    
    

      PKINTERRUPT *InterruptObject;

    
    
    
    

      PKSERVICE_ROUTINE ServiceRoutine;

    
    
    
    

      PVOID ServiceContext;

    
    
    
    
    
    
    
    
    
    

      PKSPIN_LOCK SpinLock;

    
    
    
    
    
    
    
    
    
    

      KIRQL SynchronizeIrql;

    
    
    
    

      BOOLEAN FloatingSave;

    
    
    
    
    
    

      BOOLEAN ShareVector;

    
    
    
    
    
    

      ULONG Vector;

    
    
    
    
    

      KIRQL Irql;

    
    
    
    
    
    
    

      KINTERRUPT_MODE InterruptMode;

    
    
    
    
    
    

      KAFFINITY ProcessorEnableMask;

    
    
    
    
    
    
    
    

      USHORT Group;

} IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS,
  *PIO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS;






typedef struct _IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS {

    
    
    
    
    
    
    

      PDEVICE_OBJECT PhysicalDeviceObject;

    
    
    
    
    

      PKINTERRUPT *InterruptObject;

    
    
    
    

      PKSERVICE_ROUTINE ServiceRoutine;

    
    
    
    

      PVOID ServiceContext;

    
    
    
    
    
    
    
    
    
    

      PKSPIN_LOCK SpinLock;

    
    
    
    
    
    
    
    
    
    
    
    
    
    

      KIRQL SynchronizeIrql;

    
    
    
    

      BOOLEAN FloatingSave;

} IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS,
  *PIO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS;






typedef struct _IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS {

    
    
    
    
    
    
    

      PDEVICE_OBJECT PhysicalDeviceObject;

    
    
    
    
    
    
    
    
    
    

    union {
          PVOID *Generic;
          PIO_INTERRUPT_MESSAGE_INFO *InterruptMessageTable;
          PKINTERRUPT *InterruptObject;
    } ConnectionContext;

    
    
    
    
    

      PKMESSAGE_SERVICE_ROUTINE MessageServiceRoutine;

    
    
    
    

      PVOID ServiceContext;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

      PKSPIN_LOCK SpinLock;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

      KIRQL SynchronizeIrql;

    
    
    
    

      BOOLEAN FloatingSave;

    
    
    
    
    
    
    
    
    
    
    
    
    
    

      PKSERVICE_ROUTINE FallBackServiceRoutine;

} IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS,
  *PIO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS;

















typedef struct _IO_CONNECT_INTERRUPT_PARAMETERS {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

      ULONG Version;

    
    
    
    

    union {
        IO_CONNECT_INTERRUPT_FULLY_SPECIFIED_PARAMETERS FullySpecified;
        IO_CONNECT_INTERRUPT_LINE_BASED_PARAMETERS LineBased;
        IO_CONNECT_INTERRUPT_MESSAGE_BASED_PARAMETERS MessageBased;
    };

} IO_CONNECT_INTERRUPT_PARAMETERS, *PIO_CONNECT_INTERRUPT_PARAMETERS;


__declspec(dllimport)
NTSTATUS
IoConnectInterruptEx (
      PIO_CONNECT_INTERRUPT_PARAMETERS Parameters
    );
#line 30031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
NTSTATUS
IoCreateDevice(
       PDRIVER_OBJECT DriverObject,
       ULONG DeviceExtensionSize,
      PUNICODE_STRING DeviceName,
       ULONG DeviceType,
       ULONG DeviceCharacteristics,
       BOOLEAN Exclusive,
    
    
#line 30051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    PDEVICE_OBJECT *DeviceObject
    );
#line 30054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





 
 
__declspec(dllimport)
BOOLEAN
IoIsWdmVersionAvailable(
     UCHAR MajorVersion,
#line 30066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
      
#line 30069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    UCHAR MinorVersion
    );
#line 30072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoCreateFile(
      PHANDLE FileHandle,
       ACCESS_MASK DesiredAccess,
       POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER AllocationSize,
       ULONG FileAttributes,
       ULONG ShareAccess,
       ULONG Disposition,
       ULONG CreateOptions,
      PVOID EaBuffer,
       ULONG EaLength,
       CREATE_FILE_TYPE CreateFileType,
      PVOID InternalParameters,
       ULONG Options
    );
#line 30094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
PKEVENT
IoCreateNotificationEvent(
       PUNICODE_STRING EventName,
      PHANDLE EventHandle
    );
#line 30105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoCreateSymbolicLink(
      PUNICODE_STRING SymbolicLinkName,
      PUNICODE_STRING DeviceName
    );
#line 30115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PKEVENT
IoCreateSynchronizationEvent(
       PUNICODE_STRING EventName,
      PHANDLE EventHandle
    );
#line 30125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoCreateUnprotectedSymbolicLink(
      PUNICODE_STRING SymbolicLinkName,
      PUNICODE_STRING DeviceName
    );
#line 30135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
void
IoDeleteDevice(
        PDEVICE_OBJECT DeviceObject
    );
#line 30146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoDeleteSymbolicLink(
      PUNICODE_STRING SymbolicLinkName
    );
#line 30155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoDetachDevice(
      PDEVICE_OBJECT TargetDevice
    );
#line 30164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoDisconnectInterrupt(
      PKINTERRUPT InterruptObject
    );
#line 30173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _IO_DISCONNECT_INTERRUPT_PARAMETERS {

    
    
    
    
    
    

      ULONG Version;

    
    
    
    
    
    
    
    
    
    

    union {
          PVOID Generic;
          PKINTERRUPT InterruptObject;
          PIO_INTERRUPT_MESSAGE_INFO InterruptMessageTable;
    } ConnectionContext;

} IO_DISCONNECT_INTERRUPT_PARAMETERS, *PIO_DISCONNECT_INTERRUPT_PARAMETERS;


__declspec(dllimport)
void
IoDisconnectInterruptEx (
      PIO_DISCONNECT_INTERRUPT_PARAMETERS Parameters
    );
#line 30215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _IO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS {

    
    
    
    
    
    

      ULONG Version;

    
    
    
    
    
    
    
    
    
    

    union {
          PVOID Generic;
          PKINTERRUPT InterruptObject;
          PIO_INTERRUPT_MESSAGE_INFO InterruptMessageTable;
    } ConnectionContext;

} IO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS,
  *PIO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS;












#line 30263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoGetAffinityInterrupt (
      PKINTERRUPT InterruptObject,
      PGROUP_AFFINITY GroupAffinity
    );
#line 30272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
IoFreeIrp(
        PIRP Irp
    );
#line 30282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoFreeMdl(
    PMDL Mdl
    );
#line 30291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


                
__declspec(dllimport)                                 
PDEVICE_OBJECT                              
IoGetAttachedDeviceReference(               
      PDEVICE_OBJECT DeviceObject        
    );                                      
#line 30300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
                                            

__forceinline
 
PIO_STACK_LOCATION
IoGetCurrentIrpStackLocation(
      PIRP Irp
)

















{
    (((void) 0), ((!(Irp->CurrentLocation <= Irp->StackCount + 1)) ? (__annotation(L"Debug", L"AssertFail", L"Irp->CurrentLocation <= Irp->StackCount + 1"), __int2c(), 0) : 1));
    return Irp->Tail.Overlay.CurrentStackLocation;
}



 
 
__declspec(dllimport)
PVOID
IoGetDriverObjectExtension(
      PDRIVER_OBJECT DriverObject,
      PVOID ClientIdentificationAddress
    );
#line 30341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PEPROCESS
IoGetCurrentProcess(
    void
    );
#line 30350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoGetDeviceObjectPointer(
       PUNICODE_STRING ObjectName,
       ACCESS_MASK DesiredAccess,
      PFILE_OBJECT *FileObject,
      PDEVICE_OBJECT *DeviceObject
    );
#line 30362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
struct _DMA_ADAPTER *
IoGetDmaAdapter(
      PDEVICE_OBJECT PhysicalDeviceObject,           
      struct _DEVICE_DESCRIPTION *DeviceDescription,
      
    PULONG NumberOfMapRegisters
    );
#line 30375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
BOOLEAN
IoForwardIrpSynchronously(
      PDEVICE_OBJECT DeviceObject,
      PIRP Irp
    );



#line 30387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 30396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































 
__declspec(dllimport)
PVOID
IoGetInitialStack(
    void
    );
#line 30438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__declspec(dllimport)
void
IoGetStackLimits (
      PULONG_PTR LowLimit,
      PULONG_PTR HighLimit
    );


LOGICAL
IoWithinStackLimits(
      ULONG_PTR RegionStart,
      SIZE_T RegionSize
    );
#line 30454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








 
__forceinline
ULONG_PTR
IoGetRemainingStackSize (
    void
    )
{
    ULONG_PTR Top;
    ULONG_PTR Bottom;

    IoGetStackLimits( &Bottom, &Top );
    return((ULONG_PTR)(&Top) - Bottom );
}

__forceinline
 
PIO_STACK_LOCATION
IoGetNextIrpStackLocation(
      PIRP Irp
    )















{
    (((void) 0), ((!(Irp->CurrentLocation > 0)) ? (__annotation(L"Debug", L"AssertFail", L"Irp->CurrentLocation > 0"), __int2c(), 0) : 1));

    return ((Irp)->Tail.Overlay.CurrentStackLocation - 1 );
}


__declspec(dllimport)
PDEVICE_OBJECT
IoGetRelatedDeviceObject(
      PFILE_OBJECT FileObject
    );
#line 30510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
PIRP
IoGetTopLevelIrp(
    void
    );
#line 30519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



void
__forceinline
IoInitializeDpcRequest(
      PDEVICE_OBJECT DeviceObject,
      PIO_DPC_ROUTINE DpcRoutine
    )





















{
    KeInitializeDpc( &DeviceObject->Dpc,
#pragma warning (suppress: 28024) 
                     (PKDEFERRED_ROUTINE) DpcRoutine,
                     DeviceObject );
}


void
__forceinline
IoInitializeThreadedDpcRequest(
      PDEVICE_OBJECT DeviceObject,
      PIO_DPC_ROUTINE DpcRoutine
    )























{
#pragma warning (suppress: 28128) 
    KeInitializeThreadedDpc( &DeviceObject->Dpc,
#pragma warning (suppress: 28165 28024) 
                             (PKDEFERRED_ROUTINE) DpcRoutine,
                             DeviceObject );
}
#line 30594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoInitializeIrp(
      PIRP Irp,
      USHORT PacketSize,
      CCHAR StackSize
    );
#line 30605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 30614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











#line 30626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
IoInitializeTimer(
      PDEVICE_OBJECT DeviceObject,
      PIO_TIMER_ROUTINE TimerRoutine,
        PVOID Context
    );
#line 30638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 30639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
IoReuseIrp(
      PIRP Irp,
      NTSTATUS Iostatus
    );
#line 30650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




































__forceinline
void
IoMarkIrpPending(
      PIRP Irp
)

















{
    IoGetCurrentIrpStackLocation( (Irp) )->Control |= 0x01;
}



 
__declspec(dllimport)
NTSTATUS
IoRegisterShutdownNotification(
      PDEVICE_OBJECT DeviceObject
    );
#line 30721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoRegisterLastChanceShutdownNotification(
      PDEVICE_OBJECT DeviceObject
    );
#line 30730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
void
IoReleaseCancelSpinLock(
          KIRQL Irql
    );
#line 30742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
IoRemoveShareAccess(
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess
    );
#line 30753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




__forceinline
void
IoRequestDpc(
       PDEVICE_OBJECT DeviceObject,
      PIRP Irp,
        PVOID Context
    )























{
    KeInsertQueueDpc( &DeviceObject->Dpc, Irp, Context );
}
#line 30791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__forceinline
PDRIVER_CANCEL
IoSetCancelRoutine(
       PIRP Irp,
      PDRIVER_CANCEL CancelRoutine
    )



















{
    return (PDRIVER_CANCEL)(ULONG_PTR) _InterlockedExchangePointer((PVOID *)&(Irp)->CancelRoutine, (PVOID)(ULONG_PTR)(CancelRoutine) );
}
#line 30825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
__forceinline
void
IoSetCompletionRoutine(
      PIRP Irp,
      PIO_COMPLETION_ROUTINE CompletionRoutine,
        PVOID Context,
      BOOLEAN InvokeOnSuccess,
      BOOLEAN InvokeOnError,
      BOOLEAN InvokeOnCancel
    )
































{
    PIO_STACK_LOCATION irpSp;
    (((void) 0), ((!((InvokeOnSuccess || InvokeOnError || InvokeOnCancel) ? (CompletionRoutine != ((void *)0)) : 1)) ? (__annotation(L"Debug", L"AssertFail", L"(InvokeOnSuccess || InvokeOnError || InvokeOnCancel) ? (CompletionRoutine != ((void *)0)) : 1"), __int2c(), 0) : 1));
    irpSp = IoGetNextIrpStackLocation(Irp);
    irpSp->CompletionRoutine = CompletionRoutine;
    irpSp->Context = Context;
    irpSp->Control = 0;

    if (InvokeOnSuccess) {
        irpSp->Control = 0x40;
    }

    if (InvokeOnError) {
        irpSp->Control |= 0x80;
    }

    if (InvokeOnCancel) {
        irpSp->Control |= 0x20;
    }
}


 
__declspec(dllimport)
 
NTSTATUS
IoSetCompletionRoutineEx(
      PDEVICE_OBJECT DeviceObject,
      PIRP Irp,
      PIO_COMPLETION_ROUTINE CompletionRoutine,
      PVOID Context,
      BOOLEAN InvokeOnSuccess,
      BOOLEAN InvokeOnError,
      BOOLEAN InvokeOnCancel
    );
#line 30905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__forceinline
void
IoSetNextIrpStackLocation (
     PIRP Irp
    )
















{
    (((void) 0), ((!(Irp->CurrentLocation > 0)) ? (__annotation(L"Debug", L"AssertFail", L"Irp->CurrentLocation > 0"), __int2c(), 0) : 1));
    Irp->CurrentLocation--;
    Irp->Tail.Overlay.CurrentStackLocation--;
}

__forceinline
void
IoCopyCurrentIrpStackLocationToNext(
      PIRP Irp
)






















{
    PIO_STACK_LOCATION irpSp;
    PIO_STACK_LOCATION nextIrpSp;
    irpSp = IoGetCurrentIrpStackLocation(Irp);
    nextIrpSp = IoGetNextIrpStackLocation(Irp);
    memcpy((nextIrpSp),(irpSp),(((LONG)(LONG_PTR)&(((IO_STACK_LOCATION *)0)->CompletionRoutine))));
    nextIrpSp->Control = 0;
}

__forceinline
void
IoSkipCurrentIrpStackLocation (
      PIRP Irp
)



















{
    (((void) 0), ((!(Irp->CurrentLocation <= Irp->StackCount)) ? (__annotation(L"Debug", L"AssertFail", L"Irp->CurrentLocation <= Irp->StackCount"), __int2c(), 0) : 1));
    Irp->CurrentLocation++;
    Irp->Tail.Overlay.CurrentStackLocation++;
}


__declspec(dllimport)
void
IoSetShareAccess(
       ACCESS_MASK DesiredAccess,
       ULONG DesiredShareAccess,
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess
    );
#line 31010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
IoSetShareAccessEx(
       ACCESS_MASK DesiredAccess,
       ULONG DesiredShareAccess,
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess,
      PBOOLEAN WritePermission
    );
#line 31022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





__declspec(dllimport)
void
IoSetTopLevelIrp(
      PIRP Irp
    );
#line 31033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




typedef struct _IO_REMOVE_LOCK_TRACKING_BLOCK * PIO_REMOVE_LOCK_TRACKING_BLOCK;

typedef struct _IO_REMOVE_LOCK_COMMON_BLOCK {
    BOOLEAN     Removed;
    BOOLEAN     Reserved [3];
     LONG        IoCount;
    KEVENT      RemoveEvent;

} IO_REMOVE_LOCK_COMMON_BLOCK;

typedef struct _IO_REMOVE_LOCK_DBG_BLOCK {
    LONG        Signature;
    ULONG       HighWatermark;
    LONGLONG    MaxLockedTicks;
    LONG        AllocateTag;
    LIST_ENTRY  LockList;
    KSPIN_LOCK  Spin;
     LONG        LowMemoryCount;
    ULONG       Reserved1[4];
    PVOID       Reserved2;
    PIO_REMOVE_LOCK_TRACKING_BLOCK Blocks;
} IO_REMOVE_LOCK_DBG_BLOCK;

typedef struct _IO_REMOVE_LOCK {
    IO_REMOVE_LOCK_COMMON_BLOCK Common;

    IO_REMOVE_LOCK_DBG_BLOCK Dbg;
#line 31065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
} IO_REMOVE_LOCK, *PIO_REMOVE_LOCK;





 
__declspec(dllimport)
void
__stdcall
IoInitializeRemoveLockEx(
      PIO_REMOVE_LOCK Lock,
      ULONG  AllocateTag, 
      ULONG  MaxLockedMinutes, 
      ULONG  HighWatermark, 
      ULONG  RemlockSize 
    );
#line 31083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















#line 31099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
IoAcquireRemoveLockEx (
      PIO_REMOVE_LOCK RemoveLock,
      PVOID          Tag, 
      PCSTR              File,
      ULONG              Line,
      ULONG              RemlockSize 
    );
#line 31113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








































__declspec(dllimport)
void
__stdcall
IoReleaseRemoveLockEx(
      PIO_REMOVE_LOCK RemoveLock,
      PVOID          Tag, 
      ULONG              RemlockSize 
    );
#line 31162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






























 
__declspec(dllimport)
void
__stdcall
IoReleaseRemoveLockAndWaitEx(
      PIO_REMOVE_LOCK RemoveLock,
      PVOID       Tag,
      ULONG           RemlockSize 
    );
#line 31202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















































#line 31257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


   
__declspec(dllimport)
void
IoStartNextPacket(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN Cancelable
    );
#line 31267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoStartNextPacketByKey(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN Cancelable,
      ULONG Key
    );
#line 31278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoStartPacket(
      PDEVICE_OBJECT DeviceObject,
      PIRP Irp,
      PULONG Key,
      PDRIVER_CANCEL CancelFunction
    );
#line 31290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


void
IoSetStartIoAttributes(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN DeferredStartIo,
      BOOLEAN NonCancelable
    );
#line 31299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
IoStartTimer(
      PDEVICE_OBJECT DeviceObject
    );
#line 31309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 31310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
IoStopTimer(
      PDEVICE_OBJECT DeviceObject
    );
#line 31320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 31321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
IoUnregisterShutdownNotification(
      PDEVICE_OBJECT DeviceObject
    );
#line 31331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoUpdateShareAccess(
      PFILE_OBJECT FileObject,
      PSHARE_ACCESS ShareAccess
    );
#line 31341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


                    
__declspec(dllimport)                                     
void                                            
IoWriteErrorLogEntry(                           
      PVOID ElEntry                          
    );                                          
#line 31350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















#line 31369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _IO_WORKITEM *PIO_WORKITEM;

 
 
 
typedef
void
IO_WORKITEM_ROUTINE (
      PDEVICE_OBJECT DeviceObject,
      PVOID Context
    );

typedef IO_WORKITEM_ROUTINE *PIO_WORKITEM_ROUTINE;



 
 
 
__declspec(dllimport)
PIO_WORKITEM
IoAllocateWorkItem(
      PDEVICE_OBJECT DeviceObject
    );

 
__declspec(dllimport)
void
IoFreeWorkItem(
        PIO_WORKITEM IoWorkItem
    );

 
__declspec(dllimport)
void
IoQueueWorkItem(
        PIO_WORKITEM IoWorkItem,
      PIO_WORKITEM_ROUTINE WorkerRoutine,
      WORK_QUEUE_TYPE QueueType,
        PVOID Context
    );

#line 31413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

 
 
 
typedef
void
IO_WORKITEM_ROUTINE_EX (
      PVOID IoObject,
      PVOID Context,
      PIO_WORKITEM IoWorkItem
    );

typedef IO_WORKITEM_ROUTINE_EX *PIO_WORKITEM_ROUTINE_EX;



 
void
IoQueueWorkItemEx(
        PIO_WORKITEM IoWorkItem,
      PIO_WORKITEM_ROUTINE_EX WorkerRoutine,
      WORK_QUEUE_TYPE QueueType,
        PVOID Context
    );

ULONG
IoSizeofWorkItem(
    void
    );

void
IoInitializeWorkItem(
      PVOID IoObject,
      PIO_WORKITEM IoWorkItem
    );

void
IoUninitializeWorkItem(
      PIO_WORKITEM IoWorkItem
    );

#line 31455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












#line 31468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
IoWMIRegistrationControl(
      PDEVICE_OBJECT DeviceObject,
      ULONG Action
);
#line 31479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



















 
__declspec(dllimport)
NTSTATUS
IoWMIAllocateInstanceIds(
      LPCGUID Guid,
      ULONG InstanceCount,
      ULONG *FirstInstanceId
    );
#line 31507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMISuggestInstanceName(
      PDEVICE_OBJECT PhysicalDeviceObject,
      PUNICODE_STRING SymbolicLinkName,
      BOOLEAN CombineNames,
      PUNICODE_STRING SuggestedInstanceName
    );
#line 31518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
__declspec(dllimport)
NTSTATUS
IoWMIWriteEvent(
       PVOID WnodeEventItem
    );
#line 31529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
ULONG
IoWMIDeviceObjectToProviderId(
      PDEVICE_OBJECT DeviceObject
    );


#line 31539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIOpenBlock (
      LPCGUID Guid,
      ULONG DesiredAccess,
      PVOID *DataBlockObject
    );
#line 31549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIQueryAllData (
      PVOID DataBlockObject,
      PULONG InOutBufferSize,
       PVOID OutBuffer
    );
#line 31559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIQueryAllDataMultiple (
      PVOID *DataBlockObjectList,
      ULONG ObjectCount,
      PULONG InOutBufferSize,
       PVOID OutBuffer
    );
#line 31570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIQuerySingleInstance (
      PVOID DataBlockObject,
      PUNICODE_STRING InstanceName,
      PULONG InOutBufferSize,
       PVOID OutBuffer
    );
#line 31581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIQuerySingleInstanceMultiple (
      PVOID *DataBlockObjectList,
      PUNICODE_STRING InstanceNames,
      ULONG ObjectCount,
      PULONG InOutBufferSize,
       PVOID OutBuffer
    );
#line 31593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMISetSingleInstance(
      PVOID DataBlockObject,
      PUNICODE_STRING InstanceName,
      ULONG Version,
      ULONG ValueBufferSize,
      PVOID ValueBuffer
    );
#line 31605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMISetSingleItem(
      PVOID DataBlockObject,
      PUNICODE_STRING InstanceName,
      ULONG DataItemId,
      ULONG Version,
      ULONG ValueBufferSize,
      PVOID ValueBuffer
    );
#line 31618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIExecuteMethod(
      PVOID DataBlockObject,
      PUNICODE_STRING InstanceName,
      ULONG MethodId,
      ULONG InBufferSize,
      PULONG OutBufferSize,
      PUCHAR InOutBuffer
    );
#line 31631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef
 
 
void FWMI_NOTIFICATION_CALLBACK (
    PVOID Wnode,
    PVOID Context
    );
typedef FWMI_NOTIFICATION_CALLBACK *WMI_NOTIFICATION_CALLBACK;


__declspec(dllimport)
NTSTATUS
IoWMISetNotificationCallback(
      PVOID Object,
      WMI_NOTIFICATION_CALLBACK Callback,
      PVOID Context
    );
#line 31650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIHandleToInstanceName(
      PVOID DataBlockObject,
      HANDLE FileHandle,
      PUNICODE_STRING InstanceName
    );
#line 31660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoWMIDeviceObjectToInstanceName(
      PVOID DataBlockObject,
      PDEVICE_OBJECT DeviceObject,
      PUNICODE_STRING InstanceName
    );
#line 31670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
IoIs32bitProcess(
      PIRP Irp
    );








#line 31687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
void
IoFreeErrorLogEntry(
      PVOID ElEntry
    );
#line 31696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














































typedef struct _IO_CSQ IO_CSQ, *PIO_CSQ;










typedef struct _IO_CSQ_IRP_CONTEXT {
    ULONG   Type;
    PIRP    Irp;
    PIO_CSQ Csq;
} IO_CSQ_IRP_CONTEXT, *PIO_CSQ_IRP_CONTEXT;





typedef void
IO_CSQ_INSERT_IRP (
      struct _IO_CSQ    *Csq,
      PIRP              Irp
    );

typedef IO_CSQ_INSERT_IRP *PIO_CSQ_INSERT_IRP;

typedef NTSTATUS
IO_CSQ_INSERT_IRP_EX (
      struct _IO_CSQ    *Csq,
      PIRP              Irp,
      PVOID             InsertContext
    );

typedef IO_CSQ_INSERT_IRP_EX *PIO_CSQ_INSERT_IRP_EX;

typedef void
IO_CSQ_REMOVE_IRP (
      PIO_CSQ Csq,
      PIRP    Irp
    );

typedef IO_CSQ_REMOVE_IRP *PIO_CSQ_REMOVE_IRP;









typedef PIRP
IO_CSQ_PEEK_NEXT_IRP (
      PIO_CSQ Csq,
      PIRP    Irp,
      PVOID   PeekContext
    );

typedef IO_CSQ_PEEK_NEXT_IRP *PIO_CSQ_PEEK_NEXT_IRP;





typedef void
IO_CSQ_ACQUIRE_LOCK (
       PIO_CSQ Csq,
       PKIRQL  Irql
     );

typedef IO_CSQ_ACQUIRE_LOCK *PIO_CSQ_ACQUIRE_LOCK;

typedef void
IO_CSQ_RELEASE_LOCK (
       PIO_CSQ Csq,
       KIRQL   Irql
     );

typedef IO_CSQ_RELEASE_LOCK *PIO_CSQ_RELEASE_LOCK;






typedef void
IO_CSQ_COMPLETE_CANCELED_IRP (
      PIO_CSQ    Csq,
      PIRP       Irp
    );

typedef IO_CSQ_COMPLETE_CANCELED_IRP *PIO_CSQ_COMPLETE_CANCELED_IRP;








typedef struct _IO_CSQ {
    ULONG                            Type;
    PIO_CSQ_INSERT_IRP               CsqInsertIrp;
    PIO_CSQ_REMOVE_IRP               CsqRemoveIrp;
    PIO_CSQ_PEEK_NEXT_IRP            CsqPeekNextIrp;
    PIO_CSQ_ACQUIRE_LOCK             CsqAcquireLock;
    PIO_CSQ_RELEASE_LOCK             CsqReleaseLock;
    PIO_CSQ_COMPLETE_CANCELED_IRP    CsqCompleteCanceledIrp;
    PVOID                            ReservePointer;    
} IO_CSQ, *PIO_CSQ;






__declspec(dllimport)
NTSTATUS
IoCsqInitialize(
      PIO_CSQ                       Csq,
      PIO_CSQ_INSERT_IRP             CsqInsertIrp,
      PIO_CSQ_REMOVE_IRP             CsqRemoveIrp,
      PIO_CSQ_PEEK_NEXT_IRP          CsqPeekNextIrp,
      PIO_CSQ_ACQUIRE_LOCK           CsqAcquireLock,
      PIO_CSQ_RELEASE_LOCK           CsqReleaseLock,
      PIO_CSQ_COMPLETE_CANCELED_IRP  CsqCompleteCanceledIrp
    );
#line 31873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoCsqInitializeEx(
      PIO_CSQ                       Csq,
      PIO_CSQ_INSERT_IRP_EX          CsqInsertIrp,
      PIO_CSQ_REMOVE_IRP             CsqRemoveIrp,
      PIO_CSQ_PEEK_NEXT_IRP          CsqPeekNextIrp,
      PIO_CSQ_ACQUIRE_LOCK           CsqAcquireLock,
      PIO_CSQ_RELEASE_LOCK           CsqReleaseLock,
      PIO_CSQ_COMPLETE_CANCELED_IRP  CsqCompleteCanceledIrp
    );
#line 31887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






__declspec(dllimport)
void
IoCsqInsertIrp(
      PIO_CSQ               Csq,
      PIRP                  Irp,
      PIO_CSQ_IRP_CONTEXT Context
    );
#line 31901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
IoCsqInsertIrpEx(
      PIO_CSQ               Csq,
      PIRP              Irp,
      PIO_CSQ_IRP_CONTEXT Context,
      PVOID                InsertContext
    );
#line 31912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






__declspec(dllimport)
PIRP
IoCsqRemoveNextIrp(
       PIO_CSQ Csq,
      PVOID   PeekContext
    );
#line 31925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
PIRP
IoCsqRemoveIrp(
      PIO_CSQ             Csq,
      PIO_CSQ_IRP_CONTEXT Context
    );
#line 31940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





__declspec(dllimport)
NTSTATUS
IoValidateDeviceIoControlAccess(
      PIRP   Irp,
      ULONG  RequiredAccess
    );
#line 31952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



IO_PRIORITY_HINT
IoGetIoPriorityHint(
      PIRP Irp
    );
#line 31960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


NTSTATUS
IoSetIoPriorityHint(
      PIRP               Irp,
      IO_PRIORITY_HINT   PriorityHint
    );
#line 31968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


NTSTATUS
IoAllocateSfioStreamIdentifier(
       PFILE_OBJECT  FileObject,
       ULONG         Length,
       PVOID         Signature,
      PVOID         *StreamIdentifier
    );
#line 31978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


PVOID
IoGetSfioStreamIdentifier(
      PFILE_OBJECT   FileObject,
      PVOID          Signature
    );
#line 31986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


NTSTATUS
IoFreeSfioStreamIdentifier(
      PFILE_OBJECT   FileObject,
      PVOID          Signature
    );
#line 31994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























































#line 32052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _IO_ACCESS_TYPE {

    
    
    
    
    ReadAccess,

    
    
    
    
    WriteAccess,

    
    
    
    
    ModifyAccess

} IO_ACCESS_TYPE;

typedef enum _IO_ACCESS_MODE {

    
    
    
    
    SequentialAccess,

    
    
    
    
    RandomAccess

} IO_ACCESS_MODE;

typedef enum _IO_CONTAINER_NOTIFICATION_CLASS {
    IoSessionStateNotification, 
    IoMaxContainerNotificationClass
} IO_CONTAINER_NOTIFICATION_CLASS;

typedef struct _IO_SESSION_STATE_NOTIFICATION {
    ULONG Size;
    ULONG Flags;
    PVOID IoObject;
    ULONG EventMask;
    PVOID Context;
} IO_SESSION_STATE_NOTIFICATION, *PIO_SESSION_STATE_NOTIFICATION;

typedef enum _IO_CONTAINER_INFORMATION_CLASS {
    IoSessionStateInformation, 
    IoMaxContainerInformationClass
} IO_CONTAINER_INFORMATION_CLASS;

typedef struct _IO_SESSION_STATE_INFORMATION {
    ULONG SessionId;
    IO_SESSION_STATE SessionState;
    BOOLEAN LocalSession;
} IO_SESSION_STATE_INFORMATION, *PIO_SESSION_STATE_INFORMATION;


NTSTATUS
IoGetContainerInformation (
      IO_CONTAINER_INFORMATION_CLASS InformationClass,
      PVOID ContainerObject,
      PVOID Buffer,
      ULONG BufferLength
    );
#line 32124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



typedef NTSTATUS (*PIO_CONTAINER_NOTIFICATION_FUNCTION)(void);

typedef
NTSTATUS
IO_SESSION_NOTIFICATION_FUNCTION (
      PVOID SessionObject,
      PVOID IoObject,
      ULONG Event,
      PVOID Context,
      PVOID NotificationPayload,
      ULONG PayloadLength
    );

typedef IO_SESSION_NOTIFICATION_FUNCTION *PIO_SESSION_NOTIFICATION_FUNCTION;
#line 32142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


NTSTATUS
IoRegisterContainerNotification(
      IO_CONTAINER_NOTIFICATION_CLASS NotificationClass,
      PIO_CONTAINER_NOTIFICATION_FUNCTION CallbackFunction,
      PVOID NotificationInformation,
      ULONG NotificationInformationLength,
      PVOID CallbackRegistration
    );
#line 32153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


void
IoUnregisterContainerNotification(
      PVOID CallbackRegistration
    );
#line 32160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













typedef ULONG64 TRACEHANDLE, *PTRACEHANDLE;
#line 32175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





































typedef struct _ETW_TRACE_SESSION_SETTINGS {
    ULONG Version;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG LoggerMode;
    ULONG FlushTimer;
    ULONG FlushThreshold;
    ULONG ClockType;
} ETW_TRACE_SESSION_SETTINGS, *PETW_TRACE_SESSION_SETTINGS;

typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass,
    TraceHandleClass,
    TraceEnableFlagsClass,
    TraceEnableLevelClass,
    GlobalLoggerHandleClass,
    EventLoggerHandleClass,
    AllLoggerHandlesClass,
    TraceHandleByNameClass,
    LoggerEventsLostClass,
    TraceSessionSettingsClass,
    LoggerEventsLoggedClass,
    DiskIoNotifyRoutinesClass,
    TraceInformationClassReserved1,
    FltIoNotifyRoutinesClass,
    TraceInformationClassReserved2,
    WdfNotifyRoutinesClass,
    MaxTraceInformationClass
} TRACE_INFORMATION_CLASS;


__declspec(dllimport)
 
NTSTATUS
WmiQueryTraceInformation (
      TRACE_INFORMATION_CLASS TraceInformationClass,
      PVOID TraceInformation,
      ULONG TraceInformationLength,
      PULONG RequiredLength,
      PVOID Buffer
    );
#line 32255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


#line 32258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 32262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"




















#pragma once




#pragma warning(push)
#pragma warning(disable:4820) 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"





#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"







#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"















typedef ULONGLONG REGHANDLE, *PREGHANDLE;




















































#pragma warning(push)
#pragma warning(disable:4201)




typedef struct _EVENT_DATA_DESCRIPTOR {

    ULONGLONG       Ptr;        
    ULONG           Size;       
    union {
        ULONG       Reserved;
        struct {
            UCHAR   Type;
            UCHAR   Reserved1;
            USHORT  Reserved2;
        } ;
    } ;

} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR;
#pragma warning(pop)








typedef struct _EVENT_DESCRIPTOR {

    USHORT      Id;
    UCHAR       Version;
    UCHAR       Channel;
    UCHAR       Level;
    UCHAR       Opcode;
    USHORT      Task;
    ULONGLONG   Keyword;

} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR;

typedef const EVENT_DESCRIPTOR *PCEVENT_DESCRIPTOR;
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"





typedef struct _EVENT_FILTER_DESCRIPTOR {

    ULONGLONG   Ptr;
    ULONG       Size;
    ULONG       Type;

} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR;


typedef struct _EVENT_FILTER_HEADER {

    USHORT     Id;
    UCHAR      Version;
    UCHAR      Reserved[5];
    ULONGLONG  InstanceId;
    ULONG      Size;
    ULONG      NextOffset;

} EVENT_FILTER_HEADER, *PEVENT_FILTER_HEADER;






typedef struct _EVENT_FILTER_EVENT_ID {
    BOOLEAN FilterIn;
    UCHAR Reserved;
    USHORT Count;
    USHORT Events[1];
} EVENT_FILTER_EVENT_ID, *PEVENT_FILTER_EVENT_ID;

















typedef struct _EVENT_FILTER_EVENT_NAME {
    ULONGLONG MatchAnyKeyword;
    ULONGLONG MatchAllKeyword;
    UCHAR Level;
    BOOLEAN FilterIn;
    USHORT NameCount;
    UCHAR Names[1]; 
} EVENT_FILTER_EVENT_NAME, *PEVENT_FILTER_EVENT_NAME;



typedef enum _EVENT_INFO_CLASS {
    EventProviderBinaryTrackInfo,
    EventProviderSetEnableAllKeywords,
    EventProviderSetTraits,
    EventProviderUseDescriptorType,
    MaxEventInfo
} EVENT_INFO_CLASS;







































































































































































#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"

#pragma region Application Family or OneCore Family






__forceinline
void
EventDataDescCreate(
      PEVENT_DATA_DESCRIPTOR EventDataDescriptor,
      const void* DataPtr,
      ULONG DataSize
    )
{
    EventDataDescriptor->Ptr = (ULONGLONG)(ULONG_PTR)DataPtr;
    EventDataDescriptor->Size = DataSize;
    EventDataDescriptor->Reserved = 0;
    return;
}

#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


__forceinline
void
EventDescCreate(
      PEVENT_DESCRIPTOR EventDescriptor,
      USHORT Id,
      UCHAR Version,
      UCHAR Channel,
      UCHAR Level,
      USHORT Task,
      UCHAR Opcode,
      ULONGLONG Keyword
    )
{
    EventDescriptor->Id = Id;
    EventDescriptor->Version = Version;
    EventDescriptor->Channel = Channel;
    EventDescriptor->Level = Level;
    EventDescriptor->Task = Task;
    EventDescriptor->Opcode = Opcode;
    EventDescriptor->Keyword = Keyword;
    return;
}

__forceinline
void
EventDescZero(
      PEVENT_DESCRIPTOR EventDescriptor
    )
{
    memset(EventDescriptor, 0, sizeof(EVENT_DESCRIPTOR));
    return;
}





__forceinline
USHORT
EventDescGetId(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Id);
}

__forceinline
UCHAR
EventDescGetVersion(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Version);
}

__forceinline
USHORT
EventDescGetTask(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Task);
}

__forceinline
UCHAR
EventDescGetOpcode(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Opcode);
}

__forceinline
UCHAR
EventDescGetChannel(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Channel);
}

__forceinline
UCHAR
EventDescGetLevel(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Level);
}

__forceinline
ULONGLONG
EventDescGetKeyword(
      PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return (EventDescriptor->Keyword);
}





__forceinline
PEVENT_DESCRIPTOR
EventDescSetId(
      PEVENT_DESCRIPTOR EventDescriptor,
      USHORT Id
    )
{
    EventDescriptor->Id         = Id;
    return (EventDescriptor);
}

__forceinline
PEVENT_DESCRIPTOR
EventDescSetVersion(
      PEVENT_DESCRIPTOR EventDescriptor,
      UCHAR Version
    )
{
    EventDescriptor->Version    = Version;
    return (EventDescriptor);
}

__forceinline
PEVENT_DESCRIPTOR
EventDescSetTask(
      PEVENT_DESCRIPTOR EventDescriptor,
      USHORT Task
    )
{
    EventDescriptor->Task       = Task;
    return (EventDescriptor);
}

__forceinline
PEVENT_DESCRIPTOR
EventDescSetOpcode(
      PEVENT_DESCRIPTOR EventDescriptor,
      UCHAR Opcode
    )
{
    EventDescriptor->Opcode     = Opcode;
    return (EventDescriptor);
}

__forceinline
PEVENT_DESCRIPTOR
EventDescSetLevel(
      PEVENT_DESCRIPTOR EventDescriptor,
      UCHAR  Level
    )
{
    EventDescriptor->Level      = Level;
    return (EventDescriptor);
}

__forceinline
PEVENT_DESCRIPTOR
EventDescSetChannel(
      PEVENT_DESCRIPTOR EventDescriptor,
      UCHAR Channel
    )
{
    EventDescriptor->Channel    = Channel;
    return (EventDescriptor);
}

__forceinline
PEVENT_DESCRIPTOR
EventDescSetKeyword(
      PEVENT_DESCRIPTOR EventDescriptor,
      ULONGLONG Keyword
    )
{
    EventDescriptor->Keyword    = Keyword;
    return (EventDescriptor);
}


__forceinline
PEVENT_DESCRIPTOR
EventDescOrKeyword(
      PEVENT_DESCRIPTOR EventDescriptor,
      ULONGLONG Keyword
    )
{
    EventDescriptor->Keyword    |= Keyword;
    return (EventDescriptor);
}

#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"
#pragma endregion



#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"






#pragma warning(pop)
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"

#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\evntprov.h"

#line 32264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef
 
 
void
__stdcall
ETWENABLECALLBACK (
      LPCGUID SourceId,
      ULONG ControlCode,
      UCHAR Level,
      ULONGLONG MatchAnyKeyword,
      ULONGLONG MatchAllKeyword,
      PEVENT_FILTER_DESCRIPTOR FilterData,
      PVOID CallbackContext
    );

typedef ETWENABLECALLBACK *PETWENABLECALLBACK;






__declspec(dllimport)
 
NTSTATUS
EtwRegister (
      LPCGUID ProviderId,
      PETWENABLECALLBACK EnableCallback,
      PVOID CallbackContext,
      PREGHANDLE RegHandle
    );
#line 32302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
NTSTATUS
EtwUnregister (
      REGHANDLE RegHandle
    );
#line 32311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
NTSTATUS
EtwSetInformation(
      REGHANDLE RegHandle,
      EVENT_INFO_CLASS InformationClass,
      PVOID EventInformation,
      ULONG InformationLength
    );
#line 32323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






__declspec(dllimport)
 
BOOLEAN
EtwEventEnabled (
      REGHANDLE RegHandle,
      PCEVENT_DESCRIPTOR EventDescriptor
    );
#line 32337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
BOOLEAN
EtwProviderEnabled (
      REGHANDLE RegHandle,
      UCHAR Level,
      ULONGLONG Keyword
    );
#line 32348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)





NTSTATUS
EtwActivityIdControl (
      ULONG ControlCode,
      LPGUID ActivityId
    );
#line 32362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 32372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






__declspec(dllimport)
 
NTSTATUS
EtwWrite (
      REGHANDLE RegHandle,
      PCEVENT_DESCRIPTOR EventDescriptor,
      LPCGUID ActivityId,
      ULONG UserDataCount,
      PEVENT_DATA_DESCRIPTOR  UserData
    );
#line 32389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
NTSTATUS
EtwWriteTransfer (
      REGHANDLE RegHandle,
      PCEVENT_DESCRIPTOR EventDescriptor,
      LPCGUID ActivityId,
      LPCGUID RelatedActivityId,
      ULONG UserDataCount,
      PEVENT_DATA_DESCRIPTOR UserData
    );
#line 32403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
NTSTATUS
EtwWriteString (
      REGHANDLE RegHandle,
      UCHAR Level,
      ULONGLONG Keyword,
      LPCGUID ActivityId,
      PCWSTR String
    );
#line 32416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
NTSTATUS
EtwWriteEx (
      REGHANDLE RegHandle,
      PCEVENT_DESCRIPTOR EventDescriptor,
      ULONG64 Filter,
      ULONG Flags,
      LPCGUID ActivityId,
      LPCGUID RelatedActivityId,
      ULONG UserDataCount,
      PEVENT_DATA_DESCRIPTOR UserData
    );
#line 32432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
 
NTSTATUS
SeEtwWriteKMCveEvent (
      PCUNICODE_STRING CveId,
      PCUNICODE_STRING AdditionalDetails
    );
#line 32442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















#line 32458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum {
    DevicePropertyDeviceDescription = 0x0 | 0,
    DevicePropertyHardwareID = 0x1 | 0,
    DevicePropertyCompatibleIDs = 0x2 | 0,
    DevicePropertyBootConfiguration = 0x3,
    DevicePropertyBootConfigurationTranslated = 0x4,
    DevicePropertyClassName = 0x5 | 0,
    DevicePropertyClassGuid = 0x6 | 0,
    DevicePropertyDriverKeyName = 0x7 | 0,
    DevicePropertyManufacturer = 0x8 | 0,
    DevicePropertyFriendlyName = 0x9 | 0,
    DevicePropertyLocationInformation = 0xa | 0,
    DevicePropertyPhysicalDeviceObjectName = 0xb | 0,
    DevicePropertyBusTypeGuid = 0xc | 0,
    DevicePropertyLegacyBusType = 0xd,
    DevicePropertyBusNumber = 0xe,
    DevicePropertyEnumeratorName = 0xf | 0,
    DevicePropertyAddress = 0x10,
    DevicePropertyUINumber = 0x11,
    DevicePropertyInstallState = 0x12,
    DevicePropertyRemovalPolicy = 0x13,
    DevicePropertyResourceRequirements = 0x14,
    DevicePropertyAllocatedResources = 0x15,
    DevicePropertyContainerID = 0x16 | 0
} DEVICE_REGISTRY_PROPERTY;



typedef
 
 
 
BOOLEAN TRANSLATE_BUS_ADDRESS(
      PVOID Context,
      PHYSICAL_ADDRESS BusAddress,
      ULONG Length,
      PULONG AddressSpace,
      PPHYSICAL_ADDRESS TranslatedAddress
    );
typedef TRANSLATE_BUS_ADDRESS *PTRANSLATE_BUS_ADDRESS;

typedef
 
 
struct _DMA_ADAPTER *GET_DMA_ADAPTER(
      PVOID Context,
      struct _DEVICE_DESCRIPTION *DeviceDescriptor,
      PULONG NumberOfMapRegisters
    );
typedef GET_DMA_ADAPTER *PGET_DMA_ADAPTER;

typedef
 
 
ULONG GET_SET_DEVICE_DATA (
      PVOID Context,
      ULONG DataType,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );
typedef GET_SET_DEVICE_DATA *PGET_SET_DEVICE_DATA;

typedef enum _DEVICE_INSTALL_STATE {
    InstallStateInstalled,
    InstallStateNeedsReinstall,
    InstallStateFailedInstall,
    InstallStateFinishInstall
} DEVICE_INSTALL_STATE, *PDEVICE_INSTALL_STATE;








typedef struct _PNP_BUS_INFORMATION {
    GUID BusTypeGuid;
    INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
} PNP_BUS_INFORMATION, *PPNP_BUS_INFORMATION;











typedef struct _LEGACY_BUS_INFORMATION {
    GUID BusTypeGuid;
    INTERFACE_TYPE LegacyBusType;
    ULONG BusNumber;
} LEGACY_BUS_INFORMATION, *PLEGACY_BUS_INFORMATION;




typedef enum _DEVICE_REMOVAL_POLICY {

    RemovalPolicyExpectNoRemoval = 1,
    RemovalPolicyExpectOrderlyRemoval = 2,
    RemovalPolicyExpectSurpriseRemoval = 3

} DEVICE_REMOVAL_POLICY, *PDEVICE_REMOVAL_POLICY;

typedef struct _BUS_INTERFACE_STANDARD {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;
    
    
    
    PTRANSLATE_BUS_ADDRESS TranslateBusAddress;
    PGET_DMA_ADAPTER GetDmaAdapter;
    PGET_SET_DEVICE_DATA SetBusData;
    PGET_SET_DEVICE_DATA GetBusData;

} BUS_INTERFACE_STANDARD, *PBUS_INTERFACE_STANDARD;

typedef
 
 
 
ULONG GET_VIRTUAL_DEVICE_DATA (
                      PVOID Context,
                         USHORT VirtualFunction,
         PVOID Buffer,
                         ULONG Offset,
                         ULONG Length
    );
typedef GET_VIRTUAL_DEVICE_DATA *PGET_VIRTUAL_DEVICE_DATA;

typedef
 
 
 
ULONG SET_VIRTUAL_DEVICE_DATA (
                  PVOID Context,
                     USHORT VirtualFunction,
      PVOID Buffer,
                     ULONG Offset,
                     ULONG Length
    );
typedef SET_VIRTUAL_DEVICE_DATA *PSET_VIRTUAL_DEVICE_DATA;

typedef
 
 
 
NTSTATUS GET_VIRTUAL_DEVICE_LOCATION (
          PVOID Context,
             USHORT VirtualFunction,
            PUINT16 SegmentNumber,
            PUINT8 BusNumber,
            PUINT8 FunctionNumber
    );
typedef GET_VIRTUAL_DEVICE_LOCATION *PGET_VIRTUAL_DEVICE_LOCATION;

typedef
 
 
 
void GET_VIRTUAL_DEVICE_RESOURCES (
          PVOID   Context,
            PUINT8  CapturedBusNumbers
    );
typedef GET_VIRTUAL_DEVICE_RESOURCES *PGET_VIRTUAL_DEVICE_RESOURCES;

typedef
 
 
 
NTSTATUS ENABLE_VIRTUALIZATION (
          PVOID   Context,
             UINT16  NumVFs,
             BOOLEAN EnableVfMigration,
             BOOLEAN EnableMigrationInterrupt,
             BOOLEAN EnableVirtualization
    );
typedef ENABLE_VIRTUALIZATION *PENABLE_VIRTUALIZATION;


typedef
 
 
NTSTATUS
GET_VIRTUAL_FUNCTION_PROBED_BARS(
              PVOID  Context,
      PULONG BaseRegisterValues
    ) ;
typedef GET_VIRTUAL_FUNCTION_PROBED_BARS *PGET_VIRTUAL_FUNCTION_PROBED_BARS;


typedef struct _PCI_VIRTUALIZATION_INTERFACE {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    
    
    
    PSET_VIRTUAL_DEVICE_DATA SetVirtualFunctionData;
    PGET_VIRTUAL_DEVICE_DATA GetVirtualFunctionData;

    PGET_VIRTUAL_DEVICE_LOCATION    GetLocation;
    PGET_VIRTUAL_DEVICE_RESOURCES   GetResources;

    PENABLE_VIRTUALIZATION EnableVirtualization;

    PGET_VIRTUAL_FUNCTION_PROBED_BARS GetVirtualFunctionProbedBars;

} PCI_VIRTUALIZATION_INTERFACE, *PPCI_VIRTUALIZATION_INTERFACE;







typedef enum _PCI_ACS_BIT {

    PciAcsReserved = 0,
    PciAcsBitEnable,
    PciAcsBitDisable,
    PciAcsBitDontCare

} PCI_ACS_BIT, *PPCI_ACS_BIT;

typedef
 
 
 
NTSTATUS PCI_SET_ACS (
          PVOID   Context,
             PCI_ACS_BIT EnableSourceValidation,
             PCI_ACS_BIT EnableTranslationBlocking,
             PCI_ACS_BIT EnableP2PRequestRedirect,
             PCI_ACS_BIT EnableCompletionRedirect,
             PCI_ACS_BIT EnableUpstreamForwarding,
             PCI_ACS_BIT EnableEgressControl,
             PCI_ACS_BIT EnableDirectTranslatedP2P
    );

typedef PCI_SET_ACS *PPCI_SET_ACS;

typedef struct _PCI_SECURITY_INTERFACE {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    PPCI_SET_ACS    SetAccessControlServices;

} PCI_SECURITY_INTERFACE, *PPCI_SECURITY_INTERFACE;



typedef
void
(*PREENUMERATE_SELF)(
      PVOID Context
    );

typedef struct _REENUMERATE_SELF_INTERFACE_STANDARD {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;
    
    
    
    PREENUMERATE_SELF SurpriseRemoveAndReenumerateSelf;
} REENUMERATE_SELF_INTERFACE_STANDARD, *PREENUMERATE_SELF_INTERFACE_STANDARD;





typedef
void
(*PQUERYEXTENDEDADDRESS)(
      PVOID Context,
      PULONG64 ExtendedAddress
    );

typedef struct _PNP_EXTENDED_ADDRESS_INTERFACE {

    
    
    

    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    
    
    

    PQUERYEXTENDEDADDRESS QueryExtendedAddress;
} PNP_EXTENDED_ADDRESS_INTERFACE, *PPNP_EXTENDED_ADDRESS_INTERFACE;









typedef
 
 
void
SET_D3COLD_SUPPORT (
      PVOID Context,
      BOOLEAN D3ColdSupport
    );

typedef SET_D3COLD_SUPPORT *PSET_D3COLD_SUPPORT;

typedef enum _DEVICE_WAKE_DEPTH {
    DeviceWakeDepthNotWakeable    = 0,
    DeviceWakeDepthD0,
    DeviceWakeDepthD1,
    DeviceWakeDepthD2,
    DeviceWakeDepthD3hot,
    DeviceWakeDepthD3cold,
    DeviceWakeDepthMaximum
} DEVICE_WAKE_DEPTH, *PDEVICE_WAKE_DEPTH;

__forceinline
DEVICE_POWER_STATE
MapWakeDepthToDstate(
      DEVICE_WAKE_DEPTH WakeDepth
    )
{
    const DEVICE_POWER_STATE dstateMap[DeviceWakeDepthMaximum] =
    {
        PowerDeviceD0,
        PowerDeviceD0,
        PowerDeviceD1,
        PowerDeviceD2,
        PowerDeviceD3,
        PowerDeviceD3
    };

    if (WakeDepth < 0 || WakeDepth >= DeviceWakeDepthMaximum) {
        return PowerDeviceUnspecified;
    } else {
        return dstateMap[WakeDepth];
    }
}

typedef
 
 
NTSTATUS
GET_IDLE_WAKE_INFO (
      PVOID Context,
      SYSTEM_POWER_STATE SystemPowerState,
      PDEVICE_WAKE_DEPTH DeepestWakeableDstate
    );

typedef GET_IDLE_WAKE_INFO *PGET_IDLE_WAKE_INFO;

typedef
 
 
NTSTATUS
GET_D3COLD_CAPABILITY (
      PVOID Context,
      PBOOLEAN D3ColdSupported
    );

typedef GET_D3COLD_CAPABILITY *PGET_D3COLD_CAPABILITY;

typedef enum _D3COLD_LAST_TRANSITION_STATUS {
    LastDStateTransitionStatusUnknown = 0,
    LastDStateTransitionD3hot,
    LastDStateTransitionD3cold
} D3COLD_LAST_TRANSITION_STATUS, *PD3COLD_LAST_TRANSITION_STATUS;

typedef
 
 
void
GET_D3COLD_LAST_TRANSITION_STATUS (
      PVOID Context,
      PD3COLD_LAST_TRANSITION_STATUS LastTransitionStatus
    );

typedef GET_D3COLD_LAST_TRANSITION_STATUS *PGET_D3COLD_LAST_TRANSITION_STATUS;

typedef struct _D3COLD_SUPPORT_INTERFACE {

    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    PSET_D3COLD_SUPPORT                 SetD3ColdSupport;
    PGET_IDLE_WAKE_INFO                 GetIdleWakeInfo;
    PGET_D3COLD_CAPABILITY              GetD3ColdCapability;
    PGET_D3COLD_CAPABILITY              GetBusDriverD3ColdSupport;
    PGET_D3COLD_LAST_TRANSITION_STATUS  GetLastTransitionStatus;

} D3COLD_SUPPORT_INTERFACE, *PD3COLD_SUPPORT_INTERFACE;





typedef BOOLEAN (* PGPE_SERVICE_ROUTINE) (
                            PVOID,
                            PVOID);

typedef
 
 
NTSTATUS (* PGPE_CONNECT_VECTOR) (
                            PDEVICE_OBJECT,
                            ULONG,
                            KINTERRUPT_MODE,
                            BOOLEAN,
                            PGPE_SERVICE_ROUTINE,
                            PVOID,
                            PVOID);

typedef
 
 
NTSTATUS (* PGPE_DISCONNECT_VECTOR) (
                            PVOID);

typedef
 
 
NTSTATUS (* PGPE_ENABLE_EVENT) (
                            PDEVICE_OBJECT,
                            PVOID);

typedef
 
 
NTSTATUS (* PGPE_DISABLE_EVENT) (
                            PDEVICE_OBJECT,
                            PVOID);

typedef
 
 
NTSTATUS (* PGPE_CLEAR_STATUS) (
                            PDEVICE_OBJECT,
                            PVOID);

typedef
void (* PDEVICE_NOTIFY_CALLBACK) (
                            PVOID,
                            ULONG);

typedef
 
 
NTSTATUS (* PREGISTER_FOR_DEVICE_NOTIFICATIONS) (
                            PDEVICE_OBJECT,
                            PDEVICE_NOTIFY_CALLBACK,
                            PVOID);

typedef
 
void (* PUNREGISTER_FOR_DEVICE_NOTIFICATIONS) (
                            PDEVICE_OBJECT,
                            PDEVICE_NOTIFY_CALLBACK);

typedef struct _ACPI_INTERFACE_STANDARD {
    
    
    
    USHORT                  Size;
    USHORT                  Version;
    PVOID                   Context;
    PINTERFACE_REFERENCE    InterfaceReference;
    PINTERFACE_DEREFERENCE  InterfaceDereference;
    
    
    
    PGPE_CONNECT_VECTOR                     GpeConnectVector;
    PGPE_DISCONNECT_VECTOR                  GpeDisconnectVector;
    PGPE_ENABLE_EVENT                       GpeEnableEvent;
    PGPE_DISABLE_EVENT                      GpeDisableEvent;
    PGPE_CLEAR_STATUS                       GpeClearStatus;
    PREGISTER_FOR_DEVICE_NOTIFICATIONS      RegisterForDeviceNotifications;
    PUNREGISTER_FOR_DEVICE_NOTIFICATIONS    UnregisterForDeviceNotifications;

} ACPI_INTERFACE_STANDARD, *PACPI_INTERFACE_STANDARD;







typedef
BOOLEAN
(*PGPE_SERVICE_ROUTINE2) (
    PVOID   ObjectContext,
    PVOID   ServiceContext
    );

typedef
 
 
NTSTATUS
(*PGPE_CONNECT_VECTOR2) (
    PVOID           Context,
    ULONG           GpeNumber,
    KINTERRUPT_MODE Mode,
    BOOLEAN         Shareable,
    PGPE_SERVICE_ROUTINE    ServiceRoutine,
    PVOID           ServiceContext,
    PVOID           *ObjectContext
    );

typedef
 
 
NTSTATUS
(*PGPE_DISCONNECT_VECTOR2) (
    PVOID   Context,
    PVOID   ObjectContext
    );

typedef
 
 
NTSTATUS
(*PGPE_ENABLE_EVENT2) (
    PVOID   Context,
    PVOID   ObjectContext
    );

typedef
 
 
NTSTATUS
(*PGPE_DISABLE_EVENT2) (
    PVOID   Context,
    PVOID   ObjectContext
    );

typedef
 
 
NTSTATUS
(*PGPE_CLEAR_STATUS2) (
    PVOID   Context,
    PVOID   ObjectContext
    );

typedef
 
void
(*PDEVICE_NOTIFY_CALLBACK2) (
    PVOID   NotificationContext,
    ULONG   NotifyCode
    );

typedef
 
 
NTSTATUS
(*PREGISTER_FOR_DEVICE_NOTIFICATIONS2) (
    PVOID   Context,
    PDEVICE_NOTIFY_CALLBACK2    NotificationHandler,
    PVOID   NotificationContext
    );

typedef
 
void
(*PUNREGISTER_FOR_DEVICE_NOTIFICATIONS2) (
    PVOID   Context
    );

typedef struct {
    
    
    
    USHORT                  Size;
    USHORT                  Version;
    PVOID                   Context;
    PINTERFACE_REFERENCE    InterfaceReference;
    PINTERFACE_DEREFERENCE  InterfaceDereference;
    
    
    
    PGPE_CONNECT_VECTOR2                    GpeConnectVector;
    PGPE_DISCONNECT_VECTOR2                 GpeDisconnectVector;
    PGPE_ENABLE_EVENT2                      GpeEnableEvent;
    PGPE_DISABLE_EVENT2                     GpeDisableEvent;
    PGPE_CLEAR_STATUS2                      GpeClearStatus;
    PREGISTER_FOR_DEVICE_NOTIFICATIONS2     RegisterForDeviceNotifications;
    PUNREGISTER_FOR_DEVICE_NOTIFICATIONS2   UnregisterForDeviceNotifications;

} ACPI_INTERFACE_STANDARD2, *PACPI_INTERFACE_STANDARD2;



 
__declspec(dllimport)
void
IoInvalidateDeviceRelations(
      PDEVICE_OBJECT DeviceObject,
      DEVICE_RELATION_TYPE Type
    );
#line 33102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
IoRequestDeviceEject(
      PDEVICE_OBJECT PhysicalDeviceObject
    );
#line 33111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef void (*PIO_DEVICE_EJECT_CALLBACK)(
      NTSTATUS Status,
      PVOID Context
    );


 
 
__declspec(dllimport)
NTSTATUS
IoRequestDeviceEjectEx(
      PDEVICE_OBJECT PhysicalDeviceObject,
      PIO_DEVICE_EJECT_CALLBACK Callback,
      PVOID Context,
      PDRIVER_OBJECT DriverObject
    );
#line 33129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 

#line 33137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 33141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
__declspec(dllimport)
NTSTATUS
IoGetDeviceProperty(
      PDEVICE_OBJECT DeviceObject,
      DEVICE_REGISTRY_PROPERTY DeviceProperty,
      ULONG BufferLength,
      PVOID PropertyBuffer,
        PULONG ResultLength
    );
#line 33151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













 
 
__declspec(dllimport)
NTSTATUS
IoOpenDeviceRegistryKey(
      PDEVICE_OBJECT DeviceObject,
      ULONG DevInstKeyType,
      ACCESS_MASK DesiredAccess,
      PHANDLE DevInstRegKey
    );
#line 33175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
IoRegisterDeviceInterface(
      PDEVICE_OBJECT PhysicalDeviceObject,
      const GUID *InterfaceClassGuid,
      PUNICODE_STRING ReferenceString,
      
#line 33188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    PUNICODE_STRING SymbolicLinkName
    );
#line 33191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
IoOpenDeviceInterfaceRegistryKey(
      PUNICODE_STRING SymbolicLinkName,
      ACCESS_MASK DesiredAccess,
      PHANDLE DeviceInterfaceKey
    );
#line 33203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
IoSetDeviceInterfaceState(
      PUNICODE_STRING SymbolicLinkName,
      BOOLEAN Enable
    );
#line 33214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
IoGetDeviceInterfaces(
      const GUID *InterfaceClassGuid,
      PDEVICE_OBJECT PhysicalDeviceObject,
      ULONG Flags,
    
    
#line 33228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    PZZWSTR *SymbolicLinkList
    );
#line 33231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
NTSTATUS
__stdcall
IoGetDeviceInterfaceAlias(
      PUNICODE_STRING SymbolicLinkName,
      const GUID *AliasInterfaceClassGuid,
     
    
#line 33246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    PUNICODE_STRING AliasSymbolicLinkName
    );
#line 33249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef enum _IO_NOTIFICATION_EVENT_CATEGORY {
    EventCategoryReserved,
    EventCategoryHardwareProfileChange,
    EventCategoryDeviceInterfaceChange,
    EventCategoryTargetDeviceChange
} IO_NOTIFICATION_EVENT_CATEGORY;








typedef
 
 
NTSTATUS
DRIVER_NOTIFICATION_CALLBACK_ROUTINE (
      PVOID NotificationStructure,
      PVOID Context
);
typedef DRIVER_NOTIFICATION_CALLBACK_ROUTINE
    *PDRIVER_NOTIFICATION_CALLBACK_ROUTINE;



 
 
__declspec(dllimport)
NTSTATUS
IoRegisterPlugPlayNotification(
      IO_NOTIFICATION_EVENT_CATEGORY EventCategory,
      ULONG EventCategoryFlags,
      PVOID EventCategoryData,
      PDRIVER_OBJECT DriverObject,
      PDRIVER_NOTIFICATION_CALLBACK_ROUTINE CallbackRoutine,
        PVOID Context,
    
    
#line 33295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    PVOID *NotificationEntry
    );
#line 33298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoUnregisterPlugPlayNotification(
        PVOID NotificationEntry
    );
#line 33307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoUnregisterPlugPlayNotificationEx(
        PVOID NotificationEntry
    );
#line 33316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
IoReportTargetDeviceChange(
      PDEVICE_OBJECT PhysicalDeviceObject,
      PVOID NotificationStructure  
    );
#line 33326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef
 
 
void
DEVICE_CHANGE_COMPLETE_CALLBACK(
      PVOID Context
    );
typedef DEVICE_CHANGE_COMPLETE_CALLBACK *PDEVICE_CHANGE_COMPLETE_CALLBACK;


 
__declspec(dllimport)
void
IoInvalidateDeviceState(
      PDEVICE_OBJECT PhysicalDeviceObject
    );
#line 33344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










 
__declspec(dllimport)
NTSTATUS
IoReportTargetDeviceChangeAsynchronous(
      PDEVICE_OBJECT PhysicalDeviceObject,
      PVOID NotificationStructure,  
      PDEVICE_CHANGE_COMPLETE_CALLBACK Callback,
      PVOID Context
    );
#line 33364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef struct _PLUGPLAY_NOTIFICATION_HEADER {
    USHORT Version; 
    USHORT Size;    
    GUID Event;
    
    
    
} PLUGPLAY_NOTIFICATION_HEADER, *PPLUGPLAY_NOTIFICATION_HEADER;





typedef struct _HWPROFILE_CHANGE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    GUID Event;
    
    
    
} HWPROFILE_CHANGE_NOTIFICATION, *PHWPROFILE_CHANGE_NOTIFICATION;






typedef struct _DEVICE_INTERFACE_CHANGE_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    GUID Event;
    
    
    
    GUID InterfaceClassGuid;
    PUNICODE_STRING SymbolicLinkName;
} DEVICE_INTERFACE_CHANGE_NOTIFICATION, *PDEVICE_INTERFACE_CHANGE_NOTIFICATION;










typedef struct _TARGET_DEVICE_REMOVAL_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    GUID Event;
    
    
    
    PFILE_OBJECT FileObject;
} TARGET_DEVICE_REMOVAL_NOTIFICATION, *PTARGET_DEVICE_REMOVAL_NOTIFICATION;











typedef struct _TARGET_DEVICE_CUSTOM_NOTIFICATION {
    USHORT Version;
    USHORT Size;
    GUID Event;
    
    
    
    PFILE_OBJECT FileObject;    
                                
                                
                                
                                
                                
                                
    LONG NameBufferOffset;      
                                
                                
    UCHAR CustomDataBuffer[1];  
                                
                                
                                
                                
} TARGET_DEVICE_CUSTOM_NOTIFICATION, *PTARGET_DEVICE_CUSTOM_NOTIFICATION;









#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"





















#pragma region Desktop Family or OneCore Family










typedef ULONG DEVPROPTYPE, *PDEVPROPTYPE;


























































typedef CHAR DEVPROP_BOOLEAN, *PDEVPROP_BOOLEAN;











typedef GUID  DEVPROPGUID, *PDEVPROPGUID;
typedef ULONG DEVPROPID,   *PDEVPROPID;

typedef struct _DEVPROPKEY {
    DEVPROPGUID fmtid;
    DEVPROPID   pid;
} DEVPROPKEY, *PDEVPROPKEY;

#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"












#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"







typedef 



enum _DEVPROPSTORE {
    DEVPROP_STORE_SYSTEM,
    DEVPROP_STORE_USER
} DEVPROPSTORE, *PDEVPROPSTORE;







typedef struct _DEVPROPCOMPKEY {
    DEVPROPKEY Key;
    DEVPROPSTORE Store;



    PCWSTR LocaleName;
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"
} DEVPROPCOMPKEY, *PDEVPROPCOMPKEY;



#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"











#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"





typedef struct _DEVPROPERTY {
    DEVPROPCOMPKEY CompKey;
    DEVPROPTYPE Type;
    ULONG BufferSize;



     PVOID Buffer;
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"
} DEVPROPERTY, *PDEVPROPERTY;








#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"









#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"

#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\devpropdef.h"
#pragma endregion


#line 33470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 33478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
 
__declspec(dllimport)
NTSTATUS
IoSetDevicePropertyData (
      PDEVICE_OBJECT     Pdo,
      const DEVPROPKEY   *PropertyKey,
      LCID               Lcid,
      ULONG              Flags,
      DEVPROPTYPE        Type,
      ULONG              Size,
     
         PVOID              Data
    );
#line 33497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
IoGetDevicePropertyData (
      PDEVICE_OBJECT     Pdo,
      const DEVPROPKEY   *PropertyKey,
      LCID               Lcid,
      ULONG        Flags,
      ULONG              Size,
     
          PVOID             Data,
      PULONG            RequiredSize,
      PDEVPROPTYPE      Type
    );
#line 33515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#line 33532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















#line 33550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
__declspec(dllimport)
NTSTATUS
IoGetDeviceNumaNode (
      PDEVICE_OBJECT Pdo,
      PUSHORT NodeNumber
    );
#line 33561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
 
__declspec(dllimport)
NTSTATUS
__stdcall
IoReplacePartitionUnit (
      PDEVICE_OBJECT TargetPdo,
      PDEVICE_OBJECT SparePdo,
      ULONG Flags
    );
#line 33575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef struct _PNP_REPLACE_DRIVER_INTERFACE *PPNP_REPLACE_DRIVER_INTERFACE;

typedef
 
NTSTATUS
(*PREPLACE_DRIVER_INIT) (
      PPNP_REPLACE_DRIVER_INTERFACE Interface,
      PVOID Unused
    );







typedef
 
NTSTATUS
(*PREPLACE_MAP_MEMORY) (
         PHYSICAL_ADDRESS    TargetPhysicalAddress,
         PHYSICAL_ADDRESS    SparePhysicalAddress,
      PLARGE_INTEGER      NumberOfBytes,
     PVOID *TargetAddress,
     PVOID *SpareAddress
    );

typedef struct _PNP_REPLACE_MEMORY_LIST {

    ULONG AllocatedCount;
    ULONG Count;
    ULONGLONG TotalLength;
    struct {
        PHYSICAL_ADDRESS Address;
        ULONGLONG Length;
    } Ranges[1];

} PNP_REPLACE_MEMORY_LIST, *PPNP_REPLACE_MEMORY_LIST;

typedef struct _PNP_REPLACE_PROCESSOR_LIST {

    PKAFFINITY Affinity;
    ULONG GroupCount;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];

} PNP_REPLACE_PROCESSOR_LIST, *PPNP_REPLACE_PROCESSOR_LIST;

typedef struct _PNP_REPLACE_PROCESSOR_LIST_V1 {

    KAFFINITY AffinityMask;
    ULONG AllocatedCount;
    ULONG Count;
    ULONG ApicIds[1];

} PNP_REPLACE_PROCESSOR_LIST_V1, *PPNP_REPLACE_PROCESSOR_LIST_V1;



typedef struct _PNP_REPLACE_PARAMETERS {

    ULONG Size;
    ULONG Version;

    ULONG64 Target;
    ULONG64 Spare;
    PPNP_REPLACE_PROCESSOR_LIST TargetProcessors;
    PPNP_REPLACE_PROCESSOR_LIST SpareProcessors;
    PPNP_REPLACE_MEMORY_LIST TargetMemory;
    PPNP_REPLACE_MEMORY_LIST SpareMemory;

    PREPLACE_MAP_MEMORY MapMemory;

} PNP_REPLACE_PARAMETERS, *PPNP_REPLACE_PARAMETERS;





typedef
void
(*PREPLACE_UNLOAD) (
    void
    );

typedef
 
NTSTATUS
(*PREPLACE_BEGIN) (
      PPNP_REPLACE_PARAMETERS Parameters,
     PVOID *Context
);

typedef
 
NTSTATUS
(*PREPLACE_END) (
      PVOID Context
    );

typedef
 
NTSTATUS
(*PREPLACE_MIRROR_PHYSICAL_MEMORY) (
      PVOID Context,
      PHYSICAL_ADDRESS PhysicalAddress,
      LARGE_INTEGER ByteCount
    );

typedef
 
NTSTATUS
(*PREPLACE_SET_PROCESSOR_ID) (
      PVOID Context,
      ULONG ApicId,
      BOOLEAN Target
    );

typedef
 
NTSTATUS
(*PREPLACE_SWAP) (
      PVOID Context
    );

typedef
 
NTSTATUS
(*PREPLACE_INITIATE_HARDWARE_MIRROR) (
      PVOID Context
    );

typedef
 
NTSTATUS
(*PREPLACE_MIRROR_PLATFORM_MEMORY) (
      PVOID Context
    );

typedef
 
NTSTATUS
(*PREPLACE_GET_MEMORY_DESTINATION) (
      PVOID Context,
      PHYSICAL_ADDRESS SourceAddress,
      PPHYSICAL_ADDRESS DestinationAddress
    );

typedef
  NTSTATUS
(*PREPLACE_ENABLE_DISABLE_HARDWARE_QUIESCE) (
      PVOID Context,
      BOOLEAN Enable
    );















typedef struct _PNP_REPLACE_DRIVER_INTERFACE {

    ULONG Size;
    ULONG Version;

    ULONG Flags;
    PREPLACE_UNLOAD Unload;
    PREPLACE_BEGIN BeginReplace;
    PREPLACE_END EndReplace;
    PREPLACE_MIRROR_PHYSICAL_MEMORY MirrorPhysicalMemory;
    PREPLACE_SET_PROCESSOR_ID SetProcessorId;
    PREPLACE_SWAP Swap;
    PREPLACE_INITIATE_HARDWARE_MIRROR InitiateHardwareMirror;
    PREPLACE_MIRROR_PLATFORM_MEMORY MirrorPlatformMemory;
    PREPLACE_GET_MEMORY_DESTINATION GetMemoryDestination;
    PREPLACE_ENABLE_DISABLE_HARDWARE_QUIESCE EnableDisableHardwareQuiesce;

} PNP_REPLACE_DRIVER_INTERFACE, *PPNP_REPLACE_DRIVER_INTERFACE;

































#line 33803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




























































#line 33864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































#line 33900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _DEVICE_DESCRIPTION {
    ULONG Version;
    BOOLEAN Master;
    BOOLEAN ScatterGather;
    BOOLEAN DemandMode;
    BOOLEAN AutoInitialize;
    BOOLEAN Dma32BitAddresses;
    BOOLEAN IgnoreCount;
    BOOLEAN Reserved1;          
    BOOLEAN Dma64BitAddresses;
    ULONG BusNumber; 
    ULONG DmaChannel;
    INTERFACE_TYPE  InterfaceType;
    DMA_WIDTH DmaWidth;
    DMA_SPEED DmaSpeed;
    ULONG MaximumLength;
    ULONG DmaPort;





#line 33928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
} DEVICE_DESCRIPTION, *PDEVICE_DESCRIPTION;



















typedef struct _DMA_ADAPTER_INFO_V1 {
    ULONG ReadDmaCounterAvailable;
    ULONG ScatterGatherLimit;
    ULONG DmaAddressWidth;
    ULONG Flags;
    ULONG MinimumTransferUnit;
} DMA_ADAPTER_INFO_V1, *PDMA_ADAPTER_INFO_V1;

typedef struct _DMA_ADAPTER_INFO {
    ULONG Version;
    union {
        DMA_ADAPTER_INFO_V1 V1;
    };
} DMA_ADAPTER_INFO, *PDMA_ADAPTER_INFO;








typedef struct _DMA_TRANSFER_INFO_V1 {
    ULONG MapRegisterCount;
    ULONG ScatterGatherElementCount;
    ULONG ScatterGatherListSize;
} DMA_TRANSFER_INFO_V1, *PDMA_TRANSFER_INFO_V1;

typedef struct _DMA_TRANSFER_INFO {
    ULONG Version;
    union {
        DMA_TRANSFER_INFO_V1 V1;
    };
} DMA_TRANSFER_INFO, *PDMA_TRANSFER_INFO;
















#line 33999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










                                                

__declspec(dllimport)
void
KeFlushWriteBuffer (
    void
    );






__declspec(dllimport)
LARGE_INTEGER
KeQueryPerformanceCounter (
     PLARGE_INTEGER PerformanceFrequency
   );
#line 34028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







__declspec(dllimport)
void
KeStallExecutionProcessor (
      ULONG MicroSeconds
    );
#line 34041 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef
NTSTATUS
PROCESSOR_HALT_ROUTINE (
      PVOID Context
    );

typedef PROCESSOR_HALT_ROUTINE *PPROCESSOR_HALT_ROUTINE;


typedef struct _SCATTER_GATHER_ELEMENT {
    PHYSICAL_ADDRESS Address;
    ULONG Length;
    ULONG_PTR Reserved;
} SCATTER_GATHER_ELEMENT, *PSCATTER_GATHER_ELEMENT;




#pragma warning(push)
#line 34072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#pragma warning(disable:4200)
typedef struct _SCATTER_GATHER_LIST {
    ULONG NumberOfElements;
    ULONG_PTR Reserved;
    SCATTER_GATHER_ELEMENT Elements[];
} SCATTER_GATHER_LIST, *PSCATTER_GATHER_LIST;

#pragma warning(pop)


#line 34083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 34090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



typedef struct _DMA_OPERATIONS *PDMA_OPERATIONS;



typedef struct _DMA_ADAPTER {
    USHORT Version;
    USHORT Size;
    PDMA_OPERATIONS DmaOperations;
    
} DMA_ADAPTER, *PDMA_ADAPTER;

typedef enum {
    DmaComplete,
    DmaAborted,
    DmaError,
    DmaCancelled
} DMA_COMPLETION_STATUS;



typedef void (*PPUT_DMA_ADAPTER)(
    PDMA_ADAPTER DmaAdapter
    );

typedef PVOID (*PALLOCATE_COMMON_BUFFER)(
      PDMA_ADAPTER DmaAdapter,
      ULONG Length,
      PPHYSICAL_ADDRESS LogicalAddress,
      BOOLEAN CacheEnabled
    );

typedef void (*PFREE_COMMON_BUFFER)(
      PDMA_ADAPTER DmaAdapter,
      ULONG Length,
      PHYSICAL_ADDRESS LogicalAddress,
      PVOID VirtualAddress,
      BOOLEAN CacheEnabled
    );

typedef NTSTATUS (*PALLOCATE_ADAPTER_CHANNEL)(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      ULONG NumberOfMapRegisters,
      PDRIVER_CONTROL ExecutionRoutine,
      PVOID Context
    );

typedef BOOLEAN (*PFLUSH_ADAPTER_BUFFERS)(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      PVOID MapRegisterBase,
      PVOID CurrentVa,
      ULONG Length,
      BOOLEAN WriteToDevice
    );

typedef void (*PFREE_ADAPTER_CHANNEL)(
      PDMA_ADAPTER DmaAdapter
    );

typedef void (*PFREE_ADAPTER_OBJECT)(
      PDMA_ADAPTER DmaAdapter,
      IO_ALLOCATION_ACTION AllocationAction
    );

typedef void (*PFREE_MAP_REGISTERS)(
      PDMA_ADAPTER DmaAdapter,
    PVOID MapRegisterBase,
    ULONG NumberOfMapRegisters
    );

typedef PHYSICAL_ADDRESS (*PMAP_TRANSFER)(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      PVOID MapRegisterBase,
      PVOID CurrentVa,
      PULONG Length,
      BOOLEAN WriteToDevice
    );

typedef ULONG (*PGET_DMA_ALIGNMENT)(
      PDMA_ADAPTER DmaAdapter
    );

typedef ULONG (*PREAD_DMA_COUNTER)(
      PDMA_ADAPTER DmaAdapter
    );

typedef
 
 
void
DRIVER_LIST_CONTROL(
      struct _DEVICE_OBJECT *DeviceObject,
      struct _IRP *Irp,
      PSCATTER_GATHER_LIST ScatterGather,
      PVOID Context
    );
typedef DRIVER_LIST_CONTROL *PDRIVER_LIST_CONTROL;

typedef NTSTATUS
(*PGET_SCATTER_GATHER_LIST)(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PMDL Mdl,
      PVOID CurrentVa,
      ULONG Length,
      PDRIVER_LIST_CONTROL ExecutionRoutine,
      PVOID Context,
      BOOLEAN WriteToDevice
    );

typedef void
(*PPUT_SCATTER_GATHER_LIST)(
      PDMA_ADAPTER DmaAdapter,
      PSCATTER_GATHER_LIST ScatterGather,
      BOOLEAN WriteToDevice
    );

typedef NTSTATUS
(*PCALCULATE_SCATTER_GATHER_LIST_SIZE)(
       PDMA_ADAPTER DmaAdapter,
        PMDL Mdl,
       PVOID CurrentVa,
       ULONG Length,
       PULONG  ScatterGatherListSize,
        PULONG pNumberOfMapRegisters
     );

typedef NTSTATUS
(*PBUILD_SCATTER_GATHER_LIST)(
       PDMA_ADAPTER DmaAdapter,
       PDEVICE_OBJECT DeviceObject,
       PMDL Mdl,
       PVOID CurrentVa,
       ULONG Length,
       PDRIVER_LIST_CONTROL ExecutionRoutine,
       PVOID Context,
       BOOLEAN WriteToDevice,
       PVOID   ScatterGatherBuffer,
       ULONG   ScatterGatherLength
     );

typedef NTSTATUS
(*PBUILD_MDL_FROM_SCATTER_GATHER_LIST)(
      PDMA_ADAPTER DmaAdapter,
      PSCATTER_GATHER_LIST ScatterGather,
      PMDL OriginalMdl,
      PMDL *TargetMdl
    );

typedef NTSTATUS
(*PGET_DMA_ADAPTER_INFO)(
      PDMA_ADAPTER DmaAdapter,
      PDMA_ADAPTER_INFO AdapterInfo
    );

typedef NTSTATUS
(*PGET_DMA_TRANSFER_INFO)(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      ULONGLONG Offset,
      ULONG Length,
      BOOLEAN WriteOnly,
      PDMA_TRANSFER_INFO TransferInfo
    );

typedef NTSTATUS
(*PCONFIGURE_ADAPTER_CHANNEL)(
      PDMA_ADAPTER DmaAdapter,
      ULONG FunctionNumber,
      PVOID Context
    );

typedef NTSTATUS
(*PINITIALIZE_DMA_TRANSFER_CONTEXT)(
      PDMA_ADAPTER DmaAdapter,
      PVOID DmaTransferContext
    );

typedef PVOID
(*PALLOCATE_COMMON_BUFFER_EX)(
      PDMA_ADAPTER DmaAdapter,
      PPHYSICAL_ADDRESS MaximumAddress,
      ULONG Length,
      PPHYSICAL_ADDRESS LogicalAddress,
      BOOLEAN CacheEnabled,
      NODE_REQUIREMENT PreferredNode
    );

typedef NTSTATUS
(*PALLOCATE_ADAPTER_CHANNEL_EX)(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PVOID DmaTransferContext,
      ULONG NumberOfMapRegisters,
      ULONG Flags,
      PDRIVER_CONTROL ExecutionRoutine,
      PVOID ExecutionContext,
      PVOID *MapRegisterBase
    );

typedef void
 
 
 
DMA_COMPLETION_ROUTINE(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PVOID CompletionContext,
      DMA_COMPLETION_STATUS Status
    );
typedef DMA_COMPLETION_ROUTINE *PDMA_COMPLETION_ROUTINE;

typedef NTSTATUS
(*PMAP_TRANSFER_EX)(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      PVOID MapRegisterBase,
      ULONGLONG Offset,
      ULONG DeviceOffset,
      PULONG Length,
      BOOLEAN WriteToDevice,
      PSCATTER_GATHER_LIST ScatterGatherBuffer,
      ULONG ScatterGatherBufferLength,
      PDMA_COMPLETION_ROUTINE DmaCompletionRoutine,
      PVOID CompletionContext
    );

typedef BOOLEAN
(*PCANCEL_ADAPTER_CHANNEL)(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PVOID DmaTransferContext
    );

typedef NTSTATUS
(*PCANCEL_MAPPED_TRANSFER)(
      PDMA_ADAPTER DmaAdapter,
      PVOID DmaTransferContext
    );

typedef NTSTATUS
(*PFLUSH_ADAPTER_BUFFERS_EX)(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      PVOID MapRegisterBase,
      ULONGLONG Offset,
      ULONG Length,
      BOOLEAN WriteToDevice
    );

typedef NTSTATUS
(*PGET_SCATTER_GATHER_LIST_EX)(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PVOID DmaTransferContext,
      PMDL Mdl,
      ULONGLONG Offset,
      ULONG Length,
      ULONG Flags,
      PDRIVER_LIST_CONTROL ExecutionRoutine,
      PVOID Context,
      BOOLEAN WriteToDevice,
      PDMA_COMPLETION_ROUTINE DmaCompletionRoutine,
      PVOID CompletionContext,
      PSCATTER_GATHER_LIST *ScatterGatherList
    );

typedef NTSTATUS
(*PBUILD_SCATTER_GATHER_LIST_EX)(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PVOID DmaTransferContext,
      PMDL Mdl,
      ULONGLONG Offset,
      ULONG Length,
      ULONG Flags,
      PDRIVER_LIST_CONTROL ExecutionRoutine,
      PVOID Context,
      BOOLEAN WriteToDevice,
      PVOID ScatterGatherBuffer,
      ULONG ScatterGatherLength,
      PDMA_COMPLETION_ROUTINE DmaCompletionRoutine,
      PVOID CompletionContext,
      PVOID ScatterGatherList
    );

typedef NTSTATUS
(*PALLOCATE_DOMAIN_COMMON_BUFFER)(
      PDMA_ADAPTER DmaAdapter,
      HANDLE DomainHandle,
      PPHYSICAL_ADDRESS MaximumAddress,
      ULONG Length,
      ULONG Flags,
      MEMORY_CACHING_TYPE *CacheType,
      NODE_REQUIREMENT PreferredNode,
      PPHYSICAL_ADDRESS LogicalAddress,
      PVOID *VirtualAddress
    );







typedef NTSTATUS
(*PFLUSH_DMA_BUFFER)(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      BOOLEAN ReadOperation
);

typedef NTSTATUS
(*PJOIN_DMA_DOMAIN)(
      PDMA_ADAPTER DmaAdapter,
      HANDLE DomainHandle
);

typedef NTSTATUS
(*PLEAVE_DMA_DOMAIN)(
      PDMA_ADAPTER DmaAdapter
);

typedef HANDLE
(*PGET_DMA_DOMAIN)(
      PDMA_ADAPTER DmaAdapter
);



typedef struct _DMA_OPERATIONS {
    ULONG Size;
    PPUT_DMA_ADAPTER PutDmaAdapter;
    PALLOCATE_COMMON_BUFFER AllocateCommonBuffer;
    PFREE_COMMON_BUFFER FreeCommonBuffer;
    PALLOCATE_ADAPTER_CHANNEL AllocateAdapterChannel;
    PFLUSH_ADAPTER_BUFFERS FlushAdapterBuffers;
    PFREE_ADAPTER_CHANNEL FreeAdapterChannel;
    PFREE_MAP_REGISTERS FreeMapRegisters;
    PMAP_TRANSFER MapTransfer;
    PGET_DMA_ALIGNMENT GetDmaAlignment;
    PREAD_DMA_COUNTER ReadDmaCounter;
    PGET_SCATTER_GATHER_LIST GetScatterGatherList;
    PPUT_SCATTER_GATHER_LIST PutScatterGatherList;
    PCALCULATE_SCATTER_GATHER_LIST_SIZE CalculateScatterGatherList;
    PBUILD_SCATTER_GATHER_LIST BuildScatterGatherList;
    PBUILD_MDL_FROM_SCATTER_GATHER_LIST BuildMdlFromScatterGatherList;
    PGET_DMA_ADAPTER_INFO GetDmaAdapterInfo;
    PGET_DMA_TRANSFER_INFO GetDmaTransferInfo;
    PINITIALIZE_DMA_TRANSFER_CONTEXT InitializeDmaTransferContext;
    PALLOCATE_COMMON_BUFFER_EX AllocateCommonBufferEx;
    PALLOCATE_ADAPTER_CHANNEL_EX AllocateAdapterChannelEx;
    PCONFIGURE_ADAPTER_CHANNEL ConfigureAdapterChannel;
    PCANCEL_ADAPTER_CHANNEL CancelAdapterChannel;
    PMAP_TRANSFER_EX MapTransferEx;
    PGET_SCATTER_GATHER_LIST_EX GetScatterGatherListEx;
    PBUILD_SCATTER_GATHER_LIST_EX BuildScatterGatherListEx;
    PFLUSH_ADAPTER_BUFFERS_EX FlushAdapterBuffersEx;
    PFREE_ADAPTER_OBJECT FreeAdapterObject;
    PCANCEL_MAPPED_TRANSFER CancelMappedTransfer;
    PALLOCATE_DOMAIN_COMMON_BUFFER AllocateDomainCommonBuffer;
    PFLUSH_DMA_BUFFER FlushDmaBuffer;
    PJOIN_DMA_DOMAIN JoinDmaDomain;
    PLEAVE_DMA_DOMAIN LeaveDmaDomain;
    PGET_DMA_DOMAIN GetDmaDomain;
} DMA_OPERATIONS;





__declspec(deprecated)                 
 
__forceinline
PVOID
HalAllocateCommonBuffer(
      PDMA_ADAPTER DmaAdapter,
      ULONG Length,
      PPHYSICAL_ADDRESS LogicalAddress,
      BOOLEAN CacheEnabled
    ){

    PALLOCATE_COMMON_BUFFER allocateCommonBuffer;
    PVOID commonBuffer;

    allocateCommonBuffer = *(DmaAdapter)->DmaOperations->AllocateCommonBuffer;
    (((void) 0), ((!(allocateCommonBuffer != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"allocateCommonBuffer != ((void *)0)"), __int2c(), 0) : 1));

    commonBuffer = allocateCommonBuffer( DmaAdapter,
                                         Length,
                                         LogicalAddress,
                                         CacheEnabled );

    return commonBuffer;
}

__declspec(deprecated)                 
 
__forceinline
void
HalFreeCommonBuffer(
      PDMA_ADAPTER DmaAdapter,
      ULONG Length,
      PHYSICAL_ADDRESS LogicalAddress,
      PVOID VirtualAddress,
      BOOLEAN CacheEnabled
    ){

    PFREE_COMMON_BUFFER freeCommonBuffer;

    freeCommonBuffer = *(DmaAdapter)->DmaOperations->FreeCommonBuffer;
    (((void) 0), ((!(freeCommonBuffer != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"freeCommonBuffer != ((void *)0)"), __int2c(), 0) : 1));

    freeCommonBuffer( DmaAdapter,
                      Length,
                      LogicalAddress,
                      VirtualAddress,
                      CacheEnabled );
}

__declspec(deprecated)                 
 
 
 
__forceinline
NTSTATUS
IoAllocateAdapterChannel(
      PDMA_ADAPTER DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      ULONG NumberOfMapRegisters,
      PDRIVER_CONTROL ExecutionRoutine,
      PVOID Context
    ){

    PALLOCATE_ADAPTER_CHANNEL allocateAdapterChannel;
    NTSTATUS status;

    allocateAdapterChannel =
        *(DmaAdapter)->DmaOperations->AllocateAdapterChannel;

    (((void) 0), ((!(allocateAdapterChannel != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"allocateAdapterChannel != ((void *)0)"), __int2c(), 0) : 1));

    status = allocateAdapterChannel( DmaAdapter,
                                     DeviceObject,
                                     NumberOfMapRegisters,
                                     ExecutionRoutine,
                                     Context );

    return status;
}

__declspec(deprecated)                 
 
__forceinline
BOOLEAN
IoFlushAdapterBuffers(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      PVOID MapRegisterBase,
      PVOID CurrentVa,
      ULONG Length,
      BOOLEAN WriteToDevice
    ){

    PFLUSH_ADAPTER_BUFFERS flushAdapterBuffers;
    BOOLEAN result;

    flushAdapterBuffers = *(DmaAdapter)->DmaOperations->FlushAdapterBuffers;
    (((void) 0), ((!(flushAdapterBuffers != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"flushAdapterBuffers != ((void *)0)"), __int2c(), 0) : 1));

    result = flushAdapterBuffers( DmaAdapter,
                                  Mdl,
                                  MapRegisterBase,
                                  CurrentVa,
                                  Length,
                                  WriteToDevice );
    return result;
}

__declspec(deprecated)                 
 
__forceinline
void
IoFreeAdapterChannel(
      PDMA_ADAPTER DmaAdapter
    ){

    PFREE_ADAPTER_CHANNEL freeAdapterChannel;

    freeAdapterChannel = *(DmaAdapter)->DmaOperations->FreeAdapterChannel;
    (((void) 0), ((!(freeAdapterChannel != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"freeAdapterChannel != ((void *)0)"), __int2c(), 0) : 1));

    freeAdapterChannel( DmaAdapter );
}

__declspec(deprecated)                 
 
__forceinline
void
IoFreeMapRegisters(
      PDMA_ADAPTER DmaAdapter,
      PVOID MapRegisterBase,
      ULONG NumberOfMapRegisters
    ){

    PFREE_MAP_REGISTERS freeMapRegisters;

    freeMapRegisters = *(DmaAdapter)->DmaOperations->FreeMapRegisters;
    (((void) 0), ((!(freeMapRegisters != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"freeMapRegisters != ((void *)0)"), __int2c(), 0) : 1));

    freeMapRegisters( DmaAdapter,
                      MapRegisterBase,
                      NumberOfMapRegisters );
}


__declspec(deprecated)                 
 
__forceinline
PHYSICAL_ADDRESS
IoMapTransfer(
      PDMA_ADAPTER DmaAdapter,
      PMDL Mdl,
      PVOID MapRegisterBase,
      PVOID CurrentVa,
      PULONG Length,
      BOOLEAN WriteToDevice
    ){

    PHYSICAL_ADDRESS physicalAddress;
    PMAP_TRANSFER mapTransfer;

    mapTransfer = *(DmaAdapter)->DmaOperations->MapTransfer;
    (((void) 0), ((!(mapTransfer != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"mapTransfer != ((void *)0)"), __int2c(), 0) : 1));

    physicalAddress = mapTransfer( DmaAdapter,
                                   Mdl,
                                   MapRegisterBase,
                                   CurrentVa,
                                   Length,
                                   WriteToDevice );

    return physicalAddress;
}

__declspec(deprecated)                 
__forceinline
ULONG
HalGetDmaAlignment(
      PDMA_ADAPTER DmaAdapter
    )
{
    PGET_DMA_ALIGNMENT getDmaAlignment;
    ULONG alignment;

    getDmaAlignment = *(DmaAdapter)->DmaOperations->GetDmaAlignment;
    (((void) 0), ((!(getDmaAlignment != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"getDmaAlignment != ((void *)0)"), __int2c(), 0) : 1));

    alignment = getDmaAlignment( DmaAdapter );
    return alignment;
}

__declspec(deprecated)                 
 
__forceinline
ULONG
HalReadDmaCounter(
      PDMA_ADAPTER DmaAdapter
    )
{
    PREAD_DMA_COUNTER readDmaCounter;
    ULONG counter;

    readDmaCounter = *(DmaAdapter)->DmaOperations->ReadDmaCounter;
    (((void) 0), ((!(readDmaCounter != ((void *)0))) ? (__annotation(L"Debug", L"AssertFail", L"readDmaCounter != ((void *)0)"), __int2c(), 0) : 1));

    counter = readDmaCounter( DmaAdapter );
    return counter;
}

#line 34676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
PoSetHiberRange (
      PVOID MemoryMap,
      ULONG     Flags,
      PVOID     Address,
      ULONG_PTR Length,
      ULONG     Tag
    );











 
__declspec(dllimport)
void
PoSetSystemState (
      EXECUTION_STATE Flags
    );
#line 34705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
PVOID
PoRegisterSystemState (
      PVOID StateHandle,
      EXECUTION_STATE Flags
    );
#line 34716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
PoCreatePowerRequest (
     PVOID *PowerRequest,
      PDEVICE_OBJECT DeviceObject,
      PCOUNTED_REASON_CONTEXT Context
    );
#line 34727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
PoSetPowerRequest (
      PVOID PowerRequest,
      POWER_REQUEST_TYPE Type
    );
#line 34737 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
PoClearPowerRequest (
      PVOID PowerRequest,
      POWER_REQUEST_TYPE Type
    );
#line 34747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
PoDeletePowerRequest (
      PVOID PowerRequest
    );
#line 34756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


typedef
 
 
 
void
REQUEST_POWER_COMPLETE (
      PDEVICE_OBJECT DeviceObject,
      UCHAR MinorFunction,
      POWER_STATE PowerState,
      PVOID Context,
      PIO_STATUS_BLOCK IoStatus
    );

typedef REQUEST_POWER_COMPLETE *PREQUEST_POWER_COMPLETE;


 
__declspec(dllimport)
NTSTATUS
PoRequestPowerIrp (
      PDEVICE_OBJECT DeviceObject,
      UCHAR MinorFunction,
      POWER_STATE PowerState,
      PREQUEST_POWER_COMPLETE CompletionFunction,
        PVOID Context,
     PIRP *Irp
    );
#line 34786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
PoSetSystemWake (
      PIRP Irp
    );
#line 34795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
PoGetSystemWake (
      PIRP Irp
    );
#line 34804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
void
PoUnregisterSystemState (
      PVOID StateHandle
    );
#line 34814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
POWER_STATE
PoSetPowerState (
      PDEVICE_OBJECT DeviceObject,
      POWER_STATE_TYPE Type,
      POWER_STATE State
    );
#line 34826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
PoCallDriver (
      PDEVICE_OBJECT DeviceObject,
        PIRP Irp
    );
#line 34836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
PoStartNextPowerIrp(
      PIRP Irp
    );
#line 34845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
PULONG
PoRegisterDeviceForIdleDetection (
      PDEVICE_OBJECT DeviceObject,
      ULONG ConservationIdleTime,
      ULONG PerformanceIdleTime,
      DEVICE_POWER_STATE State
    );
#line 34857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





__declspec(dllimport)
void
PoSetDeviceBusyEx (
      PULONG IdlePointer
    );
#line 34868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
PoStartDeviceBusy (
      PULONG IdlePointer
    );
#line 34876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
PoEndDeviceBusy (
      PULONG IdlePointer
    );
#line 34884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
BOOLEAN
PoQueryWatchdogTime (
      PDEVICE_OBJECT Pdo,
      PULONG SecondsRemaining
    );
#line 34894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef
 
 
NTSTATUS
POWER_SETTING_CALLBACK (
      LPCGUID SettingGuid,
      PVOID Value,
      ULONG ValueLength,
      PVOID Context
);

typedef POWER_SETTING_CALLBACK *PPOWER_SETTING_CALLBACK;


 
__declspec(dllimport)
NTSTATUS
PoRegisterPowerSettingCallback (
      PDEVICE_OBJECT DeviceObject,
      LPCGUID SettingGuid,
      PPOWER_SETTING_CALLBACK Callback,
      PVOID Context,
     PVOID *Handle
    );
#line 34920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
PoUnregisterPowerSettingCallback (
      PVOID Handle
    );
#line 34929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















struct POHANDLE__{int unused;}; typedef struct POHANDLE__ *POHANDLE;

typedef
 
 
void
PO_FX_COMPONENT_ACTIVE_CONDITION_CALLBACK (
      PVOID Context,
      ULONG Component
    );

typedef PO_FX_COMPONENT_ACTIVE_CONDITION_CALLBACK
    *PPO_FX_COMPONENT_ACTIVE_CONDITION_CALLBACK;

typedef
 
 
void
PO_FX_COMPONENT_IDLE_CONDITION_CALLBACK (
      PVOID Context,
      ULONG Component
    );

typedef PO_FX_COMPONENT_IDLE_CONDITION_CALLBACK
    *PPO_FX_COMPONENT_IDLE_CONDITION_CALLBACK;

typedef
 
 
void
PO_FX_COMPONENT_IDLE_STATE_CALLBACK (
      PVOID Context,
      ULONG Component,
      ULONG State
    );

typedef PO_FX_COMPONENT_IDLE_STATE_CALLBACK
    *PPO_FX_COMPONENT_IDLE_STATE_CALLBACK;

typedef
 
 
void
PO_FX_DEVICE_POWER_REQUIRED_CALLBACK (
      PVOID Context
    );

typedef PO_FX_DEVICE_POWER_REQUIRED_CALLBACK
    *PPO_FX_DEVICE_POWER_REQUIRED_CALLBACK;

typedef
 
 
void
PO_FX_DEVICE_POWER_NOT_REQUIRED_CALLBACK (
      PVOID Context
    );

typedef PO_FX_DEVICE_POWER_NOT_REQUIRED_CALLBACK
    *PPO_FX_DEVICE_POWER_NOT_REQUIRED_CALLBACK;

typedef
 
 
NTSTATUS
PO_FX_POWER_CONTROL_CALLBACK (
      PVOID DeviceContext,
      LPCGUID PowerControlCode,
      PVOID InBuffer,
      SIZE_T InBufferSize,
      PVOID OutBuffer,
      SIZE_T OutBufferSize,
      PSIZE_T BytesReturned
    );

typedef PO_FX_POWER_CONTROL_CALLBACK *PPO_FX_POWER_CONTROL_CALLBACK;

typedef
 
 
void
PO_FX_COMPONENT_CRITICAL_TRANSITION_CALLBACK (
      PVOID Context,
      ULONG Component,
      BOOLEAN Active
    );

typedef PO_FX_COMPONENT_CRITICAL_TRANSITION_CALLBACK
    *PPO_FX_COMPONENT_CRITICAL_TRANSITION_CALLBACK;

typedef struct _PO_FX_COMPONENT_IDLE_STATE {
    ULONGLONG TransitionLatency;
    ULONGLONG ResidencyRequirement;
    ULONG NominalPower;
} PO_FX_COMPONENT_IDLE_STATE, *PPO_FX_COMPONENT_IDLE_STATE;

typedef struct _PO_FX_COMPONENT_V1 {
    GUID Id;
    ULONG IdleStateCount;
    ULONG DeepestWakeableIdleState;
      PPO_FX_COMPONENT_IDLE_STATE IdleStates;
} PO_FX_COMPONENT_V1, *PPO_FX_COMPONENT_V1;

typedef struct _PO_FX_DEVICE_V1 {
    ULONG Version;
    ULONG ComponentCount;
    PPO_FX_COMPONENT_ACTIVE_CONDITION_CALLBACK ComponentActiveConditionCallback;
    PPO_FX_COMPONENT_IDLE_CONDITION_CALLBACK ComponentIdleConditionCallback;
    PPO_FX_COMPONENT_IDLE_STATE_CALLBACK ComponentIdleStateCallback;
    PPO_FX_DEVICE_POWER_REQUIRED_CALLBACK DevicePowerRequiredCallback;
    PPO_FX_DEVICE_POWER_NOT_REQUIRED_CALLBACK DevicePowerNotRequiredCallback;
    PPO_FX_POWER_CONTROL_CALLBACK PowerControlCallback;
    PVOID DeviceContext;
      PO_FX_COMPONENT_V1 Components[1];
} PO_FX_DEVICE_V1, *PPO_FX_DEVICE_V1;




typedef struct _PO_FX_COMPONENT_V2 {
    GUID Id;
    ULONGLONG Flags;
    ULONG DeepestWakeableIdleState;
    ULONG IdleStateCount;
      PPO_FX_COMPONENT_IDLE_STATE IdleStates;
    ULONG ProviderCount;
      PULONG Providers;
} PO_FX_COMPONENT_V2, *PPO_FX_COMPONENT_V2;

typedef struct _PO_FX_DEVICE_V2 {
    ULONG Version;
    ULONGLONG Flags;
    PPO_FX_COMPONENT_ACTIVE_CONDITION_CALLBACK ComponentActiveConditionCallback;
    PPO_FX_COMPONENT_IDLE_CONDITION_CALLBACK ComponentIdleConditionCallback;
    PPO_FX_COMPONENT_IDLE_STATE_CALLBACK ComponentIdleStateCallback;
    PPO_FX_DEVICE_POWER_REQUIRED_CALLBACK DevicePowerRequiredCallback;
    PPO_FX_DEVICE_POWER_NOT_REQUIRED_CALLBACK DevicePowerNotRequiredCallback;
    PPO_FX_POWER_CONTROL_CALLBACK PowerControlCallback;
    PVOID DeviceContext;
    ULONG ComponentCount;
      PO_FX_COMPONENT_V2 Components[1];
} PO_FX_DEVICE_V2, *PPO_FX_DEVICE_V2;


typedef PO_FX_COMPONENT_V1 PO_FX_COMPONENT, *PPO_FX_COMPONENT;
typedef PO_FX_DEVICE_V1 PO_FX_DEVICE, *PPO_FX_DEVICE;





#line 35103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _PO_FX_PERF_STATE_UNIT {
    PoFxPerfStateUnitOther,
    PoFxPerfStateUnitFrequency,
    PoFxPerfStateUnitBandwidth,
    PoFxPerfStateUnitMaximum
} PO_FX_PERF_STATE_UNIT, *PPO_FX_PERF_STATE_UNIT;

typedef enum _PO_FX_PERF_STATE_TYPE {
    PoFxPerfStateTypeDiscrete,
    PoFxPerfStateTypeRange,
    PoFxPerfStateTypeMaximum
} PO_FX_PERF_STATE_TYPE, *PPO_FX_PERF_STATE_TYPE;

typedef struct _PO_FX_PERF_STATE {
    ULONGLONG Value;
    PVOID Context;
} PO_FX_PERF_STATE, *PPO_FX_PERF_STATE;

typedef struct _PO_FX_COMPONENT_PERF_SET {
    UNICODE_STRING Name;
    ULONGLONG Flags;
    PO_FX_PERF_STATE_UNIT Unit;
    PO_FX_PERF_STATE_TYPE Type;
    union {
        struct {
            ULONG Count;
              PPO_FX_PERF_STATE States;
        } Discrete;
        struct {
            ULONGLONG Minimum;
            ULONGLONG Maximum;
        } Range;
    };
} PO_FX_COMPONENT_PERF_SET, *PPO_FX_COMPONENT_PERF_SET;

typedef struct _PO_FX_COMPONENT_PERF_INFO {
    ULONG PerfStateSetsCount;
    PO_FX_COMPONENT_PERF_SET PerfStateSets[1];
} PO_FX_COMPONENT_PERF_INFO, *PPO_FX_COMPONENT_PERF_INFO;

typedef struct _PO_FX_PERF_STATE_CHANGE {
    ULONG Set;
    union {
        ULONG StateIndex;
        ULONGLONG StateValue;
    };
} PO_FX_PERF_STATE_CHANGE, *PPO_FX_PERF_STATE_CHANGE;
 






















#line 35175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 35212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 35223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 35242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 35252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 35263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 35274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 35285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 35296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 35306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














#line 35330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




























































#line 35400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












#line 35413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef enum _PO_THERMAL_REQUEST_TYPE {
    PoThermalRequestPassive,
    PoThermalRequestActive,
} PO_THERMAL_REQUEST_TYPE, *PPO_THERMAL_REQUEST_TYPE;









#line 35428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 35438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









#line 35448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 35457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
























#line 35482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





typedef struct _OBJECT_HANDLE_INFORMATION {
    ULONG HandleAttributes;
    ACCESS_MASK GrantedAccess;
} OBJECT_HANDLE_INFORMATION, *POBJECT_HANDLE_INFORMATION;



 
__declspec(dllimport)
NTSTATUS
ObReferenceObjectByHandle(
      HANDLE Handle,
      ACCESS_MASK DesiredAccess,
      POBJECT_TYPE ObjectType,
      KPROCESSOR_MODE AccessMode,
      PVOID *Object,
      POBJECT_HANDLE_INFORMATION HandleInformation
    );
#line 35506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
ObReferenceObjectByHandleWithTag(
      HANDLE Handle,
      ACCESS_MASK DesiredAccess,
      POBJECT_TYPE ObjectType,
      KPROCESSOR_MODE AccessMode,
      ULONG Tag,
      PVOID *Object,
      POBJECT_HANDLE_INFORMATION HandleInformation
    );
#line 35521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


















#line 35540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ObCloseHandle (
        HANDLE Handle,
      KPROCESSOR_MODE PreviousMode
    );
#line 35549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















#line 35572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG_PTR

ObfReferenceObject(
      PVOID Object
    );
#line 35582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG_PTR

ObfReferenceObjectWithTag(
      PVOID Object,
      ULONG Tag
    );
#line 35593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
ObReferenceObjectByPointer(
      PVOID Object,
      ACCESS_MASK DesiredAccess,
      POBJECT_TYPE ObjectType,
      KPROCESSOR_MODE AccessMode
    );
#line 35605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
ObReferenceObjectByPointerWithTag(
      PVOID Object,
      ACCESS_MASK DesiredAccess,
      POBJECT_TYPE ObjectType,
      KPROCESSOR_MODE AccessMode,
      ULONG Tag
    );
#line 35618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG_PTR

ObfDereferenceObject(
      PVOID Object
    );
#line 35628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
LONG_PTR

ObfDereferenceObjectWithTag(
      PVOID Object,
      ULONG Tag
    );
#line 35639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
ObDereferenceObjectDeferDelete(
      PVOID Object
    );
#line 35647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
void
ObDereferenceObjectDeferDeleteWithTag(
      PVOID Object,
      ULONG Tag
    );
#line 35656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
ObGetObjectSecurity(
      PVOID Object,
      PSECURITY_DESCRIPTOR *SecurityDescriptor,
      PBOOLEAN MemoryAllocated
    );
#line 35668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
void
ObReleaseObjectSecurity(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      BOOLEAN MemoryAllocated
    );
#line 35678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












typedef ULONG OB_OPERATION;




typedef struct _OB_PRE_CREATE_HANDLE_INFORMATION {
      ACCESS_MASK         DesiredAccess;
      ACCESS_MASK            OriginalDesiredAccess;
} OB_PRE_CREATE_HANDLE_INFORMATION, *POB_PRE_CREATE_HANDLE_INFORMATION;

typedef struct _OB_PRE_DUPLICATE_HANDLE_INFORMATION {
      ACCESS_MASK         DesiredAccess;
      ACCESS_MASK            OriginalDesiredAccess;
      PVOID                  SourceProcess;
      PVOID                  TargetProcess;
} OB_PRE_DUPLICATE_HANDLE_INFORMATION, * POB_PRE_DUPLICATE_HANDLE_INFORMATION;

typedef union _OB_PRE_OPERATION_PARAMETERS {
      OB_PRE_CREATE_HANDLE_INFORMATION        CreateHandleInformation;
      OB_PRE_DUPLICATE_HANDLE_INFORMATION     DuplicateHandleInformation;
} OB_PRE_OPERATION_PARAMETERS, *POB_PRE_OPERATION_PARAMETERS;

typedef struct _OB_PRE_OPERATION_INFORMATION {
      OB_OPERATION           Operation;
    union {
          ULONG Flags;
        struct {
              ULONG KernelHandle:1;
              ULONG Reserved:31;
        };
    };
      PVOID                         Object;
      POBJECT_TYPE                  ObjectType;
      PVOID                        CallContext;
      POB_PRE_OPERATION_PARAMETERS  Parameters;
} OB_PRE_OPERATION_INFORMATION, *POB_PRE_OPERATION_INFORMATION;

typedef struct _OB_POST_CREATE_HANDLE_INFORMATION {
      ACCESS_MASK            GrantedAccess;
} OB_POST_CREATE_HANDLE_INFORMATION, *POB_POST_CREATE_HANDLE_INFORMATION;

typedef struct _OB_POST_DUPLICATE_HANDLE_INFORMATION {
      ACCESS_MASK            GrantedAccess;
} OB_POST_DUPLICATE_HANDLE_INFORMATION, * POB_POST_DUPLICATE_HANDLE_INFORMATION;

typedef union _OB_POST_OPERATION_PARAMETERS {
      OB_POST_CREATE_HANDLE_INFORMATION       CreateHandleInformation;
      OB_POST_DUPLICATE_HANDLE_INFORMATION    DuplicateHandleInformation;
} OB_POST_OPERATION_PARAMETERS, *POB_POST_OPERATION_PARAMETERS;

typedef struct _OB_POST_OPERATION_INFORMATION {
      OB_OPERATION  Operation;
    union {
          ULONG Flags;
        struct {
              ULONG KernelHandle:1;
              ULONG Reserved:31;
        };
    };
      PVOID                          Object;
      POBJECT_TYPE                   ObjectType;
      PVOID                          CallContext;
      NTSTATUS                       ReturnStatus;
      POB_POST_OPERATION_PARAMETERS  Parameters;
} OB_POST_OPERATION_INFORMATION,*POB_POST_OPERATION_INFORMATION;

typedef enum _OB_PREOP_CALLBACK_STATUS {
    OB_PREOP_SUCCESS
} OB_PREOP_CALLBACK_STATUS, *POB_PREOP_CALLBACK_STATUS;

typedef OB_PREOP_CALLBACK_STATUS
(*POB_PRE_OPERATION_CALLBACK) (
      PVOID RegistrationContext,
      POB_PRE_OPERATION_INFORMATION OperationInformation
    );

typedef void
(*POB_POST_OPERATION_CALLBACK) (
      PVOID RegistrationContext,
      POB_POST_OPERATION_INFORMATION OperationInformation
    );

typedef struct _OB_OPERATION_REGISTRATION {
      POBJECT_TYPE                *ObjectType;
      OB_OPERATION                Operations;
      POB_PRE_OPERATION_CALLBACK  PreOperation;
      POB_POST_OPERATION_CALLBACK PostOperation;
} OB_OPERATION_REGISTRATION, *POB_OPERATION_REGISTRATION;

typedef struct _OB_CALLBACK_REGISTRATION {
      USHORT                     Version;
      USHORT                     OperationRegistrationCount;
      UNICODE_STRING             Altitude;
      PVOID                      RegistrationContext;
      OB_OPERATION_REGISTRATION  *OperationRegistration;
} OB_CALLBACK_REGISTRATION, *POB_CALLBACK_REGISTRATION;


__declspec(dllimport)
NTSTATUS
ObRegisterCallbacks (
      POB_CALLBACK_REGISTRATION CallbackRegistration,
     PVOID *RegistrationHandle
    );

__declspec(dllimport)
void
ObUnRegisterCallbacks (
      PVOID RegistrationHandle
    );

__declspec(dllimport)
USHORT
ObGetFilterVersion (
    void
    );
#line 35807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




























typedef struct _PCI_SLOT_NUMBER {
    union {
        struct {
            ULONG   DeviceNumber:5;
            ULONG   FunctionNumber:3;
            ULONG   Reserved:24;
        } bits;
        ULONG   AsULONG;
    } u;
} PCI_SLOT_NUMBER, *PPCI_SLOT_NUMBER;





typedef struct _PCI_COMMON_HEADER {
    USHORT  VendorID;                   
    USHORT  DeviceID;                   
    USHORT  Command;                    
    USHORT  Status;
    UCHAR   RevisionID;                 
    UCHAR   ProgIf;                     
    UCHAR   SubClass;                   
    UCHAR   BaseClass;                  
    UCHAR   CacheLineSize;              
    UCHAR   LatencyTimer;               
    UCHAR   HeaderType;                 
    UCHAR   BIST;                       

    union {
        struct _PCI_HEADER_TYPE_0 {
            ULONG   BaseAddresses[6];
            ULONG   CIS;
            USHORT  SubVendorID;
            USHORT  SubSystemID;
            ULONG   ROMBaseAddress;
            UCHAR   CapabilitiesPtr;
            UCHAR   Reserved1[3];
            ULONG   Reserved2;
            UCHAR   InterruptLine;      
            UCHAR   InterruptPin;       
            UCHAR   MinimumGrant;       
            UCHAR   MaximumLatency;     
        } type0;



        
        
        

        struct _PCI_HEADER_TYPE_1 {
            ULONG   BaseAddresses[2];
            UCHAR   PrimaryBus;
            UCHAR   SecondaryBus;
            UCHAR   SubordinateBus;
            UCHAR   SecondaryLatency;
            UCHAR   IOBase;
            UCHAR   IOLimit;
            USHORT  SecondaryStatus;
            USHORT  MemoryBase;
            USHORT  MemoryLimit;
            USHORT  PrefetchBase;
            USHORT  PrefetchLimit;
            ULONG   PrefetchBaseUpper32;
            ULONG   PrefetchLimitUpper32;
            USHORT  IOBaseUpper16;
            USHORT  IOLimitUpper16;
            UCHAR   CapabilitiesPtr;
            UCHAR   Reserved1[3];
            ULONG   ROMBaseAddress;
            UCHAR   InterruptLine;
            UCHAR   InterruptPin;
            USHORT  BridgeControl;
        } type1;

        
        
        

        struct _PCI_HEADER_TYPE_2 {
            ULONG   SocketRegistersBaseAddress;
            UCHAR   CapabilitiesPtr;
            UCHAR   Reserved;
            USHORT  SecondaryStatus;
            UCHAR   PrimaryBus;
            UCHAR   SecondaryBus;
            UCHAR   SubordinateBus;
            UCHAR   SecondaryLatency;
            struct  {
                ULONG   Base;
                ULONG   Limit;
            }       Range[5-1];
            UCHAR   InterruptLine;
            UCHAR   InterruptPin;
            USHORT  BridgeControl;
        } type2;



    } u;

} PCI_COMMON_HEADER, *PPCI_COMMON_HEADER;











typedef struct _PCI_COMMON_CONFIG {
    PCI_COMMON_HEADER ;
    UCHAR   DeviceSpecific[192];
} PCI_COMMON_CONFIG, *PPCI_COMMON_CONFIG;

#line 35955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














































































































typedef struct _PCI_CAPABILITIES_HEADER {
    UCHAR   CapabilityID;
    UCHAR   Next;
} PCI_CAPABILITIES_HEADER, *PPCI_CAPABILITIES_HEADER;







typedef struct _PCI_PMC {
    UCHAR       Version:3;
    UCHAR       PMEClock:1;
    UCHAR       Rsvd1:1;
    UCHAR       DeviceSpecificInitialization:1;
    UCHAR       Rsvd2:2;
    struct _PM_SUPPORT {
        UCHAR   Rsvd2:1;
        UCHAR   D1:1;
        UCHAR   D2:1;
        UCHAR   PMED0:1;
        UCHAR   PMED1:1;
        UCHAR   PMED2:1;
        UCHAR   PMED3Hot:1;
        UCHAR   PMED3Cold:1;
    } Support;
} PCI_PMC, *PPCI_PMC;

typedef struct _PCI_PMCSR {
    USHORT      PowerState:2;
    USHORT      Rsvd1:1;
    USHORT      NoSoftReset:1;
    USHORT      Rsvd2:4;
    USHORT      PMEEnable:1;
    USHORT      DataSelect:4;
    USHORT      DataScale:2;
    USHORT      PMEStatus:1;
} PCI_PMCSR, *PPCI_PMCSR;


typedef struct _PCI_PMCSR_BSE {
    UCHAR       Rsvd1:6;
    UCHAR       D3HotSupportsStopClock:1;       
    UCHAR       BusPowerClockControlEnabled:1;  
} PCI_PMCSR_BSE, *PPCI_PMCSR_BSE;


typedef struct _PCI_PM_CAPABILITY {

    PCI_CAPABILITIES_HEADER Header;

    
    
    

    union {
        PCI_PMC         Capabilities;
        USHORT          AsUSHORT;
    } PMC;

    
    
    

    union {
        PCI_PMCSR       ControlStatus;
        USHORT          AsUSHORT;
    } PMCSR;

    
    
    

    union {
        PCI_PMCSR_BSE   BridgeSupport;
        UCHAR           AsUCHAR;
    } PMCSR_BSE;

    
    
    
    

    UCHAR   Data;

} PCI_PM_CAPABILITY, *PPCI_PM_CAPABILITY;








typedef struct {

    PCI_CAPABILITIES_HEADER Header;

    union {
        struct {
            USHORT  DataParityErrorRecoveryEnable:1;
            USHORT  EnableRelaxedOrdering:1;
            USHORT  MaxMemoryReadByteCount:2;
            USHORT  MaxOutstandingSplitTransactions:3;
            USHORT  Reserved:9;
        } bits;
        USHORT  AsUSHORT;
    } Command;

    union {
        struct {
            ULONG   FunctionNumber:3;
            ULONG   DeviceNumber:5;
            ULONG   BusNumber:8;
            ULONG   Device64Bit:1;
            ULONG   Capable133MHz:1;
            ULONG   SplitCompletionDiscarded:1;
            ULONG   UnexpectedSplitCompletion:1;
            ULONG   DeviceComplexity:1;
            ULONG   DesignedMaxMemoryReadByteCount:2;
            ULONG   DesignedMaxOutstandingSplitTransactions:3;
            ULONG   DesignedMaxCumulativeReadSize:3;
            ULONG   ReceivedSplitCompletionErrorMessage:1;
            ULONG   CapablePCIX266:1;
            ULONG   CapablePCIX533:1;
        } bits;
        ULONG   AsULONG;
    } Status;
} PCI_X_CAPABILITY, *PPCI_X_CAPABILITY;














































typedef struct _PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER {

    USHORT CapabilityID;
    USHORT Version:4;
    USHORT Next:12;

} PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER, *PPCI_EXPRESS_ENHANCED_CAPABILITY_HEADER;





typedef struct _PCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    USHORT VsecId;
    USHORT VsecRev:4;
    USHORT VsecLength:12;

} PCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY, *PPCI_EXPRESS_VENDOR_SPECIFIC_CAPABILITY;





typedef struct _PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    ULONG LowSerialNumber;
    ULONG HighSerialNumber;

} PCI_EXPRESS_SERIAL_NUMBER_CAPABILITY, *PPCI_EXPRESS_SERIAL_NUMBER_CAPABILITY;





typedef struct _PCI_EXPRESS_ARI_CAPABILITY_REGISTER {

    USHORT MfvcFunctionGroupsCapability:1;
    USHORT AcsFunctionGroupsCapability:1;
    USHORT Reserved:6;
    USHORT NextFunctionNumber:8;

} PCI_EXPRESS_ARI_CAPABILITY_REGISTER, *PPCI_EXPRESS_ARI_CAPABILITY_REGISTER;

typedef struct _PCI_EXPRESS_ARI_CONTROL_REGISTER {

    USHORT MfvcFunctionGroupsEnable:1;
    USHORT AcsFunctionGroupsEnable:1;
    USHORT Reserved1:2;
    USHORT FunctionGroup:3;
    USHORT Reserved2:9;

} PCI_EXPRESS_ARI_CONTROL_REGISTER, *PPCI_EXPRESS_ARI_CONTROL_REGISTER;

typedef struct _PCI_EXPRESS_ARI_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_ARI_CAPABILITY_REGISTER Capability;
    PCI_EXPRESS_ARI_CONTROL_REGISTER Control;

} PCI_EXPRESS_ARI_CAPABILITY, *PPCI_EXPRESS_ARI_CAPABILITY;





typedef union _VIRTUAL_CHANNEL_CAPABILITIES1 {
    struct {
        ULONG ExtendedVCCount:3;
        ULONG RsvdP1:1;
        ULONG LowPriorityExtendedVCCount:3;
        ULONG RsvdP2:1;
        ULONG ReferenceClock:2;
        ULONG PortArbitrationTableEntrySize:2;
        ULONG RsvdP3:20;
    };
    ULONG AsULONG;
} VIRTUAL_CHANNEL_CAPABILITIES1, *PVIRTUAL_CHANNEL_CAPABILITIES1;

typedef union _VIRTUAL_CHANNEL_CAPABILITIES2 {
    struct {
        ULONG VCArbitrationCapability:8;
        ULONG RsvdP:16;
        ULONG VCArbitrationTableOffset:8;
    };
    ULONG AsULONG;
} VIRTUAL_CHANNEL_CAPABILITIES2, *PVIRTUAL_CHANNEL_CAPABILITIES2;

typedef union _VIRTUAL_CHANNEL_CONTROL {
    struct {
        USHORT  LoadVCArbitrationTable:1;
        USHORT  VCArbitrationSelect:3;
        USHORT  RsvdP:12;
    };
    USHORT AsUSHORT;
} VIRTUAL_CHANNEL_CONTROL, *PVIRTUAL_CHANNEL_CONTROL;

typedef union _VIRTUAL_CHANNEL_STATUS {
    struct {
        USHORT  VCArbitrationTableStatus:1;
        USHORT  RsvdZ:15;
    };
    USHORT AsUSHORT;
} VIRTUAL_CHANNEL_STATUS, *PVIRTUAL_CHANNEL_STATUS;

typedef union _VIRTUAL_RESOURCE_CAPABILITY {
    struct {
        ULONG   PortArbitrationCapability:8;
        ULONG   RsvdP1:6;
        ULONG   Undefined:1;
        ULONG   RejectSnoopTransactions:1;
        ULONG   MaximumTimeSlots:7;
        ULONG   RsvdP2:1;
        ULONG   PortArbitrationTableOffset:8;
    };
    ULONG AsULONG;
} VIRTUAL_RESOURCE_CAPABILITY, *PVIRTUAL_RESOURCE_CAPABILITY;

typedef union _VIRTUAL_RESOURCE_CONTROL {
    struct {
        ULONG   TcVcMap:8;
        ULONG   RsvdP1:8;
        ULONG   LoadPortArbitrationTable:1;
        ULONG   PortArbitrationSelect:3;
        ULONG   RsvdP2:4;
        ULONG   VcID:3;
        ULONG   RsvdP3:4;
        ULONG   VcEnable:1;
    };
    ULONG AsULONG;
} VIRTUAL_RESOURCE_CONTROL, *PVIRTUAL_RESOURCE_CONTROL;

typedef union _VIRTUAL_RESOURCE_STATUS {
    struct {
        USHORT  PortArbitrationTableStatus:1;
        USHORT  VcNegotiationPending:1;
        USHORT  RsvdZ:14;
    };
    USHORT AsUSHORT;
} VIRTUAL_RESOURCE_STATUS, *PVIRTUAL_RESOURCE_STATUS;

typedef struct _VIRTUAL_RESOURCE {
    VIRTUAL_RESOURCE_CAPABILITY     Capability;
    VIRTUAL_RESOURCE_CONTROL        Control;
    USHORT                          RsvdP;
    VIRTUAL_RESOURCE_STATUS         Status;
} VIRTUAL_RESOURCE, *PVIRTUAL_RESOURCE;

typedef struct _PCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    VIRTUAL_CHANNEL_CAPABILITIES1   Capabilities1;
    VIRTUAL_CHANNEL_CAPABILITIES2   Capabilities2;
    VIRTUAL_CHANNEL_CONTROL         Control;
    VIRTUAL_CHANNEL_STATUS          Status;
    VIRTUAL_RESOURCE                Resource[8];

} PCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY, *PPCI_EXPRESS_VIRTUAL_CHANNEL_CAPABILITY;





typedef struct _PCI_EXPRESS_ATS_CAPABILITY_REGISTER {

    USHORT InvalidateQueueDepth:5;
    USHORT PageAlignedRequest:1;
    USHORT GlobalInvalidateSupported:1;
    USHORT Reserved:9;

} PCI_EXPRESS_ATS_CAPABILITY_REGISTER, *PPCI_EXPRESS_ATS_CAPABILITY_REGISTER;

typedef struct _PCI_EXPRESS_ATS_CONTROL_REGISTER {

    USHORT SmallestTransactionUnit:5;
    USHORT Reserved:10;
    USHORT Enable:1;

} PCI_EXPRESS_ATS_CONTROL_REGISTER, *PPCI_EXPRESS_ATS_CONTROL_REGISTER;

typedef struct _PCI_EXPRESS_ATS_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_ATS_CAPABILITY_REGISTER Capability;
    PCI_EXPRESS_ATS_CONTROL_REGISTER Control;

} PCI_EXPRESS_ATS_CAPABILITY, *PPCI_EXPRESS_ATS_CAPABILITY;





typedef union _PCI_EXPRESS_PASID_CAPABILITY_REGISTER {
    struct {
        USHORT Rsvd:1;
        USHORT ExecutePermissionSupported:1;
        USHORT PrivilegedModeSupported:1;
        USHORT Rsvd2:5;
        USHORT MaxPASIDWidth:5;
        USHORT Rsvd3:3;
    } ;

    USHORT AsUSHORT;
} PCI_EXPRESS_PASID_CAPABILITY_REGISTER, *PPCI_EXPRESS_PASID_CAPABILITY_REGISTER;

typedef union _PCI_EXPRESS_PASID_CONTROL_REGISTER {
    struct {
        USHORT PASIDEnable:1;
        USHORT ExecutePermissionEnable:1;
        USHORT PrivilegedModeEnable:1;
        USHORT Rsvd:13;
    } ;

    USHORT AsUSHORT;
} PCI_EXPRESS_PASID_CONTROL_REGISTER, *PPCI_EXPRESS_PASID_CONTROL_REGISTER;

typedef struct _PCI_EXPRESS_PASID_CAPABILITY {
    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    PCI_EXPRESS_PASID_CAPABILITY_REGISTER Capability;
    PCI_EXPRESS_PASID_CONTROL_REGISTER Control;
} PCI_EXPRESS_PASID_CAPABILITY, *PPCI_EXPRESS_PASID_CAPABILITY;





typedef union _PCI_EXPRESS_PRI_STATUS_REGISTER {
    struct {
        USHORT ResponseFailure:1;
        USHORT UnexpectedPageRequestGroupIndex:1;
        USHORT Rsvd:6;
        USHORT Stopped:1;
        USHORT Rsvd2:6;
        USHORT PrgResponsePasidRequired:1;
    } ;

    USHORT AsUSHORT;
} PCI_EXPRESS_PRI_STATUS_REGISTER, *PPCI_EXPRESS_PRI_STATUS_REGISTER;

typedef union _PCI_EXPRESS_PRI_CONTROL_REGISTER {
    struct {
        USHORT Enable:1;
        USHORT Reset:1;
        USHORT Rsvd:14;
    } ;

    USHORT AsUSHORT;
} PCI_EXPRESS_PRI_CONTROL_REGISTER, *PPCI_EXPRESS_PRI_CONTROL_REGISTER;

typedef struct _PCI_EXPRESS_PRI_CAPABILITY {
    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;
    PCI_EXPRESS_PRI_CONTROL_REGISTER Control;
    PCI_EXPRESS_PRI_STATUS_REGISTER Status;
    ULONG PRCapacity;
    ULONG PRAllocation;
} PCI_EXPRESS_PRI_CAPABILITY, *PPCI_EXPRESS_PRI_CAPABILITY;





typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS {

    struct {
        ULONG Undefined:1;
        ULONG Reserved1:3;
        ULONG DataLinkProtocolError:1;
        ULONG SurpriseDownError:1;
        ULONG Reserved2:6;
        ULONG PoisonedTLP:1;
        ULONG FlowControlProtocolError:1;
        ULONG CompletionTimeout:1;
        ULONG CompleterAbort:1;
        ULONG UnexpectedCompletion:1;
        ULONG ReceiverOverflow:1;
        ULONG MalformedTLP:1;
        ULONG ECRCError:1;
        ULONG UnsupportedRequestError:1;
        ULONG AcsViolation:1;
        ULONG UncorrectableInternalError:1;
        ULONG MCBlockedTlp:1;
        ULONG AtomicOpEgressBlocked:1;
        ULONG TlpPrefixBlocked:1;
        ULONG Reserved3:6;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS, *PPCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS;

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK {

    struct {
        ULONG Undefined:1;
        ULONG Reserved1:3;
        ULONG DataLinkProtocolError:1;
        ULONG SurpriseDownError:1;
        ULONG Reserved2:6;
        ULONG PoisonedTLP:1;
        ULONG FlowControlProtocolError:1;
        ULONG CompletionTimeout:1;
        ULONG CompleterAbort:1;
        ULONG UnexpectedCompletion:1;
        ULONG ReceiverOverflow:1;
        ULONG MalformedTLP:1;
        ULONG ECRCError:1;
        ULONG UnsupportedRequestError:1;
        ULONG AcsViolation:1;
        ULONG UncorrectableInternalError:1;
        ULONG MCBlockedTlp:1;
        ULONG AtomicOpEgressBlocked:1;
        ULONG TlpPrefixBlocked:1;
        ULONG Reserved3:6;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK, *PPCI_EXPRESS_UNCORRECTABLE_ERROR_MASK;

typedef union _PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY {

    struct {
        ULONG Undefined:1;
        ULONG Reserved1:3;
        ULONG DataLinkProtocolError:1;
        ULONG SurpriseDownError:1;
        ULONG Reserved2:6;
        ULONG PoisonedTLP:1;
        ULONG FlowControlProtocolError:1;
        ULONG CompletionTimeout:1;
        ULONG CompleterAbort:1;
        ULONG UnexpectedCompletion:1;
        ULONG ReceiverOverflow:1;
        ULONG MalformedTLP:1;
        ULONG ECRCError:1;
        ULONG UnsupportedRequestError:1;
        ULONG AcsViolation:1;
        ULONG UncorrectableInternalError:1;
        ULONG MCBlockedTlp:1;
        ULONG AtomicOpEgressBlocked:1;
        ULONG TlpPrefixBlocked:1;
        ULONG Reserved3:6;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY, *PPCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY;

typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_STATUS {

    struct {
        ULONG ReceiverError:1;
        ULONG Reserved1:5;
        ULONG BadTLP:1;
        ULONG BadDLLP:1;
        ULONG ReplayNumRollover:1;
        ULONG Reserved2:3;
        ULONG ReplayTimerTimeout:1;
        ULONG AdvisoryNonFatalError:1;
        ULONG CorrectedInternalError:1;
        ULONG HeaderLogOverflow:1;
        ULONG Reserved3:16;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_CORRECTABLE_ERROR_STATUS, *PPCI_CORRECTABLE_ERROR_STATUS;

typedef union _PCI_EXPRESS_CORRECTABLE_ERROR_MASK {

    struct {
        ULONG ReceiverError:1;
        ULONG Reserved1:5;
        ULONG BadTLP:1;
        ULONG BadDLLP:1;
        ULONG ReplayNumRollover:1;
        ULONG Reserved2:3;
        ULONG ReplayTimerTimeout:1;
        ULONG AdvisoryNonFatalError:1;
        ULONG CorrectedInternalError:1;
        ULONG HeaderLogOverflow:1;
        ULONG Reserved3:16;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_CORRECTABLE_ERROR_MASK, *PPCI_CORRECTABLE_ERROR_MASK;

typedef union _PCI_EXPRESS_AER_CAPABILITIES {

    struct {
        ULONG FirstErrorPointer:5;
        ULONG ECRCGenerationCapable:1;
        ULONG ECRCGenerationEnable:1;
        ULONG ECRCCheckCapable:1;
        ULONG ECRCCheckEnable:1;
        ULONG MultipleHeaderRecordingCapable:1;
        ULONG MultipleHeaderRecordingEnable:1;
        ULONG TlpPrefixLogPresent:1;
        ULONG Reserved:20;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_AER_CAPABILITIES, *PPCI_EXPRESS_AER_CAPABILITIES;

typedef union _PCI_EXPRESS_ROOT_ERROR_COMMAND {

    struct {
        ULONG CorrectableErrorReportingEnable:1;
        ULONG NonFatalErrorReportingEnable:1;
        ULONG FatalErrorReportingEnable:1;
        ULONG Reserved:29;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_ROOT_ERROR_COMMAND, *PPCI_EXPRESS_ROOT_ERROR_COMMAND;

typedef union _PCI_EXPRESS_ROOT_ERROR_STATUS {

    struct {
        ULONG CorrectableErrorReceived:1;
        ULONG MultipleCorrectableErrorsReceived:1;
        ULONG UncorrectableErrorReceived:1;
        ULONG MultipleUncorrectableErrorsReceived:1;
        ULONG FirstUncorrectableFatal:1;
        ULONG NonFatalErrorMessagesReceived:1;
        ULONG FatalErrorMessagesReceived:1;
        ULONG Reserved:20;
        ULONG AdvancedErrorInterruptMessageNumber:5;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_ROOT_ERROR_STATUS, *PPCI_EXPRESS_ROOT_ERROR_STATUS;

typedef union _PCI_EXPRESS_ERROR_SOURCE_ID {

    struct {
        USHORT CorrectableSourceIdFun:3;
        USHORT CorrectableSourceIdDev:5;
        USHORT CorrectableSourceIdBus:8;
        USHORT UncorrectableSourceIdFun:3;
        USHORT UncorrectableSourceIdDev:5;
        USHORT UncorrectableSourceIdBus:8;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_ERROR_SOURCE_ID, *PPCI_EXPRESS_ERROR_SOURCE_ID;

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS {

    struct {
        ULONG TargetAbortOnSplitCompletion:1;
        ULONG MasterAbortOnSplitCompletion:1;
        ULONG ReceivedTargetAbort:1;
        ULONG ReceivedMasterAbort:1;
        ULONG RsvdZ:1;
        ULONG UnexpectedSplitCompletionError:1;
        ULONG UncorrectableSplitCompletion:1;
        ULONG UncorrectableDataError:1;
        ULONG UncorrectableAttributeError:1;
        ULONG UncorrectableAddressError:1;
        ULONG DelayedTransactionDiscardTimerExpired:1;
        ULONG PERRAsserted:1;
        ULONG SERRAsserted:1;
        ULONG InternalBridgeError:1;
        ULONG Reserved:18;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS,
  *PPCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS;

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK {

    struct {
        ULONG TargetAbortOnSplitCompletion:1;
        ULONG MasterAbortOnSplitCompletion:1;
        ULONG ReceivedTargetAbort:1;
        ULONG ReceivedMasterAbort:1;
        ULONG RsvdZ:1;
        ULONG UnexpectedSplitCompletionError:1;
        ULONG UncorrectableSplitCompletion:1;
        ULONG UncorrectableDataError:1;
        ULONG UncorrectableAttributeError:1;
        ULONG UncorrectableAddressError:1;
        ULONG DelayedTransactionDiscardTimerExpired:1;
        ULONG PERRAsserted:1;
        ULONG SERRAsserted:1;
        ULONG InternalBridgeError:1;
        ULONG Reserved:18;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK,
  *PPCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK;

typedef union _PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY {

    struct {
        ULONG TargetAbortOnSplitCompletion:1;
        ULONG MasterAbortOnSplitCompletion:1;
        ULONG ReceivedTargetAbort:1;
        ULONG ReceivedMasterAbort:1;
        ULONG RsvdZ:1;
        ULONG UnexpectedSplitCompletionError:1;
        ULONG UncorrectableSplitCompletion:1;
        ULONG UncorrectableDataError:1;
        ULONG UncorrectableAttributeError:1;
        ULONG UncorrectableAddressError:1;
        ULONG DelayedTransactionDiscardTimerExpired:1;
        ULONG PERRAsserted:1;
        ULONG SERRAsserted:1;
        ULONG InternalBridgeError:1;
        ULONG Reserved:18;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY,
  *PPCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY;

typedef union _PCI_EXPRESS_SEC_AER_CAPABILITIES {

    struct {
        ULONG SecondaryUncorrectableFirstErrorPtr:5;
        ULONG Reserved:27;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SEC_AER_CAPABILITIES, *PPCI_EXPRESS_SEC_AER_CAPABILITIES;














typedef struct _PCI_EXPRESS_AER_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
    PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
    PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
    PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
    ULONG SecHeaderLog[4];

} PCI_EXPRESS_AER_CAPABILITY, *PPCI_EXPRESS_AER_CAPABILITY;





typedef struct _PCI_EXPRESS_ROOTPORT_AER_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    PCI_EXPRESS_ROOT_ERROR_COMMAND RootErrorCommand;
    PCI_EXPRESS_ROOT_ERROR_STATUS RootErrorStatus;
    PCI_EXPRESS_ERROR_SOURCE_ID ErrorSourceId;

} PCI_EXPRESS_ROOTPORT_AER_CAPABILITY, *PPCI_EXPRESS_ROOTPORT_AER_CAPABILITY;





typedef struct _PCI_EXPRESS_BRIDGE_AER_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_UNCORRECTABLE_ERROR_STATUS UncorrectableErrorStatus;
    PCI_EXPRESS_UNCORRECTABLE_ERROR_MASK UncorrectableErrorMask;
    PCI_EXPRESS_UNCORRECTABLE_ERROR_SEVERITY UncorrectableErrorSeverity;
    PCI_EXPRESS_CORRECTABLE_ERROR_STATUS CorrectableErrorStatus;
    PCI_EXPRESS_CORRECTABLE_ERROR_MASK CorrectableErrorMask;
    PCI_EXPRESS_AER_CAPABILITIES CapabilitiesAndControl;
    ULONG HeaderLog[4];
    PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_STATUS SecUncorrectableErrorStatus;
    PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_MASK SecUncorrectableErrorMask;
    PCI_EXPRESS_SEC_UNCORRECTABLE_ERROR_SEVERITY SecUncorrectableErrorSeverity;
    PCI_EXPRESS_SEC_AER_CAPABILITIES SecCapabilitiesAndControl;
    ULONG SecHeaderLog[4];

} PCI_EXPRESS_BRIDGE_AER_CAPABILITY, *PPCI_EXPRESS_BRIDGE_AER_CAPABILITY;




typedef union _PCI_EXPRESS_ACS_CAPABILITY_REGISTER {

    struct {
        USHORT SourceValidation:1;
        USHORT TranslationBlocking:1;
        USHORT RequestRedirect:1;
        USHORT CompletionRedirect:1;
        USHORT UpstreamForwarding:1;
        USHORT EgressControl:1;
        USHORT DirectTranslation:1;
        USHORT Reserved:1;
        USHORT EgressControlVectorSize:8;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_ACS_CAPABILITY_REGISTER, *PPCI_EXPRESS_ACS_CAPABILITY_REGISTER;

typedef union _PCI_EXPRESS_ACS_CONTROL {

    struct {
        USHORT SourceValidation:1;
        USHORT TranslationBlocking:1;
        USHORT RequestRedirect:1;
        USHORT CompletionRedirect:1;
        USHORT UpstreamForwarding:1;
        USHORT EgressControl:1;
        USHORT DirectTranslation:1;
        USHORT Reserved:9;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_ACS_CONTROL, *PPCI_EXPRESS_ACS_CONTROL;

typedef struct _PCI_EXPRESS_ACS_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER  Header;

    PCI_EXPRESS_ACS_CAPABILITY_REGISTER      Capability;
    PCI_EXPRESS_ACS_CONTROL                 Control;

    ULONG                                   EgressControl[1];
} PCI_EXPRESS_ACS_CAPABILITY, *PPCI_EXPRESS_ACS_CAPABILITY ;





typedef union _PCI_EXPRESS_SRIOV_CAPS {

    struct {
        ULONG VFMigrationCapable:1;
        ULONG Reserved1:20;
        ULONG VFMigrationInterruptNumber:11;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SRIOV_CAPS, *PPCI_EXPRESS_SRIOV_CAPS;

typedef union _PCI_EXPRESS_SRIOV_CONTROL {

    struct {
        USHORT VFEnable:1;
        USHORT VFMigrationEnable:1;
        USHORT VFMigrationInterruptEnable:1;
        USHORT VFMemorySpaceEnable:1;
        USHORT ARICapableHierarchy:1;
        USHORT Reserved1:11;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_SRIOV_CONTROL, *PPCI_EXPRESS_SRIOV_CONTROL;

typedef union _PCI_EXPRESS_SRIOV_STATUS {

    struct {
        USHORT VFMigrationStatus:1;
        USHORT Reserved1:15;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_SRIOV_STATUS, *PPCI_EXPRESS_SRIOV_STATUS;

typedef union _PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY {

    struct {
        ULONG VFMigrationStateBIR:3;
        ULONG VFMigrationStateOffset:29;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY, *PPCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY;

typedef struct _PCI_EXPRESS_SRIOV_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER  Header;

    PCI_EXPRESS_SRIOV_CAPS                  SRIOVCapabilities;
    PCI_EXPRESS_SRIOV_CONTROL               SRIOVControl;
    PCI_EXPRESS_SRIOV_STATUS                SRIOVStatus;
    USHORT                                  InitialVFs;
    USHORT                                  TotalVFs;
    USHORT                                  NumVFs;
    UCHAR                                   FunctionDependencyLink;
    UCHAR                                   RsvdP1;
    USHORT                                  FirstVFOffset;
    USHORT                                  VFStride;
    USHORT                                  RsvdP2;
    USHORT                                  VFDeviceId;
    ULONG                                   SupportedPageSizes;
    ULONG                                   SystemPageSize;
    ULONG                                   BaseAddresses[6];
    PCI_EXPRESS_SRIOV_MIGRATION_STATE_ARRAY VFMigrationStateArrayOffset;

} PCI_EXPRESS_SRIOV_CAPABILITY, *PPCI_EXPRESS_SRIOV_CAPABILITY;

































































































































































































































#line 37211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















typedef struct _PCI_DEVICE_PRESENCE_PARAMETERS {

    ULONG Size;
    ULONG Flags;

    USHORT VendorID;
    USHORT DeviceID;
    UCHAR RevisionID;
    USHORT SubVendorID;
    USHORT SubSystemID;
    UCHAR BaseClass;
    UCHAR SubClass;
    UCHAR ProgIf;

} PCI_DEVICE_PRESENCE_PARAMETERS, *PPCI_DEVICE_PRESENCE_PARAMETERS;

 
 
typedef
BOOLEAN
PCI_IS_DEVICE_PRESENT (
      USHORT VendorID,
      USHORT DeviceID,
      UCHAR RevisionID,
      USHORT SubVendorID,
      USHORT SubSystemID,
      ULONG Flags
);

typedef PCI_IS_DEVICE_PRESENT *PPCI_IS_DEVICE_PRESENT;

 
 
typedef
BOOLEAN
PCI_IS_DEVICE_PRESENT_EX (
      PVOID Context,
      PPCI_DEVICE_PRESENCE_PARAMETERS Parameters
    );

typedef PCI_IS_DEVICE_PRESENT_EX *PPCI_IS_DEVICE_PRESENT_EX;

typedef struct _PCI_DEVICE_PRESENT_INTERFACE {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;
    
    
    
    PPCI_IS_DEVICE_PRESENT IsDevicePresent;

    PPCI_IS_DEVICE_PRESENT_EX IsDevicePresentEx;

} PCI_DEVICE_PRESENT_INTERFACE, *PPCI_DEVICE_PRESENT_INTERFACE;







 
 
typedef
NTSTATUS
PCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE (
      PVOID Context
    );

typedef PCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE *PPCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE;

 
 
typedef
NTSTATUS
PCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE (
      PVOID Context
    );

typedef PCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE *PPCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE;

typedef struct _PCI_EXPRESS_LINK_QUIESCENT_INTERFACE {

    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    PPCI_EXPRESS_ENTER_LINK_QUIESCENT_MODE PciExpressEnterLinkQuiescentMode;
    PPCI_EXPRESS_EXIT_LINK_QUIESCENT_MODE PciExpressExitLinkQuiescentMode;

} PCI_EXPRESS_LINK_QUIESCENT_INTERFACE, *PPCI_EXPRESS_LINK_QUIESCENT_INTERFACE;







typedef
ULONG
(*PPCI_EXPRESS_ROOT_PORT_READ_CONFIG_SPACE) (
      PVOID Context,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );

typedef
ULONG
(*PPCI_EXPRESS_ROOT_PORT_WRITE_CONFIG_SPACE) (
      PVOID Context,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );

typedef struct _PCI_EXPRESS_ROOT_PORT_INTERFACE {

    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    PPCI_EXPRESS_ROOT_PORT_READ_CONFIG_SPACE ReadConfigSpace;
    PPCI_EXPRESS_ROOT_PORT_WRITE_CONFIG_SPACE WriteConfigSpace;

} PCI_EXPRESS_ROOT_PORT_INTERFACE, *PPCI_EXPRESS_ROOT_PORT_INTERFACE;







 
typedef
NTSTATUS
PCI_MSIX_SET_ENTRY (
      PVOID Context,
      ULONG TableEntry,
      ULONG MessageNumber
    );

typedef PCI_MSIX_SET_ENTRY *PPCI_MSIX_SET_ENTRY;

 
typedef
NTSTATUS
PCI_MSIX_MASKUNMASK_ENTRY (
      PVOID Context,
      ULONG TableEntry
    );

typedef PCI_MSIX_MASKUNMASK_ENTRY *PPCI_MSIX_MASKUNMASK_ENTRY;

 
typedef
NTSTATUS
PCI_MSIX_GET_ENTRY (
      PVOID Context,
      ULONG TableEntry,
      PULONG MessageNumber,
      PBOOLEAN Masked
    );

typedef PCI_MSIX_GET_ENTRY *PPCI_MSIX_GET_ENTRY;

 
typedef
NTSTATUS
PCI_MSIX_GET_TABLE_SIZE (
      PVOID Context,
      PULONG TableSize
    );

typedef PCI_MSIX_GET_TABLE_SIZE *PPCI_MSIX_GET_TABLE_SIZE;

typedef struct _PCI_MSIX_TABLE_CONFIG_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    PPCI_MSIX_SET_ENTRY SetTableEntry;
    PPCI_MSIX_MASKUNMASK_ENTRY MaskTableEntry;
    PPCI_MSIX_MASKUNMASK_ENTRY UnmaskTableEntry;
    PPCI_MSIX_GET_ENTRY GetTableEntry;
    PPCI_MSIX_GET_TABLE_SIZE GetTableSize;
} PCI_MSIX_TABLE_CONFIG_INTERFACE, *PPCI_MSIX_TABLE_CONFIG_INTERFACE;





 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateFile(
      PHANDLE FileHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER AllocationSize,
      ULONG FileAttributes,
      ULONG ShareAccess,
      ULONG CreateDisposition,
      ULONG CreateOptions,
      PVOID EaBuffer,
      ULONG EaLength
    );
#line 37454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenFile(
      PHANDLE FileHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG ShareAccess,
      ULONG OpenOptions
    );
#line 37469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwLoadDriver(
      PUNICODE_STRING DriverServiceName
    );
#line 37479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwUnloadDriver(
      PUNICODE_STRING DriverServiceName
    );
#line 37489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass
    );
#line 37503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass
    );
#line 37517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwReadFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      PLARGE_INTEGER ByteOffset,
      PULONG Key
    );
#line 37535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwWriteFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      PLARGE_INTEGER ByteOffset,
      PULONG Key
    );
#line 37553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwClose(
      HANDLE Handle
    );
#line 37563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateDirectoryObject(
      PHANDLE DirectoryHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 37575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwMakeTemporaryObject(
      HANDLE Handle
    );
#line 37585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateSection (
      PHANDLE SectionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PLARGE_INTEGER MaximumSize,
      ULONG SectionPageProtection,
      ULONG AllocationAttributes,
      HANDLE FileHandle
    );
#line 37601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenSection(
      PHANDLE SectionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 37613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
 
 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwMapViewOfSection(
      HANDLE SectionHandle,
      HANDLE ProcessHandle,
     PVOID *BaseAddress,
      ULONG_PTR ZeroBits,
      SIZE_T CommitSize,
      PLARGE_INTEGER SectionOffset,
      PSIZE_T ViewSize,
      SECTION_INHERIT InheritDisposition,
      ULONG AllocationType,
      ULONG Win32Protect
    );
#line 37634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwUnmapViewOfSection(
      HANDLE ProcessHandle,
      PVOID BaseAddress
    );
#line 37645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateKey(
      PHANDLE KeyHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG TitleIndex,
      PUNICODE_STRING Class,
      ULONG CreateOptions,
      PULONG Disposition
    );
#line 37661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
ZwCreateKeyTransacted(
      PHANDLE KeyHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG TitleIndex,
      PUNICODE_STRING Class,
      ULONG CreateOptions,
      HANDLE TransactionHandle,
      PULONG Disposition
    );
#line 37677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













#line 37691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












#line 37704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 37715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










#line 37726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenKey(
      PHANDLE KeyHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 37738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenKeyEx(
      PHANDLE KeyHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG OpenOptions
    );
#line 37751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenKeyTransacted(
      PHANDLE KeyHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      HANDLE TransactionHandle
    );
#line 37766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenKeyTransactedEx(
      PHANDLE KeyHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG OpenOptions,
      HANDLE TransactionHandle
    );
#line 37781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDeleteKey(
      HANDLE KeyHandle
    );
#line 37793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDeleteValueKey(
      HANDLE KeyHandle,
      PUNICODE_STRING ValueName
    );
#line 37804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 


__declspec(dllimport)
NTSTATUS
__stdcall
ZwEnumerateKey(
      HANDLE KeyHandle,
      ULONG Index,
      KEY_INFORMATION_CLASS KeyInformationClass,
      PVOID KeyInformation,
      ULONG Length,
      PULONG ResultLength
    );
#line 37821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 


__declspec(dllimport)
NTSTATUS
__stdcall
ZwEnumerateValueKey(
      HANDLE KeyHandle,
      ULONG Index,
      KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
      PVOID KeyValueInformation,
      ULONG Length,
      PULONG ResultLength
    );
#line 37838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwFlushKey(
      HANDLE KeyHandle
    );
#line 37848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 


__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryKey(
      HANDLE KeyHandle,
      KEY_INFORMATION_CLASS KeyInformationClass,
      PVOID KeyInformation,
      ULONG Length,
      PULONG ResultLength
    );
#line 37864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 




__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryValueKey(
      HANDLE KeyHandle,
      PUNICODE_STRING ValueName,
      KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
      PVOID KeyValueInformation,
      ULONG Length,
      PULONG ResultLength
    );
#line 37883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRenameKey(
      HANDLE           KeyHandle,
      PUNICODE_STRING  NewName
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSaveKey (
      HANDLE KeyHandle,
      HANDLE FileHandle
    );


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSaveKeyEx (
      HANDLE KeyHandle,
      HANDLE FileHandle,
      ULONG  Format
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRestoreKey (
      HANDLE KeyHandle,
      HANDLE FileHandle,
      ULONG Flags
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationKey (
      HANDLE KeyHandle,
       
        KEY_SET_INFORMATION_CLASS KeySetInformationClass,
      PVOID KeySetInformation,
      ULONG KeySetInformationLength
    );

#line 37937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetValueKey(
      HANDLE KeyHandle,
      PUNICODE_STRING ValueName,
      ULONG TitleIndex,
      ULONG Type,
      PVOID Data,
      ULONG DataSize
    );
#line 37952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenSymbolicLinkObject(
      PHANDLE LinkHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 37964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQuerySymbolicLinkObject(
      HANDLE LinkHandle,
      PUNICODE_STRING LinkTarget,
      PULONG ReturnedLength
    );
#line 37976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateTransactionManager (
      PHANDLE TmHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PUNICODE_STRING LogFileName,
      ULONG CreateOptions,
      ULONG CommitStrength
    );
#line 37991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenTransactionManager (
      PHANDLE TmHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PUNICODE_STRING LogFileName,
      LPGUID TmIdentity,
      ULONG OpenOptions
    );
#line 38006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRollforwardTransactionManager (
      HANDLE TransactionManagerHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRecoverTransactionManager (
      HANDLE TransactionManagerHandle
    );
#line 38028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryInformationTransactionManager (
      HANDLE TransactionManagerHandle,
      TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
      PVOID TransactionManagerInformation,
      ULONG TransactionManagerInformationLength,
      PULONG ReturnLength
    );
#line 38042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationTransactionManager (
      HANDLE TmHandle,
      TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
      PVOID TransactionManagerInformation,
      ULONG TransactionManagerInformationLength
    );
#line 38055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwEnumerateTransactionObject (
      HANDLE            RootObjectHandle,
          KTMOBJECT_TYPE    QueryType,
      PKTMOBJECT_CURSOR ObjectCursor,
          ULONG             ObjectCursorLength,
         PULONG            ReturnLength
    );
#line 38069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateTransaction (
      PHANDLE TransactionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      LPGUID Uow,
      HANDLE TmHandle,
      ULONG CreateOptions,
      ULONG IsolationLevel,
      ULONG IsolationFlags,
      PLARGE_INTEGER Timeout,
      PUNICODE_STRING Description
    );
#line 38088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenTransaction (
      PHANDLE TransactionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      LPGUID Uow,
      HANDLE TmHandle
    );
#line 38102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryInformationTransaction (
      HANDLE TransactionHandle,
      TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
      PVOID TransactionInformation,
      ULONG TransactionInformationLength,
      PULONG ReturnLength
    );
#line 38116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationTransaction (
      HANDLE TransactionHandle,
      TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
      PVOID TransactionInformation,
      ULONG TransactionInformationLength
    );
#line 38129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCommitTransaction (
      HANDLE  TransactionHandle,
      BOOLEAN Wait
    );
#line 38140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRollbackTransaction (
      HANDLE  TransactionHandle,
      BOOLEAN Wait
    );
#line 38151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateResourceManager (
      PHANDLE ResourceManagerHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE TmHandle,
      LPGUID ResourceManagerGuid,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG CreateOptions,
      PUNICODE_STRING Description
    );
#line 38167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenResourceManager (
      PHANDLE ResourceManagerHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE TmHandle,
      LPGUID ResourceManagerGuid,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 38181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRecoverResourceManager (
      HANDLE ResourceManagerHandle
    );
#line 38191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwGetNotificationResourceManager (
      HANDLE             ResourceManagerHandle,
      PTRANSACTION_NOTIFICATION TransactionNotification,
      ULONG              NotificationLength,
      PLARGE_INTEGER         Timeout,
      PULONG                    ReturnLength,
      ULONG                          Asynchronous,
      ULONG_PTR                  AsynchronousContext
    );
#line 38207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryInformationResourceManager (
      HANDLE ResourceManagerHandle,
      RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
      PVOID ResourceManagerInformation,
      ULONG ResourceManagerInformationLength,
      PULONG ReturnLength
    );
#line 38221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationResourceManager (
      HANDLE ResourceManagerHandle,
      RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
      PVOID ResourceManagerInformation,
      ULONG ResourceManagerInformationLength
    );
#line 38234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateEnlistment (
      PHANDLE EnlistmentHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE ResourceManagerHandle,
      HANDLE TransactionHandle,
      POBJECT_ATTRIBUTES ObjectAttributes,
      ULONG CreateOptions,
      NOTIFICATION_MASK NotificationMask,
      PVOID EnlistmentKey
    );
#line 38251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenEnlistment (
      PHANDLE EnlistmentHandle,
      ACCESS_MASK DesiredAccess,
      HANDLE RmHandle,
      LPGUID EnlistmentGuid,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 38265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryInformationEnlistment (
      HANDLE EnlistmentHandle,
      ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
      PVOID EnlistmentInformation,
      ULONG EnlistmentInformationLength,
      PULONG ReturnLength
    );
#line 38279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationEnlistment (
      HANDLE EnlistmentHandle,
      ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
      PVOID EnlistmentInformation,
      ULONG EnlistmentInformationLength
    );
#line 38292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRecoverEnlistment (
      HANDLE EnlistmentHandle,
      PVOID EnlistmentKey
    );
#line 38303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwPrePrepareEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwPrepareEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCommitEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwRollbackEnlistment (
      HANDLE EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwPrePrepareComplete (
      HANDLE            EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwPrepareComplete (
      HANDLE            EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCommitComplete (
      HANDLE            EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwReadOnlyEnlistment (
      HANDLE            EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
__stdcall
ZwRollbackComplete (
      HANDLE            EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSinglePhaseReject (
      HANDLE            EnlistmentHandle,
      PLARGE_INTEGER TmVirtualClock
    );
#line 38412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenEvent (
      PHANDLE EventHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 38424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













#line 38438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryFullAttributesFile(
      POBJECT_ATTRIBUTES ObjectAttributes,
      PFILE_NETWORK_OPEN_INFORMATION FileInformation
    );
#line 38449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 38458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












































    












typedef ULONG                       CLFS_CONTAINER_ID;
typedef CLFS_CONTAINER_ID           *PCLFS_CONTAINER_ID;
typedef CLFS_CONTAINER_ID           **PPCLFS_CONTAINER_ID;

#line 38524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













typedef struct _CLS_LSN
{

    ULONGLONG               Internal;

} CLS_LSN, *PCLS_LSN, **PPCLS_LSN;

#line 38545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef CLS_LSN CLFS_LSN;
typedef CLFS_LSN *PCLFS_LSN, **PPCLFS_LSN;

#line 38558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







extern __declspec(dllimport) const CLFS_LSN CLFS_LSN_INVALID;
extern __declspec(dllimport) const CLFS_LSN CLFS_LSN_NULL;
#line 38568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































#line 38604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















#line 38622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
















#line 38641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef UCHAR CLS_RECORD_TYPE, *PCLS_RECORD_TYPE, **PPCLS_RECORD_TYPE;
typedef CLS_RECORD_TYPE CLFS_RECORD_TYPE, *PCLFS_RECORD_TYPE, **PPCLFS_RECORD_TYPE;
#line 38652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef enum _CLS_CONTEXT_MODE
{
    ClsContextNone = 0x00,
    ClsContextUndoNext,
    ClsContextPrevious,
    ClsContextForward

} CLS_CONTEXT_MODE, *PCLS_CONTEXT_MODE, **PPCLS_CONTEXT_MODE;
#line 38670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef enum _CLFS_CONTEXT_MODE
{
    ClfsContextNone = 0x00,
    ClfsContextUndoNext,
    ClfsContextPrevious,
    ClfsContextForward

} CLFS_CONTEXT_MODE, *PCLFS_CONTEXT_MODE, **PPCLFS_CONTEXT_MODE;
#line 38685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef struct _CLFS_NODE_ID
{
    ULONG   cType;                                      
    ULONG   cbNode;                                     

} CLFS_NODE_ID, *PCLFS_NODE_ID;
#line 38703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef struct _CLS_WRITE_ENTRY
{
    PVOID Buffer;
    ULONG ByteLength;
} CLS_WRITE_ENTRY, *PCLS_WRITE_ENTRY, **PPCLS_WRITE_ENTRY;
#line 38719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef CLS_WRITE_ENTRY CLFS_WRITE_ENTRY;
typedef CLFS_WRITE_ENTRY *PCLFS_WRITE_ENTRY, **PPCLFS_WRITE_ENTRY;
#line 38728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef GUID CLFS_LOG_ID;
#line 38738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef struct _CLS_INFORMATION
{
    LONGLONG TotalAvailable;                            
    LONGLONG CurrentAvailable;                          
    LONGLONG TotalReservation;                       
    ULONGLONG BaseFileSize;                             
    ULONGLONG ContainerSize;                            
    ULONG TotalContainers;                              
    ULONG FreeContainers;                               
    ULONG TotalClients;                                 
    ULONG Attributes;                                   
    ULONG FlushThreshold;                               
    ULONG SectorSize;                                   
    CLS_LSN MinArchiveTailLsn;                          
    CLS_LSN BaseLsn;                                    
    CLS_LSN LastFlushedLsn;                             
    CLS_LSN LastLsn;                                    
    CLS_LSN RestartLsn;                                 
    GUID Identity;                                      
} CLS_INFORMATION, *PCLS_INFORMATION, *PPCLS_INFORMATION;
#line 38768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






typedef CLS_INFORMATION CLFS_INFORMATION;
typedef CLFS_INFORMATION *PCLFS_INFORMATION, *PPCLFS_INFORMATION;
#line 38777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































typedef struct _CLFS_LOG_NAME_INFORMATION
{

    USHORT NameLengthInBytes;
    WCHAR  Name[1];

} CLFS_LOG_NAME_INFORMATION, *PCLFS_LOG_NAME_INFORMATION, **PPCLFS_LOG_NAME_INFORMATION;
#line 38820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef struct _CLFS_STREAM_ID_INFORMATION
{

    UCHAR StreamIdentifier;

} CLFS_STREAM_ID_INFORMATION, *PCLFS_STREAM_ID_INFORMATION, **PPCLFS_STREAM_ID_INFORMATION;
#line 38836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#pragma pack(push,8)
typedef struct _CLFS_PHYSICAL_LSN_INFORMATION
{
    UCHAR          StreamIdentifier;
    CLFS_LSN       VirtualLsn;
    CLFS_LSN       PhysicalLsn;

} CLFS_PHYSICAL_LSN_INFORMATION, *PCLFS_PHYSICAL_LSN_INFORMATION;
#pragma pack(pop)
#line 38854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef UINT32 CLS_CONTAINER_STATE, *PCLS_CONTAINER_STATE, *PPCLS_CONTAINER_STATE;
typedef CLS_CONTAINER_STATE  CLFS_CONTAINER_STATE, *PCLFS_CONTAINER_STATE, *PPCLFS_CONTAINER_STATE;
#line 38867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



































#line 38903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















#line 38923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 38925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef struct _CLS_CONTAINER_INFORMATION
{
    ULONG FileAttributes;                    
    ULONGLONG CreationTime;                  
    ULONGLONG LastAccessTime;                
    ULONGLONG LastWriteTime;                 
    LONGLONG ContainerSize;                  
    ULONG FileNameActualLength;              
    ULONG FileNameLength;                    
    WCHAR FileName [(256)];
    CLFS_CONTAINER_STATE State;              
    CLFS_CONTAINER_ID PhysicalContainerId;   
    CLFS_CONTAINER_ID LogicalContainerId;    

} CLS_CONTAINER_INFORMATION, *PCLS_CONTAINER_INFORMATION, **PPCLS_CONTAINER_INFORMATION;





typedef CLS_CONTAINER_INFORMATION CLFS_CONTAINER_INFORMATION;
typedef CLFS_CONTAINER_INFORMATION *PCLFS_CONTAINER_INFORMATION, **PPCLFS_CONTAINER_INFORMATION;
#line 38959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef enum _CLS_LOG_INFORMATION_CLASS
{

    ClfsLogBasicInformation = 0x00,         
    ClfsLogBasicInformationPhysical,        
    ClfsLogPhysicalNameInformation,         
    ClfsLogStreamIdentifierInformation,     

    ClfsLogSystemMarkingInformation,        
    ClfsLogPhysicalLsnInformation           
#line 38980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

} CLS_LOG_INFORMATION_CLASS, *PCLS_LOG_INFORMATION_CLASS, **PPCLS_LOG_INFORMATION_CLASS;





typedef CLS_LOG_INFORMATION_CLASS CLFS_LOG_INFORMATION_CLASS;
typedef CLFS_LOG_INFORMATION_CLASS *PCLFS_LOG_INFORMATION_CLASS, **PPCLFS_LOG_INFORMATION_CLASS;
#line 38990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef enum _CLS_IOSTATS_CLASS
{
    ClsIoStatsDefault = 0x0000,
    ClsIoStatsMax     = 0xFFFF

} CLS_IOSTATS_CLASS, *PCLS_IOSTATS_CLASS, **PPCLS_IOSTATS_CLASS;
#line 39005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef enum _CLFS_IOSTATS_CLASS
{
    ClfsIoStatsDefault = 0x0000,
    ClfsIoStatsMax     = 0xFFFF

} CLFS_IOSTATS_CLASS, *PCLFS_IOSTATS_CLASS, **PPCLFS_IOSTATS_CLASS;
#line 39021 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef struct _CLS_IO_STATISTICS_HEADER
{
    UCHAR                ubMajorVersion;     
    UCHAR                ubMinorVersion;     
    CLFS_IOSTATS_CLASS  eStatsClass;        
    USHORT              cbLength;           
    ULONG               coffData;           

} CLS_IO_STATISTICS_HEADER, *PCLS_IO_STATISTICS_HEADER, **PPCLS_IO_STATISTICS_HEADER;





typedef CLS_IO_STATISTICS_HEADER CLFS_IO_STATISTICS_HEADER;
typedef CLFS_IO_STATISTICS_HEADER *PCLFS_IO_STATISTICS_HEADER, **PPCLFS_IO_STATISTICS_HEADER;
#line 39049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



typedef struct _CLS_IO_STATISTICS
{
    CLS_IO_STATISTICS_HEADER hdrIoStats;    
    ULONGLONG cFlush;                       
    ULONGLONG cbFlush;                      
    ULONGLONG cMetaFlush;                   
    ULONGLONG cbMetaFlush;                  

} CLS_IO_STATISTICS, *PCLS_IO_STATISTICS, **PPCLS_IO_STATISTICS;





typedef CLS_IO_STATISTICS CLFS_IO_STATISTICS;
typedef CLFS_IO_STATISTICS *PCLFS_IO_STATISTICS, **PPCLFS_IO_STATISTICS;
#line 39069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


























#line 39096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef UCHAR CLFS_SCAN_MODE, *PCLFS_SCAN_MODE;
#line 39099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

















typedef FILE_OBJECT LOG_FILE_OBJECT, *PLOG_FILE_OBJECT, **PPLOG_FILE_OBJECT;



#pragma warning(push)
#pragma warning(disable:4324) 
#line 39123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 39124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _CLS_SCAN_CONTEXT
{
    CLFS_NODE_ID cidNode;
    PLOG_FILE_OBJECT plfoLog;
    __declspec(align(8)) ULONG cIndex;
    __declspec(align(8)) ULONG cContainers;
    __declspec(align(8)) ULONG cContainersReturned;
    __declspec(align(8)) CLFS_SCAN_MODE eScanMode;
    __declspec(align(8)) PCLS_CONTAINER_INFORMATION pinfoContainer;
    
} CLS_SCAN_CONTEXT, *PCLS_SCAN_CONTEXT, **PPCLS_SCAN_CONTEXT;



#pragma warning(pop)
#line 39141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
#line 39142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 39144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef CLS_SCAN_CONTEXT CLFS_SCAN_CONTEXT;
typedef CLFS_SCAN_CONTEXT *PCLFS_SCAN_CONTEXT, **PPCLFS_SCAN_CONTEXT;
#line 39154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"












typedef struct _CLS_ARCHIVE_DESCRIPTOR
{
    ULONGLONG coffLow;
    ULONGLONG coffHigh;
    CLS_CONTAINER_INFORMATION infoContainer;

} CLS_ARCHIVE_DESCRIPTOR, *PCLS_ARCHIVE_DESCRIPTOR, **PPCLS_ARCHIVE_DESCRIPTOR;





typedef CLS_ARCHIVE_DESCRIPTOR CLFS_ARCHIVE_DESCRIPTOR;
typedef CLFS_ARCHIVE_DESCRIPTOR *PCLFS_ARCHIVE_DESCRIPTOR, **PPCLFS_ARCHIVE_DESCRIPTOR;
#line 39181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef PVOID (* CLFS_BLOCK_ALLOCATION) (ULONG cbBufferLength, PVOID pvUserContext);







typedef void (* CLFS_BLOCK_DEALLOCATION) (PVOID pvBuffer, PVOID pvUserContext);
#line 39199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef enum _CLFS_LOG_ARCHIVE_MODE
{

    ClfsLogArchiveEnabled = 0x01,
    ClfsLogArchiveDisabled = 0x02

} CLFS_LOG_ARCHIVE_MODE, *PCLFS_LOG_ARCHIVE_MODE;
#line 39215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
































__declspec(dllimport) BOOLEAN __stdcall
ClfsLsnEqual
(
      const CLFS_LSN* plsn1,
      const CLFS_LSN* plsn2
);
#line 39254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















__declspec(dllimport) BOOLEAN __stdcall
ClfsLsnLess
(
      const CLFS_LSN* plsn1,
      const CLFS_LSN* plsn2
);
#line 39283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















__declspec(dllimport) BOOLEAN __stdcall
ClfsLsnGreater
(
      const CLFS_LSN* plsn1,
      const CLFS_LSN* plsn2
);
#line 39312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















__declspec(dllimport) BOOLEAN __stdcall
ClfsLsnNull
(
      const CLFS_LSN* plsn
);
#line 39340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















__declspec(dllimport) CLFS_CONTAINER_ID __stdcall
ClfsLsnContainer
(
    const CLFS_LSN* plsn
);
#line 39366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

























__declspec(dllimport) CLFS_LSN __stdcall
ClfsLsnCreate
(
      CLFS_CONTAINER_ID    cidContainer,
      ULONG                offBlock,
      ULONG                cRecord
);
#line 39399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















__declspec(dllimport) ULONG __stdcall
ClfsLsnBlockOffset
(
    const CLFS_LSN* plsn
);
#line 39425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















__declspec(dllimport) ULONG __stdcall
ClfsLsnRecordSequence
(
      const CLFS_LSN* plsn
);
#line 39451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















__declspec(dllimport) BOOLEAN __stdcall
ClfsLsnInvalid
(
      const CLFS_LSN* plsn
);
#line 39479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






















__declspec(dllimport) CLFS_LSN __stdcall
ClfsLsnIncrement (  PCLFS_LSN  plsn);
#line 39504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















































































































#line 39616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"











typedef enum _CLFS_MGMT_POLICY_TYPE {

    ClfsMgmtPolicyMaximumSize = 0x0,
    ClfsMgmtPolicyMinimumSize,
    ClfsMgmtPolicyNewContainerSize,
    ClfsMgmtPolicyGrowthRate,
    ClfsMgmtPolicyLogTail,
    ClfsMgmtPolicyAutoShrink,
    ClfsMgmtPolicyAutoGrow,
    ClfsMgmtPolicyNewContainerPrefix,
    ClfsMgmtPolicyNewContainerSuffix,
    ClfsMgmtPolicyNewContainerExtension,

    ClfsMgmtPolicyInvalid

} CLFS_MGMT_POLICY_TYPE, *PCLFS_MGMT_POLICY_TYPE;
#line 39644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



#line 39648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








#line 39657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







#line 39665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














#line 39680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef struct _CLFS_MGMT_POLICY {

    
    
    
    ULONG                   Version;

    
    
    
    ULONG                   LengthInBytes;

    
    
    
    
    ULONG                   PolicyFlags;

    
    
    
    CLFS_MGMT_POLICY_TYPE   PolicyType;

    
    
    
    
    
    

    union {

        struct {
            ULONG       Containers;
        } MaximumSize;

        struct {
            ULONG       Containers;
        } MinimumSize;

        struct {
            ULONG       SizeInBytes;
        } NewContainerSize;

        struct {
            ULONG       AbsoluteGrowthInContainers;
            ULONG       RelativeGrowthPercentage;
        } GrowthRate;

        struct {
            ULONG       MinimumAvailablePercentage;
            ULONG       MinimumAvailableContainers;
        } LogTail;

        struct {
            ULONG       Percentage;
        } AutoShrink;

        struct {
            ULONG       Enabled;
        } AutoGrow;

        struct {
            USHORT      PrefixLengthInBytes;
            WCHAR       PrefixString[1]; 
        } NewContainerPrefix;

        struct {
            ULONGLONG   NextContainerSuffix;
        } NewContainerSuffix;

        struct {
            USHORT      ExtensionLengthInBytes;
            WCHAR       ExtensionString[1]; 
        } NewContainerExtension;

    } PolicyParameters;

    
    
    
    

} CLFS_MGMT_POLICY, *PCLFS_MGMT_POLICY;
#line 39775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef enum _CLFS_MGMT_NOTIFICATION_TYPE
{

    
    
    

    ClfsMgmtAdvanceTailNotification = 0,

    
    
    
    

    ClfsMgmtLogFullHandlerNotification,

    
    
    
    

    ClfsMgmtLogUnpinnedNotification,

    
    
    
    

    ClfsMgmtLogWriteNotification

} CLFS_MGMT_NOTIFICATION_TYPE, *PCLFS_MGMT_NOTIFICATION_TYPE;
#line 39817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef struct _CLFS_MGMT_NOTIFICATION
{

    
    
    

    CLFS_MGMT_NOTIFICATION_TYPE     Notification;
    
    
    
    
    

    CLFS_LSN                        Lsn;

    
    
    
    
    

    USHORT                          LogIsPinned;

} CLFS_MGMT_NOTIFICATION, *PCLFS_MGMT_NOTIFICATION;
#line 39852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"















typedef
NTSTATUS
(*PCLFS_CLIENT_ADVANCE_TAIL_CALLBACK) (
      PLOG_FILE_OBJECT LogFile,
      PCLFS_LSN TargetLsn,
      PVOID ClientData
    );
#line 39875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef
void
(*PCLFS_CLIENT_LFF_HANDLER_COMPLETE_CALLBACK) (
      PLOG_FILE_OBJECT LogFile,
      NTSTATUS OperationStatus,
      BOOLEAN LogIsPinned,
      PVOID ClientData
    );
#line 39891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








typedef
void
(*PCLFS_CLIENT_LOG_UNPINNED_CALLBACK) (
      PLOG_FILE_OBJECT LogFile,
      PVOID ClientData
    );
#line 39906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









typedef
void
(*PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK) (
      PLOG_FILE_OBJECT LogFile,
      NTSTATUS OperationStatus,
      PVOID ClientData
    );
#line 39923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"














typedef struct _CLFS_MGMT_CLIENT_REGISTRATION {

    
    
    

    ULONG   Version;  

    PCLFS_CLIENT_ADVANCE_TAIL_CALLBACK AdvanceTailCallback;
    PVOID                              AdvanceTailCallbackData;

    PCLFS_CLIENT_LFF_HANDLER_COMPLETE_CALLBACK LogGrowthCompleteCallback;
    PVOID                                      LogGrowthCompleteCallbackData;

    PCLFS_CLIENT_LOG_UNPINNED_CALLBACK LogUnpinnedCallback;
    PVOID                              LogUnpinnedCallbackData;

} CLFS_MGMT_CLIENT_REGISTRATION, *PCLFS_MGMT_CLIENT_REGISTRATION;
#line 39956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










typedef PVOID CLFS_MGMT_CLIENT, *PCLFS_MGMT_CLIENT;
#line 39968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
NTSTATUS
ClfsMgmtRegisterManagedClient(
      PLOG_FILE_OBJECT LogFile,
      PCLFS_MGMT_CLIENT_REGISTRATION RegistrationData,
      PCLFS_MGMT_CLIENT ClientCookie
    );
#line 39979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtDeregisterManagedClient(
      CLFS_MGMT_CLIENT ClientCookie
    );
#line 39987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtTailAdvanceFailure(
      CLFS_MGMT_CLIENT Client,
      NTSTATUS Reason
    );
#line 39996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtHandleLogFileFull(
      CLFS_MGMT_CLIENT Client
    );
#line 40004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtInstallPolicy(
      PLOG_FILE_OBJECT  LogFile,
      PCLFS_MGMT_POLICY Policy,
      ULONG PolicyLength
    );
#line 40014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtQueryPolicy(
      PLOG_FILE_OBJECT LogFile,
      CLFS_MGMT_POLICY_TYPE PolicyType,
      PCLFS_MGMT_POLICY Policy,
      PULONG PolicyLength
    );
#line 40025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtRemovePolicy(
      PLOG_FILE_OBJECT LogFile,
      CLFS_MGMT_POLICY_TYPE PolicyType
    );
#line 40034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


__declspec(dllimport)
NTSTATUS
ClfsMgmtSetLogFileSize(
      PLOG_FILE_OBJECT LogFile,
      PULONGLONG NewSizeInContainers,
      PULONGLONG ResultingSizeInContainers,
      PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK CompletionRoutine,
      PVOID CompletionRoutineData
    );
#line 40046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"



__declspec(dllimport)
NTSTATUS
ClfsMgmtSetLogFileSizeAsClient(
      PLOG_FILE_OBJECT LogFile,
      PCLFS_MGMT_CLIENT ClientCookie,
      PULONGLONG NewSizeInContainers,
      PULONGLONG ResultingSizeInContainers,
      PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK CompletionRoutine,
      PVOID CompletionRoutineData
    );
#line 40060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















__declspec(dllimport)
NTSTATUS ClfsInitialize (void);
#line 40084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
void ClfsFinalize (void);
#line 40095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










__declspec(dllimport)
NTSTATUS ClfsCreateLogFile (
                      PPLOG_FILE_OBJECT pplfoLog,
                      PUNICODE_STRING puszLogFileName,
                      ACCESS_MASK fDesiredAccess,
                      ULONG dwShareMode,
                      PSECURITY_DESCRIPTOR psdLogFile,
                      ULONG fCreateDisposition,
                      ULONG fCreateOptions,
                      ULONG fFlagsAndAttributes,
                      ULONG fLogOptionFlag,
                      PVOID pvContext,
                      ULONG cbContext
                    );
#line 40120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsDeleteLogByPointer (  PLOG_FILE_OBJECT plfoLog);
#line 40132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsDeleteLogFile (
                      PUNICODE_STRING puszLogFileName,
                      PVOID pvReserved,
                      ULONG fLogOptionFlag,
                      PVOID pvContext,
                      ULONG cbContext
                    );
#line 40150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsAddLogContainer (
                      PLOG_FILE_OBJECT plfoLog,
                      PULONGLONG pcbContainer,
                      PUNICODE_STRING puszContainerPath
                    );
#line 40166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsAddLogContainerSet (
                      PLOG_FILE_OBJECT plfoLog,
                      USHORT cContainers,
                      PULONGLONG pcbContainer,
                      PUNICODE_STRING rguszContainerPath
                    );
#line 40183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsRemoveLogContainer (
                      PLOG_FILE_OBJECT plfoLog,
                      PUNICODE_STRING puszContainerPath,
                      BOOLEAN fForce
                    );
#line 40199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsRemoveLogContainerSet (
                      PLOG_FILE_OBJECT plfoLog,
                      USHORT cContainers,
                      PUNICODE_STRING rgwszContainerPath,
                      BOOLEAN fForce
                    );
#line 40216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsSetArchiveTail (
                      PLOG_FILE_OBJECT plfoLog,
                      PCLFS_LSN plsnArchiveTail
                    );
#line 40231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsSetEndOfLog (
                      PLOG_FILE_OBJECT plfoLog,
                      PCLFS_LSN plsnEnd
                    );
#line 40246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsCreateScanContext (
                      PLOG_FILE_OBJECT plfoLog,
                      ULONG cFromContainer,
                      ULONG cContainers,
                      CLFS_SCAN_MODE eScanMode,
                      PCLFS_SCAN_CONTEXT pcxScan
                    );
#line 40264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsScanLogContainers (
                      PCLFS_SCAN_CONTEXT pcxScan,
                      CLFS_SCAN_MODE eScanMode
                    );
#line 40279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










__declspec(dllimport)
NTSTATUS ClfsGetContainerName (
                      PLOG_FILE_OBJECT plfoLog,
                      CLFS_CONTAINER_ID cidLogicalContainer,
                      PUNICODE_STRING puszContainerName,
                      PULONG pcActualLenContainerName
                    );
#line 40297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"













__declspec(dllimport)
NTSTATUS ClfsGetLogFileInformation (
                      PLOG_FILE_OBJECT plfoLog,
                      PCLFS_INFORMATION pinfoBuffer,
                      PULONG pcbInfoBuffer
                    );
#line 40317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsQueryLogFileInformation (
                      PLOG_FILE_OBJECT plfoLog,
                      CLFS_LOG_INFORMATION_CLASS eInformationClass,
                      PVOID pinfoInputBuffer,
                      ULONG cbinfoInputBuffer,
                      PVOID pinfoBuffer,
                      PULONG pcbInfoBuffer
                    );
#line 40336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsSetLogFileInformation (
                      PLOG_FILE_OBJECT plfoLog,
                      CLFS_LOG_INFORMATION_CLASS eInformationClass,
                      PVOID pinfoBuffer,
                      ULONG cbBuffer
                    );
#line 40353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsReadRestartArea (
                      PVOID pvMarshalContext,
                     PVOID *ppvRestartBuffer,
                      PULONG pcbRestartBuffer,
                      PCLFS_LSN plsn,
                     PVOID *ppvReadContext
                    );
#line 40371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










__declspec(dllimport)
NTSTATUS ClfsReadPreviousRestartArea (
                      PVOID pvReadContext,
                     PVOID *ppvRestartBuffer,
                      PULONG pcbRestartBuffer,
                      PCLFS_LSN plsnRestart
                    );
#line 40389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsWriteRestartArea (
                      PVOID pvMarshalContext,
                      PVOID pvRestartBuffer,
                      ULONG cbRestartBuffer,
                      PCLFS_LSN plsnBase,
                      ULONG fFlags,
                      PULONG pcbWritten,
                      PCLFS_LSN plsnNext
                    );
#line 40409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
NTSTATUS ClfsAdvanceLogBase (
                      PVOID pvMarshalContext,
                      PCLFS_LSN plsnBase,
                      ULONG fFlags
                    );
#line 40424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsCloseAndResetLogFile (  PLOG_FILE_OBJECT plfoLog);
#line 40436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
NTSTATUS  ClfsCloseLogFileObject (  PLOG_FILE_OBJECT plfoLog);
#line 40447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsCreateMarshallingArea (
                      PLOG_FILE_OBJECT plfoLog,
                      POOL_TYPE ePoolType,
                      PALLOCATE_FUNCTION pfnAllocBuffer,
                      PFREE_FUNCTION pfnFreeBuffer,
                      ULONG cbMarshallingBuffer,
                      ULONG cMaxWriteBuffers,
                      ULONG cMaxReadBuffers,
                     PVOID *ppvMarshalContext
                    );
#line 40468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsDeleteMarshallingArea (  PVOID pvMarshalContext);
#line 40480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsReserveAndAppendLog (
                      PVOID pvMarshalContext,
                      PCLFS_WRITE_ENTRY rgWriteEntries,
                      ULONG cWriteEntries,
                      PCLFS_LSN plsnUndoNext,
                      PCLFS_LSN plsnPrevious,
                      ULONG cReserveRecords,
                      PLONGLONG rgcbReservation,
                      ULONG fFlags,
                      PCLFS_LSN plsn
                    );
#line 40502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"










__declspec(dllimport)
NTSTATUS ClfsReserveAndAppendLogAligned (
                      PVOID pvMarshalContext,
                      PCLFS_WRITE_ENTRY rgWriteEntries,
                      ULONG cWriteEntries,
                      ULONG cbEntryAlignment,
                      PCLFS_LSN plsnUndoNext,
                      PCLFS_LSN plsnPrevious,
                      ULONG cReserveRecords,
                      PLONGLONG rgcbReservation,
                      ULONG fFlags,
                      PCLFS_LSN plsn
                    );
#line 40526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsAlignReservedLog (
                      PVOID pvMarshalContext,
                      ULONG cRecords,
                      LONGLONG rgcbReservation [],
                      PLONGLONG pcbAlignReservation
                    );
#line 40543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsAllocReservedLog (
                      PVOID pvMarshalContext,
                      ULONG cRecords,
                      PLONGLONG pcbAdjustment
                    );
#line 40559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsFreeReservedLog (
                      PVOID pvMarshalContext,
                      ULONG cRecords,
                      PLONGLONG pcbAdjustment
                    );
#line 40575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsFlushBuffers (  PVOID pvMarshalContext);
#line 40587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsFlushToLsn (
                      PVOID pvMarshalContext,
                      PCLFS_LSN plsnFlush,
                      PCLFS_LSN plsnLastFlushed
                    );
#line 40603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









__declspec(dllimport)
NTSTATUS ClfsReadLogRecord (
                      PVOID pvMarshalContext,
                      PCLFS_LSN plsnFirst,
                      CLFS_CONTEXT_MODE peContextMode,
                     PVOID *ppvReadBuffer,
                      PULONG pcbReadBuffer,
                      PCLFS_RECORD_TYPE peRecordType,
                      PCLFS_LSN plsnUndoNext,
                      PCLFS_LSN plsnPrevious,
                     PVOID* ppvReadContext
                    );
#line 40625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
NTSTATUS ClfsReadNextLogRecord (
                      PVOID pvReadContext,
                     PVOID *ppvBuffer,
                      PULONG pcbBuffer,
                      PCLFS_RECORD_TYPE peRecordType,
                      PCLFS_LSN plsnUser,
                      PCLFS_LSN plsnUndoNext,
                      PCLFS_LSN plsnPrevious,
                      PCLFS_LSN plsnRecord
                    );
#line 40645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
NTSTATUS ClfsTerminateReadLog (  PVOID pvCursorContext);
#line 40656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
NTSTATUS ClfsGetLastLsn (
                      PLOG_FILE_OBJECT plfoLog,
                      PCLFS_LSN plsnLast
                    );
#line 40670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"








__declspec(dllimport)
NTSTATUS ClfsGetIoStatistics (
                      PLOG_FILE_OBJECT plfoLog,
                      PVOID pvStatsBuffer,
                      ULONG cbStatsBuffer,
                      CLFS_IOSTATS_CLASS eStatsClass,
                      PULONG pcbStatsWritten
                    );
#line 40687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















__declspec(dllimport)
CLFS_LSN
ClfsLaterLsn (  PCLFS_LSN plsn);
#line 40712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"





















__declspec(dllimport)
CLFS_LSN
ClfsEarlierLsn (  PCLFS_LSN plsn);
#line 40737 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


























__declspec(dllimport)
NTSTATUS
ClfsLsnDifference (
      PCLFS_LSN plsnStart,
      PCLFS_LSN plsnFinish,
      ULONG cbContainer,
      ULONG cbMaxBlock,
      PLONGLONG pcbDifference
    );
#line 40773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"




















__declspec(dllimport)
BOOLEAN
ClfsValidTopLevelContext (  PIRP pirpTopLevelContext);
#line 40797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#line 40804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

typedef struct _KTRANSACTION KTRANSACTION, *PKTRANSACTION, * PRKTRANSACTION;
typedef struct _KENLISTMENT KENLISTMENT, *PKENLISTMENT, * PRKENLISTMENT;
typedef struct _KRESOURCEMANAGER KRESOURCEMANAGER, *PKRESOURCEMANAGER, * PRKRESOURCEMANAGER;
typedef struct _KTM KTM, *PKTM, * PRKTM;

typedef GUID UOW, *PUOW;
typedef GUID *PGUID;





typedef
NTSTATUS
(__stdcall *PTM_RM_NOTIFICATION) (
          PKENLISTMENT EnlistmentObject,
          PVOID RMContext,
          PVOID TransactionContext,
          ULONG TransactionNotification,
       PLARGE_INTEGER TmVirtualClock,
          ULONG ArgumentLength,
          PVOID Argument
    );





typedef GUID KCRM_PROTOCOL_ID, *PKCRM_PROTOCOL_ID;

typedef
NTSTATUS
(__stdcall *PTM_PROPAGATE_ROUTINE) (
      PVOID    PropagationCookie,
      PVOID    CallbackData,
      NTSTATUS PropagationStatus,
      GUID     TransactionGuid
    );





 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmInitializeTransactionManager (
      PRKTM TransactionManager,
      PCUNICODE_STRING LogFileName,
      PGUID TmId,
      ULONG CreateOptions
    );


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRenameTransactionManager (
      PUNICODE_STRING LogFileName,
      LPGUID ExistingTransactionManagerGuid
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRecoverTransactionManager (
      PKTM Tm,
      PLARGE_INTEGER TargetVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmCommitTransaction (
      PKTRANSACTION Transaction,
      BOOLEAN       Wait
    );


 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRollbackTransaction (
      PKTRANSACTION Transaction,
      BOOLEAN       Wait
    );


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmCreateEnlistment (
      PHANDLE           EnlistmentHandle,
      KPROCESSOR_MODE    PreviousMode,
      ACCESS_MASK        DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PRKRESOURCEMANAGER ResourceManager,
      PKTRANSACTION      Transaction,
      ULONG          CreateOptions,
      NOTIFICATION_MASK  NotificationMask,
      PVOID          EnlistmentKey
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRecoverEnlistment (
      PKENLISTMENT Enlistment,
      PVOID        EnlistmentKey
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmPrePrepareEnlistment (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmPrepareEnlistment (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmCommitEnlistment (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRollbackEnlistment (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmPrePrepareComplete (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmPrepareComplete (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmReadOnlyEnlistment (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmCommitComplete (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRollbackComplete (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmReferenceEnlistmentKey (
      PKENLISTMENT Enlistment,
      PVOID *Key
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmDereferenceEnlistmentKey (
      PKENLISTMENT Enlistment,
      PBOOLEAN LastReference
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmSinglePhaseReject (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRequestOutcomeEnlistment (
      PKENLISTMENT Enlistment,
      PLARGE_INTEGER TmVirtualClock
    );






 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmEnableCallbacks (
      PKRESOURCEMANAGER ResourceManager,
      PTM_RM_NOTIFICATION CallbackRoutine,
      PVOID RMKey
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
TmRecoverResourceManager (
      PKRESOURCEMANAGER ResourceManager
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmPropagationComplete(
       PKRESOURCEMANAGER ResourceManager,
       ULONG             RequestCookie,
       ULONG             BufferLength,
       PVOID             Buffer
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
TmPropagationFailed(
       PKRESOURCEMANAGER ResourceManager,
       ULONG             RequestCookie,
       NTSTATUS          Status
    );

 
__declspec(dllimport)
void
__stdcall
TmGetTransactionId(
       PKTRANSACTION Transaction,
      PUOW TransactionId
    );

 
 
__declspec(dllimport)
BOOLEAN
__stdcall
TmIsTransactionActive (
      PKTRANSACTION Transaction
    );





typedef struct _PCW_INSTANCE *PPCW_INSTANCE;
typedef struct _PCW_REGISTRATION *PPCW_REGISTRATION;
typedef struct _PCW_BUFFER *PPCW_BUFFER;

typedef struct _PCW_COUNTER_DESCRIPTOR {
    USHORT Id;
    USHORT StructIndex;
    USHORT Offset;
    USHORT Size;
} PCW_COUNTER_DESCRIPTOR, *PPCW_COUNTER_DESCRIPTOR;

typedef struct _PCW_DATA {
      const void *Data;
      ULONG Size;
} PCW_DATA, *PPCW_DATA;

typedef struct _PCW_COUNTER_INFORMATION {
    ULONG64 CounterMask;
    PCUNICODE_STRING InstanceMask;
} PCW_COUNTER_INFORMATION, *PPCW_COUNTER_INFORMATION;

typedef struct _PCW_MASK_INFORMATION {
    ULONG64 CounterMask;
    PCUNICODE_STRING InstanceMask;
    ULONG InstanceId;
    BOOLEAN CollectMultiple;
    PPCW_BUFFER Buffer;
    PKEVENT CancelEvent;
} PCW_MASK_INFORMATION, *PPCW_MASK_INFORMATION;

typedef union _PCW_CALLBACK_INFORMATION {
    PCW_COUNTER_INFORMATION AddCounter;
    PCW_COUNTER_INFORMATION RemoveCounter;
    PCW_MASK_INFORMATION EnumerateInstances;
    PCW_MASK_INFORMATION CollectData;
} PCW_CALLBACK_INFORMATION, *PPCW_CALLBACK_INFORMATION;

typedef enum _PCW_CALLBACK_TYPE {
    PcwCallbackAddCounter = 0,
    PcwCallbackRemoveCounter,
    PcwCallbackEnumerateInstances,
    PcwCallbackCollectData,
} PCW_CALLBACK_TYPE, *PPCW_CALLBACK_TYPE;

typedef
NTSTATUS __stdcall
PCW_CALLBACK(
      PCW_CALLBACK_TYPE Type,
      PPCW_CALLBACK_INFORMATION Info,
      PVOID Context
    );

typedef PCW_CALLBACK *PPCW_CALLBACK;

typedef struct _PCW_REGISTRATION_INFORMATION {
      ULONG Version;
      PCUNICODE_STRING Name;
      ULONG CounterCount;
      PPCW_COUNTER_DESCRIPTOR Counters;
      PPCW_CALLBACK Callback;
      PVOID CallbackContext;
} PCW_REGISTRATION_INFORMATION, *PPCW_REGISTRATION_INFORMATION;


 
NTSTATUS
__stdcall
PcwRegister(
     PPCW_REGISTRATION *Registration,
      PPCW_REGISTRATION_INFORMATION Info
    );
#line 41190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
void
__stdcall
PcwUnregister(
      PPCW_REGISTRATION Registration
    );
#line 41199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
NTSTATUS
__stdcall
PcwCreateInstance(
     PPCW_INSTANCE *Instance,
      PPCW_REGISTRATION Registration,
      PCUNICODE_STRING Name,
      ULONG Count,
      PPCW_DATA Data
    );
#line 41212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
void
__stdcall
PcwCloseInstance(
      PPCW_INSTANCE Instance
    );
#line 41221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"


 
NTSTATUS
__stdcall
PcwAddInstance(
      PPCW_BUFFER Buffer,
      PCUNICODE_STRING Name,
      ULONG Id,
      ULONG Count,
      PPCW_DATA Data
    );
#line 41234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"









































#line 41276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"







typedef enum _DRIVER_RUNTIME_INIT_FLAGS {
    
    
    
    
    
    
    

    DrvRtPoolNxOptIn             = 0x00000001,

    LastDrvRtFlag
} DRIVER_RUNTIME_INIT_FLAGS, * PDRIVER_RUNTIME_INIT_FLAGS;

typedef const enum _DRIVER_RUNTIME_INIT_FLAGS * PCDRIVER_RUNTIME_INIT_FLAGS;

__forceinline
void
ExInitializeDriverRuntime(
      ULONG RuntimeFlags
    )

{


































#line 41341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
    (RuntimeFlags);
#line 41343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"
}



extern POBJECT_TYPE *CmKeyObjectType;
extern POBJECT_TYPE *IoFileObjectType;
extern POBJECT_TYPE *ExEventObjectType;
extern POBJECT_TYPE *ExSemaphoreObjectType;
extern POBJECT_TYPE *TmTransactionManagerObjectType;
extern POBJECT_TYPE *TmResourceManagerObjectType;
extern POBJECT_TYPE *TmEnlistmentObjectType;
extern POBJECT_TYPE *TmTransactionObjectType;
extern POBJECT_TYPE *PsProcessType;
extern POBJECT_TYPE *PsThreadType;
extern POBJECT_TYPE *PsJobType;
extern POBJECT_TYPE *SeTokenObjectType;

extern POBJECT_TYPE *ExDesktopObjectType;
#line 41362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"






#pragma warning(pop)




#line 41374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 41376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\wdm.h"

#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"















typedef struct _BUS_HANDLER *PBUS_HANDLER;
typedef struct _CALLBACK_OBJECT *PCALLBACK_OBJECT;
typedef struct _DEVICE_HANDLER_OBJECT *PDEVICE_HANDLER_OBJECT;




#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
typedef struct _KPROCESS *PEPROCESS;
typedef struct _KTHREAD *PETHREAD;



#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
typedef struct _EJOB *PEJOB;



#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
typedef struct _IO_TIMER *PIO_TIMER;
typedef struct _KINTERRUPT *PKINTERRUPT;
typedef struct _KTHREAD *PKTHREAD, *PRKTHREAD;
typedef struct _OBJECT_TYPE *POBJECT_TYPE;
typedef struct _PEB *PPEB;
typedef struct _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;

typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;


#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





extern __declspec(dllimport) volatile CCHAR KeNumberProcessors;


#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

extern POBJECT_TYPE *PsProcessType;
extern POBJECT_TYPE *PsThreadType;
extern POBJECT_TYPE *PsJobType;



#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


















































































































































































































































































































































































































#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









































typedef struct __declspec(align(16)) _CONTEXT {

    
    
    
    
    
    

    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5Home;
    ULONG64 P6Home;

    
    
    

    ULONG ContextFlags;
    ULONG MxCsr;

    
    
    

    USHORT SegCs;
    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;
    USHORT SegSs;
    ULONG EFlags;

    
    
    

    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;

    
    
    

    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 Rbx;
    ULONG64 Rsp;
    ULONG64 Rbp;
    ULONG64 Rsi;
    ULONG64 Rdi;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;

    
    
    

    ULONG64 Rip;

    
    
    

    union {
        XMM_SAVE_AREA32 FltSave;
        struct {
            M128A Header[2];
            M128A Legacy[8];
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        } ;
    } ;

    
    
    

    M128A VectorRegister[26];
    ULONG64 VectorControl;

    
    
    

    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT;




#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




















































































































































































































































#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



































#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











































typedef union _ARM64_NT_NEON128 {
    struct {
        ULONGLONG Low;
        LONGLONG High;
    } ;
    double D[2];
    float S[4];
    USHORT H[8];
    UCHAR B[16];
} ARM64_NT_NEON128, *PARM64_NT_NEON128;





#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct __declspec(align(16)) _ARM64_NT_CONTEXT {

    
    
    

     ULONG ContextFlags;

    
    
    

     ULONG Cpsr;       
     union {
                    struct {
                        ULONG64 X0;
                        ULONG64 X1;
                        ULONG64 X2;
                        ULONG64 X3;
                        ULONG64 X4;
                        ULONG64 X5;
                        ULONG64 X6;
                        ULONG64 X7;
                        ULONG64 X8;
                        ULONG64 X9;
                        ULONG64 X10;
                        ULONG64 X11;
                        ULONG64 X12;
                        ULONG64 X13;
                        ULONG64 X14;
                        ULONG64 X15;
                        ULONG64 X16;
                        ULONG64 X17;
                        ULONG64 X18;
                        ULONG64 X19;
                        ULONG64 X20;
                        ULONG64 X21;
                        ULONG64 X22;
                        ULONG64 X23;
                        ULONG64 X24;
                        ULONG64 X25;
                        ULONG64 X26;
                        ULONG64 X27;
                        ULONG64 X28;
                    } ;
                    ULONG64 X[29];
                 } ;
     ULONG64 Fp;
     ULONG64 Lr;
     ULONG64 Sp;
     ULONG64 Pc;

    
    
    

     ARM64_NT_NEON128 V[32];
     ULONG Fpcr;
     ULONG Fpsr;

    
    
    

     ULONG Bcr[8];
     ULONG64 Bvr[8];
     ULONG Wcr[2];
     ULONG64 Wvr[2];
    

} ARM64_NT_CONTEXT, *PARM64_NT_CONTEXT;











#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









typedef enum {

    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,
    WinBuiltinIUsersSid                         = 62,
    WinIUserSid                                 = 63,
    WinBuiltinCryptoOperatorsSid                = 64,
    WinUntrustedLabelSid                        = 65,
    WinLowLabelSid                              = 66,
    WinMediumLabelSid                           = 67,
    WinHighLabelSid                             = 68,
    WinSystemLabelSid                           = 69,
    WinWriteRestrictedCodeSid                   = 70,
    WinCreatorOwnerRightsSid                    = 71,
    WinCacheablePrincipalsGroupSid              = 72,
    WinNonCacheablePrincipalsGroupSid           = 73,
    WinEnterpriseReadonlyControllersSid         = 74,
    WinAccountReadonlyControllersSid            = 75,
    WinBuiltinEventLogReadersGroup              = 76,
    WinNewEnterpriseReadonlyControllersSid      = 77,
    WinBuiltinCertSvcDComAccessGroup            = 78,
    WinMediumPlusLabelSid                       = 79,
    WinLocalLogonSid                            = 80,
    WinConsoleLogonSid                          = 81,
    WinThisOrganizationCertificateSid           = 82,
    WinApplicationPackageAuthoritySid           = 83,
    WinBuiltinAnyPackageSid                     = 84,
    WinCapabilityInternetClientSid              = 85,
    WinCapabilityInternetClientServerSid        = 86,
    WinCapabilityPrivateNetworkClientServerSid  = 87,
    WinCapabilityPicturesLibrarySid             = 88,
    WinCapabilityVideosLibrarySid               = 89,
    WinCapabilityMusicLibrarySid                = 90,
    WinCapabilityDocumentsLibrarySid            = 91,
    WinCapabilitySharedUserCertificatesSid      = 92,
    WinCapabilityEnterpriseAuthenticationSid    = 93,
    WinCapabilityRemovableStorageSid            = 94,
    WinBuiltinRDSRemoteAccessServersSid         = 95,
    WinBuiltinRDSEndpointServersSid             = 96,
    WinBuiltinRDSManagementServersSid           = 97,
    WinUserModeDriversSid                       = 98,
    WinBuiltinHyperVAdminsSid                   = 99,
    WinAccountCloneableControllersSid           = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid          = 102,
    WinAuthenticationAuthorityAssertedSid       = 103,
    WinAuthenticationServiceAssertedSid         = 104,
    WinLocalAccountSid                          = 105,
    WinLocalAccountAndAdministratorSid          = 106,
    WinAccountProtectedUsersSid                 = 107,
    WinCapabilityAppointmentsSid                = 108,
    WinCapabilityContactsSid                    = 109,
    WinAccountDefaultSystemManagedSid           = 110,
    WinBuiltinDefaultSystemManagedGroupSid      = 111,
    WinBuiltinStorageReplicaAdminsSid           = 112,
    WinAccountKeyAdminsSid                      = 113,
    WinAccountEnterpriseKeyAdminsSid            = 114,
    WinAuthenticationKeyTrustSid                = 115,
    WinAuthenticationKeyPropertyMFASid          = 116,
    WinAuthenticationKeyPropertyAttestationSid  = 117,
    WinAuthenticationFreshKeyAuthSid            = 118,
} WELL_KNOWN_SID_TYPE;












typedef UCHAR SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;























typedef enum _SE_IMAGE_SIGNATURE_TYPE
{
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded,
    SeImageSignatureCache,
    SeImageSignatureCatalogCached,
    SeImageSignatureCatalogNotCached,
    SeImageSignatureCatalogHint,
    SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE, *PSE_IMAGE_SIGNATURE_TYPE;



















































































































































































































































































































































































































































































































































































































#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


























typedef union _RTL_RUN_ONCE {       
    PVOID Ptr;                      
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;     

typedef
 
 
ULONG 
__stdcall
RTL_RUN_ONCE_INIT_FN (
      PRTL_RUN_ONCE RunOnce,
      PVOID Parameter,
      PVOID *Context
    );
typedef RTL_RUN_ONCE_INIT_FN *PRTL_RUN_ONCE_INIT_FN;



#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





 
__declspec(dllimport)
void
__stdcall
RtlRunOnceInitialize (
      PRTL_RUN_ONCE RunOnce
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlRunOnceExecuteOnce (
      PRTL_RUN_ONCE RunOnce,
       PRTL_RUN_ONCE_INIT_FN InitFn,
      PVOID Parameter,
     PVOID *Context
    );

 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlRunOnceBeginInitialize (
      PRTL_RUN_ONCE RunOnce,
      ULONG Flags,
     PVOID *Context
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlRunOnceComplete (
      PRTL_RUN_ONCE RunOnce,
      ULONG Flags,
      PVOID Context
    );

#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










typedef enum _TABLE_SEARCH_RESULT{
    TableEmptyTree,
    TableFoundNode,
    TableInsertAsLeft,
    TableInsertAsRight
} TABLE_SEARCH_RESULT;





typedef enum _RTL_GENERIC_COMPARE_RESULTS {
    GenericLessThan,
    GenericGreaterThan,
    GenericEqual
} RTL_GENERIC_COMPARE_RESULTS;




















struct _RTL_AVL_TABLE;







typedef
 
 
RTL_GENERIC_COMPARE_RESULTS
__stdcall
RTL_AVL_COMPARE_ROUTINE (
      struct _RTL_AVL_TABLE *Table,
      PVOID FirstStruct,
      PVOID SecondStruct
    );
typedef RTL_AVL_COMPARE_ROUTINE *PRTL_AVL_COMPARE_ROUTINE;






typedef
 
 
 
PVOID
__stdcall
RTL_AVL_ALLOCATE_ROUTINE (
      struct _RTL_AVL_TABLE *Table,
      CLONG ByteSize
    );
typedef RTL_AVL_ALLOCATE_ROUTINE *PRTL_AVL_ALLOCATE_ROUTINE;







typedef
 
 
void
__stdcall
RTL_AVL_FREE_ROUTINE (
      struct _RTL_AVL_TABLE *Table,
          PVOID Buffer
    );
typedef RTL_AVL_FREE_ROUTINE *PRTL_AVL_FREE_ROUTINE;















typedef
 
 
NTSTATUS
__stdcall
RTL_AVL_MATCH_FUNCTION (
      struct _RTL_AVL_TABLE *Table,
      PVOID UserData,
      PVOID MatchData
    );
typedef RTL_AVL_MATCH_FUNCTION *PRTL_AVL_MATCH_FUNCTION;



















typedef struct _RTL_BALANCED_LINKS {
    struct _RTL_BALANCED_LINKS *Parent;
    struct _RTL_BALANCED_LINKS *LeftChild;
    struct _RTL_BALANCED_LINKS *RightChild;
    CHAR Balance;
    UCHAR Reserved[3];
} RTL_BALANCED_LINKS;
typedef RTL_BALANCED_LINKS *PRTL_BALANCED_LINKS;









typedef struct _RTL_AVL_TABLE {
    RTL_BALANCED_LINKS BalancedRoot;
    PVOID OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    ULONG DepthOfTree;
    PRTL_BALANCED_LINKS RestartKey;
    ULONG DeleteCount;
    PRTL_AVL_COMPARE_ROUTINE CompareRoutine;
    PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine;
    PRTL_AVL_FREE_ROUTINE FreeRoutine;
    PVOID TableContext;
} RTL_AVL_TABLE;
typedef RTL_AVL_TABLE *PRTL_AVL_TABLE;









__declspec(dllimport)
void
__stdcall
RtlInitializeGenericTableAvl (
      PRTL_AVL_TABLE Table,
      PRTL_AVL_COMPARE_ROUTINE CompareRoutine,
      PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine,
      PRTL_AVL_FREE_ROUTINE FreeRoutine,
      PVOID TableContext
    );
#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"















__declspec(dllimport)
PVOID
__stdcall
RtlInsertElementGenericTableAvl (
      PRTL_AVL_TABLE Table,
      PVOID Buffer,
      CLONG BufferSize,
      PBOOLEAN NewElement
    );
#line 2231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

















__declspec(dllimport)
PVOID
__stdcall
RtlInsertElementGenericTableFullAvl (
      PRTL_AVL_TABLE Table,
      PVOID Buffer,
      CLONG BufferSize,
      PBOOLEAN NewElement,
      PVOID NodeOrParent,
      TABLE_SEARCH_RESULT SearchResult
    );
#line 2260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










__declspec(dllimport)
BOOLEAN
__stdcall
RtlDeleteElementGenericTableAvl (
      PRTL_AVL_TABLE Table,
      PVOID Buffer
    );
#line 2278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"















#line 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











 
__declspec(dllimport)
PVOID
__stdcall
RtlLookupElementGenericTableAvl (
      PRTL_AVL_TABLE Table,
      PVOID Buffer
    );
#line 2314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"












__declspec(dllimport)
PVOID
__stdcall
RtlLookupElementGenericTableFullAvl (
      PRTL_AVL_TABLE Table,
      PVOID Buffer,
      PVOID *NodeOrParent,
      TABLE_SEARCH_RESULT *SearchResult
    );
#line 2336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"























 
__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTableAvl (
      PRTL_AVL_TABLE Table,
      BOOLEAN Restart
    );
#line 2368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




























 
__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTableWithoutSplayingAvl (
      PRTL_AVL_TABLE Table,
      PVOID *RestartKey
    );
#line 2405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











 
__declspec(dllimport)
PVOID
__stdcall
RtlLookupFirstMatchingElementGenericTableAvl (
      PRTL_AVL_TABLE Table,
      PVOID Buffer,
      PVOID *RestartKey
    );
#line 2426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


































 
__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTableLikeADirectory (
      PRTL_AVL_TABLE Table,
      PRTL_AVL_MATCH_FUNCTION MatchFunction,
      PVOID MatchData,
      ULONG NextFlag,
      PVOID *RestartKey,
      PULONG DeleteCount,
      PVOID Buffer
    );
#line 2474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











 
__declspec(dllimport)
PVOID
__stdcall
RtlGetElementGenericTableAvl (
      PRTL_AVL_TABLE Table,
      ULONG I
    );
#line 2494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







__declspec(dllimport)
ULONG
__stdcall
RtlNumberGenericTableElementsAvl (
      PRTL_AVL_TABLE Table
    );
#line 2508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlIsGenericTableEmptyAvl (
      PRTL_AVL_TABLE Table
    );
#line 2527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



















































 






typedef struct _RTL_SPLAY_LINKS {
    struct _RTL_SPLAY_LINKS *Parent;
    struct _RTL_SPLAY_LINKS *LeftChild;
    struct _RTL_SPLAY_LINKS *RightChild;
} RTL_SPLAY_LINKS;
typedef RTL_SPLAY_LINKS *PRTL_SPLAY_LINKS;




__forceinline
void
RtlInitializeSplayLinks (
      PRTL_SPLAY_LINKS Links
    )








{
    Links->Parent = Links;
    Links->LeftChild = ((void *)0);
    Links->RightChild = ((void *)0);
}

#line 2615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
































































































__forceinline
void
RtlInsertAsLeftChild (
      PRTL_SPLAY_LINKS ParentLinks,
      PRTL_SPLAY_LINKS ChildLinks
    )









{
    ParentLinks->LeftChild = ChildLinks;
    ChildLinks->Parent = ParentLinks;
}

__forceinline
void
RtlInsertAsRightChild (
      PRTL_SPLAY_LINKS ParentLinks,
      PRTL_SPLAY_LINKS ChildLinks
    )









{
    ParentLinks->RightChild = ChildLinks;
    ChildLinks->Parent = ParentLinks;
}

#line 2752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlSplay (
      PRTL_SPLAY_LINKS Links
    );
#line 2768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlDelete (
      PRTL_SPLAY_LINKS Links
    );
#line 2785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











__declspec(dllimport)
void
__stdcall
RtlDeleteNoSplay (
      PRTL_SPLAY_LINKS Links,
      PRTL_SPLAY_LINKS *Root
    );
#line 2804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









 
__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlSubtreeSuccessor (
      PRTL_SPLAY_LINKS Links
    );
#line 2821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









 
__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlSubtreePredecessor (
      PRTL_SPLAY_LINKS Links
    );
#line 2838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








 
__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlRealSuccessor (
      PRTL_SPLAY_LINKS Links
    );
#line 2854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









 
__declspec(dllimport)
PRTL_SPLAY_LINKS
__stdcall
RtlRealPredecessor (
      PRTL_SPLAY_LINKS Links
    );
#line 2871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

 

























struct _RTL_GENERIC_TABLE;







typedef
 
 
RTL_GENERIC_COMPARE_RESULTS
__stdcall
RTL_GENERIC_COMPARE_ROUTINE (
      struct _RTL_GENERIC_TABLE *Table,
      PVOID FirstStruct,
      PVOID SecondStruct
    );
typedef RTL_GENERIC_COMPARE_ROUTINE *PRTL_GENERIC_COMPARE_ROUTINE;






typedef
 
 
 
PVOID
__stdcall
RTL_GENERIC_ALLOCATE_ROUTINE (
      struct _RTL_GENERIC_TABLE *Table,
      CLONG ByteSize
    );
typedef RTL_GENERIC_ALLOCATE_ROUTINE *PRTL_GENERIC_ALLOCATE_ROUTINE;







typedef
 
 
void
__stdcall
RTL_GENERIC_FREE_ROUTINE (
      struct _RTL_GENERIC_TABLE *Table,
          PVOID Buffer
    );
typedef RTL_GENERIC_FREE_ROUTINE *PRTL_GENERIC_FREE_ROUTINE;








typedef struct _RTL_GENERIC_TABLE {
    PRTL_SPLAY_LINKS TableRoot;
    LIST_ENTRY InsertOrderList;
    PLIST_ENTRY OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine;
    PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine;
    PRTL_GENERIC_FREE_ROUTINE FreeRoutine;
    PVOID TableContext;
} RTL_GENERIC_TABLE;
typedef RTL_GENERIC_TABLE *PRTL_GENERIC_TABLE;









__declspec(dllimport)
void
__stdcall
RtlInitializeGenericTable (
      PRTL_GENERIC_TABLE Table,
      PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine,
      PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine,
      PRTL_GENERIC_FREE_ROUTINE FreeRoutine,
      PVOID TableContext
    );
#line 2991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"















__declspec(dllimport)
PVOID
__stdcall
RtlInsertElementGenericTable (
      PRTL_GENERIC_TABLE Table,
      PVOID Buffer,
      CLONG BufferSize,
      PBOOLEAN NewElement
    );
#line 3016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

















__declspec(dllimport)
PVOID
__stdcall
RtlInsertElementGenericTableFull (
      PRTL_GENERIC_TABLE Table,
      PVOID Buffer,
      CLONG BufferSize,
      PBOOLEAN NewElement,
      PVOID NodeOrParent,
      TABLE_SEARCH_RESULT SearchResult
    );
#line 3045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










__declspec(dllimport)
BOOLEAN
__stdcall
RtlDeleteElementGenericTable (
      PRTL_GENERIC_TABLE Table,
      PVOID Buffer
    );
#line 3063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










 
__declspec(dllimport)
PVOID
__stdcall
RtlLookupElementGenericTable (
      PRTL_GENERIC_TABLE Table,
      PVOID Buffer
    );
#line 3082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"












__declspec(dllimport)
PVOID
__stdcall
RtlLookupElementGenericTableFull (
      PRTL_GENERIC_TABLE Table,
      PVOID Buffer,
      PVOID *NodeOrParent,
      TABLE_SEARCH_RESULT *SearchResult
    );
#line 3104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

























 
__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTable (
      PRTL_GENERIC_TABLE Table,
      BOOLEAN Restart
    );
#line 3138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



























 
__declspec(dllimport)
PVOID
__stdcall
RtlEnumerateGenericTableWithoutSplaying (
      PRTL_GENERIC_TABLE Table,
      PVOID *RestartKey
    );
#line 3174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











 
__declspec(dllimport)
PVOID
__stdcall
RtlGetElementGenericTable(
      PRTL_GENERIC_TABLE Table,
      ULONG I
    );
#line 3194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







__declspec(dllimport)
ULONG
__stdcall
RtlNumberGenericTableElements(
      PRTL_GENERIC_TABLE Table
    );
#line 3208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlIsGenericTableEmpty (
      PRTL_GENERIC_TABLE Table
    );
#line 3224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

#line 3226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


















typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
    LIST_ENTRY Linkage;
    ULONG_PTR Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY;





























typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
    PLIST_ENTRY ChainHead;
    PLIST_ENTRY PrevLinkage;
    ULONG_PTR Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT;

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
    union {
       RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
       PLIST_ENTRY CurEntry;
    };
    PLIST_ENTRY ChainHead;
    ULONG BucketIndex;
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;

typedef struct _RTL_DYNAMIC_HASH_TABLE {

    
    ULONG Flags;
    ULONG Shift;

    
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;

    
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;

    
    PVOID Directory;

} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE;








__forceinline
void
RtlInitHashTableContext(
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
    )
{
    Context->ChainHead = ((void *)0);
    Context->PrevLinkage = ((void *)0);
}
#line 3330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
void
RtlInitHashTableContextFromEnumerator(
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    )
{
    Context->ChainHead = Enumerator->ChainHead;
    Context->PrevLinkage = Enumerator->HashEntry.Linkage.Blink;
}
#line 3343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
void
RtlReleaseHashTableContext(
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
    )
{
    (Context);
    return;
}
#line 3355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
ULONG
RtlTotalBucketsHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    )
{
    return HashTable->TableSize;
}
#line 3366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
ULONG
RtlNonEmptyBucketsHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    )
{
    return HashTable->NonEmptyBuckets;
}
#line 3377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
ULONG
RtlEmptyBucketsHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    )
{
    return HashTable->TableSize - HashTable->NonEmptyBuckets;
}
#line 3388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
ULONG
RtlTotalEntriesHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    )
{
    return HashTable->NumEntries;
}
#line 3399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__forceinline
ULONG
RtlActiveEnumeratorsHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    )
{
    return HashTable->NumEnumerators;
}
#line 3410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

#line 3412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlCreateHashTable(
      
        PRTL_DYNAMIC_HASH_TABLE *HashTable,
      ULONG Shift,
      ULONG Flags
    );
#line 3434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"














#line 3449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
void
__stdcall
RtlDeleteHashTable(
      
        PRTL_DYNAMIC_HASH_TABLE HashTable
    );
#line 3459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
__stdcall
RtlInsertEntryHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
        PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry,
      ULONG_PTR Signature,
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
    );
#line 3471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
__stdcall
RtlRemoveEntryHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry,
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
    );
#line 3482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlLookupEntryHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      ULONG_PTR Signature,
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
    );
#line 3494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlGetNextEntryHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
    );
#line 3505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
__stdcall
RtlInitEnumerationHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    );
#line 3515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlEnumerateEntryHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    );
#line 3526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
void
__stdcall
RtlEndEnumerationHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    );
#line 3536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
__stdcall
RtlInitWeakEnumerationHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    );
#line 3546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlWeaklyEnumerateEntryHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    );
#line 3557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
void
__stdcall
RtlEndWeakEnumerationHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable,
      PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
    );
#line 3567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 3577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










#line 3588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 3598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
BOOLEAN
__stdcall
RtlExpandHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    );
#line 3608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
__stdcall
RtlContractHashTable(
      PRTL_DYNAMIC_HASH_TABLE HashTable
    );
#line 3617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






PVOID
_ReturnAddress (
    void
    );

#pragma intrinsic(_ReturnAddress)

#line 3631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





















#line 3653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











__declspec(dllimport)
ULONG
__stdcall
RtlWalkFrameChain (
      PVOID *Callers,
      ULONG Count,
      ULONG Flags
    );
#line 3673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
__declspec(dllimport)
ULONG64
__stdcall
RtlGetEnabledExtendedFeatures(
      ULONG64 FeatureMask
    );
#line 3685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
#line 3686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCharToInteger (
      PCSZ String,
      ULONG Base,
      PULONG Value
    );
#line 3698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
void
__stdcall
RtlCopyString(
      PSTRING DestinationString,
      const STRING * SourceString
    );
#line 3709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
CHAR
__stdcall
RtlUpperChar (
      CHAR Character
    );
#line 3719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
 
__declspec(dllimport)
LONG
__stdcall
RtlCompareString(
      const STRING * String1,
      const STRING * String2,
      BOOLEAN CaseInSensitive
    );
#line 3734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualString(
      const STRING * String1,
      const STRING * String2,
      BOOLEAN CaseInSensitive
    );
#line 3747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
__declspec(dllimport)
void
__stdcall
RtlUpperString(
      PSTRING DestinationString,
      const STRING * SourceString
    );
#line 3760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlPrefixUnicodeString(
      PCUNICODE_STRING String1,
      PCUNICODE_STRING String2,
      BOOLEAN CaseInSensitive
    );
#line 3773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlSuffixUnicodeString(
      PCUNICODE_STRING String1,
      PCUNICODE_STRING String2,
      BOOLEAN CaseInSensitive
    );
#line 3786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeString(
    
    
        PUNICODE_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 3801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







__declspec(deprecated)         
 
__inline
LARGE_INTEGER
__stdcall
RtlLargeIntegerDivide (
      LARGE_INTEGER Dividend,
      LARGE_INTEGER Divisor,
      PLARGE_INTEGER Remainder
    )
{
    LARGE_INTEGER Quotient;

    Quotient.QuadPart = Dividend.QuadPart / Divisor.QuadPart;
    if (( (CHAR *)((ULONG_PTR)(Remainder)) != (CHAR *)(((void *)0)) )) {
        Remainder->QuadPart = Dividend.QuadPart % Divisor.QuadPart;
    }

    return Quotient;
}



















#line 3848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
#line 3849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
























__forceinline
LUID
__stdcall
RtlConvertLongToLuid(
      LONG Long
    )
{
    LUID TempLuid;
    LARGE_INTEGER TempLi;

    TempLi.QuadPart = Long;
    TempLuid.LowPart = TempLi.u.LowPart;
    TempLuid.HighPart = TempLi.u.HighPart;
    return(TempLuid);
}

__forceinline
LUID
__stdcall
RtlConvertUlongToLuid(
      ULONG Ulong
    )
{
    LUID TempLuid;

    TempLuid.LowPart = Ulong;
    TempLuid.HighPart = 0;
    return(TempLuid);
}
#line 3903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
__stdcall
RtlMapGenericMask(
      PACCESS_MASK AccessMask,
      PGENERIC_MAPPING GenericMapping
    );
#line 3915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







#line 3924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlVolumeDeviceToDosName(
      PVOID VolumeDeviceObject,
      PUNICODE_STRING DosName
    );
#line 3933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
ULONG
__stdcall
DbgPrompt (
      PCCH Prompt,
      PCH Response,
      ULONG Length
    );





__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
       ULONG  OSMajorVersion,
       ULONG  OSMinorVersion,
       ULONG  SpMajorVersion,
       ULONG  SpMinorVersion,
      PULONG ReturnedProductType
    );

#line 3961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"














#line 3976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 3986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 3995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 4004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










#line 4015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










#line 4026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 4036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 4046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





















































































#line 4132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











































































































































































#line 4304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
















typedef struct _FILE_ALIGNMENT_INFORMATION {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFORMATION, *PFILE_ALIGNMENT_INFORMATION;





typedef struct _FILE_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;

typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION {
    ULONG FileAttributes;
    ULONG ReparseTag;
} FILE_ATTRIBUTE_TAG_INFORMATION, *PFILE_ATTRIBUTE_TAG_INFORMATION;

typedef struct _FILE_DISPOSITION_INFORMATION {
    BOOLEAN DeleteFile;
} FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION;








typedef struct _FILE_DISPOSITION_INFORMATION_EX {
    ULONG Flags;
} FILE_DISPOSITION_INFORMATION_EX, *PFILE_DISPOSITION_INFORMATION_EX;
#line 4353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _FILE_END_OF_FILE_INFORMATION {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION;

typedef struct _FILE_VALID_DATA_LENGTH_INFORMATION {
    LARGE_INTEGER ValidDataLength;
} FILE_VALID_DATA_LENGTH_INFORMATION, *PFILE_VALID_DATA_LENGTH_INFORMATION;

















typedef struct _FILE_FS_LABEL_INFORMATION {
    ULONG VolumeLabelLength;
    WCHAR VolumeLabel[1];
} FILE_FS_LABEL_INFORMATION, *PFILE_FS_LABEL_INFORMATION;

typedef struct _FILE_FS_VOLUME_INFORMATION {
    LARGE_INTEGER VolumeCreationTime;
    ULONG VolumeSerialNumber;
    ULONG VolumeLabelLength;
    BOOLEAN SupportsObjects;
    WCHAR VolumeLabel[1];
} FILE_FS_VOLUME_INFORMATION, *PFILE_FS_VOLUME_INFORMATION;

typedef struct _FILE_FS_SIZE_INFORMATION {
    LARGE_INTEGER TotalAllocationUnits;
    LARGE_INTEGER AvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
} FILE_FS_SIZE_INFORMATION, *PFILE_FS_SIZE_INFORMATION;

typedef struct _FILE_FS_FULL_SIZE_INFORMATION {
    LARGE_INTEGER TotalAllocationUnits;
    LARGE_INTEGER CallerAvailableAllocationUnits;
    LARGE_INTEGER ActualAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
} FILE_FS_FULL_SIZE_INFORMATION, *PFILE_FS_FULL_SIZE_INFORMATION;







#line 4413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





























































typedef struct _FILE_FS_SECTOR_SIZE_INFORMATION {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_FS_SECTOR_SIZE_INFORMATION, *PFILE_FS_SECTOR_SIZE_INFORMATION;

typedef struct _FILE_FS_OBJECTID_INFORMATION {
    UCHAR ObjectId[16];
    UCHAR ExtendedInfo[48];
} FILE_FS_OBJECTID_INFORMATION, *PFILE_FS_OBJECTID_INFORMATION;














typedef enum _BUS_DATA_TYPE {
    ConfigurationSpaceUndefined = -1,
    Cmos,
    EisaConfiguration,
    Pos,
    CbusConfiguration,
    PCIConfiguration,
    VMEConfiguration,
    NuBusConfiguration,
    PCMCIAConfiguration,
    MPIConfiguration,
    MPSAConfiguration,
    PNPISAConfiguration,
    SgiInternalConfiguration,
    MaximumBusDataType
} BUS_DATA_TYPE, *PBUS_DATA_TYPE;

typedef struct _KEY_NAME_INFORMATION {
    ULONG   NameLength;
    WCHAR   Name[1];            
} KEY_NAME_INFORMATION, *PKEY_NAME_INFORMATION;

typedef struct _KEY_CACHED_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG   TitleIndex;
    ULONG   SubKeys;
    ULONG   MaxNameLen;
    ULONG   Values;
    ULONG   MaxValueNameLen;
    ULONG   MaxValueDataLen;
    ULONG   NameLength;
} KEY_CACHED_INFORMATION, *PKEY_CACHED_INFORMATION;

typedef struct _KEY_VIRTUALIZATION_INFORMATION {
    ULONG   VirtualizationCandidate : 1; 
    ULONG   VirtualizationEnabled   : 1; 
    ULONG   VirtualTarget           : 1; 
    ULONG   VirtualStore            : 1; 
    ULONG   VirtualSource           : 1; 
    ULONG   Reserved                : 27;
} KEY_VIRTUALIZATION_INFORMATION, *PKEY_VIRTUALIZATION_INFORMATION;

typedef struct _KEY_LAYER_INFORMATION {
    ULONG   IsTombstone      : 1;
    ULONG   IsSupersedeLocal : 1;
    ULONG   IsSupersedeTree  : 1;
    ULONG   ClassIsInherited : 1;
    ULONG   Reserved         : 28;
} KEY_LAYER_INFORMATION, *PKEY_LAYER_INFORMATION;
















typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        ULONG Version;
    };


#line 4587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    ULONG ExceptionList;
    ULONG StackBase;
    ULONG StackLimit;
    ULONG SubSystemTib;


    union {
        ULONG FiberData;
        ULONG Version;
    };


#line 4609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

    ULONG ArbitraryUserPointer;
    ULONG Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    ULONG64 ExceptionList;
    ULONG64 StackBase;
    ULONG64 StackLimit;
    ULONG64 SubSystemTib;


    union {
        ULONG64 FiberData;
        ULONG Version;
    };



#line 4629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

    ULONG64 ArbitraryUserPointer;
    ULONG64 Self;
} NT_TIB64, *PNT_TIB64;





typedef enum _PROCESSINFOCLASS {
    ProcessBasicInformation                      = 0,
    ProcessQuotaLimits                           = 1,
    ProcessIoCounters                            = 2,
    ProcessVmCounters                            = 3,
    ProcessTimes                                 = 4,
    ProcessBasePriority                          = 5,
    ProcessRaisePriority                         = 6,
    ProcessDebugPort                             = 7,
    ProcessExceptionPort                         = 8,
    ProcessAccessToken                           = 9,
    ProcessLdtInformation                        = 10,
    ProcessLdtSize                               = 11,
    ProcessDefaultHardErrorMode                  = 12,
    ProcessIoPortHandlers                        = 13,   
    ProcessPooledUsageAndLimits                  = 14,
    ProcessWorkingSetWatch                       = 15,
    ProcessUserModeIOPL                          = 16,
    ProcessEnableAlignmentFaultFixup             = 17,
    ProcessPriorityClass                         = 18,
    ProcessWx86Information                       = 19,
    ProcessHandleCount                           = 20,
    ProcessAffinityMask                          = 21,
    ProcessPriorityBoost                         = 22,
    ProcessDeviceMap                             = 23,
    ProcessSessionInformation                    = 24,
    ProcessForegroundInformation                 = 25,
    ProcessWow64Information                      = 26,
    ProcessImageFileName                         = 27,
    ProcessLUIDDeviceMapsEnabled                 = 28,
    ProcessBreakOnTermination                    = 29,
    ProcessDebugObjectHandle                     = 30,
    ProcessDebugFlags                            = 31,
    ProcessHandleTracing                         = 32,
    ProcessIoPriority                            = 33,
    ProcessExecuteFlags                          = 34,
    ProcessTlsInformation                        = 35,
    ProcessCookie                                = 36,
    ProcessImageInformation                      = 37,
    ProcessCycleTime                             = 38,
    ProcessPagePriority                          = 39,
    ProcessInstrumentationCallback               = 40,
    ProcessThreadStackAllocation                 = 41,
    ProcessWorkingSetWatchEx                     = 42,
    ProcessImageFileNameWin32                    = 43,
    ProcessImageFileMapping                      = 44,
    ProcessAffinityUpdateMode                    = 45,
    ProcessMemoryAllocationMode                  = 46,
    ProcessGroupInformation                      = 47,
    ProcessTokenVirtualizationEnabled            = 48,
    ProcessOwnerInformation                      = 49,
    ProcessWindowInformation                     = 50,
    ProcessHandleInformation                     = 51,
    ProcessMitigationPolicy                      = 52,
    ProcessDynamicFunctionTableInformation       = 53,
    ProcessHandleCheckingMode                    = 54,
    ProcessKeepAliveCount                        = 55,
    ProcessRevokeFileHandles                     = 56,
    ProcessWorkingSetControl                     = 57,
    ProcessHandleTable                           = 58,
    ProcessCheckStackExtentsMode                 = 59,
    ProcessCommandLineInformation                = 60,
    ProcessProtectionInformation                 = 61,
    ProcessMemoryExhaustion                      = 62,
    ProcessFaultInformation                      = 63,
    ProcessTelemetryIdInformation                = 64,
    ProcessCommitReleaseInformation              = 65,
    ProcessReserved1Information                  = 66,
    ProcessReserved2Information                  = 67,
    ProcessSubsystemProcess                      = 68,
    ProcessInPrivate                             = 70,
    ProcessRaiseUMExceptionOnInvalidHandleClose  = 71,
    ProcessSubsystemInformation                  = 75,
    ProcessWin32kSyscallFilterInformation        = 79,
    ProcessEnergyTrackingState                   = 82,
    MaxProcessInfoClass                             
} PROCESSINFOCLASS;





typedef enum _THREADINFOCLASS {
    ThreadBasicInformation          = 0,
    ThreadTimes                     = 1,
    ThreadPriority                  = 2,
    ThreadBasePriority              = 3,
    ThreadAffinityMask              = 4,
    ThreadImpersonationToken        = 5,
    ThreadDescriptorTableEntry      = 6,
    ThreadEnableAlignmentFaultFixup = 7,
    ThreadEventPair_Reusable        = 8,
    ThreadQuerySetWin32StartAddress = 9,
    ThreadZeroTlsCell               = 10,
    ThreadPerformanceCount          = 11,
    ThreadAmILastThread             = 12,
    ThreadIdealProcessor            = 13,
    ThreadPriorityBoost             = 14,
    ThreadSetTlsArrayAddress        = 15,   
    ThreadIsIoPending               = 16,
    ThreadHideFromDebugger          = 17,
    ThreadBreakOnTermination        = 18,
    ThreadSwitchLegacyState         = 19,
    ThreadIsTerminated              = 20,
    ThreadLastSystemCall            = 21,
    ThreadIoPriority                = 22,
    ThreadCycleTime                 = 23,
    ThreadPagePriority              = 24,
    ThreadActualBasePriority        = 25,
    ThreadTebInformation            = 26,
    ThreadCSwitchMon                = 27,   
    ThreadCSwitchPmu                = 28,
    ThreadWow64Context              = 29,
    ThreadGroupInformation          = 30,
    ThreadUmsInformation            = 31,   
    ThreadCounterProfiling          = 32,
    ThreadIdealProcessorEx          = 33,
    ThreadCpuAccountingInformation  = 34,
    ThreadSuspendCount              = 35,
    ThreadActualGroupAffinity       = 41,
    ThreadDynamicCodePolicyInfo     = 42,
    ThreadSubsystemInformation      = 45,
    MaxThreadInfoClass              = 48,
} THREADINFOCLASS;





























typedef struct _PAGE_PRIORITY_INFORMATION {
    ULONG PagePriority;
} PAGE_PRIORITY_INFORMATION, *PPAGE_PRIORITY_INFORMATION;






typedef struct _PROCESS_WS_WATCH_INFORMATION {
    PVOID FaultingPc;
    PVOID FaultingVa;
} PROCESS_WS_WATCH_INFORMATION, *PPROCESS_WS_WATCH_INFORMATION;






typedef struct _PROCESS_BASIC_INFORMATION {
    NTSTATUS ExitStatus;
    PPEB PebBaseAddress;
    ULONG_PTR AffinityMask;
    KPRIORITY BasePriority;
    ULONG_PTR UniqueProcessId;
    ULONG_PTR InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION,*PPROCESS_BASIC_INFORMATION;

typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION {
    SIZE_T Size;    
    PROCESS_BASIC_INFORMATION BasicInfo;
    union {
        ULONG Flags;
        struct {
            ULONG IsProtectedProcess : 1;
            ULONG IsWow64Process : 1;
            ULONG IsProcessDeleting : 1;
            ULONG IsCrossSessionCreate : 1;
            ULONG IsFrozen : 1;
            ULONG IsBackground : 1;
            ULONG IsStronglyNamed : 1;
            ULONG IsSecureProcess : 1;
            ULONG IsSubsystemProcess : 1;
            ULONG SpareBits : 23;
        } ;
    } ;
} PROCESS_EXTENDED_BASIC_INFORMATION, *PPROCESS_EXTENDED_BASIC_INFORMATION;








typedef struct _PROCESS_DEVICEMAP_INFORMATION {
    union {
        struct {
            HANDLE DirectoryHandle;
        } Set;
        struct {
            ULONG DriveMap;
            UCHAR DriveType[ 32 ];
        } Query;
    } ;
} PROCESS_DEVICEMAP_INFORMATION, *PPROCESS_DEVICEMAP_INFORMATION;

typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX {
    union {
        struct {
            HANDLE DirectoryHandle;
        } Set;
        struct {
            ULONG DriveMap;
            UCHAR DriveType[ 32 ];
        } Query;
    } ;
    ULONG Flags;    
} PROCESS_DEVICEMAP_INFORMATION_EX, *PPROCESS_DEVICEMAP_INFORMATION_EX;











typedef struct _PROCESS_SESSION_INFORMATION {
    ULONG SessionId;
} PROCESS_SESSION_INFORMATION, *PPROCESS_SESSION_INFORMATION;

typedef struct _PROCESS_HANDLE_TRACING_ENABLE {
    ULONG Flags;
} PROCESS_HANDLE_TRACING_ENABLE, *PPROCESS_HANDLE_TRACING_ENABLE;

typedef struct _PROCESS_HANDLE_TRACING_ENABLE_EX {
    ULONG Flags;
    ULONG TotalSlots;
} PROCESS_HANDLE_TRACING_ENABLE_EX, *PPROCESS_HANDLE_TRACING_ENABLE_EX;








typedef struct _PROCESS_HANDLE_TRACING_ENTRY {
    HANDLE Handle;
    CLIENT_ID ClientId;
    ULONG Type;
    PVOID Stacks[16];
} PROCESS_HANDLE_TRACING_ENTRY, *PPROCESS_HANDLE_TRACING_ENTRY;

typedef struct _PROCESS_HANDLE_TRACING_QUERY {
    HANDLE Handle;
    ULONG  TotalTraces;
    PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
} PROCESS_HANDLE_TRACING_QUERY, *PPROCESS_HANDLE_TRACING_QUERY;










typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    ULONG RateData;
    struct {
        ULONG RatePercent : 7;
        ULONG Reserved0   : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;               
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;             
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    ULONG  Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;









typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;








typedef struct _VM_COUNTERS {
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
} VM_COUNTERS;
typedef VM_COUNTERS *PVM_COUNTERS;

typedef struct _VM_COUNTERS_EX {
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
    SIZE_T PrivateUsage;
} VM_COUNTERS_EX;

typedef VM_COUNTERS_EX *PVM_COUNTERS_EX;

typedef struct _VM_COUNTERS_EX2 {
    VM_COUNTERS_EX CountersEx;
    SIZE_T PrivateWorkingSetSize;
    ULONGLONG SharedCommitUsage;
} VM_COUNTERS_EX2, *PVM_COUNTERS_EX2;





typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;


typedef struct _HARDWARE_COUNTER {
    HARDWARE_COUNTER_TYPE Type;
    ULONG Reserved;
    ULONG64 Index;
} HARDWARE_COUNTER, *PHARDWARE_COUNTER;







typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG EnableBottomUpRandomization : 1;
            ULONG EnableForceRelocateImages : 1;
            ULONG EnableHighEntropy : 1;
            ULONG DisallowStrippedImages : 1;
            ULONG ReservedFlags : 28;
        } ;
    } ;
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG Enable : 1;
            ULONG DisableAtlThunkEmulation : 1;
            ULONG ReservedFlags : 30;
        } ;
    } ;
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG RaiseExceptionOnInvalidHandleReference : 1;
            ULONG HandleExceptionsPermanentlyEnabled : 1;
            ULONG ReservedFlags : 30;
        } ;
    } ;
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG DisallowWin32kSystemCalls : 1;
            ULONG ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG DisableExtensionPoints : 1;
            ULONG ReservedFlags : 31;
        } ;
    } ;
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG ProhibitDynamicCode : 1;
            ULONG AllowThreadOptOut : 1;
            ULONG AllowRemoteDowngrade : 1;
            ULONG ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, *PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;

typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG EnableControlFlowGuard : 1;
            ULONG EnableExportSuppression : 1;
            ULONG StrictMode : 1;
            ULONG ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, *PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;

typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG MicrosoftSignedOnly : 1;
            ULONG StoreSignedOnly : 1;
            ULONG MitigationOptIn : 1;
            ULONG ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, *PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;

typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG DisableNonSystemFonts     : 1;
            ULONG AuditNonSystemFontLoading : 1;
            ULONG ReservedFlags             : 30;
        } ;
    } ;
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, *PPROCESS_MITIGATION_FONT_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    union {
        ULONG Flags;
        struct {
            ULONG NoRemoteImages : 1;
            ULONG NoLowMandatoryLabelImages : 1;
            ULONG PreferSystem32Images : 1;
            ULONG ReservedFlags : 29;
        } ;
    } ;
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, *PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;







typedef struct _PROCESS_KEEPALIVE_COUNT_INFORMATION {
    ULONG WakeCount;
    ULONG NoWakeCount;
} PROCESS_KEEPALIVE_COUNT_INFORMATION, *PPROCESS_KEEPALIVE_COUNT_INFORMATION;





typedef struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION {
    UNICODE_STRING TargetDevicePath;
} PROCESS_REVOKE_FILE_HANDLES_INFORMATION, *PPROCESS_REVOKE_FILE_HANDLES_INFORMATION;






typedef struct _POOLED_USAGE_AND_LIMITS {
    SIZE_T PeakPagedPoolUsage;
    SIZE_T PagedPoolUsage;
    SIZE_T PagedPoolLimit;
    SIZE_T PeakNonPagedPoolUsage;
    SIZE_T NonPagedPoolUsage;
    SIZE_T NonPagedPoolLimit;
    SIZE_T PeakPagefileUsage;
    SIZE_T PagefileUsage;
    SIZE_T PagefileLimit;
} POOLED_USAGE_AND_LIMITS;
typedef POOLED_USAGE_AND_LIMITS *PPOOLED_USAGE_AND_LIMITS;








typedef struct _PROCESS_ACCESS_TOKEN {

    
    
    
    

    HANDLE Token;

    
    
    
    
    
    
    

    HANDLE Thread;

} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;











typedef struct _PROCESS_EXCEPTION_PORT {

    
    
    

      HANDLE ExceptionPortHandle;

    
    
    
    

      ULONG StateFlags;

} PROCESS_EXCEPTION_PORT, *PPROCESS_EXCEPTION_PORT;







typedef struct _KERNEL_USER_TIMES {
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER ExitTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
} KERNEL_USER_TIMES;
typedef KERNEL_USER_TIMES *PKERNEL_USER_TIMES;







typedef enum _SUBSYSTEM_INFORMATION_TYPE {
    SubsystemInformationTypeWin32 = 0,
    SubsystemInformationTypeWSL = 1,
    MaxSubsystemInformationType
} SUBSYSTEM_INFORMATION_TYPE, *PSUBSYSTEM_INFORMATION_TYPE;






typedef enum _ACTIVITY_THROTTLE_STATE {
    ActivityThrottleStateSystemManaged = 0,
    ActivityThrottleStateForceOn = 1,
    ActivityThrottleStateForceOff = 2,
    MaxActivityThrottleState
} ACTIVITY_THROTTLE_STATE, *PACTIVITY_THROTTLE_STATE;






typedef enum _ACTIVITY_THROTTLE_POLICY_OP {
    ActivityThrottlePolicyDisable = 0,
    ActivityThrottlePolicyEnable = 1,
    ActivityThrottlePolicyDefault = 2,
    MaxActivityThrottlePolicy
} ACTIVITY_THROTTLE_POLICY_OP, *PACTIVITY_THROTTLE_POLICY_OP;












typedef struct _ACTIVITY_THROTTLE_POLICY {
    ULONG Version;
    ACTIVITY_THROTTLE_POLICY_OP Operation;
    ULONG PolicyFlags;
} ACTIVITY_THROTTLE_POLICY, *PACTIVITY_THROTTLE_POLICY;


 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenProcess (
      PHANDLE ProcessHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PCLIENT_ID ClientId
    );




































































































































































































































































#line 5611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







































typedef struct _KPCR {














    union {
        NT_TIB NtTib;
        struct {
            union _KGDTENTRY64 *GdtBase;
            struct _KTSS64 *TssBase;
            ULONG64 UserRsp;
            struct _KPCR *Self;
            struct _KPRCB *CurrentPrcb;
            PKSPIN_LOCK_QUEUE LockArray;
            PVOID Used_Self;
        };
    };

    union _KIDTENTRY64 *IdtBase;
    ULONG64 Unused[2];
    KIRQL Irql;
    UCHAR SecondLevelCacheAssociativity;
    UCHAR ObsoleteNumber;
    UCHAR Fill0;
    ULONG Unused0[3];
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONG StallScaleFactor;
    PVOID Unused1[3];

    ULONG KernelReserved[15];
    ULONG SecondLevelCacheSize;
    ULONG HalReserved[16];
    ULONG Unused2;
    PVOID KdVersionBlock;
    PVOID Unused3;
    ULONG PcrAlign1[24];


} KPCR, *PKPCR;













typedef struct _KEXCEPTION_FRAME {





    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;
    ULONG64 Spare1;





    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;





    ULONG64 TrapFrame;
    ULONG64 OutputBuffer;
    ULONG64 OutputLength;
    ULONG64 Spare2;






    ULONG64 MxCsr;





    ULONG64 Rbp;





    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;
    ULONG64 R12;
    ULONG64 R13;
    ULONG64 R14;
    ULONG64 R15;





    ULONG64 Return;
} KEXCEPTION_FRAME, *PKEXCEPTION_FRAME;










typedef struct _KTRAP_FRAME {





    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    ULONG64 P5;






    KPROCESSOR_MODE PreviousMode;
    KIRQL PreviousIrql;





    UCHAR FaultIndicator;









    UCHAR ExceptionActive;





    ULONG MxCsr;








    ULONG64 Rax;
    ULONG64 Rcx;
    ULONG64 Rdx;
    ULONG64 R8;
    ULONG64 R9;
    ULONG64 R10;
    ULONG64 R11;







    union {
        ULONG64 GsBase;
        ULONG64 GsSwap;
    };








    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;






    union {
        ULONG64 FaultAddress;
        ULONG64 ContextRecord;
    };





    ULONG64 Dr0;
    ULONG64 Dr1;
    ULONG64 Dr2;
    ULONG64 Dr3;
    ULONG64 Dr6;
    ULONG64 Dr7;





    struct {
        ULONG64 DebugControl;
        ULONG64 LastBranchToRip;
        ULONG64 LastBranchFromRip;
        ULONG64 LastExceptionToRip;
        ULONG64 LastExceptionFromRip;
    };





    USHORT SegDs;
    USHORT SegEs;
    USHORT SegFs;
    USHORT SegGs;





    ULONG64 TrapFrame;






    ULONG64 Rbx;
    ULONG64 Rdi;
    ULONG64 Rsi;






    ULONG64 Rbp;









    union {
        ULONG64 ErrorCode;
        ULONG64 ExceptionFrame;
    };

    ULONG64 Rip;
    USHORT SegCs;
    UCHAR Fill0;
    UCHAR Logging;
    USHORT Fill1[2];
    ULONG EFlags;
    ULONG Fill2;
    ULONG64 Rsp;
    USHORT SegSs;
    USHORT Fill3;
    ULONG Fill4;
} KTRAP_FRAME, *PKTRAP_FRAME;

typedef struct _KUMS_CONTEXT_HEADER {
    ULONG64 P1Home;
    ULONG64 P2Home;
    ULONG64 P3Home;
    ULONG64 P4Home;
    PVOID StackTop;
    ULONG64 StackSize;
    ULONG64 RspOffset;
    ULONG64 Rip;
    PXMM_SAVE_AREA32 FltSave;


    union {
        struct {
            ULONG64 Volatile : 1;
            ULONG64 Reserved : 63;
        };
        ULONG64 Flags;
    };
    PKTRAP_FRAME TrapFrame;
    PKEXCEPTION_FRAME ExceptionFrame;
    struct _KTHREAD *SourceThread;
    ULONG64 Return;
} KUMS_CONTEXT_HEADER, *PKUMS_CONTEXT_HEADER;






extern __declspec(dllimport) ULONG KeLastBranchMSR;





extern const __declspec(dllimport) PVOID MmHighestUserAddress;
extern const __declspec(dllimport) PVOID MmSystemRangeStart;
extern const __declspec(dllimport) ULONG64 MmUserProbeAddress;



















#line 6022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



#line 6026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




















#pragma deprecated(ExInterlockedIncrementLong)      
#pragma deprecated(ExInterlockedDecrementLong)      
#pragma deprecated(ExInterlockedExchangeUlong)      
#line 6050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





typedef enum _INTERLOCKED_RESULT {
    ResultNegative = 1,
    ResultZero = 0,
    ResultPositive = 2
} INTERLOCKED_RESULT;




 
__forceinline
LONG
_ExInterlockedDecrementLong (
       PLONG Addend
    )

{

    LONG Result;

    Result = _InterlockedDecrement(Addend);
    if (Result < 0) {
        return ResultNegative;

    } else if (Result > 0) {
        return ResultPositive;

    } else {
        return ResultZero;
    }
}




 
__forceinline
LONG
_ExInterlockedIncrementLong (
       PLONG Addend
    )

{

    LONG Result;

    Result = _InterlockedIncrement(Addend);
    if (Result < 0) {
        return ResultNegative;

    } else if (Result > 0) {
        return ResultPositive;

    } else {
        return ResultZero;
    }
}




__forceinline
ULONG
_ExInterlockedExchangeUlong (
       PULONG Target,
      ULONG Value
    )

{

    return (ULONG)_InterlockedExchange((PLONG)Target, (LONG)Value);
}

#line 6129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













__forceinline
PKPCR
KeGetPcr (
    void
    )

{
    return (PKPCR)__readgsqword(((LONG)(LONG_PTR)&(((KPCR *)0)->Self)));
}








__forceinline
ULONG
KeGetCurrentProcessorNumber (
    void
    )

{

    return (ULONG)__readgsbyte(0x184);
}

#line 6171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


#line 6174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


#line 6177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









 
 
 
__forceinline
KIRQL
KeRaiseIrqlToDpcLevel (
    void
    )


















{

    return KzRaiseIrql(2);
}

 
 
__forceinline
KIRQL
KeRaiseIrqlToSynchLevel (
    void
    )
















{

    return KzRaiseIrql(12);
}


#line 6247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

























































































































































































































































































































































































































































































#line 6721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





































































#line 6791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"































































































































































































































































































































































































































#line 7207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





































































#line 7277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION {
    SystemFirmwareTable_Enumerate,
    SystemFirmwareTable_Get
} SYSTEM_FIRMWARE_TABLE_ACTION;

typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION {
    ULONG                           ProviderSignature;
    SYSTEM_FIRMWARE_TABLE_ACTION    Action;
    ULONG                           TableID;
    ULONG                           TableBufferLength;
    UCHAR                           TableBuffer[1];
} SYSTEM_FIRMWARE_TABLE_INFORMATION, *PSYSTEM_FIRMWARE_TABLE_INFORMATION;

typedef
NTSTATUS
(__cdecl *PFNFTH) (
      PSYSTEM_FIRMWARE_TABLE_INFORMATION SystemFirmwareTableInfo
    );

typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER {
    ULONG       ProviderSignature;
    BOOLEAN     Register;
    PFNFTH      FirmwareTableHandler;
    PVOID       DriverObject;
} SYSTEM_FIRMWARE_TABLE_HANDLER, *PSYSTEM_FIRMWARE_TABLE_HANDLER;







typedef
void
(*PTIMER_APC_ROUTINE) (
      PVOID TimerContext,
      ULONG TimerLowValue,
      LONG TimerHighValue
    );





typedef enum _TIMER_SET_INFORMATION_CLASS {
    TimerSetCoalescableTimer,
    MaxTimerInfoClass  
} TIMER_SET_INFORMATION_CLASS;



typedef struct _TIMER_SET_COALESCABLE_TIMER_INFO {
      LARGE_INTEGER DueTime;
      PTIMER_APC_ROUTINE TimerApcRoutine;
      PVOID TimerContext;
      struct _COUNTED_REASON_CONTEXT *WakeContext;
      ULONG Period;
      ULONG TolerableDelay;
      PBOOLEAN PreviousState;
} TIMER_SET_COALESCABLE_TIMER_INFO, *PTIMER_SET_COALESCABLE_TIMER_INFO;

#line 7345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef
ULONG_PTR
(*PDRIVER_VERIFIER_THUNK_ROUTINE) (
      PVOID Context
    );






typedef struct _DRIVER_VERIFIER_THUNK_PAIRS {
    PDRIVER_VERIFIER_THUNK_ROUTINE  PristineRoutine;
    PDRIVER_VERIFIER_THUNK_ROUTINE  NewRoutine;
} DRIVER_VERIFIER_THUNK_PAIRS, *PDRIVER_VERIFIER_THUNK_PAIRS;































































































typedef struct _XSTATE_FEATURE {
    ULONG Offset;
    ULONG Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {
    
    ULONG64 EnabledFeatures;

    
    ULONG64 EnabledVolatileFeatures;

    
    ULONG Size;

    
    union {
        ULONG ControlFlags;
        struct
        {
            ULONG OptimizedSave : 1;
            ULONG CompactionEnabled : 1;
        };
    };

    
    XSTATE_FEATURE Features[(64)];

    
    ULONG64 EnabledSupervisorFeatures;

    
    ULONG64 AlignedFeatures;

    
    ULONG AllFeatureSize;

    
    ULONG AllFeatures[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;









































































































typedef struct _KUSER_SHARED_DATA {

    
    
    
    
    

    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;

    
    
    

    volatile KSYSTEM_TIME InterruptTime;

    
    
    

    volatile KSYSTEM_TIME SystemTime;

    
    
    

    volatile KSYSTEM_TIME TimeZoneBias;

    
    
    
    
    

    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;

    
    
    
    
    
    

    WCHAR NtSystemRoot[260];

    
    
    

    ULONG MaxStackTraceDepth;

    
    
    

    ULONG CryptoExponent;

    
    
    

    ULONG TimeZoneId;
    ULONG LargePageMinimum;

    
    
    

    ULONG AitSamplingValue;

    
    
    

    ULONG AppCompatFlag;

    
    
    

    ULONGLONG RNGSeedVersion;

    
    
    

    ULONG GlobalValidationRunlevel;

    volatile LONG TimeZoneBiasStamp;

    
    
    
    

    ULONG NtBuildNumber;

    
    
    
    
    
    

    NT_PRODUCT_TYPE NtProductType;
    BOOLEAN ProductTypeIsValid;
    BOOLEAN Reserved0[1];
    USHORT NativeProcessorArchitecture;

    
    
    
    
    
    
    
    

    ULONG NtMajorVersion;
    ULONG NtMinorVersion;

    
    
    

    BOOLEAN ProcessorFeatures[64];

    
    
    

    ULONG Reserved1;
    ULONG Reserved3;

    
    
    

    volatile ULONG TimeSlip;

    
    
    

    ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;

    
    
    

    ULONG BootId;

    
    
    
    
    
    

    LARGE_INTEGER SystemExpirationDate;

    
    
    
    
    
    

    ULONG SuiteMask;

    
    
    

    BOOLEAN KdDebuggerEnabled;

    
    
    

    union
    {
        UCHAR MitigationPolicies;
        struct
        {
            UCHAR NXSupportPolicy : 2;
            UCHAR SEHValidationPolicy : 2;
            UCHAR CurDirDevicesSkippedForDlls : 2;
            UCHAR Reserved : 2;
        };
    };

    
    
    

    UCHAR Reserved6[2];

    
    
    
    
    
    

    volatile ULONG ActiveConsoleId;

    
    
    
    
    

    volatile ULONG DismountCount;

    
    
    
    
    

    ULONG ComPlusPackage;

    
    
    
    
    

    ULONG LastSystemRITEventTickCount;

    
    
    
    

    ULONG NumberOfPhysicalPages;

    
    
    

    BOOLEAN SafeBootMode;

    
    
    

    UCHAR VirtualizationFlags;

    
    
    

    UCHAR Reserved12[2];

    
    
    
    
    
    
    
    

    union {
        ULONG SharedDataFlags;
        struct {

            
            
            
            

            ULONG DbgErrorPortPresent       : 1;
            ULONG DbgElevationEnabled       : 1;
            ULONG DbgVirtEnabled            : 1;
            ULONG DbgInstallerDetectEnabled : 1;
            ULONG DbgLkgEnabled             : 1;
            ULONG DbgDynProcessorEnabled    : 1;
            ULONG DbgConsoleBrokerEnabled   : 1;
            ULONG DbgSecureBootEnabled      : 1;
            ULONG DbgMultiSessionSku        : 1;
            ULONG DbgMultiUsersInSessionSku : 1;
            ULONG SpareBits                 : 22;
        } ;
    } ;

    ULONG DataFlagsPad[1];

    
    
    
    
    
    

    ULONGLONG TestRetInstruction;
    LONGLONG QpcFrequency;

    
    
    
    

    ULONG SystemCall;

    
    
    

    ULONG SystemCallPad0;
    ULONGLONG SystemCallPad[2];

    
    
    

    union {
        volatile KSYSTEM_TIME TickCount;
        volatile ULONG64 TickCountQuad;
        struct {
            ULONG ReservedTickCountOverlay[3];
            ULONG TickCountPad[1];
        } ;
    } ;

    
    
    

    ULONG Cookie;
    ULONG CookiePad[1];

    
    
    
    
    
    
    

    LONGLONG ConsoleSessionForegroundProcessId;

    
    
    
    
    
    
    

    ULONGLONG TimeUpdateLock;

    
    
    

    ULONGLONG BaselineSystemTimeQpc;

    
    
    

    ULONGLONG BaselineInterruptTimeQpc;

    
    
    
    

    ULONGLONG QpcSystemTimeIncrement;

    
    
    
    

    ULONGLONG QpcInterruptTimeIncrement;

    
    
    
    

    UCHAR QpcSystemTimeIncrementShift;

    
    
    
    

    UCHAR QpcInterruptTimeIncrementShift;

    
    
    

    USHORT UnparkedProcessorCount;
    
    
    
    
    
    ULONG EnclaveFeatureMask[4];

    
    
    

    ULONG Reserved8;

    
    
    
    

    USHORT UserModeGlobalLogger[16];

    
    
    
    

    ULONG ImageFileExecutionOptions;

    
    
    

    ULONG LangGenerationCount;

    
    
    

    ULONGLONG Reserved4;

    
    
    

    volatile ULONGLONG InterruptTimeBias;

    
    
    
    

    volatile ULONGLONG QpcBias;

    
    
    

    ULONG ActiveProcessorCount;
    volatile UCHAR ActiveGroupCount;

    
    
    

    UCHAR Reserved9;

    union {
        USHORT QpcData;
        struct {

            
            
            
            

            volatile BOOLEAN QpcBypassEnabled;

            
            
            
            

            UCHAR QpcShift;
        };
    };

    LARGE_INTEGER TimeZoneBiasEffectiveStart;
    LARGE_INTEGER TimeZoneBiasEffectiveEnd;

    
    
    

    XSTATE_CONFIGURATION XState;

} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA;













typedef char __C_ASSERT__[(0 == 0)?1:-1];
typedef char __C_ASSERT__[(1 == 1)?1:-1];





typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TickCountLowDeprecated)) == 0x0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TickCountMultiplier)) == 0x4)?1:-1];
typedef char __C_ASSERT__[(__alignof(KSYSTEM_TIME) == 4)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->InterruptTime)) == 0x08)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SystemTime)) == 0x014)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeZoneBias)) == 0x020)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ImageNumberLow)) == 0x02c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ImageNumberHigh)) == 0x02e)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NtSystemRoot)) == 0x030)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->MaxStackTraceDepth)) == 0x238)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->CryptoExponent)) == 0x23c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeZoneId)) == 0x240)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->LargePageMinimum)) == 0x244)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->AitSamplingValue)) == 0x248)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->AppCompatFlag)) == 0x24c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->RNGSeedVersion)) == 0x250)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->GlobalValidationRunlevel)) == 0x258)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeZoneBiasStamp)) == 0x25c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NtBuildNumber)) == 0x260)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NtProductType)) == 0x264)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ProductTypeIsValid)) == 0x268)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NativeProcessorArchitecture)) == 0x26a)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NtMajorVersion)) == 0x26c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NtMinorVersion)) == 0x270)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ProcessorFeatures)) == 0x274)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Reserved1)) == 0x2b4)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Reserved3)) == 0x2b8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeSlip)) == 0x2bc)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->AlternativeArchitecture)) == 0x2c0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SystemExpirationDate)) == 0x2c8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SuiteMask)) == 0x2d0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->KdDebuggerEnabled)) == 0x2d4)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->MitigationPolicies)) == 0x2d5)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ActiveConsoleId)) == 0x2d8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->DismountCount)) == 0x2dc)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ComPlusPackage)) == 0x2e0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->LastSystemRITEventTickCount)) == 0x2e4)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->NumberOfPhysicalPages)) == 0x2e8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SafeBootMode)) == 0x2ec)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->VirtualizationFlags)) == 0x2ed)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Reserved12)) == 0x2ee)?1:-1];



typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SharedDataFlags)) == 0x2f0)?1:-1];

#line 8170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TestRetInstruction)) == 0x2f8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcFrequency)) == 0x300)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SystemCall)) == 0x308)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SystemCallPad0)) == 0x30c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->SystemCallPad)) == 0x310)?1:-1];



typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TickCount)) == 0x320)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TickCountQuad)) == 0x320)?1:-1];

#line 8183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Cookie)) == 0x330)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ConsoleSessionForegroundProcessId)) == 0x338)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeUpdateLock)) == 0x340)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->BaselineSystemTimeQpc)) == 0x348)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->BaselineInterruptTimeQpc)) == 0x350)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcSystemTimeIncrement)) == 0x358)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcInterruptTimeIncrement)) == 0x360)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcSystemTimeIncrementShift)) == 0x368)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcInterruptTimeIncrementShift)) == 0x369)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->UnparkedProcessorCount)) == 0x36a)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->EnclaveFeatureMask)) == 0x36c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Reserved8)) == 0x37c)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->UserModeGlobalLogger)) == 0x380)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ImageFileExecutionOptions)) == 0x3a0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->LangGenerationCount)) == 0x3a4)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Reserved4)) == 0x3a8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->InterruptTimeBias)) == 0x3b0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcBias)) == 0x3b8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ActiveProcessorCount)) == 0x3c0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->ActiveGroupCount)) == 0x3c4)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->Reserved9)) == 0x3c5)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcData)) == 0x3c6)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcBypassEnabled)) == 0x3c6)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->QpcShift)) == 0x3c7)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeZoneBiasEffectiveStart)) == 0x3c8)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->TimeZoneBiasEffectiveEnd)) == 0x3d0)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((KUSER_SHARED_DATA *)0)->XState)) == 0x3d8)?1:-1];
typedef char __C_ASSERT__[(sizeof(KUSER_SHARED_DATA) == 0x708)?1:-1];

#line 8214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










typedef struct _CM_PCCARD_DEVICE_DATA {
    UCHAR Flags;
    UCHAR ErrorCode;
    USHORT Reserved;
    ULONG BusData;
    ULONG DeviceId;
    ULONG LegacyBaseAddress;
    UCHAR IRQMap[16];
} CM_PCCARD_DEVICE_DATA, *PCM_PCCARD_DEVICE_DATA;























typedef enum _CONFIGURATION_TYPE {
    ArcSystem,
    CentralProcessor,
    FloatingPointProcessor,
    PrimaryIcache,
    PrimaryDcache,
    SecondaryIcache,
    SecondaryDcache,
    SecondaryCache,
    EisaAdapter,
    TcAdapter,
    ScsiAdapter,
    DtiAdapter,
    MultiFunctionAdapter,
    DiskController,
    TapeController,
    CdromController,
    WormController,
    SerialController,
    NetworkController,
    DisplayController,
    ParallelController,
    PointerController,
    KeyboardController,
    AudioController,
    OtherController,
    DiskPeripheral,
    FloppyDiskPeripheral,
    TapePeripheral,
    ModemPeripheral,
    MonitorPeripheral,
    PrinterPeripheral,
    PointerPeripheral,
    KeyboardPeripheral,
    TerminalPeripheral,
    OtherPeripheral,
    LinePeripheral,
    NetworkPeripheral,
    SystemMemory,
    DockingInformation,
    RealModeIrqRoutingTable,
    RealModePCIEnumeration,
    MaximumType
} CONFIGURATION_TYPE, *PCONFIGURATION_TYPE;

#line 8302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










#line 8313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





#line 8319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"












#line 8332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
NTSTATUS
KeInitializeCrashDumpHeader(
      ULONG DumpType,
      ULONG Flags,
      PVOID Buffer,
      ULONG BufferSize,
      PULONG BufferNeeded
    );
#line 8345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
void
KeSetImportanceDpc (
      PRKDPC Dpc,
      KDPC_IMPORTANCE Importance
    );
#line 8354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
void
KeSetTargetProcessorDpc (
      PRKDPC Dpc,
      CCHAR Number
    );
#line 8363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
LONG
KePulseEvent (
      PRKEVENT Event,
      KPRIORITY Increment,
      BOOLEAN Wait
    );
#line 8375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




typedef
 
 
void
(__stdcall EXPAND_STACK_CALLOUT) (
      PVOID Parameter
    );

typedef EXPAND_STACK_CALLOUT *PEXPAND_STACK_CALLOUT;


 
 
__declspec(dllimport)
NTSTATUS
KeExpandKernelStackAndCallout (
      PEXPAND_STACK_CALLOUT Callout,
      PVOID Parameter,
      SIZE_T Size
    );

#line 8401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
 
 
 
__declspec(dllimport)
NTSTATUS
KeExpandKernelStackAndCalloutEx (
      PEXPAND_STACK_CALLOUT Callout,
      PVOID Parameter,
      SIZE_T Size,
      BOOLEAN Wait,
      PVOID Context
    );
#line 8419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
 
__declspec(dllimport)
LONG
KeSetBasePriorityThread (
      PKTHREAD Thread,
      LONG Increment
    );
#line 8432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
__declspec(dllimport)
void
KeEnterCriticalRegion (
    void
    );
#line 8443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
KeLeaveCriticalRegion (
    void
    );
#line 8453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
KeEnterGuardedRegion (
    void
    );
#line 8463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
KeLeaveGuardedRegion (
    void
    );
#line 8473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
 
__declspec(dllimport)
BOOLEAN
KeAreApcsDisabled (
    void
    );
#line 8483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
#line 8490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
KeBugCheck (
      ULONG BugCheckCode
    );
#line 8498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






 
 
__declspec(dllimport)
BOOLEAN
KeInvalidateAllCaches (
    void
    );
#line 8512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

#line 8514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

 
 
__declspec(dllimport)
void

KeInvalidateRangeAllCaches (
      PVOID BaseAddress,
      ULONG Length
    );



__declspec(dllimport)
KAFFINITY
KeQueryActiveProcessors (
    void
    );
#line 8533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
ULONG
KeQueryActiveProcessorCount (
      PKAFFINITY ActiveProcessors
    );
#line 8541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
ULONG
KeQueryActiveProcessorCountEx (
      USHORT GroupNumber
    );
#line 8549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
ULONG
KeQueryMaximumProcessorCount (
    void
    );
#line 8557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
ULONG
KeQueryMaximumProcessorCountEx (
      USHORT GroupNumber
    );
#line 8565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
USHORT
KeQueryActiveGroupCount (
    void
    );
#line 8573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
USHORT
KeQueryMaximumGroupCount (
    void
    );
#line 8581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
KAFFINITY
KeQueryGroupAffinity (
      USHORT GroupNumber
    );
#line 8589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
ULONG
KeGetCurrentProcessorNumberEx (
      PPROCESSOR_NUMBER ProcNumber
    );
#line 8597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
void
KeQueryNodeActiveAffinity (
      USHORT NodeNumber,
      PGROUP_AFFINITY Affinity,
      PUSHORT Count
    );
#line 8607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
USHORT
KeQueryNodeMaximumProcessorCount (
      USHORT NodeNumber
    );
#line 8615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
USHORT
KeQueryHighestNodeNumber (
    void
    );
#line 8623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
USHORT
KeGetCurrentNodeNumber (
    void
    );
#line 8631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 

__declspec(dllimport)
NTSTATUS
KeQueryLogicalProcessorRelationship (
      PPROCESSOR_NUMBER ProcessorNumber,
      LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Information,
     PULONG Length
    );
#line 8644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

 
__declspec(dllimport)
LOGICAL
KeShouldYieldProcessor (
    void
    );



 
__declspec(dllimport)
NTSTATUS
KeSetHardwareCounterConfiguration (
      PHARDWARE_COUNTER CounterArray,
      ULONG Count
    );
#line 8662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
KeQueryHardwareCounterConfiguration (
      PHARDWARE_COUNTER CounterArray,
      ULONG MaximumCount,
      PULONG Count
    );
#line 8673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 8683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










 
__declspec(dllimport)
__declspec(noreturn)
void
ExRaiseDatatypeMisalignment (
    void
    );

#line 8702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
__declspec(noreturn)
void
ExRaiseAccessViolation (
    void
    );

#line 8714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef struct _ZONE_SEGMENT_HEADER {
    SINGLE_LIST_ENTRY SegmentList;
    PVOID Reserved;
} ZONE_SEGMENT_HEADER, *PZONE_SEGMENT_HEADER;

typedef struct _ZONE_HEADER {
    SINGLE_LIST_ENTRY FreeList;
    SINGLE_LIST_ENTRY SegmentList;
    ULONG BlockSize;
    ULONG TotalSegmentSize;
} ZONE_HEADER, *PZONE_HEADER;



 
__declspec(deprecated)
__declspec(dllimport)
NTSTATUS
ExInitializeZone(
      PZONE_HEADER Zone,
      ULONG BlockSize,
      PVOID InitialSegment,
      ULONG InitialSegmentSize
    );

#line 8746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(deprecated)
__declspec(dllimport)
NTSTATUS
ExExtendZone(
      PZONE_HEADER Zone,
      PVOID Segment,
      ULONG SegmentSize
    );

#line 8760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
 
__declspec(deprecated)
__declspec(dllimport)
NTSTATUS
ExInterlockedExtendZone(
      PZONE_HEADER Zone,
      PVOID Segment,
      ULONG SegmentSize,
       PKSPIN_LOCK Lock
    );

#line 8776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
























#pragma deprecated(ExAllocateFromZone)
#line 8802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


































#pragma deprecated(ExFreeToZone)
#line 8838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






























#pragma deprecated(ExIsFullZone)
#line 8870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


































#pragma deprecated(ExInterlockedAllocateFromZone)
#line 8906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







































#pragma deprecated(ExInterlockedFreeToZone)
#line 8947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"































#pragma deprecated(ExIsObjectInFirstZoneSegment)
#line 8980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













#pragma deprecated(ExInitializeResource)            
#pragma deprecated(ExAcquireResourceShared)         
#pragma deprecated(ExAcquireResourceExclusive)      
#pragma deprecated(ExReleaseResourceForThread)      
#pragma deprecated(ExConvertExclusiveToShared)      
#pragma deprecated(ExDeleteResource)                
#pragma deprecated(ExIsResourceAcquiredExclusive)   
#pragma deprecated(ExIsResourceAcquiredShared)      
#pragma deprecated(ExIsResourceAcquired)            
#line 9003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"















typedef GUID UUID;



 
__declspec(dllimport)
NTSTATUS
ExUuidCreate(
      UUID *Uuid
    );

#line 9030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



















































































































__declspec(dllimport)
BOOLEAN
MmIsThisAnNtAsSystem (
    void
    );
#line 9151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



  
 
__declspec(dllimport)
NTSTATUS
MmMapUserAddressesToPage (
      PVOID BaseAddress,
      SIZE_T NumberOfBytes,
      PVOID PageAddress
    );
#line 9164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


typedef struct _PHYSICAL_MEMORY_RANGE {
    PHYSICAL_ADDRESS BaseAddress;
    LARGE_INTEGER NumberOfBytes;
} PHYSICAL_MEMORY_RANGE, *PPHYSICAL_MEMORY_RANGE;





#line 9176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

 
__declspec(dllimport)
NTSTATUS
MmAddPhysicalMemory (
      PPHYSICAL_ADDRESS StartAddress,
      PLARGE_INTEGER NumberOfBytes
    );
#line 9185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef NTSTATUS (*PMM_ROTATE_COPY_CALLBACK_FUNCTION) (
      PMDL DestinationMdl,
      PMDL SourceMdl,
      PVOID Context
    );

typedef enum _MM_ROTATE_DIRECTION {
    MmToFrameBuffer,
    MmToFrameBufferNoCopy,
    MmToRegularMemory,
    MmToRegularMemoryNoCopy,
    MmMaximumRotateDirection
} MM_ROTATE_DIRECTION, *PMM_ROTATE_DIRECTION;


  
 
NTSTATUS
MmRotatePhysicalView (
      PVOID VirtualAddress,
      PSIZE_T NumberOfBytes,
      PMDL NewMdl,
      MM_ROTATE_DIRECTION Direction,
      PMM_ROTATE_COPY_CALLBACK_FUNCTION CopyFunction,
      PVOID Context
    );
#line 9213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
NTSTATUS
MmRemovePhysicalMemory (
      PPHYSICAL_ADDRESS StartAddress,
      PLARGE_INTEGER NumberOfBytes
    );
#line 9224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
PPHYSICAL_MEMORY_RANGE
MmGetPhysicalMemoryRanges (
    void
    );
#line 9233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













#line 9247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



  
 
__declspec(dllimport)
  PVOID
MmMapVideoDisplay (
      PHYSICAL_ADDRESS PhysicalAddress,
      SIZE_T NumberOfBytes,
      MEMORY_CACHING_TYPE CacheType
     );
#line 9260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
MmUnmapVideoDisplay (
       PVOID BaseAddress,
       SIZE_T NumberOfBytes
     );
#line 9270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
PHYSICAL_ADDRESS
MmGetPhysicalAddress (
      PVOID BaseAddress
    );
#line 9278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"































#line 9310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
PVOID
MmGetVirtualForPhysical (
      PHYSICAL_ADDRESS PhysicalAddress
    );
#line 9318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




  
 
__declspec(dllimport)
 PVOID
MmAllocateContiguousMemory (
      SIZE_T NumberOfBytes,
      PHYSICAL_ADDRESS HighestAcceptableAddress
    );
#line 9331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


  
 
__declspec(dllimport)
 PVOID
MmAllocateContiguousMemorySpecifyCache (
      SIZE_T NumberOfBytes,
      PHYSICAL_ADDRESS LowestAcceptableAddress,
      PHYSICAL_ADDRESS HighestAcceptableAddress,
      PHYSICAL_ADDRESS BoundaryAddressMultiple,
      MEMORY_CACHING_TYPE CacheType
    );
#line 9345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





typedef ULONG NODE_REQUIREMENT;





#line 9357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


  
 
__declspec(dllimport)
 PVOID
MmAllocateContiguousMemorySpecifyCacheNode (
      SIZE_T NumberOfBytes,
      PHYSICAL_ADDRESS LowestAcceptableAddress,
      PHYSICAL_ADDRESS HighestAcceptableAddress,
      PHYSICAL_ADDRESS BoundaryAddressMultiple,
      MEMORY_CACHING_TYPE CacheType,
      NODE_REQUIREMENT PreferredNode
    );
#line 9372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"














#line 9387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
MmFreeContiguousMemory (
      PVOID BaseAddress
    );
#line 9396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
MmFreeContiguousMemorySpecifyCache (
      PVOID BaseAddress,
      SIZE_T NumberOfBytes,
      MEMORY_CACHING_TYPE CacheType
    );
#line 9407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



  
 
__declspec(dllimport)
  PVOID
MmAllocateNonCachedMemory (
      SIZE_T NumberOfBytes
    );
#line 9418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
MmFreeNonCachedMemory (
      PVOID BaseAddress,
      SIZE_T NumberOfBytes
    );
#line 9428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
BOOLEAN
MmIsAddressValid (
      PVOID VirtualAddress
    );
#line 9437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(deprecated)
__declspec(dllimport)
BOOLEAN
MmIsNonPagedSystemAddressValid (
      PVOID VirtualAddress
    );
#line 9447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
MmLockPagableSectionByHandle (
      PVOID ImageSectionHandle
    );
#line 9457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









  
  
 
#line 9471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
__declspec(dllimport)
HANDLE
MmSecureVirtualMemory (
       PVOID Address,
        SIZE_T Size,
      ULONG ProbeMode
    );
#line 9479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
MmUnsecureVirtualMemory (
      HANDLE SecureHandle
    );
#line 9488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
















#line 9505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


  
 
__declspec(dllimport)
NTSTATUS
MmMapViewInSystemSpace (
      PVOID Section,
     PVOID *MappedBase,
      PSIZE_T ViewSize
    );
#line 9517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
MmUnmapViewInSystemSpace (
      PVOID MappedBase
    );
#line 9526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













#line 9540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


  
 
__declspec(dllimport)
NTSTATUS
MmMapViewInSessionSpace (
      PVOID Section,
     PVOID *MappedBase,
      PSIZE_T ViewSize
    );
#line 9552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
NTSTATUS
MmUnmapViewInSessionSpace (
      PVOID MappedBase
    );
#line 9562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



  
 
__declspec(dllimport)
NTSTATUS
MmCreateMirror (
    void
    );
#line 9573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
BOOLEAN
SeSinglePrivilegeCheck(
      LUID PrivilegeValue,
      KPROCESSOR_MODE PreviousMode
    );
#line 9584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern __declspec(dllimport) PEPROCESS PsInitialSystemProcess;


































#line 9622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


typedef struct _PS_CREATE_NOTIFY_INFO {
      SIZE_T Size;
    union {
          ULONG Flags;
        struct {
              ULONG FileOpenNameAvailable : 1;
              ULONG IsSubsystemProcess : 1;
              ULONG Reserved : 30;
        };
    };
      HANDLE ParentProcessId;
      CLIENT_ID CreatingThreadId;
      struct _FILE_OBJECT *FileObject;
      PCUNICODE_STRING ImageFileName;
      PCUNICODE_STRING CommandLine;
      NTSTATUS CreationStatus;
} PS_CREATE_NOTIFY_INFO, *PPS_CREATE_NOTIFY_INFO;

typedef
void
(*PCREATE_PROCESS_NOTIFY_ROUTINE)(
      HANDLE ParentId,
      HANDLE ProcessId,
      BOOLEAN Create
    );


 
__declspec(dllimport)
NTSTATUS
PsSetCreateProcessNotifyRoutine(
      PCREATE_PROCESS_NOTIFY_ROUTINE NotifyRoutine,
      BOOLEAN Remove
    );
#line 9659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef
void
(*PCREATE_PROCESS_NOTIFY_ROUTINE_EX) (
      PEPROCESS Process,
      HANDLE ProcessId,
      PPS_CREATE_NOTIFY_INFO CreateInfo
    );


 
__declspec(dllimport)
NTSTATUS
PsSetCreateProcessNotifyRoutineEx (
      PCREATE_PROCESS_NOTIFY_ROUTINE_EX NotifyRoutine,
      BOOLEAN Remove
    );
#line 9677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"














#line 9692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef
void
(*PCREATE_THREAD_NOTIFY_ROUTINE)(
      HANDLE ProcessId,
      HANDLE ThreadId,
      BOOLEAN Create
    );


 
__declspec(dllimport)
NTSTATUS
PsSetCreateThreadNotifyRoutine(
      PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine
    );
#line 9709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"














#line 9724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
NTSTATUS
PsRemoveCreateThreadNotifyRoutine (
      PCREATE_THREAD_NOTIFY_ROUTINE NotifyRoutine
    );
#line 9732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







typedef struct _IMAGE_INFO {
    union {
        ULONG Properties;
        struct {
            ULONG ImageAddressingMode  : 8;  
            ULONG SystemModeImage      : 1;  
            ULONG ImageMappedToAllPids : 1;  
            ULONG ExtendedInfoPresent  : 1;  
            ULONG MachineTypeMismatch  : 1;  
            ULONG ImageSignatureLevel  : 4;  
            ULONG ImageSignatureType   : 3;  
            ULONG ImagePartialMap      : 1;  
            ULONG Reserved             : 12;
        };
    };
    PVOID       ImageBase;
    ULONG       ImageSelector;
    SIZE_T      ImageSize;
    ULONG       ImageSectionNumber;
} IMAGE_INFO, *PIMAGE_INFO;

typedef struct _IMAGE_INFO_EX {
    SIZE_T              Size;
    IMAGE_INFO          ImageInfo;
    struct _FILE_OBJECT *FileObject;
} IMAGE_INFO_EX, *PIMAGE_INFO_EX;

typedef
void
(*PLOAD_IMAGE_NOTIFY_ROUTINE)(
      PUNICODE_STRING FullImageName,
      HANDLE ProcessId,                
      PIMAGE_INFO ImageInfo
    );


 
__declspec(dllimport)
NTSTATUS
PsSetLoadImageNotifyRoutine(
      PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine
    );
#line 9782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
PsRemoveLoadImageNotifyRoutine(
      PLOAD_IMAGE_NOTIFY_ROUTINE NotifyRoutine
    );
#line 9791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
HANDLE
PsGetCurrentProcessId(
    void
    );
#line 9800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
HANDLE
PsGetCurrentThreadId(
    void
    );
#line 9809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







 
__declspec(dllimport)
BOOLEAN
PsSetCurrentThreadPrefetching (
      BOOLEAN Prefetching
    );

 
__declspec(dllimport)
BOOLEAN
PsIsCurrentThreadPrefetching (
    void
    );
#line 9830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
LONGLONG
PsGetProcessCreateTimeQuadPart(
      PEPROCESS Process
    );
#line 9840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 9849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

 
__declspec(dllimport)
NTSTATUS
PsGetProcessExitStatus(
      PEPROCESS Process
    );

 
__declspec(dllimport)
NTSTATUS
PsGetThreadExitStatus(
      PETHREAD Thread
    );


 
__declspec(dllimport)
HANDLE
PsGetProcessId(
      PEPROCESS Process
    );

 
__declspec(dllimport)
HANDLE
PsGetThreadId(
      PETHREAD Thread
     );
#line 9879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

 
__declspec(dllimport)
PVOID
PsGetThreadProperty(
      PETHREAD Thread,
      ULONG_PTR Key,
      ULONG Flags
    );


__declspec(dllimport)
HANDLE
PsGetThreadProcessId(
      PETHREAD Thread
    );
#line 9896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







#line 9904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




__declspec(dllimport)
PVOID
PsGetCurrentThreadTeb(
    void
    );

#line 9915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




















































































































































































































































































#line 10192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





































#line 10230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


#line 10233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







































typedef NTSTATUS (*PIO_QUERY_DEVICE_ROUTINE)(
      PVOID Context,
      PUNICODE_STRING PathName,
      INTERFACE_TYPE BusType,
      ULONG BusNumber,
      PKEY_VALUE_FULL_INFORMATION *BusInformation,
      CONFIGURATION_TYPE ControllerType,
      ULONG ControllerNumber,
      PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
      CONFIGURATION_TYPE PeripheralType,
      ULONG PeripheralNumber,
      PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
    );






typedef enum _IO_QUERY_DEVICE_DATA_FORMAT {
    IoQueryDeviceIdentifier = 0,
    IoQueryDeviceConfigurationData,
    IoQueryDeviceComponentInformation,
    IoQueryDeviceMaxData
} IO_QUERY_DEVICE_DATA_FORMAT, *PIO_QUERY_DEVICE_DATA_FORMAT;





typedef
void
DRIVER_REINITIALIZE (
      struct _DRIVER_OBJECT *DriverObject,
      PVOID Context,
      ULONG Count
    );

typedef DRIVER_REINITIALIZE *PDRIVER_REINITIALIZE;


typedef struct _CONTROLLER_OBJECT {
    CSHORT Type;
    CSHORT Size;
    PVOID ControllerExtension;
    KDEVICE_QUEUE DeviceWaitQueue;

    ULONG Spare1;
    LARGE_INTEGER Spare2;

} CONTROLLER_OBJECT, *PCONTROLLER_OBJECT;






































typedef struct _CONFIGURATION_INFORMATION {

    
    
    
    
    
    

    ULONG DiskCount;                
    ULONG FloppyCount;              
    ULONG CdRomCount;               
    ULONG TapeCount;                
    ULONG ScsiPortCount;            
    ULONG SerialCount;              
    ULONG ParallelCount;            

    
    
    
    

    BOOLEAN AtDiskPrimaryAddressClaimed;    
    BOOLEAN AtDiskSecondaryAddressClaimed;  

    
    
    
    

    ULONG Version;

    
    
    
    
    

    ULONG MediumChangerCount;

} CONFIGURATION_INFORMATION, *PCONFIGURATION_INFORMATION;



















#line 10422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
 
__declspec(dllimport)
void
IoAllocateController(
      PCONTROLLER_OBJECT ControllerObject,
      PDEVICE_OBJECT DeviceObject,
      PDRIVER_CONTROL ExecutionRoutine,
      PVOID Context
    );
#line 10435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

































__declspec(deprecated)                 
 
__declspec(dllimport)
NTSTATUS
IoAssignResources (
      PUNICODE_STRING RegistryPath,
      PUNICODE_STRING DriverClassName,
      PDRIVER_OBJECT DriverObject,
      PDEVICE_OBJECT DeviceObject,
      PIO_RESOURCE_REQUIREMENTS_LIST RequestedResources,
      PCM_RESOURCE_LIST *AllocatedResources
    );
#line 10481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(deprecated)                 
 
__declspec(dllimport)
NTSTATUS
IoAttachDeviceByPointer(
      PDEVICE_OBJECT SourceDevice,
      PDEVICE_OBJECT TargetDevice
    );
#line 10493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
PCONTROLLER_OBJECT
IoCreateController(
      ULONG Size
    );
#line 10503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






























 
__declspec(dllimport)
void
IoDeleteController(
      PCONTROLLER_OBJECT ControllerObject
    );
#line 10540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
 
__declspec(dllimport)
void
IoFreeController(
      PCONTROLLER_OBJECT ControllerObject
    );
#line 10551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


                 
__declspec(dllimport)                                 
PCONFIGURATION_INFORMATION                  
IoGetConfigurationInformation( void );      
#line 10558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
PGENERIC_MAPPING
IoGetFileObjectGenericMapping(
    void
    );
#line 10567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
void
IoCancelFileOpen(
      PDEVICE_OBJECT  DeviceObject,
      PFILE_OBJECT    FileObject
    );
#line 10577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
PIRP
IoMakeAssociatedIrp(
      PIRP Irp,
      CCHAR StackSize
    );
#line 10588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










#line 10599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
 
__declspec(dllimport)
NTSTATUS
IoQueryDeviceDescription(
      PINTERFACE_TYPE BusType,
      PULONG BusNumber,
      PCONFIGURATION_TYPE ControllerType,
      PULONG ControllerNumber,
      PCONFIGURATION_TYPE PeripheralType,
      PULONG PeripheralNumber,
      PIO_QUERY_DEVICE_ROUTINE CalloutRoutine,
      PVOID Context
    );
#line 10616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
IoRaiseHardError(
      PIRP Irp,
      PVPB Vpb,
      PDEVICE_OBJECT RealDeviceObject
    );
#line 10628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
BOOLEAN
IoRaiseInformationalHardError(
      NTSTATUS ErrorStatus,
      PUNICODE_STRING String,
      PKTHREAD Thread
    );
#line 10639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
BOOLEAN
IoSetThreadHardErrorMode(
      BOOLEAN EnableHardErrors
    );
#line 10648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
IoRegisterBootDriverReinitialization(
      PDRIVER_OBJECT DriverObject,
      PDRIVER_REINITIALIZE DriverReinitializationRoutine,
      PVOID Context
    );
#line 10659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
IoRegisterDriverReinitialization(
      PDRIVER_OBJECT DriverObject,
      PDRIVER_REINITIALIZE DriverReinitializationRoutine,
      PVOID Context
    );
#line 10670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(deprecated)                 
 
__declspec(dllimport)
NTSTATUS
IoReportResourceUsage(
      PUNICODE_STRING DriverClassName,
       PDRIVER_OBJECT DriverObject,
      PCM_RESOURCE_LIST DriverList,
      ULONG DriverListSize,
       PDEVICE_OBJECT DeviceObject,
      PCM_RESOURCE_LIST DeviceList,
      ULONG DeviceListSize,
       BOOLEAN OverrideConflict,
      PBOOLEAN ConflictDetected
    );
#line 10689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


BOOLEAN
IoTranslateBusAddress(
       INTERFACE_TYPE InterfaceType,
       ULONG BusNumber,
       PHYSICAL_ADDRESS BusAddress,
      PULONG AddressSpace,
      PPHYSICAL_ADDRESS TranslatedAddress
    );
#line 10700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__declspec(dllimport)
void
IoSetHardErrorOrVerifyDevice(
      PIRP Irp,
      PDEVICE_OBJECT DeviceObject
    );
#line 10711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void

HalExamineMBR(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      ULONG MBRTypeIdentifier,
     PVOID *Buffer
    );
#line 10724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
 
 
__declspec(dllimport)
NTSTATUS

IoReadPartitionTable(
       PDEVICE_OBJECT DeviceObject,
       ULONG SectorSize,
       BOOLEAN ReturnRecognizedPartitions,
      struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer
    );
#line 10739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
 
 
__declspec(dllimport)
NTSTATUS

IoSetPartitionInformation(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      ULONG PartitionNumber,
      ULONG PartitionType
    );
#line 10754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(deprecated)                 
 
 
__declspec(dllimport)
NTSTATUS

IoWritePartitionTable(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      ULONG SectorsPerTrack,
      ULONG NumberOfHeads,
      struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer
    );
#line 10771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
NTSTATUS
IoCreateDisk(
      PDEVICE_OBJECT DeviceObject,
      struct _CREATE_DISK* Disk
    );
#line 10780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
IoReadPartitionTableEx(
      PDEVICE_OBJECT DeviceObject,
     struct _DRIVE_LAYOUT_INFORMATION_EX** DriveLayout
    );
#line 10790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
IoWritePartitionTableEx(
      PDEVICE_OBJECT DeviceObject,
      struct _DRIVE_LAYOUT_INFORMATION_EX* DriveLayout
    );
#line 10800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
IoSetPartitionInformationEx(
      PDEVICE_OBJECT DeviceObject,
      ULONG PartitionNumber,
      struct _SET_PARTITION_INFORMATION_EX* PartitionInfo
    );
#line 10811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
NTSTATUS
IoVerifyPartitionTable(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN FixErrors
    );
#line 10820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _DISK_SIGNATURE {
    ULONG PartitionStyle;
    union {
        struct {
            ULONG Signature;
            ULONG CheckSum;
        } Mbr;

        struct {
            GUID DiskId;
        } Gpt;
    };
} DISK_SIGNATURE, *PDISK_SIGNATURE;


__declspec(dllimport)
NTSTATUS
IoReadDiskSignature(
       PDEVICE_OBJECT DeviceObject,
       ULONG BytesPerSector,
      PDISK_SIGNATURE Signature
    );
#line 10844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




__declspec(dllimport)
NTSTATUS
IoVolumeDeviceToDosName(
       PVOID           VolumeDeviceObject,
      
#line 10854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
          PUNICODE_STRING DosName
    );
#line 10857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"












#line 10870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 10879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 10888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"












#line 10901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
NTSTATUS
IoSetSystemPartition(
      PUNICODE_STRING VolumeNameString
    );
#line 10910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
NTSTATUS
IoCreateFileSpecifyDeviceObjectHint(
      PHANDLE FileHandle,
       ACCESS_MASK DesiredAccess,
       POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER AllocationSize,
       ULONG FileAttributes,
       ULONG ShareAccess,
       ULONG Disposition,
       ULONG CreateOptions,
      PVOID EaBuffer,
       ULONG EaLength,
       CREATE_FILE_TYPE CreateFileType,
      PVOID InternalParameters,
       ULONG Options,
      PVOID DeviceObject
    );
#line 10933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


























#line 10960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _TXN_PARAMETER_BLOCK {

    USHORT Length;              
    USHORT TxFsContext;         
    PVOID  TransactionObject;   

} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK;









PTXN_PARAMETER_BLOCK
IoGetTransactionParameterBlock (
      PFILE_OBJECT FileObject
    );
#line 10982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
































#line 11015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


typedef struct _OPLOCK_KEY_ECP_CONTEXT *POPLOCK_KEY_ECP_CONTEXT;

POPLOCK_KEY_ECP_CONTEXT
IoGetOplockKeyContext (
      PFILE_OBJECT FileObject
    );
#line 11024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






























#line 11055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _IO_DRIVER_CREATE_CONTEXT {
    CSHORT Size;
    struct _ECP_LIST *ExtraCreateParameter;
    PVOID DeviceObjectHint;
    PTXN_PARAMETER_BLOCK TxnParameters;


#line 11064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT;









#line 11075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

void
__forceinline
IoInitializeDriverCreateContext(
    PIO_DRIVER_CREATE_CONTEXT DriverContext
    )
{
    
    memset((DriverContext),0,(sizeof(IO_DRIVER_CREATE_CONTEXT)));
    DriverContext->Size = sizeof(IO_DRIVER_CREATE_CONTEXT);


#line 11088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
}


__declspec(dllimport)
NTSTATUS
IoCreateFileEx(
      PHANDLE FileHandle,
       ACCESS_MASK DesiredAccess,
       POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER AllocationSize,
       ULONG FileAttributes,
       ULONG ShareAccess,
       ULONG Disposition,
       ULONG CreateOptions,
      PVOID EaBuffer,
       ULONG EaLength,
       CREATE_FILE_TYPE CreateFileType,
      PVOID InternalParameters,
       ULONG Options,
      PIO_DRIVER_CREATE_CONTEXT DriverContext
    );

NTSTATUS
IoSetIrpExtraCreateParameter(
      PIRP Irp,
      struct _ECP_LIST *ExtraCreateParameter
    );

void
IoClearIrpExtraCreateParameter(
      PIRP Irp
    );

NTSTATUS
IoGetIrpExtraCreateParameter(
      PIRP Irp,
     struct _ECP_LIST **ExtraCreateParameter
    );
#line 11128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"












#line 11141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
NTSTATUS
IoAttachDeviceToDeviceStackSafe(
       PDEVICE_OBJECT SourceDevice,
       PDEVICE_OBJECT TargetDevice,
     PDEVICE_OBJECT *AttachedToDeviceObject
    );
#line 11151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




__declspec(dllimport)
BOOLEAN
IoIsFileOriginRemote(
      PFILE_OBJECT FileObject
    );
#line 11161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
NTSTATUS
IoSetFileOrigin(
      PFILE_OBJECT FileObject,
      BOOLEAN Remote
    );
#line 11170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


BOOLEAN
IoIsFileObjectIgnoringSharing (
    PFILE_OBJECT FileObject
);
#line 11177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


NTSTATUS
IoSetFileObjectIgnoreSharing (
    PFILE_OBJECT FileObject
);
#line 11184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



__declspec(dllimport)
IO_PAGING_PRIORITY

IoGetPagingIoPriority(
      PIRP Irp
    );
#line 11194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

























































#line 11252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







#line 11260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






#line 11267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







#line 11275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







#line 11283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 11292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






#line 11299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






#line 11306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






#line 11313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







#line 11321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





















#line 11343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"









#line 11353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 11362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 11371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 11380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 11389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








#line 11398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _AGP_TARGET_BUS_INTERFACE_STANDARD {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    
    
    
    PGET_SET_DEVICE_DATA SetBusData;
    PGET_SET_DEVICE_DATA GetBusData;
    UCHAR CapabilityID;  

} AGP_TARGET_BUS_INTERFACE_STANDARD, *PAGP_TARGET_BUS_INTERFACE_STANDARD;



 
 
__declspec(dllimport)
NTSTATUS
IoReportDetectedDevice(
      PDRIVER_OBJECT DriverObject,
      INTERFACE_TYPE LegacyBusType,
      ULONG BusNumber,
      ULONG SlotNumber,
      PCM_RESOURCE_LIST ResourceList,
      PIO_RESOURCE_REQUIREMENTS_LIST ResourceRequirements,
      BOOLEAN ResourceAssigned,
      PDEVICE_OBJECT *DeviceObject
    );
#line 11435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
 
__declspec(dllimport)
NTSTATUS
IoReportRootDevice(
      PDRIVER_OBJECT DriverObject
    );
#line 11445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




typedef
 
 
NTSTATUS
(*PGET_LOCATION_STRING) (
      PVOID Context,
    
    
#line 11458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
    PZZWSTR *LocationStrings
    );

typedef struct _PNP_LOCATION_INTERFACE {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    
    
    
    PGET_LOCATION_STRING GetLocationString;

} PNP_LOCATION_INTERFACE, *PPNP_LOCATION_INTERFACE;





typedef enum _ARBITER_ACTION {
    ArbiterActionTestAllocation,
    ArbiterActionRetestAllocation,
    ArbiterActionCommitAllocation,
    ArbiterActionRollbackAllocation,
    ArbiterActionQueryAllocatedResources,
    ArbiterActionWriteReservedResources,
    ArbiterActionQueryConflict,
    ArbiterActionQueryArbitrate,
    ArbiterActionAddReserved,
    ArbiterActionBootAllocation
} ARBITER_ACTION, *PARBITER_ACTION;

typedef struct _ARBITER_CONFLICT_INFO {
    
    
    
    PDEVICE_OBJECT OwningObject;

    
    
    
    ULONGLONG Start;

    
    
    
    ULONGLONG End;

} ARBITER_CONFLICT_INFO, *PARBITER_CONFLICT_INFO;





typedef struct _ARBITER_TEST_ALLOCATION_PARAMETERS {

    
    
    
      PLIST_ENTRY ArbitrationList;

    
    
    
      ULONG AllocateFromCount;

    
    
    
    
      PCM_PARTIAL_RESOURCE_DESCRIPTOR AllocateFrom;

} ARBITER_TEST_ALLOCATION_PARAMETERS, *PARBITER_TEST_ALLOCATION_PARAMETERS;


typedef struct _ARBITER_RETEST_ALLOCATION_PARAMETERS {

    
    
    
      PLIST_ENTRY ArbitrationList;

    
    
    
      ULONG AllocateFromCount;

    
    
    
    
      PCM_PARTIAL_RESOURCE_DESCRIPTOR AllocateFrom;

} ARBITER_RETEST_ALLOCATION_PARAMETERS, *PARBITER_RETEST_ALLOCATION_PARAMETERS;

typedef struct _ARBITER_BOOT_ALLOCATION_PARAMETERS {

    
    
    
      PLIST_ENTRY ArbitrationList;

} ARBITER_BOOT_ALLOCATION_PARAMETERS, *PARBITER_BOOT_ALLOCATION_PARAMETERS;


typedef struct _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS {

    
    
    
      PCM_PARTIAL_RESOURCE_LIST *AllocatedResources;

} ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS, *PARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS;

typedef struct _ARBITER_QUERY_CONFLICT_PARAMETERS {

    
    
    
      PDEVICE_OBJECT PhysicalDeviceObject;

    
    
    
      PIO_RESOURCE_DESCRIPTOR ConflictingResource;

    
    
    
      PULONG ConflictCount;

    
    
    
      PARBITER_CONFLICT_INFO *Conflicts;

} ARBITER_QUERY_CONFLICT_PARAMETERS, *PARBITER_QUERY_CONFLICT_PARAMETERS;

typedef struct _ARBITER_QUERY_ARBITRATE_PARAMETERS {

    
    
    
    
      PLIST_ENTRY ArbitrationList;

} ARBITER_QUERY_ARBITRATE_PARAMETERS, *PARBITER_QUERY_ARBITRATE_PARAMETERS;

typedef struct _ARBITER_ADD_RESERVED_PARAMETERS {

    
    
    
    
      PDEVICE_OBJECT ReserveDevice;

} ARBITER_ADD_RESERVED_PARAMETERS, *PARBITER_ADD_RESERVED_PARAMETERS;


typedef struct _ARBITER_PARAMETERS {

    union {

        ARBITER_TEST_ALLOCATION_PARAMETERS              TestAllocation;
        ARBITER_RETEST_ALLOCATION_PARAMETERS            RetestAllocation;
        ARBITER_BOOT_ALLOCATION_PARAMETERS              BootAllocation;
        ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS    QueryAllocatedResources;
        ARBITER_QUERY_CONFLICT_PARAMETERS               QueryConflict;
        ARBITER_QUERY_ARBITRATE_PARAMETERS              QueryArbitrate;
        ARBITER_ADD_RESERVED_PARAMETERS                 AddReserved;

    } Parameters;

} ARBITER_PARAMETERS, *PARBITER_PARAMETERS;

typedef enum _ARBITER_REQUEST_SOURCE {

    ArbiterRequestUndefined = -1,
    ArbiterRequestLegacyReported,   
    ArbiterRequestHalReported,      
    ArbiterRequestLegacyAssigned,   
    ArbiterRequestPnpDetected,      
    ArbiterRequestPnpEnumerated     

} ARBITER_REQUEST_SOURCE;


typedef enum _ARBITER_RESULT {

    ArbiterResultUndefined = -1,
    ArbiterResultSuccess,
    ArbiterResultExternalConflict, 
    ArbiterResultNullRequest       

} ARBITER_RESULT;



























__declspec(dllimport)
NTSTATUS
IoReportResourceForDetection(
      PDRIVER_OBJECT DriverObject,
      PCM_RESOURCE_LIST DriverList,
      ULONG DriverListSize,
      PDEVICE_OBJECT DeviceObject,
      PCM_RESOURCE_LIST DeviceList,
      ULONG DeviceListSize,
      PBOOLEAN ConflictDetected
    );
#line 11697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _ARBITER_LIST_ENTRY {

    
    
    
    LIST_ENTRY ListEntry;

    
    
    
    ULONG AlternativeCount;

    
    
    
     
    PIO_RESOURCE_DESCRIPTOR Alternatives;

    
    
    
    PDEVICE_OBJECT PhysicalDeviceObject;

    
    
    
    ARBITER_REQUEST_SOURCE RequestSource;

    
    
    
    ULONG Flags;

    
    
    
    
    LONG_PTR WorkSpace;

    
    
    
    
    INTERFACE_TYPE InterfaceType;
    ULONG SlotNumber;
    ULONG BusNumber;

    
    
    
    
    
    PCM_PARTIAL_RESOURCE_DESCRIPTOR Assignment;

    
    
    
    
    PIO_RESOURCE_DESCRIPTOR SelectedAlternative;

    
    
    
    
    ARBITER_RESULT Result;

} ARBITER_LIST_ENTRY, *PARBITER_LIST_ENTRY;





typedef
NTSTATUS
(*PARBITER_HANDLER) (
      PVOID Context,
      ARBITER_ACTION Action,
      PARBITER_PARAMETERS Parameters
    );








typedef struct _ARBITER_INTERFACE {

    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;

    
    
    
    PARBITER_HANDLER ArbiterHandler;

    
    
    
    ULONG Flags;

} ARBITER_INTERFACE, *PARBITER_INTERFACE;





typedef enum _RESOURCE_TRANSLATION_DIRECTION {
    TranslateChildToParent,
    TranslateParentToChild
} RESOURCE_TRANSLATION_DIRECTION;





typedef
NTSTATUS
(*PTRANSLATE_RESOURCE_HANDLER)(
      PVOID Context,
      PCM_PARTIAL_RESOURCE_DESCRIPTOR Source,
      RESOURCE_TRANSLATION_DIRECTION Direction,
      ULONG AlternativesCount,
      IO_RESOURCE_DESCRIPTOR Alternatives[],
      PDEVICE_OBJECT PhysicalDeviceObject,
      PCM_PARTIAL_RESOURCE_DESCRIPTOR Target
);

typedef
NTSTATUS
(*PTRANSLATE_RESOURCE_REQUIREMENTS_HANDLER)(
      PVOID Context,
      PIO_RESOURCE_DESCRIPTOR Source,
      PDEVICE_OBJECT PhysicalDeviceObject,
      PULONG TargetCount,
      PIO_RESOURCE_DESCRIPTOR *Target
);





typedef struct _TRANSLATOR_INTERFACE {
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;
    PTRANSLATE_RESOURCE_HANDLER TranslateResources;
    PTRANSLATE_RESOURCE_REQUIREMENTS_HANDLER TranslateResourceRequirements;
} TRANSLATOR_INTERFACE, *PTRANSLATOR_INTERFACE;







typedef
BOOLEAN
(*PHAL_RESET_DISPLAY_PARAMETERS) (
      ULONG Columns,
      ULONG Rows
    );


__declspec(deprecated)
__declspec(dllimport)
void
HalAcquireDisplayOwnership (
      PHAL_RESET_DISPLAY_PARAMETERS ResetDisplayParameters
    );
#line 11878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

                                                

                                                

                                                




#line 11889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
                                                


#line 11893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
                                                























































#line 11950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 

#line 11957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
__declspec(dllimport)
ULONG
HalSetBusDataByOffset (
      BUS_DATA_TYPE BusDataType,
      ULONG BusNumber,
      ULONG SlotNumber,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );
#line 11968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
 
__declspec(dllimport)
BOOLEAN
HalTranslateBusAddress (
      INTERFACE_TYPE  InterfaceType,
      ULONG BusNumber,
      PHYSICAL_ADDRESS BusAddress,
      PULONG AddressSpace,
      PPHYSICAL_ADDRESS TranslatedAddress
    );
#line 11982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
















__declspec(dllimport)
PVOID
HalAllocateCrashDumpRegisters (
      PADAPTER_OBJECT AdapterObject,
      PULONG NumberOfMapRegisters
    );
#line 12005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
























#line 12030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


















#line 12049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 

#line 12055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
__declspec(dllimport)
ULONG
HalGetBusDataByOffset (
      BUS_DATA_TYPE BusDataType,
      ULONG BusNumber,
      ULONG SlotNumber,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );
#line 12066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
 
 
__declspec(dllimport)
PADAPTER_OBJECT
HalGetAdapter (
      PDEVICE_DESCRIPTION DeviceDescription,
      PULONG NumberOfMapRegisters
    );
#line 12078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













#line 12092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"







typedef
PBUS_HANDLER
( *pHalHandlerForBus) (
      INTERFACE_TYPE InterfaceType,
      ULONG          BusNumber
    );
typedef
void
( *pHalReferenceBusHandler) (
      PBUS_HANDLER   BusHandler
    );





typedef enum _HAL_QUERY_INFORMATION_CLASS {
    HalInstalledBusInformation,
    HalProfileSourceInformation,
    HalInformationClassUnused1,
    HalPowerInformation,
    HalProcessorSpeedInformation,
    HalCallbackInformation,
    HalMapRegisterInformation,
    HalMcaLogInformation,               
    HalFrameBufferCachingInformation,
    HalDisplayBiosInformation,
    HalProcessorFeatureInformation,
    HalNumaTopologyInterface,
    HalErrorInformation,                
    HalCmcLogInformation,               
    HalCpeLogInformation,               
    HalQueryMcaInterface,
    HalQueryAMLIIllegalIOPortAddresses,
    HalQueryMaxHotPlugMemoryAddress,
    HalPartitionIpiInterface,
    HalPlatformInformation,
    HalQueryProfileSourceList,
    HalInitLogInformation,
    HalFrequencyInformation,
    HalProcessorBrandString,
    HalHypervisorInformation,
    HalPlatformTimerInformation,
    HalAcpiAuditInformation,
    HalIrtInformation,
    HalSecondaryInterruptInformation,
    HalParkingPageInformation,
    HalNumaRangeTableInformation,
    HalChannelTopologyInformation,
    HalExternalCacheInformation,
    HalQueryDebuggerInformation,
    HalFwBootPerformanceInformation,
    HalFwS3PerformanceInformation,
    HalGetChannelPowerInformation,
    HalQueryStateElementInformation,
    HalPsciInformation,
    HalInterruptControllerInformation,
    HalQueryIommuReservedRegionInformation,
    HalQueryArmErrataInformation,
    HalQueryProcessorEfficiencyInformation,
    HalQueryAcpiWakeAlarmSystemPowerStateInformation,
    HalQueryProfileNumberOfCounters,
    HalQueryHyperlaunchEntrypoint,
    HalHardwareWatchdogInformation,
    
} HAL_QUERY_INFORMATION_CLASS, *PHAL_QUERY_INFORMATION_CLASS;


typedef enum _HAL_SET_INFORMATION_CLASS {
    HalProfileSourceInterval,
    HalProfileSourceInterruptHandler,  
    HalMcaRegisterDriver,              
    HalKernelErrorHandler,
    HalCmcRegisterDriver,              
    HalCpeRegisterDriver,              
    HalMcaLog,
    HalCmcLog,
    HalCpeLog,
    HalGenerateCmcInterrupt,           
    HalProfileSourceTimerHandler,      
    HalEnlightenment,
    HalProfileDpgoSourceInterruptHandler,  
    HalRegisterSecondaryInterruptInterface,
    HalSetChannelPowerInformation,
    HalI386ExceptionChainTerminatorInformation, 
    HalSetResetParkDisposition,        
    HalSetPsciSuspendMode,
    HalSetHvciEnabled,

} HAL_SET_INFORMATION_CLASS, *PHAL_SET_INFORMATION_CLASS;




typedef
NTSTATUS
(*pHalQuerySystemInformation)(
      HAL_QUERY_INFORMATION_CLASS  InformationClass,
      ULONG     BufferSize,
      PVOID Buffer,
      PULONG   ReturnedLength
    );


typedef
NTSTATUS
(*pHalSetSystemInformation)(
      HAL_SET_INFORMATION_CLASS    InformationClass,
      ULONG     BufferSize,
      PVOID     Buffer
    );


typedef
void
( *pHalExamineMBR)(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      ULONG MBRTypeIdentifier,
      PVOID *Buffer
    );

typedef
NTSTATUS
( *pHalIoReadPartitionTable)(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      BOOLEAN ReturnRecognizedPartitions,
      struct _DRIVE_LAYOUT_INFORMATION **PartitionBuffer
    );

typedef
NTSTATUS
( *pHalIoSetPartitionInformation)(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      ULONG PartitionNumber,
      ULONG PartitionType
    );

typedef
NTSTATUS
( *pHalIoWritePartitionTable)(
      PDEVICE_OBJECT DeviceObject,
      ULONG SectorSize,
      ULONG SectorsPerTrack,
      ULONG NumberOfHeads,
      struct _DRIVE_LAYOUT_INFORMATION *PartitionBuffer
    );

typedef
NTSTATUS
(*pHalQueryBusSlots)(
      PBUS_HANDLER         BusHandler,
      ULONG                BufferSize,
      PULONG              SlotNumbers,
      PULONG              ReturnedLength
    );

typedef
NTSTATUS
(*pHalInitPnpDriver)(
    void
    );


typedef struct _PM_DISPATCH_TABLE {
    ULONG   Signature;
    ULONG   Version;
    PVOID   Function[1];
} PM_DISPATCH_TABLE, *PPM_DISPATCH_TABLE;



typedef
NTSTATUS
(*pHalInitPowerManagement)(
      PPM_DISPATCH_TABLE  PmDriverDispatchTable,
      PPM_DISPATCH_TABLE *PmHalDispatchTable
    );


typedef
struct _DMA_ADAPTER *
(*pHalGetDmaAdapter)(
      PVOID PhysicalDeviceObject,
      struct _DEVICE_DESCRIPTION *DeviceDescriptor,
      PULONG NumberOfMapRegisters
    );


typedef
NTSTATUS
(*pHalGetInterruptTranslator)(
      INTERFACE_TYPE ParentInterfaceType,
      ULONG ParentBusNumber,
      INTERFACE_TYPE BridgeInterfaceType,
      USHORT Size,
      USHORT Version,
      PTRANSLATOR_INTERFACE Translator,
      PULONG BridgeBusNumber
    );


typedef
BOOLEAN
(*pHalTranslateBusAddress)(
      INTERFACE_TYPE  InterfaceType,
      ULONG BusNumber,
      PHYSICAL_ADDRESS BusAddress,
      PULONG AddressSpace,
      PPHYSICAL_ADDRESS TranslatedAddress
    );

typedef
NTSTATUS
(*pHalAssignSlotResources) (
      PUNICODE_STRING RegistryPath,
      PUNICODE_STRING DriverClassName ,
      PDRIVER_OBJECT DriverObject,
      PDEVICE_OBJECT DeviceObject,
      INTERFACE_TYPE BusType,
      ULONG BusNumber,
      ULONG SlotNumber,
      PCM_RESOURCE_LIST *AllocatedResources
    );

typedef
void
(*pHalHaltSystem) (
    void
    );

typedef
BOOLEAN
(*pHalResetDisplay) (
    void
    );



typedef struct _MAP_REGISTER_ENTRY {
    PVOID   MapRegister;
    BOOLEAN WriteToDevice;
} MAP_REGISTER_ENTRY, *PMAP_REGISTER_ENTRY;




typedef
UCHAR
(*pHalVectorToIDTEntry) (
    ULONG Vector
);

typedef
BOOLEAN
(*pHalFindBusAddressTranslation) (
      PHYSICAL_ADDRESS BusAddress,
      PULONG AddressSpace,
      PPHYSICAL_ADDRESS TranslatedAddress,
      PULONG_PTR Context,
      BOOLEAN NextBus
    );

typedef
NTSTATUS
(*pHalStartMirroring)(
    void
    );

typedef
NTSTATUS
(*pHalEndMirroring)(
      ULONG PassNumber
    );

typedef
NTSTATUS
(*pHalMirrorPhysicalMemory)(
      PHYSICAL_ADDRESS PhysicalAddress,
      LARGE_INTEGER NumberOfBytes
    );

typedef
NTSTATUS
(*pHalMirrorVerify)(
      PHYSICAL_ADDRESS PhysicalAddress,
      LARGE_INTEGER NumberOfBytes
    );





typedef struct {
    UCHAR     Type;  
    BOOLEAN   Valid;
    UCHAR     Reserved[2];
    PUCHAR    TranslatedAddress;
    ULONG     Length;
} DEBUG_DEVICE_ADDRESS, *PDEBUG_DEVICE_ADDRESS;

typedef struct {
    PHYSICAL_ADDRESS  Start;
    PHYSICAL_ADDRESS  MaxEnd;
    PVOID             VirtualAddress;
    ULONG             Length;
    BOOLEAN           Cached;
    BOOLEAN           Aligned;
} DEBUG_MEMORY_REQUIREMENTS, *PDEBUG_MEMORY_REQUIREMENTS;

typedef enum {
    KdNameSpacePCI,
    KdNameSpaceACPI,
    KdNameSpaceAny,
    KdNameSpaceNone,

    
    
    

    KdNameSpaceMax,
} KD_NAMESPACE_ENUM, *PKD_NAMESPACE_ENUM;

typedef enum {
    KdConfigureDeviceAndContinue,
    KdSkipDeviceAndContinue,
    KdConfigureDeviceAndStop,
    KdSkipDeviceAndStop,
} KD_CALLBACK_ACTION, *PKD_CALLBACK_ACTION;





typedef struct _DEBUG_TRANSPORT_DATA {
    ULONG HwContextSize;
    BOOLEAN UseSerialFraming;
} DEBUG_TRANSPORT_DATA, *PDEBUG_TRANSPORT_DATA;








typedef struct _DEBUG_DEVICE_DESCRIPTOR {
    ULONG     Bus;
    ULONG     Slot;
    USHORT    Segment;
    USHORT    VendorID;
    USHORT    DeviceID;
    UCHAR     BaseClass;
    UCHAR     SubClass;
    UCHAR     ProgIf;
    union {
        UCHAR     Flags;
        struct {
            UCHAR DbgHalScratchAllocated : 1;
            UCHAR DbgBarsMapped : 1;
            UCHAR DbgScratchAllocated : 1;
        };
    };
    BOOLEAN   Initialized;
    BOOLEAN   Configured;
    DEBUG_DEVICE_ADDRESS BaseAddress[6];
    DEBUG_MEMORY_REQUIREMENTS Memory;
    USHORT    PortType;
    USHORT    PortSubtype;
    PVOID     OemData;
    ULONG     OemDataLength;
    KD_NAMESPACE_ENUM NameSpace;
    PWCHAR    NameSpacePath;
    ULONG     NameSpacePathLength;
    ULONG     TransportType;
    DEBUG_TRANSPORT_DATA TransportData;
} DEBUG_DEVICE_DESCRIPTOR, *PDEBUG_DEVICE_DESCRIPTOR;



typedef struct _PCI_DEBUGGING_DEVICE_IN_USE {
    USHORT Segment;
    ULONG Bus;
    ULONG Slot;
} PCI_DEBUGGING_DEVICE_IN_USE, *PPCI_DEBUGGING_DEVICE_IN_USE;

typedef struct _ACPI_DEBUGGING_DEVICE_IN_USE {
    ULONG NameSpacePathLength;
    WCHAR NameSpacePath[1];
} ACPI_DEBUGGING_DEVICE_IN_USE, *PACPI_DEBUGGING_DEVICE_IN_USE;

typedef struct _DEBUGGING_DEVICE_IN_USE {
    KD_NAMESPACE_ENUM NameSpace;
    ULONG StructureLength;
    union {
        ACPI_DEBUGGING_DEVICE_IN_USE AcpiDevice;
        PCI_DEBUGGING_DEVICE_IN_USE PciDevice;
    };
} DEBUGGING_DEVICE_IN_USE, *PDEBUGGING_DEVICE_IN_USE;

typedef struct _DEBUGGING_DEVICE_IN_USE_INFORMATION {
    ULONG DeviceCount;
    DEBUGGING_DEVICE_IN_USE Device[1];
} DEBUGGING_DEVICE_IN_USE_INFORMATION, *PDEBUGGING_DEVICE_IN_USE_INFORMATION;



typedef
KD_CALLBACK_ACTION
(*PDEBUG_DEVICE_FOUND_FUNCTION) (
    PDEBUG_DEVICE_DESCRIPTOR Device
    );

typedef
NTSTATUS
(*pKdEnumerateDebuggingDevices) (
      PVOID LoaderBlock,
      PDEBUG_DEVICE_DESCRIPTOR Device,
      PDEBUG_DEVICE_FOUND_FUNCTION Callback
    );

typedef
NTSTATUS
(*pKdSetupPciDeviceForDebugging)(
         PVOID                     LoaderBlock,   
      PDEBUG_DEVICE_DESCRIPTOR  PciDevice
);

typedef
NTSTATUS
(*pKdReleasePciDeviceForDebugging)(
      PDEBUG_DEVICE_DESCRIPTOR  PciDevice
);

typedef
NTSTATUS
(*pKdSetupIntegratedDeviceForDebugging)(
         PVOID                     LoaderBlock,   
      PDEBUG_DEVICE_DESCRIPTOR  IntegratedDevice
);

typedef
NTSTATUS
(*pKdReleaseIntegratedDeviceForDebugging)(
      PDEBUG_DEVICE_DESCRIPTOR  IntegratedDevice
);

typedef
PVOID
(*pKdGetAcpiTablePhase0)(
      struct _LOADER_PARAMETER_BLOCK *LoaderBlock,
      ULONG Signature
    );

typedef
void
(*pKdCheckPowerButton)(
    void
    );

typedef
void
(*pHalEndOfBoot)(
    void
    );

typedef
PVOID
(*pKdMapPhysicalMemory64)(
      PHYSICAL_ADDRESS PhysicalAddress,
      ULONG NumberPages,
      BOOLEAN FlushCurrentTLB
    );

typedef
void
(*pKdUnmapVirtualAddress)(
      PVOID VirtualAddress,
      ULONG NumberPages,
      BOOLEAN FlushCurrentTLB
    );

typedef
ULONG
(*pKdGetPciDataByOffset)(
      ULONG BusNumber,
      ULONG SlotNumber,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );

typedef
ULONG
(*pKdSetPciDataByOffset)(
      ULONG BusNumber,
      ULONG SlotNumber,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );

typedef
PVOID
(*pHalGetAcpiTable)(
      ULONG Signature,
      PCSTR OemId,
      PCSTR OemTableId
    );

typedef
void
(*PCI_ERROR_HANDLER_CALLBACK)(
    void
    );

typedef
void
(*pHalSetPciErrorHandlerCallback)(
      PCI_ERROR_HANDLER_CALLBACK Callback
    );




typedef struct {
    ULONG                           Version;
    pHalQuerySystemInformation      HalQuerySystemInformation;
    pHalSetSystemInformation        HalSetSystemInformation;
    pHalQueryBusSlots               HalQueryBusSlots;
    ULONG                           Spare1;
    pHalExamineMBR                  HalExamineMBR;
    pHalIoReadPartitionTable        HalIoReadPartitionTable;
    pHalIoSetPartitionInformation   HalIoSetPartitionInformation;
    pHalIoWritePartitionTable       HalIoWritePartitionTable;

    pHalHandlerForBus               HalReferenceHandlerForBus;
    pHalReferenceBusHandler         HalReferenceBusHandler;
    pHalReferenceBusHandler         HalDereferenceBusHandler;

    pHalInitPnpDriver               HalInitPnpDriver;
    pHalInitPowerManagement         HalInitPowerManagement;

    pHalGetDmaAdapter               HalGetDmaAdapter;
    pHalGetInterruptTranslator      HalGetInterruptTranslator;

    pHalStartMirroring              HalStartMirroring;
    pHalEndMirroring                HalEndMirroring;
    pHalMirrorPhysicalMemory        HalMirrorPhysicalMemory;
    pHalEndOfBoot                   HalEndOfBoot;
    pHalMirrorVerify                HalMirrorVerify;

    pHalGetAcpiTable                HalGetCachedAcpiTable;
    pHalSetPciErrorHandlerCallback  HalSetPciErrorHandlerCallback;

} HAL_DISPATCH, *PHAL_DISPATCH;





extern  PHAL_DISPATCH   HalDispatchTable;







#line 12671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

































typedef struct _HAL_BUS_INFORMATION{
    INTERFACE_TYPE  BusType;
    BUS_DATA_TYPE   ConfigurationType;
    ULONG           BusNumber;
    ULONG           Reserved;
} HAL_BUS_INFORMATION, *PHAL_BUS_INFORMATION;


typedef enum _HAL_DISPLAY_BIOS_INFORMATION {
    HalDisplayInt10Bios,
    HalDisplayEmulatedBios,
    HalDisplayNoBios
} HAL_DISPLAY_BIOS_INFORMATION, *PHAL_DISPLAY_BIOS_INFORMATION;


typedef struct _HAL_POWER_INFORMATION {
    ULONG   TBD;
} HAL_POWER_INFORMATION, *PHAL_POWER_INFORMATION;


typedef struct _HAL_PROCESSOR_SPEED_INFO {
    ULONG   ProcessorSpeed;
} HAL_PROCESSOR_SPEED_INFORMATION, *PHAL_PROCESSOR_SPEED_INFORMATION;


typedef struct _HAL_CALLBACKS {
    PCALLBACK_OBJECT  SetSystemInformation;
    PCALLBACK_OBJECT  BusCheck;
} HAL_CALLBACKS, *PHAL_CALLBACKS;


typedef struct _HAL_PROCESSOR_FEATURE {
    ULONG UsableFeatureBits;
} HAL_PROCESSOR_FEATURE;



typedef
NTSTATUS
(*PHALIOREADWRITEHANDLER)(
           BOOLEAN fRead,
           ULONG dwAddr,
           ULONG dwSize,
       PULONG pdwData
    );




typedef struct _HAL_AMLI_BAD_IO_ADDRESS_LIST
{
    ULONG                   BadAddrBegin;
    ULONG                   BadAddrSize;
    ULONG                   OSVersionTrigger;
    PHALIOREADWRITEHANDLER  IOHandler;
} HAL_AMLI_BAD_IO_ADDRESS_LIST, *PHAL_AMLI_BAD_IO_ADDRESS_LIST;








typedef
void
(*PHALMCAINTERFACELOCK)(
    void
    );

typedef
void
(*PHALMCAINTERFACEUNLOCK)(
    void
    );

typedef
NTSTATUS
(*PHALMCAINTERFACEREADREGISTER)(
          UCHAR    BankNumber,
      PVOID    Exception
    );


typedef struct _HAL_MCA_INTERFACE {
    PHALMCAINTERFACELOCK            Lock;
    PHALMCAINTERFACEUNLOCK          Unlock;
    PHALMCAINTERFACEREADREGISTER    ReadRegister;
} HAL_MCA_INTERFACE;

typedef enum {
    ApicDestinationModePhysical = 1,
    ApicDestinationModeLogicalFlat,
    ApicDestinationModeLogicalClustered,
    ApicDestinationModeUnknown
} HAL_APIC_DESTINATION_MODE, *PHAL_APIC_DESTINATION_MODE;




struct _KTRAP_FRAME;
struct _KEXCEPTION_FRAME;

typedef
ERROR_SEVERITY
(*PDRIVER_EXCPTN_CALLBACK) (
      PVOID Context,
      struct _KTRAP_FRAME *TrapFrame,
      struct _KEXCEPTION_FRAME *ExceptionFrame,
      PMCA_EXCEPTION Exception
);

#line 12817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


















#line 12836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










#line 12847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef PDRIVER_EXCPTN_CALLBACK  PDRIVER_MCA_EXCEPTION_CALLBACK;






typedef struct _MCA_DRIVER_INFO {
    PDRIVER_MCA_EXCEPTION_CALLBACK ExceptionCallback;
    PKDEFERRED_ROUTINE             DpcCallback;
    PVOID                          DeviceContext;
} MCA_DRIVER_INFO, *PMCA_DRIVER_INFO;



typedef struct _HAL_ERROR_INFO {
    ULONG     Version;                 
    ULONG     InitMaxSize;             
    ULONG     McaMaxSize;              
    ULONG     McaPreviousEventsCount;  
    ULONG     McaCorrectedEventsCount; 
    ULONG     McaKernelDeliveryFails;  
    ULONG     McaDriverDpcQueueFails;  
    ULONG     McaReserved;
    ULONG     CmcMaxSize;              
    ULONG     CmcPollingInterval;      
    ULONG     CmcInterruptsCount;      
    ULONG     CmcKernelDeliveryFails;  
    ULONG     CmcDriverDpcQueueFails;  
    ULONG     CmcGetStateFails;        
    ULONG     CmcClearStateFails;      
    ULONG     CmcReserved;
    ULONGLONG CmcLogId;                
    ULONG     CpeMaxSize;              
    ULONG     CpePollingInterval;      
    ULONG     CpeInterruptsCount;      
    ULONG     CpeKernelDeliveryFails;  
    ULONG     CpeDriverDpcQueueFails;  
    ULONG     CpeGetStateFails;        
    ULONG     CpeClearStateFails;      
    ULONG     CpeInterruptSources;     
    ULONGLONG CpeLogId;                
    ULONGLONG KernelReserved[4];
} HAL_ERROR_INFO, *PHAL_ERROR_INFO;





























typedef
void
(*PDRIVER_CMC_EXCEPTION_CALLBACK) (
      PVOID            Context,
      PCMC_EXCEPTION   CmcLog
);





typedef
void
(*PDRIVER_CPE_EXCEPTION_CALLBACK) (
      PVOID            Context,
      PCPE_EXCEPTION   CmcLog
);







typedef struct _CMC_DRIVER_INFO {
    PDRIVER_CMC_EXCEPTION_CALLBACK ExceptionCallback;
    PKDEFERRED_ROUTINE             DpcCallback;
    PVOID                          DeviceContext;
} CMC_DRIVER_INFO, *PCMC_DRIVER_INFO;

typedef struct _CPE_DRIVER_INFO {
    PDRIVER_CPE_EXCEPTION_CALLBACK ExceptionCallback;
    PKDEFERRED_ROUTINE             DpcCallback;
    PVOID                          DeviceContext;
} CPE_DRIVER_INFO, *PCPE_DRIVER_INFO;

typedef struct _HAL_PLATFORM_INFORMATION {
    ULONG PlatformFlags;
} HAL_PLATFORM_INFORMATION, *PHAL_PLATFORM_INFORMATION;
































#line 12993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"













































































































#line 13103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




__declspec(deprecated)
NTSTATUS
HalGetScatterGatherList (               
      PADAPTER_OBJECT DmaAdapter,
      PDEVICE_OBJECT DeviceObject,
      PMDL Mdl,
      PVOID CurrentVa,
      ULONG Length,
      PDRIVER_LIST_CONTROL ExecutionRoutine,
      PVOID Context,
      BOOLEAN WriteToDevice
    );
#line 13120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
void
HalPutScatterGatherList (
      PADAPTER_OBJECT DmaAdapter,
      PSCATTER_GATHER_LIST ScatterGather,
      BOOLEAN WriteToDevice
    );
#line 13130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(deprecated)                 
void
HalPutDmaAdapter(
      PADAPTER_OBJECT DmaAdapter
    );
#line 13138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR *PWHEA_ERROR_SOURCE_DESCRIPTOR;
typedef struct _WHEA_ERROR_RECORD *PWHEA_ERROR_RECORD;

__declspec(dllimport)
void
HalBugCheckSystem (
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource,
      PWHEA_ERROR_RECORD ErrorRecord
    );











#line 13162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


typedef enum _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE {
    ResourceTypeSingle = 0,
    ResourceTypeRange,
    ResourceTypeExtendedCounterConfiguration,
    ResourceTypeOverflow,
    ResourceTypeMax
} PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE;






















typedef struct _PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR {
    PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR_TYPE Type;
    ULONG Flags;
    union {
        ULONG CounterIndex;
        ULONG ExtendedRegisterAddress;
        struct {
            ULONG Begin;
            ULONG End;
        } Range;
    } u;
} PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR, *PPHYSICAL_COUNTER_RESOURCE_DESCRIPTOR;





















typedef struct _PHYSICAL_COUNTER_RESOURCE_LIST {
    ULONG Count;
    PHYSICAL_COUNTER_RESOURCE_DESCRIPTOR Descriptors[1];
} PHYSICAL_COUNTER_RESOURCE_LIST, *PPHYSICAL_COUNTER_RESOURCE_LIST;


















__declspec(dllimport)
NTSTATUS
HalAllocateHardwareCounters (
      PGROUP_AFFINITY GroupAffinty,
      ULONG GroupCount,
      PPHYSICAL_COUNTER_RESOURCE_LIST ResourceList,
      PHANDLE CounterSetHandle
    );
#line 13257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
NTSTATUS
HalFreeHardwareCounters (
      HANDLE CounterSetHandle
    );
#line 13265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






 
__declspec(dllimport)
BOOLEAN
FsRtlIsTotalDeviceFailure(
      NTSTATUS Status
    );


#line 13280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef struct _PCI_AGP_CAPABILITY {

    PCI_CAPABILITIES_HEADER Header;

    USHORT  Minor:4;
    USHORT  Major:4;
    USHORT  Rsvd1:8;

    struct _PCI_AGP_STATUS {
        ULONG   Rate:3;
        ULONG   Agp3Mode:1;
        ULONG   FastWrite:1;
        ULONG   FourGB:1;
        ULONG   HostTransDisable:1;
        ULONG   Gart64:1;
        ULONG   ITA_Coherent:1;
        ULONG   SideBandAddressing:1;                   
        ULONG   CalibrationCycle:3;
        ULONG   AsyncRequestSize:3;
        ULONG   Rsvd1:1;
        ULONG   Isoch:1;
        ULONG   Rsvd2:6;
        ULONG   RequestQueueDepthMaximum:8;             
    } AGPStatus;

    struct _PCI_AGP_COMMAND {
        ULONG   Rate:3;
        ULONG   Rsvd1:1;
        ULONG   FastWriteEnable:1;
        ULONG   FourGBEnable:1;
        ULONG   Rsvd2:1;
        ULONG   Gart64:1;
        ULONG   AGPEnable:1;
        ULONG   SBAEnable:1;
        ULONG   CalibrationCycle:3;
        ULONG   AsyncReqSize:3;
        ULONG   Rsvd3:8;
        ULONG   RequestQueueDepth:8;
    } AGPCommand;

} PCI_AGP_CAPABILITY, *PPCI_AGP_CAPABILITY;






typedef enum _EXTENDED_AGP_REGISTER {
    IsochStatus,
    AgpControl,
    ApertureSize,
    AperturePageSize,
    GartLow,
    GartHigh,
    IsochCommand
} EXTENDED_AGP_REGISTER, *PEXTENDED_AGP_REGISTER;

typedef struct _PCI_AGP_ISOCH_STATUS {
    ULONG ErrorCode: 2;
    ULONG Rsvd1: 1;
    ULONG Isoch_L: 3;
    ULONG Isoch_Y: 2;
    ULONG Isoch_N: 8;
    ULONG Rsvd2: 16;
} PCI_AGP_ISOCH_STATUS, *PPCI_AGP_ISOCH_STATUS;

typedef struct _PCI_AGP_CONTROL {
    ULONG Rsvd1: 7;
    ULONG GTLB_Enable: 1;
    ULONG AP_Enable: 1;
    ULONG CAL_Disable: 1;
    ULONG Rsvd2: 22;
} PCI_AGP_CONTROL, *PPCI_AGP_CONTROL;

typedef struct _PCI_AGP_APERTURE_PAGE_SIZE {
    USHORT PageSizeMask: 11;
    USHORT Rsvd1: 1;
    USHORT PageSizeSelect: 4;
} PCI_AGP_APERTURE_PAGE_SIZE, *PPCI_AGP_APERTURE_PAGE_SIZE;

typedef struct _PCI_AGP_ISOCH_COMMAND {
    USHORT Rsvd1: 6;
    USHORT Isoch_Y: 2;
    USHORT Isoch_N: 8;
} PCI_AGP_ISOCH_COMMAND, *PPCI_AGP_ISOCH_COMMAND;

typedef struct PCI_AGP_EXTENDED_CAPABILITY {

    PCI_AGP_ISOCH_STATUS IsochStatus;




    PCI_AGP_CONTROL AgpControl;
    USHORT ApertureSize;
    PCI_AGP_APERTURE_PAGE_SIZE AperturePageSize;
    ULONG GartLow;
    ULONG GartHigh;




    PCI_AGP_ISOCH_COMMAND IsochCommand;

} PCI_AGP_EXTENDED_CAPABILITY, *PPCI_AGP_EXTENDED_CAPABILITY;
































typedef struct _PCIX_BRIDGE_CAPABILITY {

    PCI_CAPABILITIES_HEADER Header;

    union {
        struct {
            USHORT Bus64Bit:1;
            USHORT Bus133MHzCapable:1;
            USHORT SplitCompletionDiscarded:1;
            USHORT UnexpectedSplitCompletion:1;
            USHORT SplitCompletionOverrun:1;
            USHORT SplitRequestDelayed:1;
            USHORT BusModeFrequency:4;  
            USHORT Rsvd:2;
            USHORT Version:2;           
            USHORT Bus266MHzCapable:1;
            USHORT Bus533MHzCapable:1;
        } ;
        USHORT AsUSHORT;
    } SecondaryStatus;

    union {
        struct {
            ULONG FunctionNumber:3;
            ULONG DeviceNumber:5;
            ULONG BusNumber:8;
            ULONG Device64Bit:1;
            ULONG Device133MHzCapable:1;
            ULONG SplitCompletionDiscarded:1;
            ULONG UnexpectedSplitCompletion:1;
            ULONG SplitCompletionOverrun:1;
            ULONG SplitRequestDelayed:1;
            ULONG Rsvd:7;
            ULONG DIMCapable:1;
            ULONG Device266MHzCapable:1;
            ULONG Device533MHzCapable:1;
        } ;
        ULONG AsULONG;
    } BridgeStatus;

    USHORT UpstreamSplitTransactionCapacity;
    USHORT UpstreamSplitTransactionLimit;

    USHORT DownstreamSplitTransactionCapacity;
    USHORT DownstreamSplitTransactionLimit;

    union {
        struct {
            ULONG SelectSecondaryRegisters:1;
            ULONG ErrorPresentInOtherBank:1;
            ULONG AdditionalCorrectableError:1;
            ULONG AdditionalUncorrectableError:1;
            ULONG ErrorPhase:3;
            ULONG ErrorCorrected:1;
            ULONG Syndrome:8;
            ULONG ErrorFirstCommand:4;
            ULONG ErrorSecondCommand:4;
            ULONG ErrorUpperAttributes:4;
            ULONG ControlUpdateEnable:1;
            ULONG Rsvd:1;
            ULONG DisableSingleBitCorrection:1;
            ULONG EccMode:1;
        } ;
        ULONG AsULONG;
    } EccControlStatus;

    ULONG EccFirstAddress;
    ULONG EccSecondAddress;
    ULONG EccAttribute;

} PCIX_BRIDGE_CAPABILITY, *PPCIX_BRIDGE_CAPABILITY;






typedef struct _PCI_SUBSYSTEM_IDS_CAPABILITY {

    PCI_CAPABILITIES_HEADER Header;
    USHORT Reserved;
    USHORT SubVendorID;
    USHORT SubSystemID;

} PCI_SUBSYSTEM_IDS_CAPABILITY, *PPCI_SUBSYSTEM_IDS_CAPABILITY;





typedef struct _PCI_ADVANCED_FEATURES_CAPABILITY {

    PCI_CAPABILITIES_HEADER Header;
    UCHAR Length;

    union {
        struct {
            UCHAR FunctionLevelResetSupported:1;
            UCHAR TransactionsPendingSupported:1;
            UCHAR Rsvd:6;
        } ;

        UCHAR AsUCHAR;
    } Capabilities;

    union {
        struct {
            UCHAR InitiateFunctionLevelReset:1;
            UCHAR Rsvd:7;
        } ;

        UCHAR AsUCHAR;
    } Control;

    union {
        struct {
            UCHAR TransactionsPending:1;
            UCHAR Rsvd:7;
        } ;

        UCHAR AsUCHAR;
    } Status;

} PCI_ADVANCED_FEATURES_CAPABILITY, *PPCI_ADVANCED_FEATURES_CAPABILITY;

































typedef struct _PCI_ROOT_BUS_OSC_SUPPORT_FIELD {
    union {
        struct {
            ULONG ExtendedConfigOpRegions:1;
            ULONG ActiveStatePowerManagement:1;
            ULONG ClockPowerManagement:1;
            ULONG SegmentGroups:1;
            ULONG MessageSignaledInterrupts:1;
            ULONG OptimizedBufferFlushAndFill:1;
            ULONG AspmOptionality:1;
            ULONG Reserved:25;
        } ;
        ULONG AsULONG;
    } u;
} PCI_ROOT_BUS_OSC_SUPPORT_FIELD, *PPCI_ROOT_BUS_OSC_SUPPORT_FIELD;

typedef struct _PCI_ROOT_BUS_OSC_CONTROL_FIELD {
    union {
        struct {
            ULONG ExpressNativeHotPlug:1;
            ULONG ShpcNativeHotPlug:1;
            ULONG ExpressNativePME:1;
            ULONG ExpressAdvancedErrorReporting:1;
            ULONG ExpressCapabilityStructure:1;
            ULONG LatencyToleranceReporting:1;
            ULONG Reserved:26;
        } ;
        ULONG AsULONG;
    } u;
} PCI_ROOT_BUS_OSC_CONTROL_FIELD, *PPCI_ROOT_BUS_OSC_CONTROL_FIELD;






typedef struct _PCI_FIRMWARE_BUS_CAPS {
    USHORT Type;
    USHORT Length; 
    struct {
        UCHAR SixtyFourBitDevice:1;
        UCHAR PciXMode1EccCapable:1;
        UCHAR DeviceIdMessagingCapable:1;
        UCHAR ObffWakeSignalCapable:1;
        UCHAR Reserved1:4;
    } ;
    UCHAR CurrentSpeedAndMode;
    UCHAR SupportedSpeedsAndModesLowByte;
    UCHAR SupportedSpeedsAndModesHighByte;
    UCHAR Voltage;
    UCHAR Reserved2[7];
} PCI_FIRMWARE_BUS_CAPS, *PPCI_FIRMWARE_BUS_CAPS;

typedef struct _PCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER {
    USHORT Version;
    USHORT Status;
    ULONG  Length;
    PCI_FIRMWARE_BUS_CAPS Caps;
} PCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER, *PPCI_FIRMWARE_BUS_CAPS_RETURN_BUFFER;







typedef enum _PCI_HARDWARE_INTERFACE {

    PciConventional,
    PciXMode1,
    PciXMode2,
    PciExpress

} PCI_HARDWARE_INTERFACE, *PPCI_HARDWARE_INTERFACE;



typedef enum {

    BusWidth32Bits,
    BusWidth64Bits

} PCI_BUS_WIDTH;

typedef struct _PCI_ROOT_BUS_HARDWARE_CAPABILITY {

    
    
    

    PCI_HARDWARE_INTERFACE SecondaryInterface;

    
    
    
    
    
    
    
    

    struct {

        
        
        
        

        BOOLEAN BusCapabilitiesFound;


        
        
        

        ULONG CurrentSpeedAndMode;
        ULONG SupportedSpeedsAndModes;

        
        
        
        

        BOOLEAN DeviceIDMessagingCapable;

        
        
        

        PCI_BUS_WIDTH SecondaryBusWidth;
    } ;

    
    
    
    

    PCI_ROOT_BUS_OSC_SUPPORT_FIELD OscFeatureSupport;
    PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlRequest;
    PCI_ROOT_BUS_OSC_CONTROL_FIELD OscControlGranted;

} PCI_ROOT_BUS_HARDWARE_CAPABILITY, *PPCI_ROOT_BUS_HARDWARE_CAPABILITY;







typedef union _PCI_EXPRESS_CAPABILITIES_REGISTER {

    struct {

        USHORT CapabilityVersion:4;
        USHORT DeviceType:4;               
        USHORT SlotImplemented:1;
        USHORT InterruptMessageNumber:5;
        USHORT Rsvd:2;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_CAPABILITIES_REGISTER, *PPCI_EXPRESS_CAPABILITIES_REGISTER;

typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER {

    struct {

        ULONG MaxPayloadSizeSupported:3;     
        ULONG PhantomFunctionsSupported:2;
        ULONG ExtendedTagSupported:1;
        ULONG L0sAcceptableLatency:3;        
        ULONG L1AcceptableLatency:3;         
        ULONG Undefined:3;
        ULONG RoleBasedErrorReporting:1;
        ULONG Rsvd1:2;
        ULONG CapturedSlotPowerLimit:8;
        ULONG CapturedSlotPowerLimitScale:2;
        ULONG FunctionLevelResetCapability:1;
        ULONG Rsvd2:3;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER, *PPCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER;










typedef union _PCI_EXPRESS_DEVICE_CONTROL_REGISTER {

    struct {

        USHORT CorrectableErrorEnable:1;
        USHORT NonFatalErrorEnable:1;
        USHORT FatalErrorEnable:1;
        USHORT UnsupportedRequestErrorEnable:1;
        USHORT EnableRelaxedOrder:1;
        USHORT MaxPayloadSize:3;                 
        USHORT ExtendedTagEnable:1;
        USHORT PhantomFunctionsEnable:1;
        USHORT AuxPowerEnable:1;
        USHORT NoSnoopEnable:1;
        USHORT MaxReadRequestSize:3;             
        USHORT BridgeConfigRetryEnable:1;
    } ;

    
    
    

    struct {
        USHORT :15;
        USHORT InitiateFunctionLevelReset:1;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_DEVICE_CONTROL_REGISTER, *PPCI_EXPRESS_DEVICE_CONTROL_REGISTER;









typedef union _PCI_EXPRESS_DEVICE_STATUS_REGISTER {

    struct {

        USHORT CorrectableErrorDetected:1;
        USHORT NonFatalErrorDetected:1;
        USHORT FatalErrorDetected:1;
        USHORT UnsupportedRequestDetected:1;
        USHORT AuxPowerDetected:1;
        USHORT TransactionsPending:1;
        USHORT Rsvd:10;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_DEVICE_STATUS_REGISTER, *PPCI_EXPRESS_DEVICE_STATUS_REGISTER;

typedef union _PCI_EXPRESS_LINK_CAPABILITIES_REGISTER {

    struct {

        ULONG MaximumLinkSpeed:4;
        ULONG MaximumLinkWidth:6;
        ULONG ActiveStatePMSupport:2;   
        ULONG L0sExitLatency:3;         
        ULONG L1ExitLatency:3;          
        ULONG ClockPowerManagement:1;
        ULONG SurpriseDownErrorReportingCapable:1;
        ULONG DataLinkLayerActiveReportingCapable:1;
        ULONG LinkBandwidthNotificationCapability:1;
        ULONG AspmOptionalityCompliance:1;
        ULONG Rsvd:1;
        ULONG PortNumber:8;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_LINK_CAPABILITIES_REGISTER, *PPCI_EXPRESS_LINK_CAPABILITIES_REGISTER;

typedef union _PCI_EXPRESS_LINK_CONTROL_REGISTER {

    struct {

        USHORT ActiveStatePMControl:2;    
        USHORT Rsvd1:1;
        USHORT ReadCompletionBoundary:1;  
        USHORT LinkDisable:1;
        USHORT RetrainLink:1;
        USHORT CommonClockConfig:1;
        USHORT ExtendedSynch:1;
        USHORT EnableClockPowerManagement:1;
        USHORT Rsvd2:7;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_LINK_CONTROL_REGISTER, *PPCI_EXPRESS_LINK_CONTROL_REGISTER;

typedef union _PCI_EXPRESS_LINK_STATUS_REGISTER {

    struct {

        USHORT LinkSpeed:4;
        USHORT LinkWidth:6;
        USHORT Undefined:1;
        USHORT LinkTraining:1;
        USHORT SlotClockConfig:1;
        USHORT DataLinkLayerActive:1;
        USHORT Rsvd:2;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_LINK_STATUS_REGISTER, *PPCI_EXPRESS_LINK_STATUS_REGISTER;

typedef union _PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER {

    struct {

        ULONG AttentionButtonPresent:1;
        ULONG PowerControllerPresent:1;
        ULONG MRLSensorPresent:1;
        ULONG AttentionIndicatorPresent:1;
        ULONG PowerIndicatorPresent:1;
        ULONG HotPlugSurprise:1;
        ULONG HotPlugCapable:1;
        ULONG SlotPowerLimit:8;
        ULONG SlotPowerLimitScale:2;
        ULONG ElectromechanicalLockPresent:1;
        ULONG NoCommandCompletedSupport:1;
        ULONG PhysicalSlotNumber:13;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER, *PPCI_EXPRESS_SLOT_CAPABILITIES_REGISTER;

typedef union _PCI_EXPRESS_SLOT_CONTROL_REGISTER {

    struct {

        USHORT AttentionButtonEnable:1;
        USHORT PowerFaultDetectEnable:1;
        USHORT MRLSensorEnable:1;
        USHORT PresenceDetectEnable:1;
        USHORT CommandCompletedEnable:1;
        USHORT HotPlugInterruptEnable:1;
        USHORT AttentionIndicatorControl:2;  
        USHORT PowerIndicatorControl:2;      
        USHORT PowerControllerControl:1;     
        USHORT ElectromechanicalLockControl:1;
        USHORT DataLinkStateChangeEnable:1;
        USHORT Rsvd:3;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_SLOT_CONTROL_REGISTER, *PPCI_EXPRESS_SLOT_CONTROL_REGISTER;

typedef union _PCI_EXPRESS_SLOT_STATUS_REGISTER {

    struct {

        USHORT AttentionButtonPressed:1;
        USHORT PowerFaultDetected:1;
        USHORT MRLSensorChanged:1;
        USHORT PresenceDetectChanged:1;
        USHORT CommandCompleted:1;
        USHORT MRLSensorState:1;        
        USHORT PresenceDetectState:1;   
        USHORT ElectromechanicalLockEngaged:1;
        USHORT DataLinkStateChanged:1;
        USHORT Rsvd:7;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_SLOT_STATUS_REGISTER, *PPCI_EXPRESS_SLOT_STATUS_REGISTER;

typedef union _PCI_EXPRESS_ROOT_CONTROL_REGISTER {

    struct {

        USHORT CorrectableSerrEnable:1;
        USHORT NonFatalSerrEnable:1;
        USHORT FatalSerrEnable:1;
        USHORT PMEInterruptEnable:1;
        USHORT CRSSoftwareVisibilityEnable:1;
        USHORT Rsvd:11;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_ROOT_CONTROL_REGISTER, *PPCI_EXPRESS_ROOT_CONTROL_REGISTER;

typedef union _PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER {

    struct {

        USHORT CRSSoftwareVisibility:1;
        USHORT Rsvd:15;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER, *PPCI_EXPRESS_ROOT_CAPABILITIES_REGISTER;

typedef union _PCI_EXPRESS_ROOT_STATUS_REGISTER {

    struct {

        ULONG PMERequestorId:16;  
        ULONG PMEStatus:1;
        ULONG PMEPending:1;
        ULONG Rsvd:14;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_ROOT_STATUS_REGISTER, *PPCI_EXPRESS_ROOT_STATUS_REGISTER;

typedef union _PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER {

    struct {

        ULONG CompletionTimeoutRangesSupported:4;
        ULONG CompletionTimeoutDisableSupported:1;
        ULONG AriForwardingSupported:1;
        ULONG AtomicOpRoutingSupported:1;
        ULONG AtomicOpCompleterSupported32Bit:1;
        ULONG AtomicOpCompleterSupported64Bit:1;
        ULONG CASCompleterSupported128Bit:1;
        ULONG NoROEnabledPRPRPassing:1;
        ULONG LTRMechanismSupported:1;
        ULONG TPHCompleterSupported:2;
        ULONG Rsvd:4;
        ULONG OBFFSupported:2;
        ULONG ExtendedFmtFieldSuported:1;
        ULONG EndEndTLPPrefixSupported:1;
        ULONG MaxEndEndTLPPrefixes:2;
        ULONG Rsvd2:8;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER, *PPCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER;

typedef union _PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER {

    struct {

        USHORT CompletionTimeoutValue:4;
        USHORT CompletionTimeoutDisable:1;
        USHORT AriForwardingEnable:1;
        USHORT AtomicOpRequesterEnable:1;
        USHORT AtomicOpEgresBlocking:1;
        USHORT IDORequestEnable:1;
        USHORT IDOCompletionEnable:1;
        USHORT LTRMechanismEnable:1;
        USHORT Rsvd:2;
        USHORT OBFFEnable:2;
        USHORT EndEndTLPPrefixBlocking:1;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER, *PPCI_EXPRESS_DEVICE_CONTROL_2_REGISTER;

typedef union _PCI_EXPRESS_DEVICE_STATUS_2_REGISTER {

    struct {

        USHORT Rsvd:16;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_DEVICE_STATUS_2_REGISTER, *PPCI_EXPRESS_DEVICE_STATUS_2_REGISTER;





typedef struct _PCI_EXPRESS_CAPABILITY {

    PCI_CAPABILITIES_HEADER Header;
    PCI_EXPRESS_CAPABILITIES_REGISTER ExpressCapabilities;

    PCI_EXPRESS_DEVICE_CAPABILITIES_REGISTER DeviceCapabilities;

    PCI_EXPRESS_DEVICE_CONTROL_REGISTER DeviceControl;
    PCI_EXPRESS_DEVICE_STATUS_REGISTER DeviceStatus;

    PCI_EXPRESS_LINK_CAPABILITIES_REGISTER LinkCapabilities;

    PCI_EXPRESS_LINK_CONTROL_REGISTER LinkControl;
    PCI_EXPRESS_LINK_STATUS_REGISTER LinkStatus;

    PCI_EXPRESS_SLOT_CAPABILITIES_REGISTER SlotCapabilities;

    PCI_EXPRESS_SLOT_CONTROL_REGISTER SlotControl;
    PCI_EXPRESS_SLOT_STATUS_REGISTER SlotStatus;

    PCI_EXPRESS_ROOT_CONTROL_REGISTER RootControl;
    PCI_EXPRESS_ROOT_CAPABILITIES_REGISTER RootCapabilities;

    PCI_EXPRESS_ROOT_STATUS_REGISTER RootStatus;

    PCI_EXPRESS_DEVICE_CAPABILITIES_2_REGISTER DeviceCapabilities2;
    PCI_EXPRESS_DEVICE_CONTROL_2_REGISTER DeviceControl2;
    PCI_EXPRESS_DEVICE_STATUS_2_REGISTER DeviceStatus2;

} PCI_EXPRESS_CAPABILITY, *PPCI_EXPRESS_CAPABILITY;



typedef enum {

    MRLClosed = 0,
    MRLOpen

} PCI_EXPRESS_MRL_STATE;

typedef enum {

    SlotEmpty = 0,
    CardPresent

} PCI_EXPRESS_CARD_PRESENCE;

typedef enum {

    IndicatorOn = 1,
    IndicatorBlink,
    IndicatorOff

} PCI_EXPRESS_INDICATOR_STATE;

typedef enum {

    PowerOn = 0,
    PowerOff

} PCI_EXPRESS_POWER_STATE;

typedef enum {

    NoAspmSupport = 0,
    L0sEntrySupport = 1,
    L1EntrySupport = 2,
    L0sAndL1EntrySupport = 3

} PCI_EXPRESS_ASPM_SUPPORT;

typedef enum {

    L0sAndL1EntryDisabled,
    L0sEntryEnabled,
    L1EntryEnabled,
    L0sAndL1EntryEnabled

} PCI_EXPRESS_ASPM_CONTROL;

typedef enum {

    L0s_Below64ns = 0,
    L0s_64ns_128ns,
    L0s_128ns_256ns,
    L0s_256ns_512ns,
    L0s_512ns_1us,
    L0s_1us_2us,
    L0s_2us_4us,
    L0s_Above4us

} PCI_EXPRESS_L0s_EXIT_LATENCY;

typedef enum {

    L1_Below1us = 0,
    L1_1us_2us,
    L1_2us_4us,
    L1_4us_8us,
    L1_8us_16us,
    L1_16us_32us,
    L1_32us_64us,
    L1_Above64us

} PCI_EXPRESS_L1_EXIT_LATENCY;



typedef enum {

    PciExpressEndpoint = 0,
    PciExpressLegacyEndpoint,
    PciExpressRootPort = 4,
    PciExpressUpstreamSwitchPort,
    PciExpressDownstreamSwitchPort,
    PciExpressToPciXBridge,
    PciXToExpressBridge,
    PciExpressRootComplexIntegratedEndpoint,
    PciExpressRootComplexEventCollector

} PCI_EXPRESS_DEVICE_TYPE;



typedef enum {

    MaxPayload128Bytes = 0,
    MaxPayload256Bytes,
    MaxPayload512Bytes,
    MaxPayload1024Bytes,
    MaxPayload2048Bytes,
    MaxPayload4096Bytes

} PCI_EXPRESS_MAX_PAYLOAD_SIZE;

typedef union _PCI_EXPRESS_PME_REQUESTOR_ID {

    struct {

        USHORT FunctionNumber:3;
        USHORT DeviceNumber:5;
        USHORT BusNumber:8;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_PME_REQUESTOR_ID, *PPCI_EXPRESS_PME_REQUESTOR_ID;







typedef void
(*PciPin2Line) (
      struct _BUS_HANDLER  *BusHandler,
      struct _BUS_HANDLER  *RootHandler,
      PCI_SLOT_NUMBER      SlotNumber,
      PPCI_COMMON_CONFIG   PciData
    );

typedef void
(*PciLine2Pin) (
      struct _BUS_HANDLER  *BusHandler,
      struct _BUS_HANDLER  *RootHandler,
      PCI_SLOT_NUMBER      SlotNumber,
      PPCI_COMMON_CONFIG   PciNewData,
      PPCI_COMMON_CONFIG   PciOldData
    );

typedef void
(*PciReadWriteConfig) (
      struct _BUS_HANDLER *BusHandler,
      PCI_SLOT_NUMBER Slot,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );




typedef struct _PCIBUSDATA {
    ULONG                   Tag;
    ULONG                   Version;
    PciReadWriteConfig      ReadConfig;
    PciReadWriteConfig      WriteConfig;
    PciPin2Line             Pin2Line;
    PciLine2Pin             Line2Pin;
    PCI_SLOT_NUMBER         ParentSlot;
    PVOID                   Reserved[4];
} PCIBUSDATA, *PPCIBUSDATA;





typedef union _PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER {

    struct {

        ULONG MaxSnoopLatencyValue:10;
        ULONG MaxSnoopLatencyScale:3;
        ULONG Rsvd:2;
        ULONG MaxSnoopRequirement:1;

        ULONG MaxNoSnoopLatencyValue:10;
        ULONG MaxNoSnoopLatencyScale:3;
        ULONG Rsvd2:2;
        ULONG MaxNoSnoopRequirement:1;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER, *PPCI_EXPRESS_LTR_MAX_LATENCY_REGISTER;

typedef struct _PCI_EXPRESS_LTR_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_LTR_MAX_LATENCY_REGISTER Latency;

} PCI_EXPRESS_LTR_CAPABILITY, *PPCI_EXPRESS_LTR_CAPABILITY;










typedef union _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER {

    struct {

        ULONG NoStModeSupported:1;
        ULONG InteruptVectorModeSupported:1;
        ULONG DeviceSpecificModeSupported:1;
        ULONG Rsvd:5;
        ULONG ExtendedTPHRequesterSupported:1;
        ULONG StTableLocation:2;
        ULONG Rsvd2:5;
        ULONG StTableSize:11;
        ULONG Rsvd3:5;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER, *PPCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER;

typedef union _PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER {

    struct {

        ULONG StModeSelect:3;
        ULONG Rsvd:5;
        ULONG TphRequesterEnable:2;
        ULONG Rsvd2:22;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER, *PPCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER;

typedef union _PCI_EXPRESS_TPH_ST_TABLE_ENTRY {

    struct {

        USHORT LowerEntry:8;
        USHORT UpperEntry:8;
    } ;

    USHORT AsUSHORT;

} PCI_EXPRESS_TPH_ST_TABLE_ENTRY, *PPCI_EXPRESS_TPH_ST_TABLE_ENTRY;

typedef struct _PCI_EXPRESS_TPH_REQUESTER_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_TPH_REQUESTER_CAPABILITY_REGISTER RequesterCapability;
    PCI_EXPRESS_TPH_REQUESTER_CONTROL_REGISTER RequesterControl;

} PCI_EXPRESS_TPH_REQUESTER_CAPABILITY, *PPCI_EXPRESS_TPH_REQUESTER_CAPABILITY;





typedef union _PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER {

    struct {
        ULONG PciPmL12Supported:1;
        ULONG PciPmL11Supported:1;
        ULONG AspmL12Supported:1;
        ULONG AspmL11Supported:1;
        ULONG L1PmSsSupported:1;
        ULONG Rsvd:3;
        ULONG PortCommonModeRestoreTime:8;
        ULONG PortTPowerOnScale:2;
        ULONG Rsvd2:1;
        ULONG PortTPowerOnValue:5;
        ULONG Rsvd3:8;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER, *PPCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER;

typedef union _PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER {

    struct {
        ULONG PciPmL12Enabled:1;
        ULONG PciPmL11Enabled:1;
        ULONG AspmL12Enabled:1;
        ULONG AspmL11Enabled:1;
        ULONG Rsvd:4;
        ULONG CommonModeRestoreTime:8;
        ULONG LtrL12ThresholdValue:10;
        ULONG Rsvd2:3;
        ULONG LtrL12ThresholdScale:3;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER, *PPCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER;

typedef union _PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER {

    struct {

        ULONG TPowerOnScale:2;
        ULONG Rsvd:1;
        ULONG TPowerOnValue:5;
        ULONG Rsvd2:24;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER, *PPCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER;

typedef struct _PCI_EXPRESS_L1_PM_SS_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_L1_PM_SS_CAPABILITIES_REGISTER L1PmSsCapabilities;
    PCI_EXPRESS_L1_PM_SS_CONTROL_1_REGISTER L1PmSsControl1;
    PCI_EXPRESS_L1_PM_SS_CONTROL_2_REGISTER L1PmSsControl2;

} PCI_EXPRESS_L1_PM_SS_CAPABILITY, *PPCI_EXPRESS_L1_PM_SS_CAPABILITY;

typedef union _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER {
    struct {
        ULONG Rsvd:4;
        ULONG SizesSupported:20;
        ULONG Rsvd2:8;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER, *PPCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER;

typedef union _PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER {
    struct {

        ULONG BarIndex:3;
        ULONG Rsvd:2;
        ULONG NumberOfResizableBars:3;
        ULONG BarSize:5;
        ULONG Rsvd2:19;
    } ;

    ULONG AsULONG;

} PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER, *PPCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER;

typedef struct _PCI_EXPRESS_RESIZABLE_BAR_ENTRY {
    PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY_REGISTER Capability;
    PCI_EXPRESS_RESIZABLE_BAR_CONTROL_REGISTER Control;
} PCI_EXPRESS_RESIZABLE_BAR_ENTRY, *PPCI_EXPRESS_RESIZABLE_BAR_ENTRY;

typedef struct _PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY {

    PCI_EXPRESS_ENHANCED_CAPABILITY_HEADER Header;

    PCI_EXPRESS_RESIZABLE_BAR_ENTRY Entry[6];

} PCI_EXPRESS_RESIZABLE_BAR_CAPABILITY, *PPCI_EXPRESS_RESIZABLE_BAR_CAPABILITY;









typedef
 
 
ULONG 
PCI_READ_WRITE_CONFIG (
      PVOID Context,
      ULONG BusOffset,
      ULONG Slot,
      PVOID Buffer,
      ULONG Offset,
      ULONG Length
    );

typedef PCI_READ_WRITE_CONFIG *PPCI_READ_WRITE_CONFIG;

typedef
 
 
void 
PCI_PIN_TO_LINE (
      PVOID Context,
      PPCI_COMMON_CONFIG PciData
    );

typedef PCI_PIN_TO_LINE *PPCI_PIN_TO_LINE;

typedef
 
 
void
PCI_LINE_TO_PIN (
      PVOID Context,
      PPCI_COMMON_CONFIG PciNewData,
      PPCI_COMMON_CONFIG PciOldData
    );

typedef PCI_LINE_TO_PIN *PPCI_LINE_TO_PIN;

typedef
 
 
void
PCI_ROOT_BUS_CAPABILITY (
      PVOID Context,
      PPCI_ROOT_BUS_HARDWARE_CAPABILITY HardwareCapability
    );

typedef PCI_ROOT_BUS_CAPABILITY *PPCI_ROOT_BUS_CAPABILITY;

typedef
 
 
void
PCI_EXPRESS_WAKE_CONTROL (
      PVOID Context,
      BOOLEAN EnableWake
    );

typedef PCI_EXPRESS_WAKE_CONTROL *PPCI_EXPRESS_WAKE_CONTROL;

typedef
 
 
void
PCI_PREPARE_MULTISTAGE_RESUME (
      PVOID Context
    );

typedef PCI_PREPARE_MULTISTAGE_RESUME *PPCI_PREPARE_MULTISTAGE_RESUME;


typedef struct _PCI_BUS_INTERFACE_STANDARD {
    
    
    
    USHORT Size;
    USHORT Version;
    PVOID Context;
    PINTERFACE_REFERENCE InterfaceReference;
    PINTERFACE_DEREFERENCE InterfaceDereference;
    
    
    
    PPCI_READ_WRITE_CONFIG ReadConfig;
    PPCI_READ_WRITE_CONFIG WriteConfig;
    PPCI_PIN_TO_LINE PinToLine;
    PPCI_LINE_TO_PIN LineToPin;
    PPCI_ROOT_BUS_CAPABILITY RootBusCapability;
    PPCI_EXPRESS_WAKE_CONTROL ExpressWakeControl;
    PPCI_PREPARE_MULTISTAGE_RESUME PrepareMultistageResume;

} PCI_BUS_INTERFACE_STANDARD, *PPCI_BUS_INTERFACE_STANDARD;






#line 14556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationThread (
      HANDLE ThreadHandle,
      THREADINFOCLASS ThreadInformationClass,
      PVOID ThreadInformation,
      ULONG ThreadInformationLength
    );
#line 14573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 

NTSTATUS
ZwCreateTimer (
      PHANDLE TimerHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      TIMER_TYPE TimerType
    );
#line 14585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
NTSTATUS
ZwOpenTimer (
      PHANDLE TimerHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 14595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
NTSTATUS
ZwCancelTimer (
      HANDLE TimerHandle,
      PBOOLEAN CurrentState
    );
#line 14604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
NTSTATUS
ZwSetTimer (
      HANDLE TimerHandle,
      PLARGE_INTEGER DueTime,
      PTIMER_APC_ROUTINE TimerApcRoutine,
      PVOID TimerContext,
      BOOLEAN ResumeTimer,
      LONG Period,
      PBOOLEAN PreviousState
    );
#line 14618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
NTSTATUS
ZwSetTimerEx (
      HANDLE TimerHandle,
      TIMER_SET_INFORMATION_CLASS TimerSetInformationClass,
      PVOID TimerSetInformation,
      ULONG TimerSetInformationLength
    );
#line 14629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryVolumeInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FsInformation,
      ULONG Length,
      FS_INFORMATION_CLASS FsInformationClass
    );
#line 14643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDeviceIoControlFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG IoControlCode,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );
#line 14662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDisplayString(
      PUNICODE_STRING String
    );
#line 14672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwPowerInformation(
      POWER_INFORMATION_LEVEL InformationLevel,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );
#line 14686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwAllocateLocallyUniqueId(
      PLUID Luid
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwTerminateProcess (
      HANDLE ProcessHandle,
      NTSTATUS ExitStatus
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenProcess (
      PHANDLE ProcessHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PCLIENT_ID ClientId
    );











typedef enum _WHEA_ERROR_SOURCE_TYPE {
    WheaErrSrcTypeMCE          = 0x00,    
    WheaErrSrcTypeCMC          = 0x01,    
    WheaErrSrcTypeCPE          = 0x02,    
    WheaErrSrcTypeNMI          = 0x03,    
    WheaErrSrcTypePCIe         = 0x04,    
    WheaErrSrcTypeGeneric      = 0x05,    
    WheaErrSrcTypeINIT         = 0x06,    
    WheaErrSrcTypeBOOT         = 0x07,    
    WheaErrSrcTypeSCIGeneric   = 0x08,    
    WheaErrSrcTypeIPFMCA       = 0x09,    
    WheaErrSrcTypeIPFCMC       = 0x0a,    
    WheaErrSrcTypeIPFCPE       = 0x0b,    
    WheaErrSrcTypeGenericV2    = 0x0c,    
    WheaErrSrcTypeSCIGenericV2 = 0x0d,    
    WheaErrSrcTypeMax
} WHEA_ERROR_SOURCE_TYPE, *PWHEA_ERROR_SOURCE_TYPE;






typedef enum _WHEA_ERROR_SOURCE_STATE {
    WheaErrSrcStateStopped = 0x01,
    WheaErrSrcStateStarted = 0x02
} WHEA_ERROR_SOURCE_STATE, *PWHEA_ERROR_SOURCE_STATE;






































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 14792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



typedef union _WHEA_NOTIFICATION_FLAGS {
    struct {
        USHORT PollIntervalRW:1;
        USHORT SwitchToPollingThresholdRW:1;
        USHORT SwitchToPollingWindowRW:1;
        USHORT ErrorThresholdRW:1;
        USHORT ErrorThresholdWindowRW:1;
        USHORT Reserved:11;
    } ;
    USHORT AsUSHORT;
} WHEA_NOTIFICATION_FLAGS, *PWHEA_NOTIFICATION_FLAGS;

typedef union _XPF_MC_BANK_FLAGS {
    struct {
        UCHAR ClearOnInitializationRW:1;
        UCHAR ControlDataRW:1;
        UCHAR Reserved:6;
    } ;
    UCHAR AsUCHAR;
} XPF_MC_BANK_FLAGS, *PXPF_MC_BANK_FLAGS;

typedef union _XPF_MCE_FLAGS {
    struct {
        ULONG MCG_CapabilityRW:1;
        ULONG MCG_GlobalControlRW:1;
        ULONG Reserved:30;
    } ;
    ULONG AsULONG;
} XPF_MCE_FLAGS, *PXPF_MCE_FLAGS;

typedef union _AER_ROOTPORT_DESCRIPTOR_FLAGS {
    struct {
        USHORT UncorrectableErrorMaskRW:1;
        USHORT UncorrectableErrorSeverityRW:1;
        USHORT CorrectableErrorMaskRW:1;
        USHORT AdvancedCapsAndControlRW:1;
        USHORT RootErrorCommandRW:1;
        USHORT Reserved:11;
    } ;
    USHORT AsUSHORT;
} AER_ROOTPORT_DESCRIPTOR_FLAGS, *PAER_ROOTPORT_DESCRIPTOR_FLAGS;

typedef union _AER_ENDPOINT_DESCRIPTOR_FLAGS {
    struct {
        USHORT UncorrectableErrorMaskRW:1;
        USHORT UncorrectableErrorSeverityRW:1;
        USHORT CorrectableErrorMaskRW:1;
        USHORT AdvancedCapsAndControlRW:1;
        USHORT Reserved:12;
    } ;
    USHORT AsUSHORT;
} AER_ENDPOINT_DESCRIPTOR_FLAGS, *PAER_ENDPOINT_DESCRIPTOR_FLAGS;

typedef union _AER_BRIDGE_DESCRIPTOR_FLAGS {
    struct {
        USHORT UncorrectableErrorMaskRW:1;
        USHORT UncorrectableErrorSeverityRW:1;
        USHORT CorrectableErrorMaskRW:1;
        USHORT AdvancedCapsAndControlRW:1;
        USHORT SecondaryUncorrectableErrorMaskRW:1;
        USHORT SecondaryUncorrectableErrorSevRW:1;
        USHORT SecondaryCapsAndControlRW:1;
        USHORT Reserved:9;
    } ;
    USHORT AsUSHORT;
} AER_BRIDGE_DESCRIPTOR_FLAGS, *PAER_BRIDGE_DESCRIPTOR_FLAGS;






typedef struct _WHEA_NOTIFICATION_DESCRIPTOR {
    UCHAR Type;
    UCHAR Length;
    WHEA_NOTIFICATION_FLAGS Flags;

    union {
        struct {
            ULONG PollInterval;
        } Polled;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Interrupt;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } LocalInterrupt;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sci;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Nmi;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sea;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Sei;

        struct {
            ULONG PollInterval;
            ULONG Vector;
            ULONG SwitchToPollingThreshold;
            ULONG SwitchToPollingWindow;
            ULONG ErrorThreshold;
            ULONG ErrorThresholdWindow;
        } Gsiv;
    } u;
} WHEA_NOTIFICATION_DESCRIPTOR, *PWHEA_NOTIFICATION_DESCRIPTOR;








typedef struct _WHEA_XPF_MC_BANK_DESCRIPTOR {
    UCHAR BankNumber;
    BOOLEAN ClearOnInitialization;
    UCHAR StatusDataFormat;
    XPF_MC_BANK_FLAGS Flags;
    ULONG ControlMsr;
    ULONG StatusMsr;
    ULONG AddressMsr;
    ULONG MiscMsr;
    ULONGLONG ControlData;
} WHEA_XPF_MC_BANK_DESCRIPTOR, *PWHEA_XPF_MC_BANK_DESCRIPTOR;







typedef struct _WHEA_XPF_MCE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR NumberOfBanks;
    XPF_MCE_FLAGS Flags;
    ULONGLONG MCG_Capability;
    ULONGLONG MCG_GlobalControl;
    WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_MCE_DESCRIPTOR, *PWHEA_XPF_MCE_DESCRIPTOR;







typedef struct _WHEA_XPF_CMC_DESCRIPTOR {
    USHORT Type;
    BOOLEAN Enabled;
    UCHAR NumberOfBanks;
    ULONG Reserved;
    WHEA_NOTIFICATION_DESCRIPTOR Notify;
    WHEA_XPF_MC_BANK_DESCRIPTOR Banks[32];
} WHEA_XPF_CMC_DESCRIPTOR, *PWHEA_XPF_CMC_DESCRIPTOR;

typedef struct _WHEA_PCI_SLOT_NUMBER {
    union {
        struct {
            ULONG DeviceNumber:5;
            ULONG FunctionNumber:3;
            ULONG Reserved:24;
        } bits;
        ULONG AsULONG;
    } u;
} WHEA_PCI_SLOT_NUMBER, *PWHEA_PCI_SLOT_NUMBER;







typedef struct _WHEA_XPF_NMI_DESCRIPTOR {
    USHORT Type;
    BOOLEAN Enabled;
} WHEA_XPF_NMI_DESCRIPTOR, *PWHEA_XPF_NMI_DESCRIPTOR;







typedef struct _WHEA_AER_ROOTPORT_DESCRIPTOR {
    USHORT Type;
    BOOLEAN Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    AER_ROOTPORT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG RootErrorCommand;
} WHEA_AER_ROOTPORT_DESCRIPTOR, *PWHEA_AER_ROOTPORT_DESCRIPTOR;







typedef struct _WHEA_AER_ENDPOINT_DESCRIPTOR {
    USHORT Type;
    BOOLEAN Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    AER_ENDPOINT_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
} WHEA_AER_ENDPOINT_DESCRIPTOR, *PWHEA_AER_ENDPOINT_DESCRIPTOR;







typedef struct _WHEA_AER_BRIDGE_DESCRIPTOR {
    USHORT Type;
    BOOLEAN Enabled;
    UCHAR Reserved;
    ULONG BusNumber;
    WHEA_PCI_SLOT_NUMBER Slot;
    USHORT DeviceControl;
    AER_BRIDGE_DESCRIPTOR_FLAGS Flags;
    ULONG UncorrectableErrorMask;
    ULONG UncorrectableErrorSeverity;
    ULONG CorrectableErrorMask;
    ULONG AdvancedCapsAndControl;
    ULONG SecondaryUncorrectableErrorMask;
    ULONG SecondaryUncorrectableErrorSev;
    ULONG SecondaryCapsAndControl;
} WHEA_AER_BRIDGE_DESCRIPTOR, *PWHEA_AER_BRIDGE_DESCRIPTOR;







typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR {

    
    
    

    USHORT Type;

    
    
    

    UCHAR Reserved;

    
    
    

    UCHAR Enabled;

    
    
    

    ULONG ErrStatusBlockLength;

    
    
    
    

    ULONG RelatedErrorSourceId;

    
    
    
    
    

    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    LARGE_INTEGER ErrStatusAddress;

    
    
    
    

    WHEA_NOTIFICATION_DESCRIPTOR Notify;

} WHEA_GENERIC_ERROR_DESCRIPTOR, *PWHEA_GENERIC_ERROR_DESCRIPTOR;

typedef struct _WHEA_GENERIC_ERROR_DESCRIPTOR_V2 {

    
    
    

    USHORT Type;

    
    
    

    UCHAR Reserved;

    
    
    

    UCHAR Enabled;

    
    
    

    ULONG ErrStatusBlockLength;

    
    
    
    

    ULONG RelatedErrorSourceId;

    
    
    
    
    

    UCHAR ErrStatusAddressSpaceID;
    UCHAR ErrStatusAddressBitWidth;
    UCHAR ErrStatusAddressBitOffset;
    UCHAR ErrStatusAddressAccessSize;
    LARGE_INTEGER ErrStatusAddress;
    
    
    
    
    

    WHEA_NOTIFICATION_DESCRIPTOR Notify;

    
    
    
    
    

    UCHAR ReadAckAddressSpaceID;
    UCHAR ReadAckAddressBitWidth;
    UCHAR ReadAckAddressBitOffset;
    UCHAR ReadAckAddressAccessSize;
    LARGE_INTEGER ReadAckAddress;
    ULONGLONG ReadAckPreserveMask;
    ULONGLONG ReadAckWriteMask;

} WHEA_GENERIC_ERROR_DESCRIPTOR_V2, *PWHEA_GENERIC_ERROR_DESCRIPTOR_V2;

typedef struct _WHEA_IPF_MCA_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
} WHEA_IPF_MCA_DESCRIPTOR, *PWHEA_IPF_MCA_DESCRIPTOR;

typedef struct _WHEA_IPF_CMC_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
} WHEA_IPF_CMC_DESCRIPTOR, *PWHEA_IPF_CMC_DESCRIPTOR;

typedef struct _WHEA_IPF_CPE_DESCRIPTOR {
    USHORT Type;
    UCHAR Enabled;
    UCHAR Reserved;
} WHEA_IPF_CPE_DESCRIPTOR, *PWHEA_IPF_CPE_DESCRIPTOR;

typedef struct _WHEA_ERROR_SOURCE_DESCRIPTOR {
    ULONG Length;                                              
    ULONG Version;                                             
    WHEA_ERROR_SOURCE_TYPE Type;                               
    WHEA_ERROR_SOURCE_STATE State;                             
    ULONG MaxRawDataLength;                                    
    ULONG NumRecordsToPreallocate;                             
    ULONG MaxSectionsPerRecord;                                
    ULONG ErrorSourceId;                                       
    ULONG PlatformErrorSourceId;                               
    ULONG Flags;                                               

    union {                                                    
        WHEA_XPF_MCE_DESCRIPTOR XpfMceDescriptor;
        WHEA_XPF_CMC_DESCRIPTOR XpfCmcDescriptor;
        WHEA_XPF_NMI_DESCRIPTOR XpfNmiDescriptor;
        WHEA_IPF_MCA_DESCRIPTOR IpfMcaDescriptor;
        WHEA_IPF_CMC_DESCRIPTOR IpfCmcDescriptor;
        WHEA_IPF_CPE_DESCRIPTOR IpfCpeDescriptor;
        WHEA_AER_ROOTPORT_DESCRIPTOR AerRootportDescriptor;
        WHEA_AER_ENDPOINT_DESCRIPTOR AerEndpointDescriptor;
        WHEA_AER_BRIDGE_DESCRIPTOR AerBridgeDescriptor;
        WHEA_GENERIC_ERROR_DESCRIPTOR GenErrDescriptor;
        WHEA_GENERIC_ERROR_DESCRIPTOR_V2 GenErrDescriptorV2;
    } Info;

} WHEA_ERROR_SOURCE_DESCRIPTOR, *PWHEA_ERROR_SOURCE_DESCRIPTOR;













#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 15265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






































































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 15336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"















#line 15352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








typedef union _WHEA_REVISION {
    struct {
        UCHAR MinorRevision;
        UCHAR MajorRevision;
    } ;
    USHORT AsUSHORT;
} WHEA_REVISION, *PWHEA_REVISION;

typedef enum _WHEA_ERROR_SEVERITY {
    WheaErrSevRecoverable   = 0,
    WheaErrSevFatal         = 1,
    WheaErrSevCorrected     = 2,
    WheaErrSevInformational = 3
} WHEA_ERROR_SEVERITY, *PWHEA_ERROR_SEVERITY;

typedef union _WHEA_TIMESTAMP {
    struct {
        ULONGLONG Seconds:8;
        ULONGLONG Minutes:8;
        ULONGLONG Hours:8;
        ULONGLONG Precise:1;
        ULONGLONG Reserved:7;
        ULONGLONG Day:8;
        ULONGLONG Month:8;
        ULONGLONG Year:8;
        ULONGLONG Century:8;
    } ;
    LARGE_INTEGER AsLARGE_INTEGER;
} WHEA_TIMESTAMP, *PWHEA_TIMESTAMP;

typedef union _WHEA_PERSISTENCE_INFO {
    struct {
        ULONGLONG Signature:16;
        ULONGLONG Length:24;
        ULONGLONG Identifier:16;
        ULONGLONG Attributes:2;
        ULONGLONG DoNotLog:1;
        ULONGLONG Reserved:5;
    } ;
    ULONGLONG AsULONGLONG;
} WHEA_PERSISTENCE_INFO, *PWHEA_PERSISTENCE_INFO;




















typedef union _WHEA_ERROR_STATUS {
    ULONGLONG ErrorStatus;
    struct {
        ULONGLONG Reserved1:8;
        ULONGLONG ErrorType:8;
        ULONGLONG Address:1;
        ULONGLONG Control:1;
        ULONGLONG Data:1;
        ULONGLONG Responder:1;
        ULONGLONG Requester:1;
        ULONGLONG FirstError:1;
        ULONGLONG Overflow:1;
        ULONGLONG Reserved2:41;
    } ;
} WHEA_ERROR_STATUS, *PWHEA_ERROR_STATUS;



typedef union _WHEA_ERROR_RECORD_HEADER_VALIDBITS {
    struct {
        ULONG PlatformId:1;
        ULONG Timestamp:1;
        ULONG PartitionId:1;
        ULONG Reserved:29;
    } ;
    ULONG AsULONG;
} WHEA_ERROR_RECORD_HEADER_VALIDBITS, *PWHEA_ERROR_RECORD_HEADER_VALIDBITS;





typedef union _WHEA_ERROR_RECORD_HEADER_FLAGS {
    struct {
        ULONG Recovered:1;
        ULONG PreviousError:1;
        ULONG Simulated:1;
        ULONG Reserved:29;
    } ;
    ULONG AsULONG;
} WHEA_ERROR_RECORD_HEADER_FLAGS, *PWHEA_ERROR_RECORD_HEADER_FLAGS;





typedef struct _WHEA_ERROR_RECORD_HEADER {
    ULONG Signature;
    WHEA_REVISION Revision;
    ULONG SignatureEnd;
    USHORT SectionCount;
    WHEA_ERROR_SEVERITY Severity;
    WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits;
     
#line 15477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
        ULONG Length;
    WHEA_TIMESTAMP Timestamp;
    GUID PlatformId;
    GUID PartitionId;
    GUID CreatorId;
    GUID NotifyType;
    ULONGLONG RecordId;
    WHEA_ERROR_RECORD_HEADER_FLAGS Flags;
    WHEA_PERSISTENCE_INFO PersistenceInfo;
    UCHAR Reserved[12];
} WHEA_ERROR_RECORD_HEADER, *PWHEA_ERROR_RECORD_HEADER;















typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Signature)) == (0)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Signature)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Revision)) == (4)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Revision)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->SignatureEnd)) == (6)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->SignatureEnd)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->SectionCount)) == (10)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->SectionCount)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Severity)) == (12)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Severity)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->ValidBits)) == (16)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->ValidBits)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Length)) == (20)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Length)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Timestamp)) == (24)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Timestamp)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->PlatformId)) == (32)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->PlatformId)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->PartitionId)) == (48)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->PartitionId)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->CreatorId)) == (64)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->CreatorId)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->NotifyType)) == (80)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->NotifyType)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->RecordId)) == (96)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->RecordId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Flags)) == (104)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Flags)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->PersistenceInfo)) == (108)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->PersistenceInfo)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_HEADER *)0)->Reserved)) == (116)) && ((sizeof(((WHEA_ERROR_RECORD_HEADER *)0)->Reserved)) == (12))))?1:-1];



typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS {
    struct {
        ULONG Primary:1;
        ULONG ContainmentWarning:1;
        ULONG Reset:1;
        ULONG ThresholdExceeded:1;
        ULONG ResourceNotAvailable:1;
        ULONG LatentError:1;
        ULONG Propagated:1;
        ULONG Reserved:25;
    } ;
    ULONG AsULONG;
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS,
    *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS;









typedef union _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS {
    struct {
        UCHAR FRUId:1;
        UCHAR FRUText:1;
        UCHAR Reserved:6;
    } ;
    UCHAR AsUCHAR;
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS,
    *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS;

typedef struct _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR {
    ULONG SectionOffset;
    ULONG SectionLength;
    WHEA_REVISION Revision;
    WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits;
    UCHAR Reserved;
    WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags;
    GUID SectionType;
    GUID FRUId;
    WHEA_ERROR_SEVERITY SectionSeverity;
    CCHAR FRUText[20];
} WHEA_ERROR_RECORD_SECTION_DESCRIPTOR, *PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR;








#line 15576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionOffset)) == (0)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionOffset)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionLength)) == (4)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionLength)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->Revision)) == (8)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->Revision)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->ValidBits)) == (10)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->ValidBits)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->Reserved)) == (11)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->Reserved)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->Flags)) == (12)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->Flags)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionType)) == (16)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionType)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->FRUId)) == (32)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->FRUId)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionSeverity)) == (48)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->SectionSeverity)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->FRUText)) == (52)) && ((sizeof(((WHEA_ERROR_RECORD_SECTION_DESCRIPTOR *)0)->FRUText)) == (20))))?1:-1];



typedef   struct _WHEA_ERROR_RECORD {
    WHEA_ERROR_RECORD_HEADER Header;
     
        WHEA_ERROR_RECORD_SECTION_DESCRIPTOR SectionDescriptor[1];
} WHEA_ERROR_RECORD, *PWHEA_ERROR_RECORD;






typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD *)0)->Header)) == (0)) && ((sizeof(((WHEA_ERROR_RECORD *)0)->Header)) == (128))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_RECORD *)0)->SectionDescriptor)) == (128)) && ((sizeof(((WHEA_ERROR_RECORD *)0)->SectionDescriptor)) == (72))))?1:-1];





























typedef union _WHEA_PROCESSOR_FAMILY_INFO {
    struct {
        ULONG Stepping:4;
        ULONG Model:4;
        ULONG Family:4;
        ULONG ProcessorType:2;
        ULONG Reserved1:2;
        ULONG ExtendedModel:4;
        ULONG ExtendedFamily:8;
        ULONG Reserved2:4;
        ULONG Reserved3;
    } ;
    ULONGLONG AsULONGLONG;
} WHEA_PROCESSOR_FAMILY_INFO, *PWHEA_PROCESSOR_FAMILY_INFO;

typedef union _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS {
    struct {
        ULONGLONG ProcessorType:1;
        ULONGLONG InstructionSet:1;
        ULONGLONG ErrorType:1;
        ULONGLONG Operation:1;
        ULONGLONG Flags:1;
        ULONGLONG Level:1;
        ULONGLONG CPUVersion:1;
        ULONGLONG CPUBrandString:1;
        ULONGLONG ProcessorId:1;
        ULONGLONG TargetAddress:1;
        ULONGLONG RequesterId:1;
        ULONGLONG ResponderId:1;
        ULONGLONG InstructionPointer:1;
        ULONGLONG Reserved:51;
    } ;
    ULONGLONG ValidBits;
} WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS,
  *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS;

typedef struct _WHEA_PROCESSOR_GENERIC_ERROR_SECTION {
    WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits;
    UCHAR ProcessorType;
    UCHAR InstructionSet;
    UCHAR ErrorType;
    UCHAR Operation;
    UCHAR Flags;
    UCHAR Level;
    USHORT Reserved;
    ULONGLONG CPUVersion;
    UCHAR CPUBrandString[128];
    ULONGLONG ProcessorId;
    ULONGLONG TargetAddress;
    ULONGLONG RequesterId;
    ULONGLONG ResponderId;
    ULONGLONG InstructionPointer;
} WHEA_PROCESSOR_GENERIC_ERROR_SECTION, *PWHEA_PROCESSOR_GENERIC_ERROR_SECTION;














#line 15705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ProcessorType)) == (8)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ProcessorType)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->InstructionSet)) == (9)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->InstructionSet)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ErrorType)) == (10)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ErrorType)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Operation)) == (11)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Operation)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Flags)) == (12)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Flags)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Level)) == (13)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Level)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Reserved)) == (14)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->Reserved)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->CPUVersion)) == (16)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->CPUVersion)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->CPUBrandString)) == (24)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->CPUBrandString)) == (128))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ProcessorId)) == (152)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ProcessorId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->TargetAddress)) == (160)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->TargetAddress)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->RequesterId)) == (168)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->RequesterId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ResponderId)) == (176)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->ResponderId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->InstructionPointer)) == (184)) && ((sizeof(((WHEA_PROCESSOR_GENERIC_ERROR_SECTION *)0)->InstructionPointer)) == (8))))?1:-1];





















typedef union _WHEA_XPF_CACHE_CHECK {
    struct {
        ULONGLONG TransactionTypeValid:1;
        ULONGLONG OperationValid:1;
        ULONGLONG LevelValid:1;
        ULONGLONG ProcessorContextCorruptValid:1;
        ULONGLONG UncorrectedValid:1;
        ULONGLONG PreciseIPValid:1;
        ULONGLONG RestartableIPValid:1;
        ULONGLONG OverflowValid:1;
        ULONGLONG ReservedValid:8;

        ULONGLONG TransactionType:2;
        ULONGLONG Operation:4;
        ULONGLONG Level:3;
        ULONGLONG ProcessorContextCorrupt:1;
        ULONGLONG Uncorrected:1;
        ULONGLONG PreciseIP:1;
        ULONGLONG RestartableIP:1;
        ULONGLONG Overflow:1;

        ULONGLONG Reserved:34;
    } ;
    ULONGLONG XpfCacheCheck;
} WHEA_XPF_CACHE_CHECK, *PWHEA_XPF_CACHE_CHECK;

















typedef union _WHEA_XPF_TLB_CHECK {
    struct {
        ULONGLONG TransactionTypeValid:1;
        ULONGLONG OperationValid:1;
        ULONGLONG LevelValid:1;
        ULONGLONG ProcessorContextCorruptValid:1;
        ULONGLONG UncorrectedValid:1;
        ULONGLONG PreciseIPValid:1;
        ULONGLONG RestartableIPValid:1;
        ULONGLONG OverflowValid:1;
        ULONGLONG ReservedValid:8;

        ULONGLONG TransactionType:2;
        ULONGLONG Operation:4;
        ULONGLONG Level:3;
        ULONGLONG ProcessorContextCorrupt:1;
        ULONGLONG Uncorrected:1;
        ULONGLONG PreciseIP:1;
        ULONGLONG RestartableIP:1;
        ULONGLONG Overflow:1;
        ULONGLONG Reserved:34;
    } ;
    ULONGLONG XpfTLBCheck;
} WHEA_XPF_TLB_CHECK, *PWHEA_XPF_TLB_CHECK;



























typedef union _WHEA_XPF_BUS_CHECK {
    struct {
        ULONGLONG TransactionTypeValid:1;
        ULONGLONG OperationValid:1;
        ULONGLONG LevelValid:1;
        ULONGLONG ProcessorContextCorruptValid:1;
        ULONGLONG UncorrectedValid:1;
        ULONGLONG PreciseIPValid:1;
        ULONGLONG RestartableIPValid:1;
        ULONGLONG OverflowValid:1;
        ULONGLONG ParticipationValid:1;
        ULONGLONG TimeoutValid:1;
        ULONGLONG AddressSpaceValid:1;
        ULONGLONG ReservedValid:5;

        ULONGLONG TransactionType:2;
        ULONGLONG Operation:4;
        ULONGLONG Level:3;
        ULONGLONG ProcessorContextCorrupt:1;
        ULONGLONG Uncorrected:1;
        ULONGLONG PreciseIP:1;
        ULONGLONG RestartableIP:1;
        ULONGLONG Overflow:1;
        ULONGLONG Participation:2;
        ULONGLONG Timeout:1;
        ULONGLONG AddressSpace:2;
        ULONGLONG Reserved:29;
    } ;
    ULONGLONG XpfBusCheck;
} WHEA_XPF_BUS_CHECK, *PWHEA_XPF_BUS_CHECK;












typedef union _WHEA_XPF_MS_CHECK {
    struct {
        ULONGLONG ErrorTypeValid:1;
        ULONGLONG ProcessorContextCorruptValid:1;
        ULONGLONG UncorrectedValid:1;
        ULONGLONG PreciseIPValid:1;
        ULONGLONG RestartableIPValid:1;
        ULONGLONG OverflowValid:1;
        ULONGLONG ReservedValue:10;

        ULONGLONG ErrorType:3;
        ULONGLONG ProcessorContextCorrupt:1;
        ULONGLONG Uncorrected:1;
        ULONGLONG PreciseIP:1;
        ULONGLONG RestartableIP:1;
        ULONGLONG Overflow:1;
        ULONGLONG Reserved:40;
    } ;
    ULONGLONG XpfMsCheck;
} WHEA_XPF_MS_CHECK, *PWHEA_XPF_MS_CHECK;





typedef union _WHEA_XPF_PROCINFO_VALIDBITS {
    struct {
        ULONGLONG CheckInfo:1;
        ULONGLONG TargetId:1;
        ULONGLONG RequesterId:1;
        ULONGLONG ResponderId:1;
        ULONGLONG InstructionPointer:1;
        ULONGLONG Reserved:59;
    } ;
    ULONGLONG ValidBits;
} WHEA_XPF_PROCINFO_VALIDBITS, *PWHEA_XPF_PROCINFO_VALIDBITS;

typedef struct _WHEA_XPF_PROCINFO {
    GUID CheckInfoId;
    WHEA_XPF_PROCINFO_VALIDBITS ValidBits;
    union {
        WHEA_XPF_CACHE_CHECK CacheCheck;
        WHEA_XPF_TLB_CHECK TlbCheck;
        WHEA_XPF_BUS_CHECK BusCheck;
        WHEA_XPF_MS_CHECK MsCheck;
        ULONGLONG AsULONGLONG;
    } CheckInfo;
    ULONGLONG TargetId;
    ULONGLONG RequesterId;
    ULONGLONG ResponderId;
    ULONGLONG InstructionPointer;
} WHEA_XPF_PROCINFO, *PWHEA_XPF_PROCINFO;





typedef struct _WHEA_X86_REGISTER_STATE {
    ULONG Eax;
    ULONG Ebx;
    ULONG Ecx;
    ULONG Edx;
    ULONG Esi;
    ULONG Edi;
    ULONG Ebp;
    ULONG Esp;
    USHORT Cs;
    USHORT Ds;
    USHORT Ss;
    USHORT Es;
    USHORT Fs;
    USHORT Gs;
    ULONG Eflags;
    ULONG Eip;
    ULONG Cr0;
    ULONG Cr1;
    ULONG Cr2;
    ULONG Cr3;
    ULONG Cr4;
    ULONGLONG Gdtr;
    ULONGLONG Idtr;
    USHORT Ldtr;
    USHORT Tr;
} WHEA_X86_REGISTER_STATE, *PWHEA_X86_REGISTER_STATE;

typedef struct __declspec(align(16)) _WHEA128A {
    ULONGLONG Low;
    LONGLONG High;
} WHEA128A, *PWHEA128A;



#pragma warning(push)
#pragma warning(disable:4324) 
#line 15977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
#line 15978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _WHEA_X64_REGISTER_STATE {
    ULONGLONG Rax;
    ULONGLONG Rbx;
    ULONGLONG Rcx;
    ULONGLONG Rdx;
    ULONGLONG Rsi;
    ULONGLONG Rdi;
    ULONGLONG Rbp;
    ULONGLONG Rsp;
    ULONGLONG R8;
    ULONGLONG R9;
    ULONGLONG R10;
    ULONGLONG R11;
    ULONGLONG R12;
    ULONGLONG R13;
    ULONGLONG R14;
    ULONGLONG R15;
    USHORT Cs;
    USHORT Ds;
    USHORT Ss;
    USHORT Es;
    USHORT Fs;
    USHORT Gs;
    ULONG Reserved;
    ULONGLONG Rflags;
    ULONGLONG Eip;
    ULONGLONG Cr0;
    ULONGLONG Cr1;
    ULONGLONG Cr2;
    ULONGLONG Cr3;
    ULONGLONG Cr4;
    ULONGLONG Cr8;
    WHEA128A Gdtr;
    WHEA128A Idtr;
    USHORT Ldtr;
    USHORT Tr;
} WHEA_X64_REGISTER_STATE, *PWHEA_X64_REGISTER_STATE;



#pragma warning(pop)
#line 16021 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"
#line 16022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"










typedef struct _WHEA_XPF_CONTEXT_INFO {
    USHORT RegisterContextType;
    USHORT RegisterDataSize;
    ULONG MSRAddress;
    ULONGLONG MmRegisterAddress;

    
    
    

} WHEA_XPF_CONTEXT_INFO, *PWHEA_XPF_CONTEXT_INFO;





typedef union _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS {
    struct {
        ULONGLONG LocalAPICId:1;
        ULONGLONG CpuId:1;
        ULONGLONG ProcInfoCount:6;
        ULONGLONG ContextInfoCount:6;
        ULONGLONG Reserved:50;
    } ;
    ULONGLONG ValidBits;
} WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS,
  *PWHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS;

typedef struct _WHEA_XPF_PROCESSOR_ERROR_SECTION {
    WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits;
    ULONGLONG LocalAPICId;
    UCHAR CpuId[48];

    
    
    
    

    UCHAR VariableInfo[1];
} WHEA_XPF_PROCESSOR_ERROR_SECTION, *PWHEA_XPF_PROCESSOR_ERROR_SECTION;













#line 16086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->CheckInfoId)) == (0)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->CheckInfoId)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->ValidBits)) == (16)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->CheckInfo)) == (24)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->CheckInfo)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->TargetId)) == (32)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->TargetId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->RequesterId)) == (40)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->RequesterId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->ResponderId)) == (48)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->ResponderId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCINFO *)0)->InstructionPointer)) == (56)) && ((sizeof(((WHEA_XPF_PROCINFO *)0)->InstructionPointer)) == (8))))?1:-1];

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Eax)) == (0)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Eax)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Ebx)) == (4)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Ebx)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Ecx)) == (8)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Ecx)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Edx)) == (12)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Edx)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Esi)) == (16)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Esi)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Edi)) == (20)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Edi)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Ebp)) == (24)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Ebp)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Esp)) == (28)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Esp)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Cs)) == (32)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Cs)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Ds)) == (34)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Ds)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Ss)) == (36)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Ss)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Es)) == (38)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Es)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Fs)) == (40)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Fs)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Gs)) == (42)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Gs)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Eflags)) == (44)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Eflags)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Eip)) == (48)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Eip)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Cr0)) == (52)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Cr0)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Cr1)) == (56)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Cr1)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Cr2)) == (60)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Cr2)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Cr3)) == (64)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Cr3)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Cr4)) == (68)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Cr4)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Gdtr)) == (72)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Gdtr)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Idtr)) == (80)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Idtr)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Ldtr)) == (88)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Ldtr)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X86_REGISTER_STATE *)0)->Tr)) == (90)) && ((sizeof(((WHEA_X86_REGISTER_STATE *)0)->Tr)) == (2))))?1:-1];

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rax)) == (0)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rax)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rbx)) == (8)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rbx)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rcx)) == (16)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rcx)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rdx)) == (24)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rdx)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rsi)) == (32)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rsi)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rdi)) == (40)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rdi)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rbp)) == (48)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rbp)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rsp)) == (56)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rsp)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R8)) == (64)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R8)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R9)) == (72)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R9)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R10)) == (80)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R10)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R11)) == (88)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R11)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R12)) == (96)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R12)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R13)) == (104)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R13)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R14)) == (112)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R14)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->R15)) == (120)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->R15)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cs)) == (128)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cs)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Ds)) == (130)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Ds)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Ss)) == (132)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Ss)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Es)) == (134)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Es)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Fs)) == (136)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Fs)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Gs)) == (138)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Gs)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Reserved)) == (140)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Reserved)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Rflags)) == (144)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Rflags)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Eip)) == (152)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Eip)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cr0)) == (160)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cr0)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cr1)) == (168)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cr1)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cr2)) == (176)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cr2)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cr3)) == (184)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cr3)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cr4)) == (192)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cr4)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Cr8)) == (200)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Cr8)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Gdtr)) == (208)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Gdtr)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Idtr)) == (224)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Idtr)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Ldtr)) == (240)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Ldtr)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_X64_REGISTER_STATE *)0)->Tr)) == (242)) && ((sizeof(((WHEA_X64_REGISTER_STATE *)0)->Tr)) == (2))))?1:-1];

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_CONTEXT_INFO *)0)->RegisterContextType)) == (0)) && ((sizeof(((WHEA_XPF_CONTEXT_INFO *)0)->RegisterContextType)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_CONTEXT_INFO *)0)->RegisterDataSize)) == (2)) && ((sizeof(((WHEA_XPF_CONTEXT_INFO *)0)->RegisterDataSize)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_CONTEXT_INFO *)0)->MSRAddress)) == (4)) && ((sizeof(((WHEA_XPF_CONTEXT_INFO *)0)->MSRAddress)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_CONTEXT_INFO *)0)->MmRegisterAddress)) == (8)) && ((sizeof(((WHEA_XPF_CONTEXT_INFO *)0)->MmRegisterAddress)) == (8))))?1:-1];

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->LocalAPICId)) == (8)) && ((sizeof(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->LocalAPICId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->CpuId)) == (16)) && ((sizeof(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->CpuId)) == (48))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->VariableInfo)) == (64)) && ((sizeof(((WHEA_XPF_PROCESSOR_ERROR_SECTION *)0)->VariableInfo)) == (1))))?1:-1];



typedef union _WHEA_MEMORY_ERROR_SECTION_VALIDBITS {
    struct {
        ULONGLONG ErrorStatus:1;
        ULONGLONG PhysicalAddress:1;
        ULONGLONG PhysicalAddressMask:1;
        ULONGLONG Node:1;
        ULONGLONG Card:1;
        ULONGLONG Module:1;
        ULONGLONG Bank:1;
        ULONGLONG Device:1;
        ULONGLONG Row:1;
        ULONGLONG Column:1;
        ULONGLONG BitPosition:1;
        ULONGLONG RequesterId:1;
        ULONGLONG ResponderId:1;
        ULONGLONG TargetId:1;
        ULONGLONG ErrorType:1;
        ULONGLONG Reserved:49;
    } ;
    ULONGLONG ValidBits;
} WHEA_MEMORY_ERROR_SECTION_VALIDBITS,
  *PWHEA_MEMORY_ERROR_SECTION_VALIDBITS;















typedef struct _WHEA_MEMORY_ERROR_SECTION {
    WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits;
    WHEA_ERROR_STATUS ErrorStatus;
    ULONGLONG PhysicalAddress;
    ULONGLONG PhysicalAddressMask;
    USHORT Node;
    USHORT Card;
    USHORT Module;
    USHORT Bank;
    USHORT Device;
    USHORT Row;
    USHORT Column;
    USHORT BitPosition;
    ULONGLONG RequesterId;
    ULONGLONG ResponderId;
    ULONGLONG TargetId;
    UCHAR ErrorType;
} WHEA_MEMORY_ERROR_SECTION, *PWHEA_MEMORY_ERROR_SECTION;













#line 16243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->ErrorStatus)) == (8)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->ErrorStatus)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->PhysicalAddress)) == (16)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->PhysicalAddress)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->PhysicalAddressMask)) == (24)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->PhysicalAddressMask)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Node)) == (32)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Node)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Card)) == (34)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Card)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Module)) == (36)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Module)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Bank)) == (38)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Bank)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Device)) == (40)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Device)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Row)) == (42)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Row)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->Column)) == (44)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->Column)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->BitPosition)) == (46)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->BitPosition)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->RequesterId)) == (48)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->RequesterId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->ResponderId)) == (56)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->ResponderId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->TargetId)) == (64)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->TargetId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_MEMORY_ERROR_SECTION *)0)->ErrorType)) == (72)) && ((sizeof(((WHEA_MEMORY_ERROR_SECTION *)0)->ErrorType)) == (1))))?1:-1];



typedef union _WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS {
    struct {
        ULONGLONG PortType:1;
        ULONGLONG Version:1;
        ULONGLONG CommandStatus:1;
        ULONGLONG DeviceId:1;
        ULONGLONG DeviceSerialNumber:1;
        ULONGLONG BridgeControlStatus:1;
        ULONGLONG ExpressCapability:1;
        ULONGLONG AerInfo:1;
        ULONGLONG Reserved:56;
    } ;
    ULONGLONG ValidBits;
} WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS,
  *PWHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS;

typedef struct _WHEA_PCIEXPRESS_DEVICE_ID {
    USHORT VendorID;
    USHORT DeviceID;
    ULONG ClassCode:24;
    ULONG FunctionNumber:8;
    ULONG DeviceNumber:8;
    ULONG Segment:16;
    ULONG PrimaryBusNumber:8;
    ULONG SecondaryBusNumber:8;
    ULONG Reserved1:3;
    ULONG SlotNumber:13;
    ULONG Reserved2:8;
} WHEA_PCIEXPRESS_DEVICE_ID, *PWHEA_PCIEXPRESS_DEVICE_ID;

typedef union _WHEA_PCIEXPRESS_VERSION {
    struct {
        UCHAR MinorVersion;
        UCHAR MajorVersion;
        USHORT Reserved;
    } ;
    ULONG AsULONG;
} WHEA_PCIEXPRESS_VERSION, *PWHEA_PCIEXPRESS_VERSION;

typedef union _WHEA_PCIEXPRESS_COMMAND_STATUS {
    struct {
        USHORT Command;
        USHORT Status;
    } ;
    ULONG AsULONG;
} WHEA_PCIEXPRESS_COMMAND_STATUS, *PWHEA_PCIEXPRESS_COMMAND_STATUS;

typedef union _WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS {
    struct {
        USHORT BridgeSecondaryStatus;
        USHORT BridgeControl;
    } ;
    ULONG AsULONG;
} WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS,
    *PWHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS;

typedef enum _WHEA_PCIEXPRESS_DEVICE_TYPE {
    WheaPciExpressEndpoint = 0,
    WheaPciExpressLegacyEndpoint,
    WheaPciExpressRootPort = 4,
    WheaPciExpressUpstreamSwitchPort,
    WheaPciExpressDownstreamSwitchPort,
    WheaPciExpressToPciXBridge,
    WheaPciXToExpressBridge,
    WheaPciExpressRootComplexIntegratedEndpoint,
    WheaPciExpressRootComplexEventCollector
} WHEA_PCIEXPRESS_DEVICE_TYPE;

typedef struct _WHEA_PCIEXPRESS_ERROR_SECTION {
    WHEA_PCIEXPRESS_ERROR_SECTION_VALIDBITS ValidBits;
    WHEA_PCIEXPRESS_DEVICE_TYPE PortType;
    WHEA_PCIEXPRESS_VERSION Version;
    WHEA_PCIEXPRESS_COMMAND_STATUS CommandStatus;
    ULONG Reserved;
    WHEA_PCIEXPRESS_DEVICE_ID DeviceId;
    ULONGLONG DeviceSerialNumber;
    WHEA_PCIEXPRESS_BRIDGE_CONTROL_STATUS BridgeControlStatus;
    UCHAR ExpressCapability[60];
    UCHAR AerInfo[96];
} WHEA_PCIEXPRESS_ERROR_SECTION, *PWHEA_PCIEXPRESS_ERROR_SECTION;










#line 16359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->PortType)) == (8)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->PortType)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->Version)) == (12)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->Version)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->CommandStatus)) == (16)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->CommandStatus)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->Reserved)) == (20)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->Reserved)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->DeviceId)) == (24)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->DeviceId)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->DeviceSerialNumber)) == (40)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->DeviceSerialNumber)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->BridgeControlStatus)) == (48)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->BridgeControlStatus)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->ExpressCapability)) == (52)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->ExpressCapability)) == (60))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->AerInfo)) == (112)) && ((sizeof(((WHEA_PCIEXPRESS_ERROR_SECTION *)0)->AerInfo)) == (96))))?1:-1];












typedef union _WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS {
    struct {
        ULONGLONG ErrorStatus:1;
        ULONGLONG ErrorType:1;
        ULONGLONG BusId:1;
        ULONGLONG BusAddress:1;
        ULONGLONG BusData:1;
        ULONGLONG BusCommand:1;
        ULONGLONG RequesterId:1;
        ULONGLONG CompleterId:1;
        ULONGLONG TargetId:1;
        ULONGLONG Reserved:55;
    } ;
    ULONGLONG ValidBits;
} WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS, *PWHEA_PCIXBUS_ERROR_SECTION_VALIDBITS;

typedef union _WHEA_PCIXBUS_ID {
    struct {
        UCHAR BusNumber;
        UCHAR BusSegment;
    } ;
    USHORT AsUSHORT;
} WHEA_PCIXBUS_ID, *PWHEA_PCIXBUS_ID;

typedef union _WHEA_PCIXBUS_COMMAND {
    struct {
        ULONGLONG Command:56;
        ULONGLONG PCIXCommand:1;
        ULONGLONG Reserved:7;
    } ;
    ULONGLONG AsULONGLONG;
} WHEA_PCIXBUS_COMMAND, *PWHEA_PCIXBUS_COMMAND;

typedef struct _WHEA_PCIXBUS_ERROR_SECTION {
    WHEA_PCIXBUS_ERROR_SECTION_VALIDBITS ValidBits;
    WHEA_ERROR_STATUS ErrorStatus;
    USHORT ErrorType;
    WHEA_PCIXBUS_ID BusId;
    ULONG Reserved;
    ULONGLONG BusAddress;
    ULONGLONG BusData;
    WHEA_PCIXBUS_COMMAND BusCommand;
    ULONGLONG RequesterId;
    ULONGLONG CompleterId;
    ULONGLONG TargetId;
} WHEA_PCIXBUS_ERROR_SECTION, *PWHEA_PCIXBUS_ERROR_SECTION;










#line 16444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->ErrorStatus)) == (8)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->ErrorStatus)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->ErrorType)) == (16)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->ErrorType)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusId)) == (18)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusId)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->Reserved)) == (20)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->Reserved)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusAddress)) == (24)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusAddress)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusData)) == (32)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusData)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusCommand)) == (40)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->BusCommand)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->RequesterId)) == (48)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->RequesterId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->CompleterId)) == (56)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->CompleterId)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXBUS_ERROR_SECTION *)0)->TargetId)) == (64)) && ((sizeof(((WHEA_PCIXBUS_ERROR_SECTION *)0)->TargetId)) == (8))))?1:-1];



typedef union _WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS {
    struct {
        ULONGLONG ErrorStatus:1;
        ULONGLONG IdInfo:1;
        ULONGLONG MemoryNumber:1;
        ULONGLONG IoNumber:1;
        ULONGLONG RegisterDataPairs:1;
        ULONGLONG Reserved:59;
    } ;
    ULONGLONG ValidBits;
} WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS,
  *PWHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS;

typedef struct _WHEA_PCIXDEVICE_ID {
    USHORT VendorId;
    USHORT DeviceId;
    ULONG ClassCode:24;
    ULONG FunctionNumber:8;
    ULONG DeviceNumber:8;
    ULONG BusNumber:8;
    ULONG SegmentNumber:8;
    ULONG Reserved1:8;
    ULONG Reserved2;
} WHEA_PCIXDEVICE_ID, *PWHEA_PCIXDEVICE_ID;

typedef struct WHEA_PCIXDEVICE_REGISTER_PAIR {
    ULONGLONG Register;
    ULONGLONG Data;
} WHEA_PCIXDEVICE_REGISTER_PAIR, *PWHEA_PCIXDEVICE_REGISTER_PAIR;

typedef struct _WHEA_PCIXDEVICE_ERROR_SECTION {
    WHEA_PCIXDEVICE_ERROR_SECTION_VALIDBITS ValidBits;
    WHEA_ERROR_STATUS ErrorStatus;
    WHEA_PCIXDEVICE_ID IdInfo;
    ULONG MemoryNumber;
    ULONG IoNumber;
    WHEA_PCIXDEVICE_REGISTER_PAIR RegisterDataPairs[1];
} WHEA_PCIXDEVICE_ERROR_SECTION, *PWHEA_PCIXDEVICE_ERROR_SECTION;









#line 16507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->ValidBits)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->ErrorStatus)) == (8)) && ((sizeof(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->ErrorStatus)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->IdInfo)) == (16)) && ((sizeof(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->IdInfo)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->MemoryNumber)) == (32)) && ((sizeof(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->MemoryNumber)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->IoNumber)) == (36)) && ((sizeof(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->IoNumber)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->RegisterDataPairs)) == (40)) && ((sizeof(((WHEA_PCIXDEVICE_ERROR_SECTION *)0)->RegisterDataPairs)) == (16))))?1:-1];





typedef struct _WHEA_FIRMWARE_ERROR_RECORD_REFERENCE {
    UCHAR Type;
    UCHAR Reserved[7];
    ULONGLONG FirmwareRecordId;
} WHEA_FIRMWARE_ERROR_RECORD_REFERENCE, *PWHEA_FIRMWARE_ERROR_RECORD_REFERENCE;






#line 16531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_FIRMWARE_ERROR_RECORD_REFERENCE *)0)->Type)) == (0)) && ((sizeof(((WHEA_FIRMWARE_ERROR_RECORD_REFERENCE *)0)->Type)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_FIRMWARE_ERROR_RECORD_REFERENCE *)0)->Reserved)) == (1)) && ((sizeof(((WHEA_FIRMWARE_ERROR_RECORD_REFERENCE *)0)->Reserved)) == (7))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_FIRMWARE_ERROR_RECORD_REFERENCE *)0)->FirmwareRecordId)) == (8)) && ((sizeof(((WHEA_FIRMWARE_ERROR_RECORD_REFERENCE *)0)->FirmwareRecordId)) == (8))))?1:-1];










typedef union _MCG_STATUS {
    struct {
        ULONG RestartIpValid:1;
        ULONG ErrorIpValid:1;
        ULONG MachineCheckInProgress:1;
        ULONG Reserved1:29;
        ULONG Reserved2;
    } ;
    ULONGLONG QuadPart;
} MCG_STATUS, *PMCG_STATUS;

typedef union _MCI_STATUS {
    struct {
        USHORT McaErrorCode;
        USHORT ModelErrorCode;
        ULONG OtherInformation : 23;
        ULONG ActionRequired : 1;
        ULONG Signalling : 1;
        ULONG ContextCorrupt : 1;
        ULONG AddressValid : 1;
        ULONG MiscValid : 1;
        ULONG ErrorEnabled : 1;
        ULONG UncorrectedError : 1;
        ULONG StatusOverFlow : 1;
        ULONG Valid : 1;
    } ;
    ULONG64 QuadPart;
} MCI_STATUS, *PMCI_STATUS;

typedef enum _WHEA_CPU_VENDOR {
    WheaCpuVendorOther = 0,
    WheaCpuVendorIntel,
    WheaCpuVendorAmd
} WHEA_CPU_VENDOR, *PWHEA_CPU_VENDOR;




typedef struct _WHEA_XPF_MCA_SECTION {
    ULONG               VersionNumber;
    WHEA_CPU_VENDOR     CpuVendor;
    LARGE_INTEGER       Timestamp;
    ULONG               ProcessorNumber;
    MCG_STATUS          GlobalStatus;
    ULONGLONG           InstructionPointer;
    ULONG               BankNumber;
    MCI_STATUS          Status;
    ULONGLONG           Address;
    ULONGLONG           Misc;
    ULONG               ExtendedRegisterCount;
    ULONG               Reserved2;
    ULONGLONG           ExtendedRegisters[24];
} WHEA_XPF_MCA_SECTION, *PWHEA_XPF_MCA_SECTION;



typedef union _WHEA_NMI_ERROR_SECTION_FLAGS {
    struct {
        ULONG HypervisorError:1;
        ULONG Reserved:31;
    } ;
    ULONG AsULONG;
} WHEA_NMI_ERROR_SECTION_FLAGS, *PWHEA_NMI_ERROR_SECTION_FLAGS;

typedef struct _WHEA_NMI_ERROR_SECTION {
    UCHAR Data[8];
    WHEA_NMI_ERROR_SECTION_FLAGS Flags;
} WHEA_NMI_ERROR_SECTION, *PWHEA_NMI_ERROR_SECTION;



typedef union _WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS {
    struct {
        ULONG MPIDR:1;
        ULONG AffinityLevel:1;
        ULONG RunningState:1;
        ULONG VendorSpecificInfo:1;
        ULONG Reserved:28;
    } ;
    ULONG AsULONG;
} WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS,
  *PWHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS;

typedef struct _WHEA_ARM_PROCESSOR_ERROR_SECTION {
    WHEA_ARM_PROCESSOR_ERROR_SECTION_VALID_BITS ValidBits;
    USHORT ErrorInformationStructures;
    USHORT ContextInformationStructures;
    ULONG SectionLength;
    UCHAR ErrorAffinityLevel;
    UCHAR Reserved[3];
    ULONGLONG MPIDR_EL1;
    ULONGLONG MIDR_EL1;
    ULONG RunningState;
    ULONG PSCIState;
    UCHAR Data[1];
} WHEA_ARM_PROCESSOR_ERROR_SECTION, *PWHEA_ARM_PROCESSOR_ERROR_SECTION;

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ValidBits)) == (0)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ValidBits)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ErrorInformationStructures)) == (4)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ErrorInformationStructures)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ContextInformationStructures)) == (6)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ContextInformationStructures)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->SectionLength)) == (8)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->SectionLength)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ErrorAffinityLevel)) == (12)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->ErrorAffinityLevel)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->Reserved)) == (13)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->Reserved)) == (3))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->MPIDR_EL1)) == (16)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->MPIDR_EL1)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->MIDR_EL1)) == (24)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->MIDR_EL1)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->RunningState)) == (32)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->RunningState)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->PSCIState)) == (36)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->PSCIState)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->Data)) == (40)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_SECTION *)0)->Data)) == (1))))?1:-1];



typedef union _WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS {
    struct {
        USHORT MultipleError:1;
        USHORT Flags:1;
        USHORT ErrorInformation:1;
        USHORT VirtualFaultAddress:1;
        USHORT PhysicalFaultAddress:1;
        USHORT Reserved:11;
    } ;
    USHORT AsUSHORT;
} WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS,
  *PWHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS;

typedef union _WHEA_ARM_CACHE_ERROR_VALID_BITS {
    struct {
        USHORT TransactionType:1;
        USHORT Operation:1;
        USHORT Level:1;
        USHORT ProcessorContextCorrupt:1;
        USHORT Corrected:1;
        USHORT PrecisePC:1;
        USHORT RestartablePC:1;
        USHORT Reserved:9;
    } ;
    USHORT AsUSHORT;
} WHEA_ARM_CACHE_ERROR_VALID_BITS, *PWHEA_ARM_CACHE_ERROR_VALID_BITS;

typedef struct _WHEA_ARM_CACHE_ERROR {
    WHEA_ARM_CACHE_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType:2;
    UCHAR Operation:4;
    UCHAR Level:3;
    UCHAR ProcessorContextCorrupt:1;
    UCHAR Corrected:1;
    UCHAR PrecisePC:1;
    UCHAR RestartablePC:1;
    ULONGLONG Reserved:35;
} WHEA_ARM_CACHE_ERROR, *PWHEA_ARM_CACHE_ERROR;

typedef union _WHEA_ARM_TLB_ERROR_VALID_BITS {
    struct {
        USHORT TransactionType:1;
        USHORT Operation:1;
        USHORT Level:1;
        USHORT ProcessorContextCorrupt:1;
        USHORT Corrected:1;
        USHORT PrecisePC:1;
        USHORT RestartablePC:1;
        USHORT Reserved:9;
    } ;
    USHORT AsUSHORT;
} WHEA_ARM_TLB_ERROR_VALID_BITS, *PWHEA_ARM_TLB_ERROR_VALID_BITS;

typedef struct _WHEA_ARM_TLB_ERROR {
    WHEA_ARM_TLB_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType:2;
    UCHAR Operation:4;
    UCHAR Level:3;
    UCHAR ProcessorContextCorrupt:1;
    UCHAR Corrected:1;
    UCHAR PrecisePC:1;
    UCHAR RestartablePC:1;
    ULONGLONG Reserved:36;
} WHEA_ARM_TLB_ERROR, *PWHEA_ARM_TLB_ERROR;

typedef union _WHEA_ARM_BUS_ERROR_VALID_BITS {
    struct {
        USHORT TransactionType:1;
        USHORT Operation:1;
        USHORT Level:1;
        USHORT ProcessorContextCorrupt:1;
        USHORT Corrected:1;
        USHORT PrecisePC:1;
        USHORT RestartablePC:1;
        USHORT ParticipationType:1;
        USHORT Timeout:1;
        USHORT AddressSpace:1;
        USHORT MemoryAttributes:1;
        USHORT AccessMode:1;
        USHORT Reserved:4;
    } ;
    USHORT AsUSHORT;
} WHEA_ARM_BUS_ERROR_VALID_BITS, *PWHEA_ARM_BUS_ERROR_VALID_BITS;

typedef struct _WHEA_ARM_BUS_ERROR {
    WHEA_ARM_BUS_ERROR_VALID_BITS ValidationBit;
    UCHAR TransactionType:2;
    UCHAR Operation:4;
    UCHAR Level:3;
    UCHAR ProcessorContextCorrupt:1;
    UCHAR Corrected:1;
    UCHAR PrecisePC:1;
    UCHAR RestartablePC:1;
    UCHAR ParticipationType:2;
    UCHAR TimeOut:1;
    UCHAR AddressSpace:2;
    USHORT MemoryAccessAttributes:9;
    UCHAR AccessMode:1;
    ULONG Reserved:20;
} WHEA_ARM_BUS_ERROR, *PWHEA_ARM_BUS_ERROR;

typedef union _WHEA_ARM_PROCESSOR_ERROR {
    WHEA_ARM_CACHE_ERROR CacheError;
    WHEA_ARM_TLB_ERROR TlbError;
    WHEA_ARM_BUS_ERROR BusError;
    ULONGLONG AsULONGLONG;
} WHEA_ARM_PROCESSOR_ERROR, *PWHEA_ARM_PROCESSOR_ERROR;

typedef struct _WHEA_ARM_PROCESSOR_ERROR_INFORMATION {
    UCHAR Version;
    UCHAR Length;
    WHEA_ARM_PROCESSOR_ERROR_INFORMATION_VALID_BITS ValidationBit;
    UCHAR Type;
    USHORT MultipleError;
    UCHAR Flags;
    ULONGLONG ErrorInformation;
    ULONGLONG VirtualFaultAddress;
    ULONGLONG PhysicalFaultAddress;
} WHEA_ARM_PROCESSOR_ERROR_INFORMATION, *PWHEA_ARM_PROCESSOR_ERROR_INFORMATION;

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Version)) == (0)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Version)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Length)) == (1)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Length)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->ValidationBit)) == (2)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->ValidationBit)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Type)) == (4)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Type)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->MultipleError)) == (5)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->MultipleError)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Flags)) == (7)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->Flags)) == (1))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->ErrorInformation)) == (8)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->ErrorInformation)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->VirtualFaultAddress)) == (16)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->VirtualFaultAddress)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->PhysicalFaultAddress)) == (24)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_INFORMATION *)0)->PhysicalFaultAddress)) == (8))))?1:-1];



typedef union _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS {
    struct {
        ULONG ExceptionLevel:1;
        ULONG NonSecure:1;
        ULONG AArch64:1;
        ULONG Reserved:29;
    } ;
    ULONG AsULONG;
} WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS,
  *PWHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER_FLAGS;

typedef struct _WHEA_ARMV8_AARCH32_GPRS {
    ULONG R0;
    ULONG R1;
    ULONG R2;
    ULONG R3;
    ULONG R4;
    ULONG R5;
    ULONG R6;
    ULONG R7;
    ULONG R8;
    ULONG R9;
    ULONG R10;
    ULONG R11;
    ULONG R12;
    ULONG R13; 
    ULONG R14; 
    ULONG R15; 
} WHEA_ARMV8_AARCH32_GPRS, *PWHEA_ARMV8_AARCH32_GPRS;

typedef struct _WHEA_ARM_AARCH32_EL1_CSR {
    ULONG DFAR;
    ULONG DFSR;
    ULONG IFAR;
    ULONG ISR;
    ULONG MAIR0;
    ULONG MAIR1;
    ULONG MIDR;
    ULONG MPIDR;
    ULONG NMRR;
    ULONG PRRR;
    ULONG SCTLR; 
    ULONG SPSR;
    ULONG SPSR_abt;
    ULONG SPSR_fiq;
    ULONG SPSR_irq;
    ULONG SPSR_svc;
    ULONG SPSR_und;
    ULONG TPIDRPRW;
    ULONG TPIDRURO;
    ULONG TPIDRURW;
    ULONG TTBCR;
    ULONG TTBR0;
    ULONG TTBR1;
    ULONG DACR;
} WHEA_ARM_AARCH32_EL1_CSR, *PWHEA_ARM_AARCH32_EL1;

typedef struct _WHEA_ARM_AARCH32_EL2_CSR {
    ULONG ELR_hyp;
    ULONG HAMAIR0;
    ULONG HAMAIR1;
    ULONG HCR;
    ULONG HCR2;
    ULONG HDFAR;
    ULONG HIFAR;
    ULONG HPFAR;
    ULONG HSR;
    ULONG HTCR;
    ULONG HTPIDR;
    ULONG HTTBR;
    ULONG SPSR_hyp;
    ULONG VTCR;
    ULONG VTTBR;
    ULONG DACR32_EL2;
} WHEA_ARM_AARCH32_EL2_CSR, *PWHEA_ARM_AARCH32_EL2_CSR;

typedef struct _WHEA_ARM_AARCH32_SECURE_CSR {
    ULONG SCTLR;
    ULONG SPSR_mon;
} WHEA_ARM_AARCH32_SECURE_CSR, *PWHEA_ARM_AARCH32_SECURE_CSR;

typedef struct _WHEA_ARMV8_AARCH64_GPRS {
    ULONGLONG X0;
    ULONGLONG X1;
    ULONGLONG X2;
    ULONGLONG X3;
    ULONGLONG X4;
    ULONGLONG X5;
    ULONGLONG X6;
    ULONGLONG X7;
    ULONGLONG X8;
    ULONGLONG X9;
    ULONGLONG X10;
    ULONGLONG X11;
    ULONGLONG X12;
    ULONGLONG X13;
    ULONGLONG X14;
    ULONGLONG X15;
    ULONGLONG X16;
    ULONGLONG X17;
    ULONGLONG X18;
    ULONGLONG X19;
    ULONGLONG X20;
    ULONGLONG X21;
    ULONGLONG X22;
    ULONGLONG X23;
    ULONGLONG X24;
    ULONGLONG X25;
    ULONGLONG X26;
    ULONGLONG X27;
    ULONGLONG X28;
    ULONGLONG X29;
    ULONGLONG X30;
    ULONGLONG SP;
} WHEA_ARMV8_AARCH64_GPRS, *PWHEA_ARMV8_AARCH64_GPRS;

typedef struct _WHEA_ARM_AARCH64_EL1_CSR {
    ULONGLONG ELR_EL1;
    ULONGLONG ESR_EL2;
    ULONGLONG FAR_EL1;
    ULONGLONG ISR_EL1;
    ULONGLONG MAIR_EL1;
    ULONGLONG MIDR_EL1;
    ULONGLONG MPIDR_EL1;
    ULONGLONG SCTLR_EL1;
    ULONGLONG SP_EL0;
    ULONGLONG SP_EL1;
    ULONGLONG SPSR_EL1;
    ULONGLONG TCR_EL1;
    ULONGLONG TPIDR_EL0;
    ULONGLONG TPIDR_EL1;
    ULONGLONG TPIDRRO_EL0;
    ULONGLONG TTBR0_EL1;
    ULONGLONG TTBR1_EL1;
} WHEA_ARM_AARCH64_EL1_CSR, *PWHEA_ARM_AARCH64_EL1_CSR;

typedef struct _WHEA_ARM_AARCH64_EL2_CSR {
    ULONGLONG ELR_EL2;
    ULONGLONG ESR_EL2;
    ULONGLONG FAR_EL2;
    ULONGLONG HACR_EL2;
    ULONGLONG HCR_EL2;
    ULONGLONG HPFAR_EL2;
    ULONGLONG MAIR_EL2;
    ULONGLONG SCTLR_EL2;
    ULONGLONG SP_EL2;
    ULONGLONG SPSR_EL2;
    ULONGLONG TCR_EL2;
    ULONGLONG TPIDR_EL2;
    ULONGLONG TTBR0_EL2;
    ULONGLONG VTCR_EL2;
    ULONGLONG VTTBR_EL2;
} WHEA_ARM_AARCH64_EL2_CSR, *PWHEA_ARM_AARCH64_EL2_CSR;

typedef struct _WHEA_ARMV8_AARCH64_EL3_CSR {
    ULONGLONG ELR_EL3;
    ULONGLONG ESR_EL3;
    ULONGLONG FAR_EL3;
    ULONGLONG MAIR_EL3;
    ULONGLONG SCTLR_EL3;
    ULONGLONG SP_EL3;
    ULONGLONG SPSR_EL3;
    ULONGLONG TCR_EL3;
    ULONGLONG TPIDR_EL3;
    ULONGLONG TTBR0_EL3;
} WHEA_ARMV8_AARCH64_EL3_CSR, *PWHEA_ARMV8_AARCH64_EL3_CSR;

typedef struct _WHEA_ARM_MISC_CSR {
    USHORT MRSEncoding;
    ULONGLONG Value;
} WHEA_ARM_MISC_CSR, *PWHEA_ARM_MISC_CSR;

typedef struct _WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER {
    USHORT Version;
    USHORT RegisterContextType;
    ULONG RegisterArraySize;
    UCHAR RegisterArray[1];
} WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER,
  *PWHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER;

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->Version)) == (0)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->Version)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->RegisterContextType)) == (2)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->RegisterContextType)) == (2))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->RegisterArraySize)) == (4)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->RegisterArraySize)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->RegisterArray)) == (8)) && ((sizeof(((WHEA_ARM_PROCESSOR_ERROR_CONTEXT_INFORMATION_HEADER *)0)->RegisterArray)) == (1))))?1:-1];

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 16974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"





extern const GUID  CMC_NOTIFY_TYPE_GUID;
#line 16982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  CPE_NOTIFY_TYPE_GUID;
#line 16987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  MCE_NOTIFY_TYPE_GUID;
#line 16992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  PCIe_NOTIFY_TYPE_GUID;
#line 16997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  INIT_NOTIFY_TYPE_GUID;
#line 17002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  NMI_NOTIFY_TYPE_GUID;
#line 17007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  BOOT_NOTIFY_TYPE_GUID;
#line 17012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  SEA_NOTIFY_TYPE_GUID;
#line 17017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  SEI_NOTIFY_TYPE_GUID;
#line 17022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  PEI_NOTIFY_TYPE_GUID;
#line 17027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




extern const GUID  PROCESSOR_GENERIC_ERROR_SECTION_GUID;
#line 17034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  XPF_PROCESSOR_ERROR_SECTION_GUID;
#line 17039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  IPF_PROCESSOR_ERROR_SECTION_GUID;
#line 17044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  ARM_PROCESSOR_ERROR_SECTION_GUID;
#line 17049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  MEMORY_ERROR_SECTION_GUID;
#line 17054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  PCIEXPRESS_ERROR_SECTION_GUID;
#line 17059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  PCIXBUS_ERROR_SECTION_GUID;
#line 17064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  PCIXDEVICE_ERROR_SECTION_GUID;
#line 17069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  FIRMWARE_ERROR_RECORD_REFERENCE_GUID;
#line 17074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




extern const GUID  WHEA_CACHECHECK_GUID;
#line 17081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  WHEA_TLBCHECK_GUID;
#line 17086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  WHEA_BUSCHECK_GUID;
#line 17091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  WHEA_MSCHECK_GUID;
#line 17096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"











extern const GUID  WHEA_RECORD_CREATOR_GUID;
#line 17111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




extern const GUID  GENERIC_NOTIFY_TYPE_GUID;
#line 17119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




extern const GUID  IPF_SAL_RECORD_SECTION_GUID;
#line 17127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  XPF_MCA_SECTION_GUID;
#line 17133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  NMI_SECTION_GUID;
#line 17139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  GENERIC_SECTION_GUID;
#line 17145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


extern const GUID  WHEA_ERROR_PACKET_SECTION_GUID;
#line 17151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"






#line 17158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



#line 17162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 17164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



typedef enum _WHEA_ERROR_TYPE {
    WheaErrTypeProcessor = 0,
    WheaErrTypeMemory,
    WheaErrTypePCIExpress,
    WheaErrTypeNMI,
    WheaErrTypePCIXBus,
    WheaErrTypePCIXDevice,
    WheaErrTypeGeneric
} WHEA_ERROR_TYPE, *PWHEA_ERROR_TYPE;

typedef union _WHEA_ERROR_PACKET_FLAGS {
    struct {
        ULONG PreviousError:1;
        ULONG Reserved1:1;
        ULONG HypervisorError:1;
        ULONG Simulated:1;
        ULONG PlatformPfaControl:1;
        ULONG PlatformDirectedOffline:1;
        ULONG Reserved2:26;
    } ;
    ULONG AsULONG;
} WHEA_ERROR_PACKET_FLAGS, *PWHEA_ERROR_PACKET_FLAGS;

typedef enum _WHEA_ERROR_PACKET_DATA_FORMAT {
    WheaDataFormatIPFSalRecord = 0,
    WheaDataFormatXPFMCA,
    WheaDataFormatMemory,
    WheaDataFormatPCIExpress,
    WheaDataFormatNMIPort,
    WheaDataFormatPCIXBus,
    WheaDataFormatPCIXDevice,
    WheaDataFormatGeneric,
    WheaDataFormatMax
} WHEA_ERROR_PACKET_DATA_FORMAT, *PWHEA_ERROR_PACKET_DATA_FORMAT;

typedef enum _WHEA_RAW_DATA_FORMAT {
    WheaRawDataFormatIPFSalRecord = 0x00,
    WheaRawDataFormatIA32MCA,
    WheaRawDataFormatIntel64MCA,
    WheaRawDataFormatAMD64MCA,
    WheaRawDataFormatMemory,
    WheaRawDataFormatPCIExpress,
    WheaRawDataFormatNMIPort,
    WheaRawDataFormatPCIXBus,
    WheaRawDataFormatPCIXDevice,
    WheaRawDataFormatGeneric,
    WheaRawDataFormatMax
} WHEA_RAW_DATA_FORMAT, *PWHEA_RAW_DATA_FORMAT;

typedef struct _WHEA_ERROR_PACKET_V1 {
    ULONG                   Signature;                          
    WHEA_ERROR_PACKET_FLAGS Flags;                              
    ULONG                   Size;                               
    ULONG                   RawDataLength;                      
    ULONGLONG               Reserved1;                          
    ULONGLONG               Context;                            
    WHEA_ERROR_TYPE         ErrorType;                          
    WHEA_ERROR_SEVERITY     ErrorSeverity;                      
    ULONG                   ErrorSourceId;                      
    WHEA_ERROR_SOURCE_TYPE  ErrorSourceType;                    
    ULONG                   Reserved2;                          
    ULONG                   Version;                            
    ULONGLONG               Cpu;                                
    union {
        WHEA_PROCESSOR_GENERIC_ERROR_SECTION    ProcessorError; 
        WHEA_MEMORY_ERROR_SECTION               MemoryError;
        WHEA_NMI_ERROR_SECTION                  NmiError;
        WHEA_PCIEXPRESS_ERROR_SECTION           PciExpressError;
        WHEA_PCIXBUS_ERROR_SECTION              PciXBusError;
        WHEA_PCIXDEVICE_ERROR_SECTION           PciXDeviceError;
    } u;
    WHEA_RAW_DATA_FORMAT     RawDataFormat;                     
    ULONG                    RawDataOffset;                     
    UCHAR                    RawData[1];                        

} WHEA_ERROR_PACKET_V1, *PWHEA_ERROR_PACKET_V1;




typedef struct _WHEA_ERROR_PACKET_V2 {
    ULONG Signature;
    ULONG Version;
    ULONG Length;
    WHEA_ERROR_PACKET_FLAGS Flags;
    WHEA_ERROR_TYPE ErrorType;
    WHEA_ERROR_SEVERITY ErrorSeverity;
    ULONG ErrorSourceId;
    WHEA_ERROR_SOURCE_TYPE ErrorSourceType;
    GUID NotifyType;
    ULONGLONG Context;
    WHEA_ERROR_PACKET_DATA_FORMAT DataFormat;
    ULONG Reserved1;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG PshedDataOffset;
    ULONG PshedDataLength;
    
    
} WHEA_ERROR_PACKET_V2, *PWHEA_ERROR_PACKET_V2;

typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->Signature)) == (0)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->Signature)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->Version)) == (4)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->Version)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->Length)) == (8)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->Length)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->Flags)) == (12)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->Flags)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->ErrorType)) == (16)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->ErrorType)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->ErrorSeverity)) == (20)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->ErrorSeverity)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->ErrorSourceId)) == (24)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->ErrorSourceId)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->ErrorSourceType)) == (28)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->ErrorSourceType)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->NotifyType)) == (32)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->NotifyType)) == (16))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->Context)) == (48)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->Context)) == (8))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->DataFormat)) == (56)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->DataFormat)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->Reserved1)) == (60)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->Reserved1)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->DataOffset)) == (64)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->DataOffset)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->DataLength)) == (68)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->DataLength)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->PshedDataOffset)) == (72)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->PshedDataOffset)) == (4))))?1:-1];
typedef char __C_ASSERT__[(((((LONG)(LONG_PTR)&(((WHEA_ERROR_PACKET_V2 *)0)->PshedDataLength)) == (76)) && ((sizeof(((WHEA_ERROR_PACKET_V2 *)0)->PshedDataLength)) == (4))))?1:-1];








typedef struct _WHEA_ERROR_PACKET_V2    WHEA_ERROR_PACKET, *PWHEA_ERROR_PACKET;









#line 17303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"








typedef union _WHEA_GENERIC_ERROR_BLOCKSTATUS {
    struct {
        ULONG UncorrectableError:1;
        ULONG CorrectableError:1;
        ULONG MultipleUncorrectableErrors:1;
        ULONG MultipleCorrectableErrors:1;
        ULONG ErrorDataEntryCount:10;
        ULONG Reserved:18;
    } ;
    ULONG AsULONG;
} WHEA_GENERIC_ERROR_BLOCKSTATUS, *PWHEA_GENERIC_ERROR_BLOCKSTATUS;

typedef struct _WHEA_GENERIC_ERROR {
    WHEA_GENERIC_ERROR_BLOCKSTATUS BlockStatus;
    ULONG RawDataOffset;
    ULONG RawDataLength;
    ULONG DataLength;
    WHEA_ERROR_SEVERITY ErrorSeverity;
    UCHAR Data[1];
} WHEA_GENERIC_ERROR, *PWHEA_GENERIC_ERROR;

typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V1 {
    GUID SectionType;
    WHEA_ERROR_SEVERITY ErrorSeverity;
    WHEA_REVISION Revision;
    UCHAR ValidBits;
    UCHAR Flags;
    ULONG ErrorDataLength;
    GUID FRUId;
    UCHAR FRUText[20];
    UCHAR Data[1];
} WHEA_GENERIC_ERROR_DATA_ENTRY_V1, *PWHEA_GENERIC_ERROR_DATA_ENTRY_V1;

typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V2 {
    GUID SectionType;
    WHEA_ERROR_SEVERITY ErrorSeverity;
    WHEA_REVISION Revision;
    UCHAR ValidBits;
    UCHAR Flags;
    ULONG ErrorDataLength;
    GUID FRUId;
    UCHAR FRUText[20];
    WHEA_TIMESTAMP Timestamp;
    UCHAR Data[1];
} WHEA_GENERIC_ERROR_DATA_ENTRY_V2, *PWHEA_GENERIC_ERROR_DATA_ENTRY_V2;








typedef struct _WHEA_GENERIC_ERROR_DATA_ENTRY_V2    WHEA_GENERIC_ERROR_DATA_ENTRY, *PWHEA_GENERIC_ERROR_DATA_ENTRY;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 17367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
__inline
PWHEA_ERROR_PACKET
WheaGetErrPacketFromErrRecord (
      PWHEA_ERROR_RECORD Record
    )




















{

    PWHEA_ERROR_PACKET Packet;
    PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR Descriptor;
    ULONG Section;
    ULONG SizeRequired;

    Packet = ((void *)0);
    if (Record->Header.Signature != 'REPC') {
        goto GetErrPacketFromErrRecordEnd;
    }

    
    
    
    
    

    SizeRequired = sizeof(WHEA_ERROR_RECORD_HEADER) +
        (sizeof(WHEA_ERROR_RECORD_SECTION_DESCRIPTOR) *
         Record->Header.SectionCount);

    if (Record->Header.Length < SizeRequired) {
        goto GetErrPacketFromErrRecordEnd;
    }

    
    
    
    
    

    Descriptor = &Record->SectionDescriptor[0];
    for (Section = 0; Section < Record->Header.SectionCount; Section += 1) {

        if (RtlCompareMemory(&Descriptor->SectionType,
                             &WHEA_ERROR_PACKET_SECTION_GUID,
                             sizeof(GUID)) == sizeof(GUID)) {

                SizeRequired = Descriptor->SectionOffset +
                    Descriptor->SectionLength;

                if (Record->Header.Length < SizeRequired) {
                    goto GetErrPacketFromErrRecordEnd;
                }

                Packet = (PWHEA_ERROR_PACKET)
                    (((PUCHAR)Record) + Descriptor->SectionOffset);

#pragma warning(suppress: 26019)
                if (Packet->Signature != 'AEHW') {
                    Packet = ((void *)0);
                }

                goto GetErrPacketFromErrRecordEnd;
        }

        Descriptor += 1;
    }

GetErrPacketFromErrRecordEnd:
    return Packet;
}








typedef union _WHEA_ERROR_INJECTION_CAPABILITIES {
    struct {
        ULONG ProcessorCorrectable:1;                   
        ULONG ProcessorUncorrectableNonFatal:1;         
        ULONG ProcessorUncorrectableFatal:1;            
        ULONG MemoryCorrectable:1;                      
        ULONG MemoryUncorrectableNonFatal:1;            
        ULONG MemoryUncorrectableFatal:1;               
        ULONG PCIExpressCorrectable:1;                  
        ULONG PCIExpressUncorrectableNonFatal:1;        
        ULONG PCIExpressUncorrectableFatal:1;           
        ULONG PlatformCorrectable:1;                    
        ULONG PlatformUncorrectableNonFatal:1;          
        ULONG PlatformUncorrectableFatal:1;             
        ULONG IA64Corrected:1;                          
        ULONG IA64Recoverable:1;                        
        ULONG IA64Fatal:1;                              
        ULONG IA64RecoverableCache:1;                   
        ULONG IA64RecoverableRegFile:1;                 
        ULONG Reserved:15;
    } ;
    ULONG AsULONG;
} WHEA_ERROR_INJECTION_CAPABILITIES, *PWHEA_ERROR_INJECTION_CAPABILITIES;


















typedef
BOOLEAN
(*PFN_IN_USE_PAGE_OFFLINE_NOTIFY) (
      PFN_NUMBER Page,
      BOOLEAN PlatformDirected,
      BOOLEAN Poisoned,
      PVOID Context
    );

__declspec(dllimport)
NTSTATUS
WheaRegisterInUsePageOfflineNotification (
      PFN_IN_USE_PAGE_OFFLINE_NOTIFY Callback,
      PVOID Context
    );

__declspec(dllimport)
NTSTATUS
WheaUnregisterInUsePageOfflineNotification (
      PFN_IN_USE_PAGE_OFFLINE_NOTIFY Callback
    );

#line 17532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

typedef struct _WHEA_RECOVERY_CONTEXT {
    union {
        struct {
            ULONG_PTR Address;
            BOOLEAN Consumed;
            UINT16 ErrorCode;
            BOOLEAN ErrorIpValid;
            BOOLEAN RestartIpValid;
        } MemoryError;
    };
    UINT64 PartitionId;  
    UINT32 VpIndex;      

} WHEA_RECOVERY_CONTEXT, *PWHEA_RECOVERY_CONTEXT;



typedef
NTSTATUS
(HVL_WHEA_ERROR_NOTIFICATION) (
      PWHEA_RECOVERY_CONTEXT RecoveryContext,
      BOOLEAN PlatformDirected,
      BOOLEAN Poisoned
    );

typedef HVL_WHEA_ERROR_NOTIFICATION *PHVL_WHEA_ERROR_NOTIFICATION;

extern PHVL_WHEA_ERROR_NOTIFICATION HvlpWheaErrorNotificationCallback;

__declspec(dllimport)
NTSTATUS
HvlRegisterWheaErrorNotification (
      PHVL_WHEA_ERROR_NOTIFICATION Callback
    );

__declspec(dllimport)
NTSTATUS
HvlUnregisterWheaErrorNotification(
      PHVL_WHEA_ERROR_NOTIFICATION Callback
    );

#line 17575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"




 
typedef
NTSTATUS
(*PSHED_PI_GET_ALL_ERROR_SOURCES) (
      PVOID PluginContext,
      PULONG Count,
      PWHEA_ERROR_SOURCE_DESCRIPTOR *ErrorSrcs,
      PULONG Length
    );

 
typedef
NTSTATUS
(*PSHED_PI_GET_ERROR_SOURCE_INFO) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource
    );

 
typedef
NTSTATUS
(*PSHED_PI_SET_ERROR_SOURCE_INFO) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource
    );

typedef
NTSTATUS
 (*PSHED_PI_ENABLE_ERROR_SOURCE) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource
    );

typedef
NTSTATUS
 (*PSHED_PI_DISABLE_ERROR_SOURCE) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource
    );

typedef
NTSTATUS
(*PSHED_PI_WRITE_ERROR_RECORD) (
      PVOID PluginContext,
      ULONG Flags,
      ULONG RecordLength,
      PWHEA_ERROR_RECORD ErrorRecord
    );

 
typedef
NTSTATUS
(*PSHED_PI_READ_ERROR_RECORD) (
      PVOID PluginContext,
      ULONG Flags,
      ULONGLONG ErrorRecordId,
      PULONGLONG NextErrorRecordId,
      PULONG RecordLength,
      PWHEA_ERROR_RECORD ErrorRecord
    );

typedef
NTSTATUS
(*PSHED_PI_CLEAR_ERROR_RECORD) (
      PVOID PluginContext,
      ULONG Flags,
      ULONGLONG ErrorRecordId
    );

typedef
NTSTATUS
(*PSHED_PI_RETRIEVE_ERROR_INFO) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource,
      ULONGLONG BufferLength,
      PWHEA_ERROR_PACKET Packet
    );

typedef
NTSTATUS
(*PSHED_PI_FINALIZE_ERROR_RECORD) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource,
      ULONG BufferLength,
      PWHEA_ERROR_RECORD ErrorRecord
    );

typedef
NTSTATUS
(*PSHED_PI_CLEAR_ERROR_STATUS) (
      PVOID PluginContext,
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource,
      ULONG BufferLength,
      PWHEA_ERROR_RECORD ErrorRecord
    );

 
typedef
NTSTATUS
(*PSHED_PI_ATTEMPT_ERROR_RECOVERY) (
      PVOID PluginContext,
      ULONG BufferLength,
      PWHEA_ERROR_RECORD ErrorRecord
    );

 
typedef
NTSTATUS
(*PSHED_PI_GET_INJECTION_CAPABILITIES) (
      PVOID PluginContext,
      PWHEA_ERROR_INJECTION_CAPABILITIES Capabilities
    );

 
typedef
NTSTATUS
(*PSHED_PI_INJECT_ERROR) (
      PVOID PluginContext,
      ULONGLONG ErrorType,
      ULONGLONG Parameter1,
      ULONGLONG Parameter2,
      ULONGLONG Parameter3,
      ULONGLONG Parameter4
    );



typedef struct _WHEA_PSHED_PLUGIN_CALLBACKS {
    PSHED_PI_GET_ALL_ERROR_SOURCES GetAllErrorSources;
    PVOID Reserved;
    PSHED_PI_GET_ERROR_SOURCE_INFO GetErrorSourceInfo;
    PSHED_PI_SET_ERROR_SOURCE_INFO SetErrorSourceInfo;
    PSHED_PI_ENABLE_ERROR_SOURCE EnableErrorSource;
    PSHED_PI_DISABLE_ERROR_SOURCE DisableErrorSource;
    PSHED_PI_WRITE_ERROR_RECORD WriteErrorRecord;
    PSHED_PI_READ_ERROR_RECORD ReadErrorRecord;
    PSHED_PI_CLEAR_ERROR_RECORD ClearErrorRecord;
    PSHED_PI_RETRIEVE_ERROR_INFO RetrieveErrorInfo;
    PSHED_PI_FINALIZE_ERROR_RECORD FinalizeErrorRecord;
    PSHED_PI_CLEAR_ERROR_STATUS ClearErrorStatus;
    PSHED_PI_ATTEMPT_ERROR_RECOVERY AttemptRecovery;
    PSHED_PI_GET_INJECTION_CAPABILITIES GetInjectionCapabilities;
    PSHED_PI_INJECT_ERROR InjectError;
} WHEA_PSHED_PLUGIN_CALLBACKS, *PWHEA_PSHED_PLUGIN_CALLBACKS;

typedef struct _WHEA_PSHED_PLUGIN_REGISTRATION_PACKET {
    ULONG Length;
    ULONG Version;
    PVOID Context;
    ULONG FunctionalAreaMask;
    ULONG Reserved;
    WHEA_PSHED_PLUGIN_CALLBACKS Callbacks;
} WHEA_PSHED_PLUGIN_REGISTRATION_PACKET,
  *PWHEA_PSHED_PLUGIN_REGISTRATION_PACKET;
























 
 
 
 
__declspec(dllimport)
PVOID
PshedAllocateMemory (
      ULONG Size
    );
#line 17767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
void
PshedFreeMemory (
        PVOID Address
    );
#line 17776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
PshedIsSystemWheaEnabled (
    void
    );
#line 17784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


 
__declspec(dllimport)
NTSTATUS
PshedRegisterPlugin (
      PWHEA_PSHED_PLUGIN_REGISTRATION_PACKET Packet
    );
#line 17793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


__declspec(dllimport)
BOOLEAN
PshedSynchronizeExecution (
      PWHEA_ERROR_SOURCE_DESCRIPTOR ErrorSource,
      PKSYNCHRONIZE_ROUTINE SynchronizeRoutine,
      PVOID SynchronizeContext
    );
#line 17803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"



 
__inline
BOOLEAN
WheaIsValidErrorRecordSignature (
      PWHEA_ERROR_RECORD Record
    )




















{

    BOOLEAN Valid;

    if ((Record->Header.Signature == 'REPC') &&
        (Record->Header.Revision.AsUSHORT == 0x0210) &&
        (Record->Header.SignatureEnd == 0xFFFFFFFF)) {

        Valid = 1;

    } else {
        Valid = 0;
    }

    return Valid;
}

 
__inline
NTSTATUS
WheaFindErrorRecordSection (
      PWHEA_ERROR_RECORD Record,
      const GUID *SectionType,
      PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR *SectionDescriptor,
      PVOID *SectionData
    )

































{

    NTSTATUS Status;
    PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR Descriptor;
    ULONG Index;
    ULONG MinimumLength;

    if ((Record == ((void *)0)) ||
        (SectionType == ((void *)0)) ||
        (SectionDescriptor == ((void *)0)) ||
        (WheaIsValidErrorRecordSignature(Record) == 0) ||
        (Record->Header.SectionCount == 0)) {

        Status = ((NTSTATUS)0xC000000DL);
        goto FindErrorRecordSectionEnd;
    }

    
    
    
    

    MinimumLength = sizeof(WHEA_ERROR_RECORD_HEADER) +
        (Record->Header.SectionCount *
         sizeof(WHEA_ERROR_RECORD_SECTION_DESCRIPTOR));

    if (Record->Header.Length < MinimumLength) {
        Status = ((NTSTATUS)0xC000000DL);
        goto FindErrorRecordSectionEnd;
    }

    
    
    

    Descriptor = &Record->SectionDescriptor[0];
    for (Index = 0; Index < Record->Header.SectionCount; Index += 1) {
        if (RtlCompareMemory(&Descriptor->SectionType,
                             SectionType,
                             sizeof(GUID)) == sizeof(GUID)) {

            break;
        }

        Descriptor += 1;
    }

    if (Index >= Record->Header.SectionCount) {
        Status = ((NTSTATUS)0xC0000225L);
        goto FindErrorRecordSectionEnd;
    }

    
    
    
    

    if ((Descriptor->SectionOffset + Descriptor->SectionLength) >
        Record->Header.Length) {

        Status = ((NTSTATUS)0xC000000DL);
        goto FindErrorRecordSectionEnd;
    }

    
    
    

    *SectionDescriptor = Descriptor;
    if (SectionData != ((void *)0)) {
        *SectionData = (PVOID)(((PUCHAR)Record) + Descriptor->SectionOffset);
    }

    Status = ((NTSTATUS)0x00000000L);

FindErrorRecordSectionEnd:
    return Status;
}

 
__inline
NTSTATUS
WheaFindNextErrorRecordSection (
      PWHEA_ERROR_RECORD Record,
      ULONG *Context,
      PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR *SectionDescriptor,
      PVOID *SectionData
    )


































{

    NTSTATUS Status;
    PWHEA_ERROR_RECORD_SECTION_DESCRIPTOR Descriptor;
    ULONG Index;
    ULONG MinimumLength;

    if ((Record == ((void *)0)) ||
        (Context == ((void *)0)) ||
        (SectionDescriptor == ((void *)0)) ||
        (WheaIsValidErrorRecordSignature(Record) == 0) ||
        (Record->Header.SectionCount == 0)) {

        Status = ((NTSTATUS)0xC000000DL);
        goto FindNextErrorRecordSectionEnd;
    }

    
    
    
    

    MinimumLength = sizeof(WHEA_ERROR_RECORD_HEADER) +
        (Record->Header.SectionCount *
         sizeof(WHEA_ERROR_RECORD_SECTION_DESCRIPTOR));

    if (Record->Header.Length < MinimumLength) {
        Status = ((NTSTATUS)0xC000000DL);
        goto FindNextErrorRecordSectionEnd;
    }

    
    
    
    
    
    

    Index = *Context;
    if (Index > Record->Header.SectionCount) {
        Status = ((NTSTATUS)0xC000000DL);
        goto FindNextErrorRecordSectionEnd;
    }

    if (Index == Record->Header.SectionCount) {
        Status = ((NTSTATUS)0xC0000225L);
        goto FindNextErrorRecordSectionEnd;
    }

    Descriptor = &Record->SectionDescriptor[Index];

    
    
    
    

    if ((Descriptor->SectionOffset + Descriptor->SectionLength) >
        Record->Header.Length) {

        Status = ((NTSTATUS)0xC000000DL);
        goto FindNextErrorRecordSectionEnd;
    }

    *Context = Index + 1;
    *SectionDescriptor = Descriptor;
    if (SectionData != ((void *)0)) {
        *SectionData = (PVOID)(((PUCHAR)Record) + Descriptor->SectionOffset);
    }

    Status = ((NTSTATUS)0x00000000L);

FindNextErrorRecordSectionEnd:
    return Status;
}




typedef enum _SOC_SUBSYSTEM_TYPE {
    SOC_SUBSYS_WIRELESS_MODEM = 0,
    SOC_SUBSYS_AUDIO_DSP = 1,
    SOC_SUBSYS_WIRELSS_CONNECTIVITY = 2,
    SOC_SUBSYS_SENSORS = 3,


    
    
    

    SOC_SUBSYS_VENDOR_DEFINED = 0x10000
} SOC_SUBSYSTEM_TYPE, *PSOC_SUBSYSTEM_TYPE;


typedef struct _SOC_SUBSYSTEM_FAILURE_DETAILS {
    SOC_SUBSYSTEM_TYPE SubsysType;
    ULONG64 FirmwareVersion;
    ULONG64 HardwareVersion;
    ULONG   UnifiedFailureRegionSize;
    CHAR    UnifiedFailureRegion[1];
} SOC_SUBSYSTEM_FAILURE_DETAILS, *PSOC_SUBSYSTEM_FAILURE_DETAILS;








#pragma warning(pop)




#line 18127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"

#line 18129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntddk.h"


#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntnls.h"





















#pragma once
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntnls.h"






#pragma warning(push)
#pragma warning(disable:4820) 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntnls.h"



typedef struct _CPTABLEINFO {
    USHORT CodePage;                    
    USHORT MaximumCharacterSize;        
    USHORT DefaultChar;                 
    USHORT UniDefaultChar;              
    USHORT TransDefaultChar;            
    USHORT TransUniDefaultChar;         
    USHORT DBCSCodePage;                
    UCHAR  LeadByte[12]; 
    PUSHORT MultiByteTable;             
    PVOID   WideCharTable;              
    PUSHORT DBCSRanges;                 
    PUSHORT DBCSOffsets;                
} CPTABLEINFO, *PCPTABLEINFO;

typedef struct _NLSTABLEINFO {
    CPTABLEINFO OemTableInfo;
    CPTABLEINFO AnsiTableInfo;
    PUSHORT UpperCaseTable;             
    PUSHORT LowerCaseTable;             
} NLSTABLEINFO, *PNLSTABLEINFO;


#pragma warning(pop)
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntnls.h"





#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntnls.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





typedef struct _BUS_HANDLER *PBUS_HANDLER;
typedef struct _CALLBACK_OBJECT *PCALLBACK_OBJECT;
typedef struct _DEVICE_HANDLER_OBJECT *PDEVICE_HANDLER_OBJECT;
typedef struct _IO_TIMER *PIO_TIMER;
typedef struct _KINTERRUPT *PKINTERRUPT;
typedef struct _KPROCESS *PKPROCESS ,*PRKPROCESS, *PEPROCESS;
typedef struct _KTHREAD *PKTHREAD, *PRKTHREAD, *PETHREAD;
typedef struct _OBJECT_TYPE *POBJECT_TYPE;
typedef struct _PEB *PPEB;
typedef struct _ACL *PACL;









extern __declspec(dllimport) volatile CCHAR KeNumberProcessors;


#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef UNICODE_STRING LSA_UNICODE_STRING, *PLSA_UNICODE_STRING;
typedef STRING LSA_STRING, *PLSA_STRING;
typedef OBJECT_ATTRIBUTES LSA_OBJECT_ATTRIBUTES, *PLSA_OBJECT_ATTRIBUTES;



typedef struct _SID_IDENTIFIER_AUTHORITY {
    UCHAR Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




typedef struct _SID {
   UCHAR Revision;
   UCHAR SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   ULONG SubAuthority[1];
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} SID, *PISID;
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





                                                























typedef union _SE_SID {
    SID Sid;
    UCHAR Buffer[(sizeof(SID) - sizeof(ULONG) + ((15) * sizeof(ULONG)))];
} SE_SID, *PSE_SID;

#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel,
    SidTypeLogonSession
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    ULONG Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    ULONG SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;




































































































































































































































































































































































































































typedef struct _ACE_HEADER {
    UCHAR AceType;
    UCHAR AceFlags;
    USHORT AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;































































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
    
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;

typedef struct _SYSTEM_ACCESS_FILTER_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    ULONG SidStart;
    
} SYSTEM_ACCESS_FILTER_ACE, *PSYSTEM_ACCESS_FILTER_ACE;


















typedef USHORT SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;












































































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    UCHAR Revision;
    UCHAR Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    ULONG Owner;
    ULONG Group;
    ULONG Sacl;
    ULONG Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   UCHAR Revision;
   UCHAR Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

   
typedef struct _SECURITY_OBJECT_AI_PARAMS {
    ULONG Size;             
    ULONG ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, *PSECURITY_OBJECT_AI_PARAMS;










typedef struct _OBJECT_TYPE_LIST {
    USHORT Level;
    USHORT Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
































typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone                    = 0x00000000,   

    
    
    
    
    
    AccessReasonAllowedAce                  = 0x00010000,   
    AccessReasonDeniedAce                   = 0x00020000,   

    AccessReasonAllowedParentAce            = 0x00030000,   
    AccessReasonDeniedParentAce             = 0x00040000,   

    AccessReasonNotGrantedByCape            = 0x00050000,   
    AccessReasonNotGrantedByParentCape      = 0x00060000,   

    AccessReasonNotGrantedToAppContainer    = 0x00070000,   

    AccessReasonMissingPrivilege            = 0x00100000,
    AccessReasonFromPrivilege               = 0x00200000,


    AccessReasonIntegrityLevel              = 0x00300000,

    AccessReasonOwnership                   = 0x00400000,

    AccessReasonNullDacl                    = 0x00500000,
    AccessReasonEmptyDacl                   = 0x00600000,

    AccessReasonNoSD                        = 0x00700000,
    AccessReasonNoGrant                     = 0x00800000,   

    AccessReasonTrustLabel                  = 0x00900000,   

    AccessReasonFilterAce                   = 0x00a00000    
}
ACCESS_REASON_TYPE;

 












typedef ULONG ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;


























typedef struct _SE_SECURITY_DESCRIPTOR
{
    ULONG Size;
    ULONG Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    ULONG Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;      
    PGENERIC_MAPPING GenericMapping;
    ULONG ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    ULONG Size;
    ULONG ResultListCount;  
    PACCESS_MASK GrantedAccess;
    PNTSTATUS AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;



typedef enum _SE_AUDIT_OPERATION
{
    AuditPrivilegeObject,
    AuditPrivilegeService,
    AuditAccessCheck,
    AuditOpenObject,
    AuditOpenObjectWithTransaction,
    AuditCloseObject,
    AuditDeleteObject,
    AuditOpenObjectForDelete,
    AuditOpenObjectForDeleteWithTransaction,
    AuditCloseNonObject,
    AuditOpenNonObject,
    AuditObjectReference,
    AuditHandleCreation,
} SE_AUDIT_OPERATION, *PSE_AUDIT_OPERATION;



typedef struct _SE_AUDIT_INFO
{
    ULONG Size;
    AUDIT_EVENT_TYPE AuditType;
    SE_AUDIT_OPERATION AuditOperation;
    ULONG AuditFlags;
    UNICODE_STRING SubsystemName;
    UNICODE_STRING ObjectTypeName;
    UNICODE_STRING ObjectName;
    PVOID HandleId;
    GUID* TransactionId;
    LUID* OperationId;
    BOOLEAN ObjectCreation;
    BOOLEAN GenerateOnClose;
} SE_AUDIT_INFO, *PSE_AUDIT_INFO;









































#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






















#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    TokenProcessTrustLevel,
    TokenPrivateNameSpace,
    TokenSingletonAttributes,
    TokenBnoIsolation,
    MaxTokenInfoClass  
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;





typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;



typedef struct _SE_TOKEN_USER {
    union {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    } ;

    union {
        SID Sid;
        UCHAR Buffer[(sizeof(SID) - sizeof(ULONG) + ((15) * sizeof(ULONG)))];
    } ;

} SE_TOKEN_USER , PSE_TOKEN_USER;



#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef struct _TOKEN_GROUPS {
    ULONG GroupCount;



    SID_AND_ATTRIBUTES Groups[1];
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} TOKEN_GROUPS, *PTOKEN_GROUPS;

typedef struct _TOKEN_PRIVILEGES {
    ULONG PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;



#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    ULONG SidCount;
    ULONG SidLength;
    PSID_AND_ATTRIBUTES Sids;
    ULONG RestrictedSidCount;
    ULONG RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    ULONG PrivilegeCount;
    ULONG PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    ULONG TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;










#line 1433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _TOKEN_MANDATORY_POLICY {
    ULONG Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    ULONG Flags;
    ULONG AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    UCHAR PerUserPolicy[(((59)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    ULONG DynamicCharged;
    ULONG DynamicAvailable;
    ULONG GroupCount;
    ULONG PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;



#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _TOKEN_SID_INFORMATION {
    PSID Sid;
} TOKEN_SID_INFORMATION, *PTOKEN_SID_INFORMATION;

typedef struct _TOKEN_BNO_ISOLATION_INFORMATION {
    PWSTR       IsolationPrefix;
    BOOLEAN     IsolationEnabled;
} TOKEN_BNO_ISOLATION_INFORMATION, *PTOKEN_BNO_ISOLATION_INFORMATION;






























typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    ULONG64             Version;
    PWSTR               Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;








typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID   pValue;         
    ULONG   ValueLength;    
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;



































































typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {

    
    
    
    

    PWSTR   Name; 

    
    
    

    USHORT  ValueType;

    
    
    
    

    USHORT  Reserved;

    
    
    

    ULONG   Flags;

    
    
    

    ULONG   ValueCount;

    
    
    

    union {
        PLONG64                                         pInt64;
        PULONG64                                        pUint64;
        PWSTR                                           *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE            pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE    pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

    
    
    
    

    ULONG   Name;

    
    
    

    USHORT  ValueType;

    
    
    
    

    USHORT  Reserved;

    
    
    

    ULONG   Flags;

    
    
    

    ULONG   ValueCount;

    
    
    

    union {
        ULONG pInt64[1];
        ULONG pUint64[1];
        ULONG ppString[1];
        ULONG pFqbn[1];
        ULONG pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





















typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

    
    
    

    USHORT  Version;

    
    
    

    USHORT  Reserved;

    ULONG   AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1    pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;




 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenThreadToken(
      HANDLE ThreadHandle,
      ACCESS_MASK DesiredAccess,
      BOOLEAN OpenAsSelf,
      PHANDLE TokenHandle
    );
#line 1794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenThreadTokenEx(
      HANDLE ThreadHandle,
      ACCESS_MASK DesiredAccess,
      BOOLEAN OpenAsSelf,
      ULONG HandleAttributes,
      PHANDLE TokenHandle
    );
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenProcessToken(
      HANDLE ProcessHandle,
      ACCESS_MASK DesiredAccess,
      PHANDLE TokenHandle
    );
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenProcessTokenEx(
      HANDLE ProcessHandle,
      ACCESS_MASK DesiredAccess,
      ULONG HandleAttributes,
      PHANDLE TokenHandle
    );
#line 1833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
NTSTATUS
__stdcall
NtOpenJobObjectToken(
      HANDLE JobHandle,
      ACCESS_MASK DesiredAccess,
      PHANDLE TokenHandle
    );
#line 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtDuplicateToken(
      HANDLE ExistingTokenHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      BOOLEAN EffectiveOnly,
      TOKEN_TYPE TokenType,
      PHANDLE NewTokenHandle
    );
#line 1859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtFilterToken (
      HANDLE ExistingTokenHandle,
      ULONG Flags,
      PTOKEN_GROUPS SidsToDisable,
      PTOKEN_PRIVILEGES PrivilegesToDelete,
      PTOKEN_GROUPS RestrictedSids,
      PHANDLE NewTokenHandle
    );
#line 1874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtImpersonateAnonymousToken(
      HANDLE ThreadHandle
    );
#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 1889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationToken (
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      PVOID TokenInformation,
      ULONG TokenInformationLength,
      PULONG ReturnLength
    );
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationToken (
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      PVOID TokenInformation,
      ULONG TokenInformationLength
    );
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAdjustPrivilegesToken (
      HANDLE TokenHandle,
      BOOLEAN DisableAllPrivileges,
      PTOKEN_PRIVILEGES NewState,
      ULONG BufferLength,
      PTOKEN_PRIVILEGES PreviousState,
       PULONG ReturnLength
    );
#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAdjustGroupsToken (
      HANDLE TokenHandle,
      BOOLEAN ResetToDefault,
      PTOKEN_GROUPS NewState,
      ULONG BufferLength,
      PTOKEN_GROUPS PreviousState,
      PULONG ReturnLength
    );
#line 1944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtPrivilegeCheck (
      HANDLE ClientToken,
      PPRIVILEGE_SET RequiredPrivileges,
      PBOOLEAN Result
    );
#line 1956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAccessCheckAndAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      PUNICODE_STRING ObjectTypeName,
      PUNICODE_STRING ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      ACCESS_MASK DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      BOOLEAN ObjectCreation,
      PACCESS_MASK GrantedAccess,
      PNTSTATUS AccessStatus,
      PBOOLEAN GenerateOnClose
    );
#line 1976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAccessCheckByTypeAndAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      PUNICODE_STRING ObjectTypeName,
      PUNICODE_STRING ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      ACCESS_MASK DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      ULONG Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      ULONG ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOLEAN ObjectCreation,
      PACCESS_MASK GrantedAccess,
      PNTSTATUS AccessStatus,
      PBOOLEAN GenerateOnClose
    );
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAccessCheckByTypeResultListAndAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      PUNICODE_STRING ObjectTypeName,
      PUNICODE_STRING ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      ACCESS_MASK DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      ULONG Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      ULONG ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOLEAN ObjectCreation,
      PACCESS_MASK GrantedAccess,
      PNTSTATUS AccessStatus,
      PBOOLEAN GenerateOnClose
    );
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAccessCheckByTypeResultListAndAuditAlarmByHandle (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      HANDLE ClientToken,
      PUNICODE_STRING ObjectTypeName,
      PUNICODE_STRING ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      ACCESS_MASK DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      ULONG Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      ULONG ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOLEAN ObjectCreation,
      PACCESS_MASK GrantedAccess,
      PNTSTATUS AccessStatus,
      PBOOLEAN GenerateOnClose
    );
#line 2052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenObjectAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      PUNICODE_STRING ObjectTypeName,
      PUNICODE_STRING ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      HANDLE ClientToken,
      ACCESS_MASK DesiredAccess,
      ACCESS_MASK GrantedAccess,
      PPRIVILEGE_SET Privileges,
      BOOLEAN ObjectCreation,
      BOOLEAN AccessGranted,
      PBOOLEAN GenerateOnClose
    );
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtPrivilegeObjectAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      HANDLE ClientToken,
      ACCESS_MASK DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOLEAN AccessGranted
    );
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtCloseObjectAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      BOOLEAN GenerateOnClose
    );
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtDeleteObjectAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PVOID HandleId,
      BOOLEAN GenerateOnClose
    );
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtPrivilegedServiceAuditAlarm (
      PUNICODE_STRING SubsystemName,
      PUNICODE_STRING ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOLEAN AccessGranted
    );
#line 2121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef
 
 
NTSTATUS
__stdcall
RTL_HEAP_COMMIT_ROUTINE(
      PVOID Base,
      PVOID *CommitAddress,
      PSIZE_T CommitSize
    );
typedef RTL_HEAP_COMMIT_ROUTINE *PRTL_HEAP_COMMIT_ROUTINE;

typedef struct _RTL_HEAP_PARAMETERS {
    ULONG Length;
    SIZE_T SegmentReserve;
    SIZE_T SegmentCommit;
    SIZE_T DeCommitFreeBlockThreshold;
    SIZE_T DeCommitTotalFreeThreshold;
    SIZE_T MaximumAllocationSize;
    SIZE_T VirtualMemoryThreshold;
    SIZE_T InitialCommit;
    SIZE_T InitialReserve;
    PRTL_HEAP_COMMIT_ROUTINE CommitRoutine;
    SIZE_T Reserved[ 2 ];
} RTL_HEAP_PARAMETERS, *PRTL_HEAP_PARAMETERS;


 
__declspec(dllimport)
PVOID
__stdcall
RtlCreateHeap(
          ULONG Flags,
      PVOID HeapBase,
      SIZE_T ReserveSize,
      SIZE_T CommitSize,
      PVOID Lock,
      PRTL_HEAP_PARAMETERS Parameters
    );
#line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
































































#pragma region Desktop Family


__forceinline
ULONG
HEAP_MAKE_TAG_FLAGS (
      ULONG TagBase,
      ULONG Tag
    )

{
    return ((ULONG)((TagBase) + ((Tag) << 18)));
}
#line 2241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 2242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion



__declspec(dllimport)
PVOID
__stdcall
RtlDestroyHeap(
        PVOID HeapHandle
    );
#line 2253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
 
 
 
PVOID
__stdcall
RtlAllocateHeap(
      PVOID HeapHandle,
      ULONG Flags,
      SIZE_T Size
    );
#line 2267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











#line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlFreeHeap(
      PVOID HeapHandle,
      ULONG Flags,
      PVOID BaseAddress
    );
#line 2290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 2291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
ULONG
__stdcall
RtlRandom (
      PULONG Seed
    );
#line 2302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
ULONG
__stdcall
RtlRandomEx (
      PULONG Seed
    );
#line 2313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitUnicodeStringEx(
      PUNICODE_STRING DestinationString,
        PCWSTR SourceString
    );
#line 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitAnsiStringEx(
      PANSI_STRING DestinationString,
        PCSZ SourceString
    );
#line 2337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlCreateUnicodeString(
      
        PUNICODE_STRING DestinationString,
      PCWSTR SourceString
    );
#line 2364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlPrefixString(
      const STRING * String1,
      const STRING * String2,
      BOOLEAN CaseInSensitive
    );



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAppendStringToString (
      PSTRING Destination,
      const STRING * Source
    );
#line 2388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlOemStringToUnicodeString(
    
    
        PUNICODE_STRING DestinationString,
      PCOEM_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 

__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToOemString(
    
    
        POEM_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToOemString(
    
    
        POEM_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlOemStringToCountedUnicodeString(
    
    
        PUNICODE_STRING DestinationString,
      PCOEM_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeStringToCountedOemString(
    
    
        POEM_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToCountedOemString(
    
    
        POEM_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlValidateUnicodeString(
      ULONG Flags,
      PCUNICODE_STRING String
    );
#line 2492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDuplicateUnicodeString(
      ULONG Flags,
      PCUNICODE_STRING StringIn,
      
        PUNICODE_STRING StringOut
    );
#line 2510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 

__declspec(dllimport)
NTSTATUS
__stdcall
RtlDowncaseUnicodeString(
    
    
        PUNICODE_STRING DestinationString,
      PCUNICODE_STRING SourceString,
      BOOLEAN AllocateDestinationString
    );
#line 2526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
__stdcall
RtlFreeOemString(
      
        POEM_STRING OemString
    );
#line 2538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
ULONG
__stdcall
RtlxUnicodeStringToOemSize(
      PCUNICODE_STRING UnicodeString
    );
#line 2549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


















 
__declspec(dllimport)
ULONG
__stdcall
RtlxOemStringToUnicodeSize(
      PCOEM_STRING OemString
    );
#line 2575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





























 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlMultiByteToUnicodeN(
      PWCH UnicodeString,
      ULONG MaxBytesInUnicodeString,
      PULONG BytesInUnicodeString,
      const CHAR *MultiByteString,
      ULONG BytesInMultiByteString
    );
#line 2616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlMultiByteToUnicodeSize(
      PULONG BytesInUnicodeString,
      const CHAR *MultiByteString,
      ULONG BytesInMultiByteString
    );
#line 2629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToMultiByteSize(
      PULONG BytesInMultiByteString,
      PCWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 2642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToMultiByteN(
      PCHAR MultiByteString,
      ULONG MaxBytesInMultiByteString,
      PULONG BytesInMultiByteString,
      PCWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 2657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToUTF8N(
      PCHAR  UTF8StringDestination,
                                     ULONG  UTF8StringMaxByteCount,
                                    PULONG UTF8StringActualByteCount,
      PCWCH UnicodeStringSource,
                                     ULONG  UnicodeStringByteCount
    );
#line 2675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUTF8ToUnicodeN(
      PWSTR  UnicodeStringDestination,
                                  ULONG  UnicodeStringMaxByteCount,
                                 PULONG UnicodeStringActualByteCount,
      PCCH   UTF8StringSource,
                                  ULONG  UTF8StringByteCount
    );
#line 2690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeToMultiByteN(
      PCHAR MultiByteString,
      ULONG MaxBytesInMultiByteString,
      PULONG BytesInMultiByteString,
      PCWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 2705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlOemToUnicodeN(
      PWCH UnicodeString,
      ULONG MaxBytesInUnicodeString,
      PULONG BytesInUnicodeString,
      PCCH OemString,
      ULONG BytesInOemString
    );
#line 2719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToOemN(
      PCHAR OemString,
      ULONG MaxBytesInOemString,
      PULONG BytesInOemString,
      PCWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 2733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeToOemN(
      PCHAR OemString,
      ULONG MaxBytesInOemString,
      PULONG BytesInOemString,
      PCWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 2747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlNormalizeString(
      ULONG NormForm,
      PCWSTR SourceString,
      LONG SourceStringLength,
      PWSTR DestinationString,
      PLONG DestinationStringLength
    );
#line 2760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlIsNormalizedString(
      ULONG NormForm,
      PCWSTR SourceString,
      LONG SourceStringLength,
      PBOOLEAN Normalized
    );
#line 2772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlIdnToAscii(
      ULONG Flags,
      PCWSTR SourceString,
      LONG SourceStringLength,
      PWSTR DestinationString,
      PLONG DestinationStringLength
    );
#line 2785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlIdnToUnicode(
      ULONG Flags,
      PCWSTR SourceString,
      LONG SourceStringLength,
      PWSTR DestinationString,
      PLONG DestinationStringLength
    );
#line 2798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlIdnToNameprepUnicode(
      ULONG Flags,
      PCWSTR SourceString,
      LONG SourceStringLength,
      PWSTR DestinationString,
      PLONG DestinationStringLength
    );
#line 2811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef
 
 
 
PVOID
__stdcall
RTL_ALLOCATE_STRING_ROUTINE (
      SIZE_T NumberOfBytes
    );
typedef RTL_ALLOCATE_STRING_ROUTINE *PRTL_ALLOCATE_STRING_ROUTINE;



typedef
 
 
 
PVOID
__stdcall
RTL_REALLOCATE_STRING_ROUTINE(
      SIZE_T NumberOfBytes,
          PVOID Buffer
    );
typedef RTL_REALLOCATE_STRING_ROUTINE *PRTL_REALLOCATE_STRING_ROUTINE;

#line 2839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef
 
 
void
__stdcall
RTL_FREE_STRING_ROUTINE (
          PVOID Buffer
    );
typedef RTL_FREE_STRING_ROUTINE *PRTL_FREE_STRING_ROUTINE;

extern const PRTL_ALLOCATE_STRING_ROUTINE RtlAllocateStringRoutine;
extern const PRTL_FREE_STRING_ROUTINE RtlFreeStringRoutine;


extern const PRTL_REALLOCATE_STRING_ROUTINE RtlReallocateStringRoutine;
#line 2856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














typedef struct _GENERATE_NAME_CONTEXT {

    
    
    
    
    
    

    USHORT Checksum;
    BOOLEAN ChecksumInserted;

      UCHAR NameLength;        
    WCHAR NameBuffer[8];                          

      ULONG ExtensionLength;   
    WCHAR ExtensionBuffer[4];                     

    ULONG LastIndexValue;

} GENERATE_NAME_CONTEXT;
typedef GENERATE_NAME_CONTEXT *PGENERATE_NAME_CONTEXT;










 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlGenerate8dot3Name (
         PCUNICODE_STRING Name,
         BOOLEAN AllowExtendedCharacters,
      PGENERATE_NAME_CONTEXT Context,
      PUNICODE_STRING Name8dot3
    );











#line 2924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 2925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlIsNameLegalDOS8Dot3 (
      PCUNICODE_STRING Name,
      POEM_STRING OemName,
      PBOOLEAN NameContainsSpaces
    );
#line 2938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlIsValidOemCharacter (
      PWCHAR Char
    );
#line 2949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct _PREFIX_TABLE_ENTRY {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    struct _PREFIX_TABLE_ENTRY *NextPrefixTree;
    RTL_SPLAY_LINKS Links;
    PSTRING Prefix;
} PREFIX_TABLE_ENTRY;
typedef PREFIX_TABLE_ENTRY *PPREFIX_TABLE_ENTRY;

typedef struct _PREFIX_TABLE {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    PPREFIX_TABLE_ENTRY NextPrefixTree;
} PREFIX_TABLE;
typedef PREFIX_TABLE *PPREFIX_TABLE;






 
__declspec(dllimport)
void
__stdcall
PfxInitialize (
      PPREFIX_TABLE PrefixTable
    );
#line 2988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
__stdcall
PfxInsertPrefix (
      PPREFIX_TABLE PrefixTable,
        PSTRING Prefix,
      PPREFIX_TABLE_ENTRY PrefixTableEntry
    );
#line 3000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
__stdcall
PfxRemovePrefix (
      PPREFIX_TABLE PrefixTable,
      PPREFIX_TABLE_ENTRY PrefixTableEntry
    );
#line 3011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
PPREFIX_TABLE_ENTRY
__stdcall
PfxFindPrefix (
      PPREFIX_TABLE PrefixTable,
      PSTRING FullName
    );
#line 3023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _UNICODE_PREFIX_TABLE_ENTRY {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    struct _UNICODE_PREFIX_TABLE_ENTRY *NextPrefixTree;
    struct _UNICODE_PREFIX_TABLE_ENTRY *CaseMatch;
    RTL_SPLAY_LINKS Links;
    PUNICODE_STRING Prefix;
} UNICODE_PREFIX_TABLE_ENTRY;
typedef UNICODE_PREFIX_TABLE_ENTRY *PUNICODE_PREFIX_TABLE_ENTRY;

typedef struct _UNICODE_PREFIX_TABLE {
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    PUNICODE_PREFIX_TABLE_ENTRY NextPrefixTree;
    PUNICODE_PREFIX_TABLE_ENTRY LastNextEntry;
} UNICODE_PREFIX_TABLE;
typedef UNICODE_PREFIX_TABLE *PUNICODE_PREFIX_TABLE;


 
__declspec(dllimport)
void
__stdcall
RtlInitializeUnicodePrefix (
      PUNICODE_PREFIX_TABLE PrefixTable
    );
#line 3056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlInsertUnicodePrefix (
      PUNICODE_PREFIX_TABLE PrefixTable,
        PUNICODE_STRING Prefix,
      PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry
    );
#line 3068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
__stdcall
RtlRemoveUnicodePrefix (
      PUNICODE_PREFIX_TABLE PrefixTable,
      PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry
    );
#line 3079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
PUNICODE_PREFIX_TABLE_ENTRY
__stdcall
RtlFindUnicodePrefix (
      PUNICODE_PREFIX_TABLE PrefixTable,
      PCUNICODE_STRING FullName,
      ULONG CaseInsensitiveIndex
    );
#line 3092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
PUNICODE_PREFIX_TABLE_ENTRY
__stdcall
RtlNextUnicodePrefix (
      PUNICODE_PREFIX_TABLE PrefixTable,
      BOOLEAN Restart
    );
#line 3104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
































typedef struct _COMPRESSED_DATA_INFO {

    
    
    
    
    
    

    USHORT CompressionFormatAndEngine;

    
    
    
    
    
    
    
    
    
    

    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;

    
    
    
    

    USHORT NumberOfChunks;

    
    
    
    
    
    
    
    
    
    
    
    

    ULONG CompressedChunkSizes[1];

} COMPRESSED_DATA_INFO;
typedef COMPRESSED_DATA_INFO *PCOMPRESSED_DATA_INFO;





#line 3193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetCompressionWorkSpaceSize (
      USHORT CompressionFormatAndEngine,
      PULONG CompressBufferWorkSpaceSize,
      PULONG CompressFragmentWorkSpaceSize
    );
#line 3204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlCompressBuffer (
      USHORT CompressionFormatAndEngine,
      PUCHAR UncompressedBuffer,
      ULONG UncompressedBufferSize,
      PUCHAR CompressedBuffer,
      ULONG CompressedBufferSize,
      ULONG UncompressedChunkSize,
      PULONG FinalCompressedSize,
      PVOID WorkSpace
    );
#line 3220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDecompressBuffer (
      USHORT CompressionFormat,
      PUCHAR UncompressedBuffer,
      ULONG UncompressedBufferSize,
      PUCHAR CompressedBuffer,
      ULONG CompressedBufferSize,
      PULONG FinalUncompressedSize
    );
#line 3235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















#line 3251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















#line 3268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDecompressFragment (
      USHORT CompressionFormat,
      PUCHAR UncompressedFragment,
      ULONG UncompressedFragmentSize,
      PUCHAR CompressedBuffer,
      ULONG CompressedBufferSize,
      ULONG FragmentOffset,
      PULONG FinalUncompressedSize,
      PVOID WorkSpace
    );
#line 3285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















#line 3303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDescribeChunk (
      USHORT CompressionFormat,
      PUCHAR *CompressedBuffer,
      PUCHAR EndOfCompressedBufferPlus1,
      PUCHAR *ChunkBuffer,
      PULONG ChunkSize
    );
#line 3317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlReserveChunk (
      USHORT CompressionFormat,
      PUCHAR *CompressedBuffer,
      PUCHAR EndOfCompressedBufferPlus1,
      PUCHAR *ChunkBuffer,
      ULONG ChunkSize
    );
#line 3331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDecompressChunks (
      PUCHAR UncompressedBuffer,
      ULONG UncompressedBufferSize,
      PUCHAR CompressedBuffer,
      ULONG CompressedBufferSize,
      PUCHAR CompressedTail,
      ULONG CompressedTailSize,
      PCOMPRESSED_DATA_INFO CompressedDataInfo
    );
#line 3347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCompressChunks (
      PUCHAR UncompressedBuffer,
      ULONG UncompressedBufferSize,
      PUCHAR CompressedBuffer,
      ULONG CompressedBufferSize,
      PCOMPRESSED_DATA_INFO CompressedDataInfo,
      ULONG CompressedDataInfoLength,
      PVOID WorkSpace
    );
#line 3363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemoryUlong (
      PVOID Source,
      SIZE_T Length,
      ULONG Pattern
    );

#line 3377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__forceinline
void
RtlFillMemoryUlong (
      PVOID Destination,
      SIZE_T Length,
      ULONG Pattern
    )

{

    PULONG Address = (PULONG)Destination;

    
    
    
    

    if ((Length /= 4) != 0) {

        
        
        
        

        if (((ULONG64)Address & 4) != 0) {
            *Address = Pattern;
            if ((Length -= 1) == 0) {
                return;
            }

            Address += 1;
        }

        
        
        
        

         __stosq((PULONG64)(Address),
                 Pattern | ((ULONG64)Pattern << 32),
                 Length / 2);

        if ((Length & 1) != 0) {
            Address[Length - 1] = Pattern;
        }
    }

    return;
}




#line 3436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

























#line 3462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlTimeToSecondsSince1980 (
      PLARGE_INTEGER Time,
      PULONG ElapsedSeconds
    );
#line 3479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






__declspec(dllimport)
void
__stdcall
RtlSecondsSince1980ToTime (
      ULONG ElapsedSeconds,
      PLARGE_INTEGER Time
    );
#line 3493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlTimeToSecondsSince1970 (
      PLARGE_INTEGER Time,
      PULONG ElapsedSeconds
    );
#line 3508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






__declspec(dllimport)
void
__stdcall
RtlSecondsSince1970ToTime (
      ULONG ElapsedSeconds,
      PLARGE_INTEGER Time
    );
#line 3522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





































































 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlValidSid (
      PSID Sid
    );
#line 3600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualSid (
      PSID Sid1,
      PSID Sid2
    );
#line 3611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
__stdcall
RtlEqualPrefixSid (
      PSID Sid1,
      PSID Sid2
    );
#line 3623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
ULONG
__stdcall
RtlLengthRequiredSid (
      ULONG SubAuthorityCount
    );
#line 3633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PVOID
__stdcall
RtlFreeSid(
        PSID Sid
    );
#line 3642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAllocateAndInitializeSid(
      PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,
      UCHAR SubAuthorityCount,
      ULONG SubAuthority0,
      ULONG SubAuthority1,
      ULONG SubAuthority2,
      ULONG SubAuthority3,
      ULONG SubAuthority4,
      ULONG SubAuthority5,
      ULONG SubAuthority6,
      ULONG SubAuthority7,
     PSID *Sid
    );
#line 3662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












#line 3675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlInitializeSid (
      PSID Sid,
      PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,
      UCHAR SubAuthorityCount
    );
#line 3687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












#line 3700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
RtlIdentifierAuthoritySid (
      PSID Sid
    );
#line 3710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PULONG
__stdcall
RtlSubAuthoritySid (
      PSID Sid,
      ULONG SubAuthority
    );
#line 3720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PUCHAR
__stdcall
RtlSubAuthorityCountSid (
      PSID Sid
    );
#line 3729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
 
ULONG
__stdcall
RtlLengthSid (
      PSID Sid
    );
#line 3741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCopySid (
      ULONG DestinationSidLength,
      PSID DestinationSid,
      PSID SourceSid
    );
#line 3753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateServiceSid(
      PUNICODE_STRING ServiceName,
      PSID ServiceSid,
      PULONG ServiceSidLength
    );
#line 3764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetSaclSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PBOOLEAN SaclPresent,
      PACL *Sacl,
      PBOOLEAN SaclDefaulted
    );
#line 3779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlReplaceSidInSd(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID OldSid,
      PSID NewSid,
      ULONG *NumChanges
    );

__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateVirtualAccountSid (
      PCUNICODE_STRING Name,
      ULONG BaseSubAuthority,
      PSID Sid,
      PULONG SidLength
    );
#line 3802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlConvertSidToUnicodeString(
      PUNICODE_STRING UnicodeString,
      PSID Sid,
      BOOLEAN AllocateDestinationString
    );
#line 3822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
__stdcall
RtlCopyLuid (
      PLUID DestinationLuid,
      PLUID SourceLuid
    );
#line 3834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateAcl (
      PACL Acl,
      ULONG AclLength,
      ULONG AclRevision
    );
#line 3848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAce (
      PACL Acl,
      ULONG AceRevision,
      ULONG StartingAceIndex,
      PVOID AceList,
      ULONG AceListLength
    );
#line 3864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlDeleteAce (
      PACL Acl,
      ULONG AceIndex
    );
#line 3875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetAce (
      PACL Acl,
      ULONG AceIndex,
     PVOID *Ace
    );
#line 3886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAccessAllowedAce (
      PACL Acl,
      ULONG AceRevision,
      ACCESS_MASK AccessMask,
      PSID Sid
    );
#line 3901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAddAccessAllowedAceEx (
      PACL Acl,
      ULONG AceRevision,
      ULONG AceFlags,
      ACCESS_MASK AccessMask,
      PSID Sid
    );
#line 3917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateSecurityDescriptorRelative (
      PISECURITY_DESCRIPTOR_RELATIVE SecurityDescriptor,
      ULONG Revision
    );
#line 3929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetDaclSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PBOOLEAN DaclPresent,
     PACL *Dacl,
      
    
    
    PBOOLEAN DaclDefaulted
    );
#line 3945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetOwnerSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID Owner,
      BOOLEAN OwnerDefaulted
    );
#line 3957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlSetGroupSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID Group,
      BOOLEAN GroupDefaulted
    );
#line 3969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetGroupSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSID *Group,
         
    
    
    PBOOLEAN GroupDefaulted
    );
#line 3984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlAbsoluteToSelfRelativeSD (
      PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
      PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
      PULONG BufferLength
    );
#line 3996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlSelfRelativeToAbsoluteSD (
      PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
      PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
      PULONG AbsoluteSecurityDescriptorSize,
      PACL Dacl,
      PULONG DaclSize,
      PACL Sacl,
      PULONG SaclSize,
      PSID Owner,
      PULONG OwnerSize,
      PSID PrimaryGroup,
      PULONG PrimaryGroupSize
    );
#line 4016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlGetOwnerSecurityDescriptor (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
     PSID *Owner,
    
    
          PBOOLEAN OwnerDefaulted
    );
#line 4030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 


__declspec(dllimport)
ULONG
__stdcall
RtlNtStatusToDosError (
     NTSTATUS Status
   );
#line 4044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






__declspec(dllimport)
ULONG
__stdcall
RtlNtStatusToDosErrorNoTeb (
     NTSTATUS Status
   );
#line 4057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCustomCPToUnicodeN(
      PCPTABLEINFO CustomCP,
      PWCH UnicodeString,
      ULONG MaxBytesInUnicodeString,
      PULONG BytesInUnicodeString,
      PCH CustomCPString,
      ULONG BytesInCustomCPString
    );
#line 4072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUnicodeToCustomCPN(
      PCPTABLEINFO CustomCP,
      PCH CustomCPString,
      ULONG MaxBytesInCustomCPString,
      PULONG BytesInCustomCPString,
      PWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 4087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlUpcaseUnicodeToCustomCPN(
      PCPTABLEINFO CustomCP,
      PCH CustomCPString,
      ULONG MaxBytesInCustomCPString,
      PULONG BytesInCustomCPString,
      PWCH UnicodeString,
      ULONG BytesInUnicodeString
    );
#line 4102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
__stdcall
RtlInitCodePageTable(
      PUSHORT TableBase,
      PCPTABLEINFO CodePageTable
    );
#line 4113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








 
__declspec(dllimport)
NTSTATUS
__stdcall
RtlCreateSystemVolumeInformationFolder(
      PCUNICODE_STRING VolumeRootPath
    );
#line 4129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








__declspec(dllimport)
LONG
__stdcall
RtlCompareAltitudes(
      PCUNICODE_STRING Altitude1,
      PCUNICODE_STRING Altitude2
    );
#line 4145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 4155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






















#line 4178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#pragma region Application or OneCore Family






__declspec(dllimport)
 
USHORT
__stdcall
RtlCaptureStackBackTrace(
      ULONG FramesToSkip,
      ULONG FramesToCapture,
      PVOID * BackTrace,
      PULONG BackTraceHash
    );


#line 4200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 4202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family






__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
      PCONTEXT ContextRecord
    );


#line 4220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 4222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

























































































































































 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationThread (
      HANDLE ThreadHandle,
      THREADINFOCLASS ThreadInformationClass,
      PVOID ThreadInformation,
      ULONG ThreadInformationLength
    );

#line 4387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef ULONG  LSA_OPERATIONAL_MODE, *PLSA_OPERATIONAL_MODE;






typedef enum _SECURITY_LOGON_TYPE {
    UndefinedLogonType = 0, 
    Interactive = 2,      
    Network,              
    Batch,                
    Service,              
    Proxy,                
    Unlock,               
    NetworkCleartext,     
    NewCredentials,       
    

    RemoteInteractive,  
    CachedInteractive,  
    
#line 4417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    CachedRemoteInteractive, 
    CachedUnlock        
#line 4421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} SECURITY_LOGON_TYPE, *PSECURITY_LOGON_TYPE;
















































































































































































































































































































































































































































































































































































































 
 
NTSTATUS
__stdcall
LsaRegisterLogonProcess (
      PLSA_STRING LogonProcessName,
      PHANDLE LsaHandle,
      PLSA_OPERATIONAL_MODE SecurityMode
    );






 
 
NTSTATUS
__stdcall
LsaLogonUser (
             HANDLE          LsaHandle,
             PLSA_STRING     OriginName,
             SECURITY_LOGON_TYPE LogonType,
             ULONG           AuthenticationPackage,
      PVOID AuthenticationInformation,
             ULONG           AuthenticationInformationLength,
         PTOKEN_GROUPS   LocalGroups,
             PTOKEN_SOURCE   SourceContext,
            PVOID           *ProfileBuffer,
            PULONG          ProfileBufferLength,
          PLUID           LogonId,
            PHANDLE         Token,
            PQUOTA_LIMITS   Quotas,
            PNTSTATUS       SubStatus
    );


 
NTSTATUS
__stdcall
LsaFreeReturnBuffer (
      PVOID Buffer
    );




#line 5062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













































typedef enum _MSV1_0_LOGON_SUBMIT_TYPE {
    MsV1_0InteractiveLogon = 2,
    MsV1_0Lm20Logon,
    MsV1_0NetworkLogon,
    MsV1_0SubAuthLogon,
    MsV1_0WorkstationUnlockLogon = 7,
    
    MsV1_0S4ULogon = 12,
    MsV1_0VirtualLogon = 82,
    
    MsV1_0NoElevationLogon = 83,
    
    MsV1_0LuidLogon = 84,
} MSV1_0_LOGON_SUBMIT_TYPE, *PMSV1_0_LOGON_SUBMIT_TYPE;






typedef enum _MSV1_0_PROFILE_BUFFER_TYPE {
    MsV1_0InteractiveProfile = 2,
    MsV1_0Lm20LogonProfile,
    MsV1_0SmartCardProfile
} MSV1_0_PROFILE_BUFFER_TYPE, *PMSV1_0_PROFILE_BUFFER_TYPE;








typedef struct _MSV1_0_INTERACTIVE_LOGON {
    MSV1_0_LOGON_SUBMIT_TYPE MessageType;
    UNICODE_STRING LogonDomainName;
    UNICODE_STRING UserName;
    UNICODE_STRING Password;
} MSV1_0_INTERACTIVE_LOGON, *PMSV1_0_INTERACTIVE_LOGON;























typedef struct _MSV1_0_INTERACTIVE_PROFILE {
    MSV1_0_PROFILE_BUFFER_TYPE MessageType;
    USHORT LogonCount;
    USHORT BadPasswordCount;
    LARGE_INTEGER LogonTime;
    LARGE_INTEGER LogoffTime;
    LARGE_INTEGER KickOffTime;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER PasswordCanChange;
    LARGE_INTEGER PasswordMustChange;
    UNICODE_STRING LogonScript;
    UNICODE_STRING HomeDirectory;
    UNICODE_STRING FullName;
    UNICODE_STRING ProfilePath;
    UNICODE_STRING HomeDirectoryDrive;
    UNICODE_STRING LogonServer;
    ULONG UserFlags;
} MSV1_0_INTERACTIVE_PROFILE, *PMSV1_0_INTERACTIVE_PROFILE;



















































































#line 5271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 5281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 5287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















typedef struct _MSV1_0_LM20_LOGON {
    MSV1_0_LOGON_SUBMIT_TYPE MessageType;
    UNICODE_STRING LogonDomainName;
    UNICODE_STRING UserName;
    UNICODE_STRING Workstation;
    UCHAR ChallengeToClient[8];
    STRING CaseSensitiveChallengeResponse;
    STRING CaseInsensitiveChallengeResponse;
    ULONG ParameterControl;
} MSV1_0_LM20_LOGON, * PMSV1_0_LM20_LOGON;





typedef struct _MSV1_0_SUBAUTH_LOGON{
    MSV1_0_LOGON_SUBMIT_TYPE MessageType;
    UNICODE_STRING LogonDomainName;
    UNICODE_STRING UserName;
    UNICODE_STRING Workstation;
    UCHAR ChallengeToClient[8];
    STRING AuthenticationInfo1;
    STRING AuthenticationInfo2;
    ULONG ParameterControl;
    ULONG SubAuthPackageId;
} MSV1_0_SUBAUTH_LOGON, * PMSV1_0_SUBAUTH_LOGON;














typedef struct _MSV1_0_S4U_LOGON {
    MSV1_0_LOGON_SUBMIT_TYPE MessageType;
    ULONG Flags;
    UNICODE_STRING UserPrincipalName; 
    UNICODE_STRING DomainName; 
} MSV1_0_S4U_LOGON, *PMSV1_0_S4U_LOGON;

#line 5351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



























#line 5379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






#line 5386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct _MSV1_0_LM20_LOGON_PROFILE {
    MSV1_0_PROFILE_BUFFER_TYPE MessageType;
    LARGE_INTEGER KickOffTime;
    LARGE_INTEGER LogoffTime;
    ULONG UserFlags;
    UCHAR UserSessionKey[16];
    UNICODE_STRING LogonDomainName;
    UCHAR LanmanSessionKey[8];
    UNICODE_STRING LogonServer;
    UNICODE_STRING UserParameters;
} MSV1_0_LM20_LOGON_PROFILE, * PMSV1_0_LM20_LOGON_PROFILE;

























typedef enum _MSV1_0_CREDENTIAL_KEY_TYPE
{
    InvalidCredKey,
    DeprecatedIUMCredKey,
    DomainUserCredKey,
    LocalUserCredKey,
    ExternallySuppliedCredKey
} MSV1_0_CREDENTIAL_KEY_TYPE;

typedef struct _MSV1_0_CREDENTIAL_KEY {
    UCHAR Data[20];
} MSV1_0_CREDENTIAL_KEY, *PMSV1_0_CREDENTIAL_KEY;

typedef struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL {
    ULONG Version;
    ULONG Flags;
    UCHAR LmPassword[16];
    UCHAR NtPassword[16];
} MSV1_0_SUPPLEMENTAL_CREDENTIAL, *PMSV1_0_SUPPLEMENTAL_CREDENTIAL;


typedef struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 {
    ULONG Version;
    ULONG Flags;
    UCHAR NtPassword[16];
    MSV1_0_CREDENTIAL_KEY CredentialKey;
} MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2, *PMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2;

typedef struct _MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 {
    ULONG Version;
    ULONG Flags;
    MSV1_0_CREDENTIAL_KEY_TYPE CredentialKeyType;
    UCHAR NtPassword[16];
    MSV1_0_CREDENTIAL_KEY CredentialKey;
    UCHAR ShaPassword[20];
} MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3, *PMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3;

typedef struct _MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL {
    ULONG Version;
    ULONG EncryptedCredsSize;




    UCHAR EncryptedCreds[1];
#line 5478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL, *PMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL;






#pragma pack(push,1)
typedef struct _MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL {
    ULONG Version;
    ULONG Flags;
    MSV1_0_CREDENTIAL_KEY CredentialKey;
    MSV1_0_CREDENTIAL_KEY_TYPE CredentialKeyType;
    ULONG EncryptedCredsSize;
    UCHAR EncryptedCreds[1];
} MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL, *PMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL;
#pragma pack(pop)














#line 5510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 5512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












                                                               



#line 5529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 5530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 5531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





typedef struct _MSV1_0_NTLM3_RESPONSE {
    UCHAR Response[16]; 
    UCHAR RespType;     
    UCHAR HiRespType;   
    USHORT Flags;       
    ULONG MsgWord;      
    ULONGLONG TimeStamp;    
    UCHAR ChallengeFromClient[8];
    ULONG AvPairsOff;   
    UCHAR Buffer[1];    
} MSV1_0_NTLM3_RESPONSE, *PMSV1_0_NTLM3_RESPONSE;




#line 5552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef enum {
    MsvAvEOL,                 
    MsvAvNbComputerName,      
    MsvAvNbDomainName,        
    MsvAvDnsComputerName,     
    MsvAvDnsDomainName,       

    MsvAvDnsTreeName,         
    MsvAvFlags,               

    MsvAvTimestamp,           
                              
                              
    MsvAvRestrictions,        
    MsvAvTargetName,
    MsvAvChannelBindings,
#line 5570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 5571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} MSV1_0_AVID;

typedef struct  _MSV1_0_AV_PAIR {
    USHORT AvId;
    USHORT AvLen;
    
} MSV1_0_AV_PAIR, *PMSV1_0_AV_PAIR;















typedef enum _MSV1_0_PROTOCOL_MESSAGE_TYPE {
    MsV1_0Lm20ChallengeRequest = 0,          
    MsV1_0Lm20GetChallengeResponse,          
    MsV1_0EnumerateUsers,                    
    MsV1_0GetUserInfo,                       
    MsV1_0ReLogonUsers,                      
    MsV1_0ChangePassword,                    
    MsV1_0ChangeCachedPassword,              
    MsV1_0GenericPassthrough,                
    MsV1_0CacheLogon,                        
    MsV1_0SubAuth,                           
    MsV1_0DeriveCredential,                  
    MsV1_0CacheLookup,                       

    MsV1_0SetProcessOption,                  
#line 5609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    MsV1_0ConfigLocalAliases,
    MsV1_0ClearCachedCredentials,
#line 5613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    MsV1_0LookupToken,                        
#line 5616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 5622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 5626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 5631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} MSV1_0_PROTOCOL_MESSAGE_TYPE, *PMSV1_0_PROTOCOL_MESSAGE_TYPE;







typedef struct _MSV1_0_LM20_CHALLENGE_REQUEST {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
} MSV1_0_LM20_CHALLENGE_REQUEST, *PMSV1_0_LM20_CHALLENGE_REQUEST;

typedef struct _MSV1_0_LM20_CHALLENGE_RESPONSE {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    UCHAR ChallengeToClient[8];
} MSV1_0_LM20_CHALLENGE_RESPONSE, *PMSV1_0_LM20_CHALLENGE_RESPONSE;






























typedef struct _MSV1_0_GETCHALLENRESP_REQUEST_V1 {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    ULONG ParameterControl;
    LUID LogonId;
    UNICODE_STRING Password;
    UCHAR ChallengeToClient[8];
} MSV1_0_GETCHALLENRESP_REQUEST_V1, *PMSV1_0_GETCHALLENRESP_REQUEST_V1;

typedef struct _MSV1_0_GETCHALLENRESP_REQUEST {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    ULONG ParameterControl;
    LUID LogonId;
    UNICODE_STRING Password;
    UCHAR ChallengeToClient[8];

    
    
    

    UNICODE_STRING UserName;
    UNICODE_STRING LogonDomainName;
    UNICODE_STRING ServerName;      
} MSV1_0_GETCHALLENRESP_REQUEST, *PMSV1_0_GETCHALLENRESP_REQUEST;

typedef struct _MSV1_0_GETCHALLENRESP_RESPONSE {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    STRING CaseSensitiveChallengeResponse;
    STRING CaseInsensitiveChallengeResponse;
    UNICODE_STRING UserName;
    UNICODE_STRING LogonDomainName;
    UCHAR UserSessionKey[16];
    UCHAR LanmanSessionKey[8];
} MSV1_0_GETCHALLENRESP_RESPONSE, *PMSV1_0_GETCHALLENRESP_RESPONSE;





typedef struct _MSV1_0_ENUMUSERS_REQUEST {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
} MSV1_0_ENUMUSERS_REQUEST, *PMSV1_0_ENUMUSERS_REQUEST;

typedef struct _MSV1_0_ENUMUSERS_RESPONSE {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    ULONG NumberOfLoggedOnUsers;
    PLUID LogonIds;
    PULONG EnumHandles;
} MSV1_0_ENUMUSERS_RESPONSE, *PMSV1_0_ENUMUSERS_RESPONSE;





typedef struct _MSV1_0_GETUSERINFO_REQUEST {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    LUID LogonId;
} MSV1_0_GETUSERINFO_REQUEST, *PMSV1_0_GETUSERINFO_REQUEST;

typedef struct _MSV1_0_GETUSERINFO_RESPONSE {
    MSV1_0_PROTOCOL_MESSAGE_TYPE MessageType;
    PSID UserSid;
    UNICODE_STRING UserName;
    UNICODE_STRING LogonDomainName;
    UNICODE_STRING LogonServer;
    SECURITY_LOGON_TYPE LogonType;
} MSV1_0_GETUSERINFO_RESPONSE, *PMSV1_0_GETUSERINFO_RESPONSE;





















#line 5765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





























































































































































typedef struct _FILE_ID_128 {                               
    UCHAR Identifier[16];                                   
} FILE_ID_128, *PFILE_ID_128;                               



























typedef struct _FILE_NOTIFY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG Action;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;















typedef struct _FILE_DIRECTORY_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_DIRECTORY_INFORMATION, *PFILE_DIRECTORY_INFORMATION;

typedef struct _FILE_FULL_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFORMATION, *PFILE_FULL_DIR_INFORMATION;

typedef struct _FILE_ID_FULL_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_FULL_DIR_INFORMATION, *PFILE_ID_FULL_DIR_INFORMATION;

typedef struct _FILE_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
} FILE_BOTH_DIR_INFORMATION, *PFILE_BOTH_DIR_INFORMATION;

typedef struct _FILE_ID_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFORMATION, *PFILE_ID_BOTH_DIR_INFORMATION;

typedef struct _FILE_NAMES_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NAMES_INFORMATION, *PFILE_NAMES_INFORMATION;

typedef struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    LARGE_INTEGER FileId;
    GUID LockingTransactionId;
    ULONG TxInfoFlags;
    WCHAR FileName[1];
} FILE_ID_GLOBAL_TX_DIR_INFORMATION, *PFILE_ID_GLOBAL_TX_DIR_INFORMATION;





typedef struct _FILE_ID_EXTD_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFORMATION, *PFILE_ID_EXTD_DIR_INFORMATION;

typedef struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
} FILE_ID_EXTD_BOTH_DIR_INFORMATION, *PFILE_ID_EXTD_BOTH_DIR_INFORMATION;

typedef struct _FILE_OBJECTID_INFORMATION {
    LONGLONG FileReference;
    UCHAR ObjectId[16];
    union {
        struct {
            UCHAR BirthVolumeId[16];
            UCHAR BirthObjectId[16];
            UCHAR DomainId[16];
        } ;
        UCHAR ExtendedInfo[48];
    } ;
} FILE_OBJECTID_INFORMATION, *PFILE_OBJECTID_INFORMATION;
























































typedef struct _FILE_INTERNAL_INFORMATION {
    LARGE_INTEGER IndexNumber;
} FILE_INTERNAL_INFORMATION, *PFILE_INTERNAL_INFORMATION;

typedef struct _FILE_ID_INFORMATION {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFORMATION, *PFILE_ID_INFORMATION;

typedef struct _FILE_EA_INFORMATION {
    ULONG EaSize;
} FILE_EA_INFORMATION, *PFILE_EA_INFORMATION;

typedef struct _FILE_ACCESS_INFORMATION {
    ACCESS_MASK AccessFlags;
} FILE_ACCESS_INFORMATION, *PFILE_ACCESS_INFORMATION;

typedef struct _FILE_MODE_INFORMATION {
    ULONG Mode;
} FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION;

typedef struct _FILE_ALL_INFORMATION {
    FILE_BASIC_INFORMATION BasicInformation;
    FILE_STANDARD_INFORMATION StandardInformation;
    FILE_INTERNAL_INFORMATION InternalInformation;
    FILE_EA_INFORMATION EaInformation;
    FILE_ACCESS_INFORMATION AccessInformation;
    FILE_POSITION_INFORMATION PositionInformation;
    FILE_MODE_INFORMATION ModeInformation;
    FILE_ALIGNMENT_INFORMATION AlignmentInformation;
    FILE_NAME_INFORMATION NameInformation;
} FILE_ALL_INFORMATION, *PFILE_ALL_INFORMATION;


typedef struct _FILE_STAT_INFORMATION {
    LARGE_INTEGER FileId;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ACCESS_MASK EffectiveAccess;
} FILE_STAT_INFORMATION, *PFILE_STAT_INFORMATION;

typedef struct _FILE_ALLOCATION_INFORMATION {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFORMATION, *PFILE_ALLOCATION_INFORMATION;


typedef struct _FILE_COMPRESSION_INFORMATION {
    LARGE_INTEGER CompressedFileSize;
    USHORT CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFORMATION, *PFILE_COMPRESSION_INFORMATION;









typedef struct _FILE_LINK_INFORMATION {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_LINK_INFORMATION, *PFILE_LINK_INFORMATION;






typedef struct _FILE_MOVE_CLUSTER_INFORMATION {
    ULONG ClusterCount;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_MOVE_CLUSTER_INFORMATION, *PFILE_MOVE_CLUSTER_INFORMATION;








#line 6282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _FILE_RENAME_INFORMATION {

    union {
        BOOLEAN ReplaceIfExists;  
        ULONG Flags;              
    } ;


#line 6292 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFORMATION, *PFILE_RENAME_INFORMATION;





typedef struct _FILE_STREAM_INFORMATION {
    ULONG NextEntryOffset;
    ULONG StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFORMATION, *PFILE_STREAM_INFORMATION;

typedef struct _FILE_TRACKING_INFORMATION {
    HANDLE DestinationFile;
    ULONG ObjectInformationLength;
    CHAR ObjectInformation[1];
} FILE_TRACKING_INFORMATION, *PFILE_TRACKING_INFORMATION;

typedef struct _FILE_COMPLETION_INFORMATION {
    HANDLE Port;
    PVOID Key;
} FILE_COMPLETION_INFORMATION, *PFILE_COMPLETION_INFORMATION;

typedef struct _FILE_PIPE_INFORMATION {
     ULONG ReadMode;
     ULONG CompletionMode;
} FILE_PIPE_INFORMATION, *PFILE_PIPE_INFORMATION;

typedef struct _FILE_PIPE_LOCAL_INFORMATION {
     ULONG NamedPipeType;
     ULONG NamedPipeConfiguration;
     ULONG MaximumInstances;
     ULONG CurrentInstances;
     ULONG InboundQuota;
     ULONG ReadDataAvailable;
     ULONG OutboundQuota;
     ULONG WriteQuotaAvailable;
     ULONG NamedPipeState;
     ULONG NamedPipeEnd;
} FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION;

typedef struct _FILE_PIPE_REMOTE_INFORMATION {
     LARGE_INTEGER CollectDataTime;
     ULONG MaximumCollectionCount;
} FILE_PIPE_REMOTE_INFORMATION, *PFILE_PIPE_REMOTE_INFORMATION;


typedef struct _FILE_MAILSLOT_QUERY_INFORMATION {
    ULONG MaximumMessageSize;
    ULONG MailslotQuota;
    ULONG NextMessageSize;
    ULONG MessagesAvailable;
    LARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_QUERY_INFORMATION, *PFILE_MAILSLOT_QUERY_INFORMATION;

typedef struct _FILE_MAILSLOT_SET_INFORMATION {
    PLARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_SET_INFORMATION, *PFILE_MAILSLOT_SET_INFORMATION;

typedef struct _FILE_REPARSE_POINT_INFORMATION {
    LONGLONG FileReference;
    ULONG Tag;
} FILE_REPARSE_POINT_INFORMATION, *PFILE_REPARSE_POINT_INFORMATION;

typedef struct _FILE_LINK_ENTRY_INFORMATION {
    ULONG NextEntryOffset;
    LONGLONG ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_LINK_ENTRY_INFORMATION, *PFILE_LINK_ENTRY_INFORMATION;

typedef struct _FILE_LINKS_INFORMATION {
    ULONG BytesNeeded;
    ULONG EntriesReturned;
    FILE_LINK_ENTRY_INFORMATION Entry;
} FILE_LINKS_INFORMATION, *PFILE_LINKS_INFORMATION;

typedef struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION {
    ULONG NextEntryOffset;
    FILE_ID_128 ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_LINK_ENTRY_FULL_ID_INFORMATION, *PFILE_LINK_ENTRY_FULL_ID_INFORMATION;

typedef struct _FILE_LINKS_FULL_ID_INFORMATION {
    ULONG BytesNeeded;
    ULONG EntriesReturned;
    FILE_LINK_ENTRY_FULL_ID_INFORMATION Entry;
} FILE_LINKS_FULL_ID_INFORMATION, *PFILE_LINKS_FULL_ID_INFORMATION;

typedef struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NETWORK_PHYSICAL_NAME_INFORMATION, *PFILE_NETWORK_PHYSICAL_NAME_INFORMATION;

typedef struct _FILE_STANDARD_LINK_INFORMATION {
    ULONG NumberOfAccessibleLinks;
    ULONG TotalNumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_LINK_INFORMATION, *PFILE_STANDARD_LINK_INFORMATION;








typedef struct _FILE_GET_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR EaNameLength;
    CHAR EaName[1];
} FILE_GET_EA_INFORMATION, *PFILE_GET_EA_INFORMATION;





















#line 6433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













#line 6447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 6462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _FILE_REMOTE_PROTOCOL_INFORMATION
{
    
    USHORT StructureVersion;     
    USHORT StructureSize;        

    ULONG  Protocol;             

    
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;

    
    ULONG  Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;

    


    struct {
        ULONG Reserved[16];
    } ProtocolSpecificReserved;
#line 6492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





















#line 6514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

} FILE_REMOTE_PROTOCOL_INFORMATION, *PFILE_REMOTE_PROTOCOL_INFORMATION;





typedef struct _FILE_GET_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION;

typedef struct _FILE_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER QuotaUsed;
    LARGE_INTEGER QuotaThreshold;
    LARGE_INTEGER QuotaLimit;
    SID Sid;
} FILE_QUOTA_INFORMATION, *PFILE_QUOTA_INFORMATION;





typedef struct _FILE_VOLUME_NAME_INFORMATION {
    ULONG DeviceNameLength;
    WCHAR DeviceName[1];
} FILE_VOLUME_NAME_INFORMATION, *PFILE_VOLUME_NAME_INFORMATION;


typedef struct _FILE_FS_ATTRIBUTE_INFORMATION {
    ULONG FileSystemAttributes;
    LONG MaximumComponentNameLength;
    ULONG FileSystemNameLength;
    WCHAR FileSystemName[1];
} FILE_FS_ATTRIBUTE_INFORMATION, *PFILE_FS_ATTRIBUTE_INFORMATION;

typedef struct _FILE_FS_DRIVER_PATH_INFORMATION {
    BOOLEAN DriverInPath;
    ULONG   DriverNameLength;
    WCHAR   DriverName[1];
} FILE_FS_DRIVER_PATH_INFORMATION, *PFILE_FS_DRIVER_PATH_INFORMATION;

typedef struct _FILE_FS_VOLUME_FLAGS_INFORMATION {
    ULONG Flags;
} FILE_FS_VOLUME_FLAGS_INFORMATION, *PFILE_FS_VOLUME_FLAGS_INFORMATION;






















typedef struct _FILE_FS_CONTROL_INFORMATION {
    LARGE_INTEGER FreeSpaceStartFiltering;
    LARGE_INTEGER FreeSpaceThreshold;
    LARGE_INTEGER FreeSpaceStopFiltering;
    LARGE_INTEGER DefaultQuotaThreshold;
    LARGE_INTEGER DefaultQuotaLimit;
    ULONG FileSystemControlFlags;
} FILE_FS_CONTROL_INFORMATION, *PFILE_FS_CONTROL_INFORMATION;

typedef struct _FILE_FS_DATA_COPY_INFORMATION {
    ULONG NumberOfCopies;
} FILE_FS_DATA_COPY_INFORMATION, *PFILE_FS_DATA_COPY_INFORMATION;



 __declspec(dllimport)
NTSTATUS
__stdcall
NtCreateFile (
      PHANDLE FileHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER AllocationSize,
      ULONG FileAttributes,
      ULONG ShareAccess,
      ULONG CreateDisposition,
      ULONG CreateOptions,
      PVOID EaBuffer,
      ULONG EaLength
    );
#line 6617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 __declspec(dllimport)
NTSTATUS
__stdcall
NtDeviceIoControlFile (
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG IoControlCode,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );
#line 6637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 __declspec(dllimport)
NTSTATUS
__stdcall
NtFsControlFile (
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG FsControlCode,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );
#line 6657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtLockFile (
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER ByteOffset,
      PLARGE_INTEGER Length,
      ULONG Key,
      BOOLEAN FailImmediately,
      BOOLEAN ExclusiveLock
    );
#line 6675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtOpenFile (
      PHANDLE FileHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG ShareAccess,
      ULONG OpenOptions
    );
#line 6689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryDirectoryFile (
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass,
      BOOLEAN ReturnSingleEntry,
      PUNICODE_STRING FileName,
      BOOLEAN RestartScan
    );
#line 6708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryInformationFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass
    );
#line 6723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryQuotaInformationFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      BOOLEAN ReturnSingleEntry,
      PVOID SidList,
      ULONG SidListLength,
      
        PSID StartSid,
      BOOLEAN RestartScan
    );
#line 6743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryVolumeInformationFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FsInformation,
      ULONG Length,
      FS_INFORMATION_CLASS FsInformationClass
    );
#line 6756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtReadFile (
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      PLARGE_INTEGER ByteOffset,
      PULONG Key
    );
#line 6773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetInformationFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass
    );
#line 6788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetQuotaInformationFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length
    );
#line 6802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetVolumeInformationFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FsInformation,
      ULONG Length,
      FS_INFORMATION_CLASS FsInformationClass
    );
#line 6815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtWriteFile (
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      PLARGE_INTEGER ByteOffset,
      PULONG Key
    );
#line 6832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtUnlockFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER ByteOffset,
      PLARGE_INTEGER Length,
      ULONG Key
    );
#line 6845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














































#line 6892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













#line 6906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















#line 6923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













































































#line 7001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










































#line 7044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














































#line 7091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 7100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 7110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





















#line 7136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 7142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











#line 7158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















#line 7176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 7182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 7187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 7197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 7200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 7211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 7214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 7223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 7226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 7232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 7238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 7243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 7248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 7251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 7254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 7268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 7272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












typedef struct _PATHNAME_BUFFER {

    ULONG PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;







typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {

    UCHAR First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;












typedef struct {

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    ULONG BytesPerSector;
    ULONG BytesPerCluster;
    ULONG BytesPerFileRecordSegment;
    ULONG ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;

typedef struct {

    ULONG ByteCount;

    USHORT MajorVersion;
    USHORT MinorVersion;

    ULONG BytesPerPhysicalSector;

    USHORT LfsMajorVersion;
    USHORT LfsMinorVersion;







#line 7352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
#line 7355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"































#line 7387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct {

    LARGE_INTEGER StartingLcn;

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;












#line 7414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct {

    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    UCHAR Buffer[1];

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;
#line 7423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef struct {

    LARGE_INTEGER StartingVcn;

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {

    ULONG ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];

} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
#line 7448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {

    ULONG ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
        ULONG ReferenceCount;
    } Extents[1];

} RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER, *PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
#line 7472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef struct {

    LARGE_INTEGER FileReferenceNumber;

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {

    LARGE_INTEGER FileReferenceNumber;
    ULONG FileRecordLength;
    UCHAR FileRecordBuffer[1];

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
#line 7494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    ULONG ClusterCount;

} MOVE_FILE_DATA, *PMOVE_FILE_DATA;

typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;







typedef struct _MOVE_FILE_DATA32 {

    UINT32 FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    ULONG ClusterCount;

} MOVE_FILE_DATA32, *PMOVE_FILE_DATA32;
#line 7534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 7535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef struct {
    ULONG Restart;
    SID Sid;
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;

typedef struct {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;

#line 7556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












typedef struct {

    ULONGLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;

} MFT_ENUM_DATA_V0, *PMFT_ENUM_DATA_V0;

typedef struct {

    ULONGLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
    USHORT MinMajorVersion;
    USHORT MaxMajorVersion;

} MFT_ENUM_DATA_V1, *PMFT_ENUM_DATA_V1;



#line 7589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
typedef MFT_ENUM_DATA_V0 MFT_ENUM_DATA, *PMFT_ENUM_DATA;
#line 7591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct {

    ULONGLONG MaximumSize;
    ULONGLONG AllocationDelta;

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;













typedef struct {

    USHORT MinMajorVersion;
    USHORT MaxMajorVersion;

} READ_FILE_USN_DATA, *PREAD_FILE_USN_DATA;








typedef struct {

    USN StartUsn;
    ULONG ReasonMask;
    ULONG ReturnOnlyOnClose;
    ULONGLONG Timeout;
    ULONGLONG BytesToWaitFor;
    ULONGLONG UsnJournalID;

} READ_USN_JOURNAL_DATA_V0, *PREAD_USN_JOURNAL_DATA_V0;

typedef struct {

    USN StartUsn;
    ULONG ReasonMask;
    ULONG ReturnOnlyOnClose;
    ULONGLONG Timeout;
    ULONGLONG BytesToWaitFor;
    ULONGLONG UsnJournalID;
    USHORT MinMajorVersion;
    USHORT MaxMajorVersion;

} READ_USN_JOURNAL_DATA_V1, *PREAD_USN_JOURNAL_DATA_V1;



#line 7658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
typedef READ_USN_JOURNAL_DATA_V0 READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;
#line 7660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct {
    ULONG Flags;
    ULONG Unused;
    ULONGLONG ChunkSize;
    LONGLONG FileSizeThreshold;
} USN_TRACK_MODIFIED_RANGES, *PUSN_TRACK_MODIFIED_RANGES;

typedef struct {
    USN Usn;
} USN_RANGE_TRACK_OUTPUT, *PUSN_RANGE_TRACK_OUTPUT;























typedef struct {

    ULONG RecordLength;
    USHORT MajorVersion;
    USHORT MinorVersion;
    ULONGLONG FileReferenceNumber;
    ULONGLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    ULONG Reason;
    ULONG SourceInfo;
    ULONG SecurityId;
    ULONG FileAttributes;
    USHORT FileNameLength;
    USHORT FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V2, *PUSN_RECORD_V2;

typedef struct {

    ULONG RecordLength;
    USHORT MajorVersion;
    USHORT MinorVersion;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    ULONG Reason;
    ULONG SourceInfo;
    ULONG SecurityId;
    ULONG FileAttributes;
    USHORT FileNameLength;
    USHORT FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V3, *PUSN_RECORD_V3;

typedef USN_RECORD_V2 USN_RECORD, *PUSN_RECORD;

typedef struct {
    ULONG RecordLength;
    USHORT MajorVersion;
    USHORT MinorVersion;
} USN_RECORD_COMMON_HEADER, *PUSN_RECORD_COMMON_HEADER;

typedef struct {
    LONGLONG Offset;
    LONGLONG Length;
} USN_RECORD_EXTENT, *PUSN_RECORD_EXTENT;

typedef struct {
    USN_RECORD_COMMON_HEADER Header;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    ULONG Reason;
    ULONG SourceInfo;
    ULONG RemainingExtents;
    USHORT NumberOfExtents;
    USHORT ExtentSize;
    USN_RECORD_EXTENT Extents[1];
} USN_RECORD_V4, *PUSN_RECORD_V4;

typedef union {
    USN_RECORD_COMMON_HEADER Header;
    USN_RECORD_V2 V2;
    USN_RECORD_V3 V3;
    USN_RECORD_V4 V4;
} USN_RECORD_UNION, *PUSN_RECORD_UNION;


































typedef struct {

    ULONGLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    ULONGLONG MaximumSize;
    ULONGLONG AllocationDelta;

} USN_JOURNAL_DATA_V0, *PUSN_JOURNAL_DATA_V0;

typedef struct {

    ULONGLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    ULONGLONG MaximumSize;
    ULONGLONG AllocationDelta;
    USHORT MinSupportedMajorVersion;
    USHORT MaxSupportedMajorVersion;

} USN_JOURNAL_DATA_V1, *PUSN_JOURNAL_DATA_V1;

typedef struct {

    ULONGLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    ULONGLONG MaximumSize;
    ULONGLONG AllocationDelta;
    USHORT MinSupportedMajorVersion;
    USHORT MaxSupportedMajorVersion;
    ULONG Flags;
    ULONGLONG RangeTrackChunkSize;
    LONGLONG RangeTrackFileSizeThreshold;

} USN_JOURNAL_DATA_V2, *PUSN_JOURNAL_DATA_V2;




#line 7851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
typedef USN_JOURNAL_DATA_V0 USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;
#line 7853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct {

    ULONGLONG UsnJournalID;
    ULONG DeleteFlags;

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;













#pragma warning(push)
#line 7881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma warning(disable:4201)       

typedef struct {






#line 7891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    ULONG UsnSourceInfo;
#line 7893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    HANDLE VolumeHandle;
    ULONG HandleInfo;

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;






typedef struct {






#line 7912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    ULONG UsnSourceInfo;
#line 7914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    UINT32 VolumeHandle;
    ULONG HandleInfo;

} MARK_HANDLE_INFO32, *PMARK_HANDLE_INFO32;
#line 7919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#pragma warning(pop)


#line 7925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



























































#line 7985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 7993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 8001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 8007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 8015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






#line 8022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct {

    ACCESS_MASK DesiredAccess;
    ULONG SecurityIds[1];

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
#line 8038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











#line 8050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _FILE_PREFETCH {
    ULONG Type;
    ULONG Count;
    ULONGLONG Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH;

typedef struct _FILE_PREFETCH_EX {
    ULONG Type;
    ULONG Count;
    PVOID Context;
    ULONGLONG Prefetch[1];
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX;








#line 8077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct _FILESYSTEM_STATISTICS {

    USHORT FileSystemType;
    USHORT Version;                     

    ULONG SizeOfCompleteStructure;      

    ULONG UserFileReads;
    ULONG UserFileReadBytes;
    ULONG UserDiskReads;
    ULONG UserFileWrites;
    ULONG UserFileWriteBytes;
    ULONG UserDiskWrites;

    ULONG MetaDataReads;
    ULONG MetaDataReadBytes;
    ULONG MetaDataDiskReads;
    ULONG MetaDataWrites;
    ULONG MetaDataWriteBytes;
    ULONG MetaDataDiskWrites;

    
    
    

} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;












typedef struct _FAT_STATISTICS {
    ULONG CreateHits;
    ULONG SuccessfulCreates;
    ULONG FailedCreates;

    ULONG NonCachedReads;
    ULONG NonCachedReadBytes;
    ULONG NonCachedWrites;
    ULONG NonCachedWriteBytes;

    ULONG NonCachedDiskReads;
    ULONG NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS {
    ULONG CreateHits;
    ULONG SuccessfulCreates;
    ULONG FailedCreates;

    ULONG NonCachedReads;
    ULONG NonCachedReadBytes;
    ULONG NonCachedWrites;
    ULONG NonCachedWriteBytes;

    ULONG NonCachedDiskReads;
    ULONG NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {

    ULONG LogFileFullExceptions;
    ULONG OtherExceptions;

    
    
    

    ULONG MftReads;
    ULONG MftReadBytes;
    ULONG MftWrites;
    ULONG MftWriteBytes;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } MftWritesUserLevel;

    USHORT MftWritesFlushForLogFileFull;
    USHORT MftWritesLazyWriter;
    USHORT MftWritesUserRequest;

    ULONG Mft2Writes;
    ULONG Mft2WriteBytes;
    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } Mft2WritesUserLevel;

    USHORT Mft2WritesFlushForLogFileFull;
    USHORT Mft2WritesLazyWriter;
    USHORT Mft2WritesUserRequest;

    ULONG RootIndexReads;
    ULONG RootIndexReadBytes;
    ULONG RootIndexWrites;
    ULONG RootIndexWriteBytes;

    ULONG BitmapReads;
    ULONG BitmapReadBytes;
    ULONG BitmapWrites;
    ULONG BitmapWriteBytes;

    USHORT BitmapWritesFlushForLogFileFull;
    USHORT BitmapWritesLazyWriter;
    USHORT BitmapWritesUserRequest;

    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
    } BitmapWritesUserLevel;

    ULONG MftBitmapReads;
    ULONG MftBitmapReadBytes;
    ULONG MftBitmapWrites;
    ULONG MftBitmapWriteBytes;

    USHORT MftBitmapWritesFlushForLogFileFull;
    USHORT MftBitmapWritesLazyWriter;
    USHORT MftBitmapWritesUserRequest;

    struct {
        USHORT Write;
        USHORT Create;
        USHORT SetInfo;
        USHORT Flush;
    } MftBitmapWritesUserLevel;

    ULONG UserIndexReads;
    ULONG UserIndexReadBytes;
    ULONG UserIndexWrites;
    ULONG UserIndexWriteBytes;

    
    
    

    ULONG LogFileReads;
    ULONG LogFileReadBytes;
    ULONG LogFileWrites;
    ULONG LogFileWriteBytes;

    struct {
        ULONG Calls;                
        ULONG Clusters;             
        ULONG Hints;                

        ULONG RunsReturned;         

        ULONG HintsHonored;         
        ULONG HintsClusters;        
        ULONG Cache;                
        ULONG CacheClusters;        
        ULONG CacheMiss;            
        ULONG CacheMissClusters;    
    } Allocate;

    
    
    

    ULONG DiskResourcesExhausted;

    
    
    

} NTFS_STATISTICS, *PNTFS_STATISTICS;

typedef struct _FILESYSTEM_STATISTICS_EX {

    USHORT FileSystemType;
    USHORT Version;                     

    ULONG SizeOfCompleteStructure;      

    ULONGLONG UserFileReads;
    ULONGLONG UserFileReadBytes;
    ULONGLONG UserDiskReads;
    ULONGLONG UserFileWrites;
    ULONGLONG UserFileWriteBytes;
    ULONGLONG UserDiskWrites;

    ULONGLONG MetaDataReads;
    ULONGLONG MetaDataReadBytes;
    ULONGLONG MetaDataDiskReads;
    ULONGLONG MetaDataWrites;
    ULONGLONG MetaDataWriteBytes;
    ULONGLONG MetaDataDiskWrites;

    
    
    

} FILESYSTEM_STATISTICS_EX, *PFILESYSTEM_STATISTICS_EX;

typedef struct _NTFS_STATISTICS_EX {

    ULONG LogFileFullExceptions;
    ULONG OtherExceptions;

    
    
    

    ULONGLONG MftReads;
    ULONGLONG MftReadBytes;
    ULONGLONG MftWrites;
    ULONGLONG MftWriteBytes;
    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } MftWritesUserLevel;

    ULONG MftWritesFlushForLogFileFull;
    ULONG MftWritesLazyWriter;
    ULONG MftWritesUserRequest;

    ULONGLONG Mft2Writes;
    ULONGLONG Mft2WriteBytes;
    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } Mft2WritesUserLevel;

    ULONG Mft2WritesFlushForLogFileFull;
    ULONG Mft2WritesLazyWriter;
    ULONG Mft2WritesUserRequest;

    ULONGLONG RootIndexReads;
    ULONGLONG RootIndexReadBytes;
    ULONGLONG RootIndexWrites;
    ULONGLONG RootIndexWriteBytes;

    ULONGLONG BitmapReads;
    ULONGLONG BitmapReadBytes;
    ULONGLONG BitmapWrites;
    ULONGLONG BitmapWriteBytes;

    ULONG BitmapWritesFlushForLogFileFull;
    ULONG BitmapWritesLazyWriter;
    ULONG BitmapWritesUserRequest;

    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } BitmapWritesUserLevel;

    ULONGLONG MftBitmapReads;
    ULONGLONG MftBitmapReadBytes;
    ULONGLONG MftBitmapWrites;
    ULONGLONG MftBitmapWriteBytes;

    ULONG MftBitmapWritesFlushForLogFileFull;
    ULONG MftBitmapWritesLazyWriter;
    ULONG MftBitmapWritesUserRequest;

    struct {
        ULONG Write;
        ULONG Create;
        ULONG SetInfo;
        ULONG Flush;
    } MftBitmapWritesUserLevel;

    ULONGLONG UserIndexReads;
    ULONGLONG UserIndexReadBytes;
    ULONGLONG UserIndexWrites;
    ULONGLONG UserIndexWriteBytes;

    
    
    

    ULONGLONG LogFileReads;
    ULONGLONG LogFileReadBytes;
    ULONGLONG LogFileWrites;
    ULONGLONG LogFileWriteBytes;

    struct {
        ULONG Calls;                    
        ULONG RunsReturned;             
        ULONG Hints;                    
        ULONG HintsHonored;             
        ULONG Cache;                    
        ULONG CacheMiss;                

        ULONGLONG Clusters;             
        ULONGLONG HintsClusters;        
        ULONGLONG CacheClusters;        
        ULONGLONG CacheMissClusters;    
    } Allocate;

    
    
    

    ULONG DiskResourcesExhausted;

    
    
    

    ULONGLONG VolumeTrimCount;
    ULONGLONG VolumeTrimTime;
    ULONGLONG VolumeTrimByteCount;

    ULONGLONG FileLevelTrimCount;
    ULONGLONG FileLevelTrimTime;
    ULONGLONG FileLevelTrimByteCount;

    ULONGLONG VolumeTrimSkippedCount;
    ULONGLONG VolumeTrimSkippedByteCount;

} NTFS_STATISTICS_EX, *PNTFS_STATISTICS_EX;












#pragma warning(push)
#line 8431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma warning(disable:4201)       

typedef struct _FILE_OBJECTID_BUFFER {

    
    
    

    UCHAR ObjectId[16];

    
    
    
    

    union {
        struct {
            UCHAR BirthVolumeId[16];
            UCHAR BirthObjectId[16];
            UCHAR DomainId[16];
        } ;
        UCHAR ExtendedInfo[48];
    } ;

} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;


#pragma warning(pop)


#line 8462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 8464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct _FILE_SET_SPARSE_BUFFER {
    BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER;


#line 8479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct _FILE_ZERO_DATA_INFORMATION {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;

} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;

#line 8496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












#line 8509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















typedef struct _FILE_ALLOCATED_RANGE_BUFFER {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;

} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
#line 8531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















typedef struct _ENCRYPTION_BUFFER {

    ULONG EncryptionOperation;
    UCHAR Private[1];

} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;













typedef struct _DECRYPTION_STATUS_BUFFER {

    BOOLEAN NoEncryptedStreams;

} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;









typedef struct _REQUEST_RAW_ENCRYPTED_DATA {

    
    
    
    
    
    

    LONGLONG FileOffset;
    ULONG Length;

} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;

























typedef struct _ENCRYPTED_DATA_INFO {

    
    
    
    
    
    

    ULONGLONG StartingFileOffset;

    
    
    
    
    
    
    

    ULONG OutputBufferOffset;

    
    
    
    
    
    
    
    

    ULONG BytesWithinFileSize;

    
    
    
    
    
    
    
    

    ULONG BytesWithinValidDataLength;

    
    
    
    
    
    

    USHORT CompressionFormat;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    UCHAR DataUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;

    
    
    

    UCHAR EncryptionFormat;

    
    
    
    

    USHORT NumberOfDataBlocks;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    ULONG DataBlockSize[1];

} ENCRYPTED_DATA_INFO, *PENCRYPTED_DATA_INFO;
#line 8736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {

    
    
    
    
    
    

    ULONG ExtendedCode;

    
    
    

    ULONG Length;

    
    
    

    ULONG Flags;
    ULONG Reserved;

} EXTENDED_ENCRYPTED_DATA_INFO, *PEXTENDED_ENCRYPTED_DATA_INFO;
#line 8773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











typedef struct _PLEX_READ_DATA_REQUEST {

    
    
    
    
    
    
    
    
    

    LARGE_INTEGER ByteOffset;
    ULONG ByteLength;
    ULONG PlexNumber;

} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;
#line 8802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











typedef struct _SI_COPYFILE {
    ULONG SourceFileNameLength;
    ULONG DestinationFileNameLength;
    ULONG Flags;
    WCHAR FileNameBuffer[1];
} SI_COPYFILE, *PSI_COPYFILE;




#line 8824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
    BOOLEAN CloseDisc;
} FILE_MAKE_COMPATIBLE_BUFFER, *PFILE_MAKE_COMPATIBLE_BUFFER;







typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
    BOOLEAN Disable;
} FILE_SET_DEFECT_MGMT_BUFFER, *PFILE_SET_DEFECT_MGMT_BUFFER;







typedef struct _FILE_QUERY_SPARING_BUFFER {
    ULONG SparingUnitBytes;
    BOOLEAN SoftwareSparing;
    ULONG TotalSpareBlocks;
    ULONG FreeSpareBlocks;
} FILE_QUERY_SPARING_BUFFER, *PFILE_QUERY_SPARING_BUFFER;







typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
    LARGE_INTEGER DirectoryCount;       
    LARGE_INTEGER FileCount;            
    USHORT FsFormatMajVersion;          
    USHORT FsFormatMinVersion;          
    WCHAR FsFormatName[ 12];
    LARGE_INTEGER FormatTime;
    LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[ 34];
    WCHAR AbstractInfo[ 34];
    WCHAR FormattingImplementationInfo[ 34];
    WCHAR LastModifyingImplementationInfo[ 34];
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;


































































typedef ULONGLONG CLSN;

typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
    ULONGLONG Hint1;
    ULONGLONG Hint2;
    CLSN Clsn;
    NTSTATUS Status;
} FILE_INITIATE_REPAIR_OUTPUT_BUFFER, *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;







typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit,
    ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES, *PSHRINK_VOLUME_REQUEST_TYPES;

typedef struct _SHRINK_VOLUME_INFORMATION
{
    SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    ULONGLONG Flags;
    LONGLONG NewNumberOfSectors;

} SHRINK_VOLUME_INFORMATION, *PSHRINK_VOLUME_INFORMATION;






































































typedef struct _TXFS_MODIFY_RM {

    
    
    

    ULONG Flags;

    
    
    

    ULONG LogContainerCountMax;

    
    
    

    ULONG LogContainerCountMin;

    
    
    

    ULONG LogContainerCount;

    
    
    
    
    

    ULONG LogGrowthIncrement;

    
    
    
    

    ULONG LogAutoShrinkPercentage;

    
    
    

    ULONGLONG Reserved;

    
    
    
    

    USHORT LoggingMode;

} TXFS_MODIFY_RM,
 *PTXFS_MODIFY_RM;














































typedef struct _TXFS_QUERY_RM_INFORMATION {

    
    
    
    

    ULONG BytesRequired;

    
    
    

    ULONGLONG TailLsn;

    
    
    

    ULONGLONG CurrentLsn;

    
    
    

    ULONGLONG ArchiveTailLsn;

    
    
    

    ULONGLONG LogContainerSize;

    
    
    

    LARGE_INTEGER HighestVirtualClock;

    
    
    

    ULONG LogContainerCount;

    
    
    

    ULONG LogContainerCountMax;

    
    
    

    ULONG LogContainerCountMin;

    
    
    
    
    

    ULONG LogGrowthIncrement;

    
    
    
    
    

    ULONG LogAutoShrinkPercentage;

    
    
    
    

    ULONG Flags;

    
    
    

    USHORT LoggingMode;

    
    
    

    USHORT Reserved;

    
    
    

    ULONG RmState;

    
    
    

    ULONGLONG LogCapacity;

    
    
    

    ULONGLONG LogFree;

    
    
    

    ULONGLONG TopsSize;

    
    
    

    ULONGLONG TopsUsed;

    
    
    

    ULONGLONG TransactionCount;

    
    
    

    ULONGLONG OnePCCount;

    
    
    

    ULONGLONG TwoPCCount;

    
    
    

    ULONGLONG NumberLogFileFull;

    
    
    

    ULONGLONG OldestTransactionAge;

    
    
    

    GUID RMName;

    
    
    
    

    ULONG TmLogPathOffset;

} TXFS_QUERY_RM_INFORMATION,
 *PTXFS_QUERY_RM_INFORMATION;














typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
    LARGE_INTEGER  LastVirtualClock;
    ULONGLONG LastRedoLsn;
    ULONGLONG HighestRecoveryLsn;
    ULONG Flags;
} TXFS_ROLLFORWARD_REDO_INFORMATION,
 *PTXFS_ROLLFORWARD_REDO_INFORMATION;



#pragma deprecated(TXFS_ROLLFORWARD_REDO_INFORMATION)
#pragma deprecated(PTXFS_ROLLFORWARD_REDO_INFORMATION)
#line 9340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 9341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















































typedef struct _TXFS_START_RM_INFORMATION {

    
    
    

    ULONG Flags;

    
    
    

    ULONGLONG LogContainerSize;

    
    
    

    ULONG LogContainerCountMin;

    
    
    

    ULONG LogContainerCountMax;

    
    
    
    
    

    ULONG LogGrowthIncrement;

    
    
    

    ULONG LogAutoShrinkPercentage;

    
    
    
    
    

    ULONG TmLogPathOffset;

    
    
    
    

    USHORT TmLogPathLength;

    
    
    
    
    

    USHORT LoggingMode;

    
    
    
    

    USHORT LogPathLength;

    
    
    

    USHORT Reserved;

    
    
    
    

    WCHAR LogPath[1];

} TXFS_START_RM_INFORMATION,
 *PTXFS_START_RM_INFORMATION;



#pragma deprecated(TXFS_START_RM_INFORMATION)
#pragma deprecated(PTXFS_START_RM_INFORMATION)
#line 9484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 9485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct _TXFS_GET_METADATA_INFO_OUT {

    
    
    

    struct {
        LONGLONG LowPart;
        LONGLONG HighPart;
    } TxfFileId;

    
    
    

    GUID LockingTransaction;

    
    
    

    ULONGLONG LastLsn;

    
    
    

    ULONG TransactionState;

} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;




















typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {

    
    
    
    

    ULONGLONG Offset;

    
    
    
    

    ULONG NameFlags;

    
    
    

    LONGLONG FileId;

    
    
    

    ULONG Reserved1;
    ULONG Reserved2;
    LONGLONG Reserved3;

    
    
    

    WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;


typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {

    
    
    

    GUID KtmTransaction;

    
    
    

    ULONGLONG NumberOfFiles;

    
    
    
    

    ULONGLONG BufferSizeRequired;

    
    
    
    

    ULONGLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;







typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {

    
    
    

    GUID TransactionId;

    
    
    

    ULONG TransactionState;

    
    
    

    ULONG Reserved1;
    ULONG Reserved2;
    LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;

typedef struct _TXFS_LIST_TRANSACTIONS {

    
    
    

    ULONGLONG NumberOfTransactions;

    
    
    
    
    

    ULONGLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;









#pragma warning(push)
#line 9665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma warning(disable:4201)       

typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
    union {

        
        
        

        ULONG BufferLength;

        
        
        

        UCHAR Buffer[1];
    } ;
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;


#pragma warning(pop)


#line 9689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct _TXFS_WRITE_BACKUP_INFORMATION {

    
    
    
    

    UCHAR Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;










typedef struct _TXFS_GET_TRANSACTED_VERSION {

    
    
    
    
    

    ULONG ThisBaseVersion;

    
    
    

    ULONG LatestVersion;

    
    
    
    

    USHORT ThisMiniVersion;

    
    
    
    

    USHORT FirstMiniVersion;

    
    
    
    

    USHORT LatestMiniVersion;

} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;




































typedef struct _TXFS_SAVEPOINT_INFORMATION {

    
    
    

    HANDLE KtmTransaction;

    
    
    

    ULONG ActionCode;

    
    
    
    
    
    
    
    
    

    ULONG SavepointId;

} TXFS_SAVEPOINT_INFORMATION, *PTXFS_SAVEPOINT_INFORMATION;



#pragma deprecated(TXFS_SAVEPOINT_INFORMATION)
#pragma deprecated(PTXFS_SAVEPOINT_INFORMATION)
#line 9822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 9823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct _TXFS_CREATE_MINIVERSION_INFO {

    USHORT StructureVersion;

    USHORT StructureLength;

    
    
    

    ULONG BaseVersion;

    
    
    

    USHORT MiniVersion;

} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;



#pragma deprecated(TXFS_CREATE_MINIVERSION_INFO)
#pragma deprecated(PTXFS_CREATE_MINIVERSION_INFO)
#line 9857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 9858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {

    
    
    

    BOOLEAN TransactionsActiveAtSnapshot;

} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;

#line 9876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct _BOOT_AREA_INFO {

    ULONG               BootSectorCount;  
    struct {
        LARGE_INTEGER   Offset;
    } BootSectors[2];                     

} BOOT_AREA_INFO, *PBOOT_AREA_INFO;







typedef struct _RETRIEVAL_POINTER_BASE {

    LARGE_INTEGER       FileAreaOffset; 
} RETRIEVAL_POINTER_BASE, *PRETRIEVAL_POINTER_BASE;









typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {

    ULONG VolumeFlags;
    ULONG FlagMask;
    ULONG Version;
    ULONG Reserved;

} FILE_FS_PERSISTENT_VOLUME_INFORMATION, *PFILE_FS_PERSISTENT_VOLUME_INFORMATION;











#line 9934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 9945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





















#line 9967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 9977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 9987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {

    CHAR FileSystem[9];

} FILE_SYSTEM_RECOGNITION_INFORMATION, *PFILE_SYSTEM_RECOGNITION_INFORMATION;

















typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {

    
    
    

    USHORT StructureVersion;

    USHORT StructureLength;

    
    
    

    ULONG RequestedOplockLevel;

    
    
    

    ULONG Flags;

} REQUEST_OPLOCK_INPUT_BUFFER, *PREQUEST_OPLOCK_INPUT_BUFFER;




typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {

    
    
    

    USHORT StructureVersion;

    USHORT StructureLength;

    
    
    
    

    ULONG OriginalOplockLevel;

    
    
    
    
    

    ULONG NewOplockLevel;

    
    
    

    ULONG Flags;

    
    
    
    
    

    ACCESS_MASK AccessMode;

    USHORT ShareMode;

} REQUEST_OPLOCK_OUTPUT_BUFFER, *PREQUEST_OPLOCK_OUTPUT_BUFFER;







typedef struct _VIRTUAL_STORAGE_TYPE
{
    ULONG DeviceId;
    GUID  VendorId;
} VIRTUAL_STORAGE_TYPE, *PVIRTUAL_STORAGE_TYPE;
#line 10098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
    ULONG   RequestLevel;
    ULONG   RequestFlags;
} STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST, *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;




typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
    ULONG   EntryLength;
    ULONG   DependencyTypeFlags;
    ULONG   ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
    ULONG   EntryLength;
    ULONG   DependencyTypeFlags;
    ULONG   ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
    ULONG   AncestorLevel;      
    ULONG   HostVolumeNameOffset;
    ULONG   HostVolumeNameSize;
    ULONG   DependentVolumeNameOffset;
    ULONG   DependentVolumeNameSize;
    ULONG   RelativePathOffset;
    ULONG   RelativePathSize;
    ULONG   DependentDeviceNameOffset;
    ULONG   DependentDeviceNameSize;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;




#pragma warning(push)
#pragma warning(disable:4200) 
#line 10140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
    ULONG   ResponseLevel;
    ULONG   NumberEntries;
    union {
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
    } ;
} STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE, *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;


#pragma warning(pop)
#line 10154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 10156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















typedef struct _SD_CHANGE_MACHINE_SID_INPUT {

    
    
    
    
    
    
    

    USHORT CurrentMachineSIDOffset;
    USHORT CurrentMachineSIDLength;

    
    
    
    
    
    
    

    USHORT NewMachineSIDOffset;
    USHORT NewMachineSIDLength;

} SD_CHANGE_MACHINE_SID_INPUT, *PSD_CHANGE_MACHINE_SID_INPUT;

typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {

    
    
    

    ULONGLONG NumSDChangedSuccess;

    
    
    

    ULONGLONG NumSDChangedFail;

    
    
    

    ULONGLONG NumSDUnused;

    
    
    

    ULONGLONG NumSDTotal;

    
    
    

    ULONGLONG NumMftSDChangedSuccess;

    
    
    

    ULONGLONG NumMftSDChangedFail;

    
    
    

    ULONGLONG NumMftSDTotal;

} SD_CHANGE_MACHINE_SID_OUTPUT, *PSD_CHANGE_MACHINE_SID_OUTPUT;





typedef struct _SD_QUERY_STATS_INPUT {

    ULONG Reserved;

} SD_QUERY_STATS_INPUT, *PSD_QUERY_STATS_INPUT;

typedef struct _SD_QUERY_STATS_OUTPUT {

    
    
    
    

    ULONGLONG SdsStreamSize;
    ULONGLONG SdsAllocationSize;

    
    
    
    

    ULONGLONG SiiStreamSize;
    ULONGLONG SiiAllocationSize;

    
    
    
    

    ULONGLONG SdhStreamSize;
    ULONGLONG SdhAllocationSize;

    
    
    
    

    ULONGLONG NumSDTotal;

    
    
    
    

    ULONGLONG NumSDUnused;

} SD_QUERY_STATS_OUTPUT, *PSD_QUERY_STATS_OUTPUT;





typedef struct _SD_ENUM_SDS_INPUT {

    
    
    
    
    
    
    
    
    

    ULONGLONG StartingOffset;

    
    
    
    
    

    ULONGLONG MaxSDEntriesToReturn;

} SD_ENUM_SDS_INPUT, *PSD_ENUM_SDS_INPUT;

typedef struct _SD_ENUM_SDS_ENTRY {

    
    
    

    ULONG Hash;

    
    
    

    ULONG SecurityId;

    
    
    
    

    ULONGLONG Offset;

    
    
    
    

    ULONG Length;

    
    
    

    UCHAR Descriptor[1];

} SD_ENUM_SDS_ENTRY, *PSD_ENUM_SDS_ENTRY;

typedef struct _SD_ENUM_SDS_OUTPUT {

    
    
    
    
    
    
    

    ULONGLONG NextOffset;

    
    
    

    ULONGLONG NumSDEntriesReturned;

    
    
    

    ULONGLONG NumSDBytesReturned;

    
    
    
    
    
    
    

    SD_ENUM_SDS_ENTRY SDEntry[1];

} SD_ENUM_SDS_OUTPUT, *PSD_ENUM_SDS_OUTPUT;






#pragma warning(push)
#line 10407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma warning(disable:4201)       

typedef struct _SD_GLOBAL_CHANGE_INPUT
{
    
    
    

    ULONG Flags;

    
    
    
    

    ULONG ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_INPUT SdChange;
        SD_QUERY_STATS_INPUT SdQueryStats;
        SD_ENUM_SDS_INPUT SdEnumSds;
    } ;

} SD_GLOBAL_CHANGE_INPUT, *PSD_GLOBAL_CHANGE_INPUT;

typedef struct _SD_GLOBAL_CHANGE_OUTPUT
{

    
    
    

    ULONG Flags;

    
    
    

    ULONG ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
        SD_QUERY_STATS_OUTPUT SdQueryStats;
        SD_ENUM_SDS_OUTPUT SdEnumSds;
    } ;

} SD_GLOBAL_CHANGE_OUTPUT, *PSD_GLOBAL_CHANGE_OUTPUT;


#pragma warning(pop)


#line 10462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {

    
    
    
    ULONG         Flags;

    
    
    
    
    
    ULONG         NumberOfClusters;

    
    
    
    LARGE_INTEGER Cluster[1];
} LOOKUP_STREAM_FROM_CLUSTER_INPUT, *PLOOKUP_STREAM_FROM_CLUSTER_INPUT;

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
    
    
    
    
    ULONG         Offset;

    
    
    
    
    
    ULONG         NumberOfMatches;

    
    
    
    
    ULONG         BufferSizeRequired;
} LOOKUP_STREAM_FROM_CLUSTER_OUTPUT, *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;











typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
    
    
    
    
    ULONG         OffsetToNext;

    
    
    
    ULONG         Flags;

    
    
    
    LARGE_INTEGER Reserved;

    
    
    
    
    LARGE_INTEGER Cluster;

    
    
    
    
    
    
    WCHAR         FileName[1];
} LOOKUP_STREAM_FROM_CLUSTER_ENTRY, *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;









typedef struct _FILE_TYPE_NOTIFICATION_INPUT {

    
    
    
    

    ULONG Flags;

    
    
    

    ULONG NumFileTypeIDs;

    
    
    

    GUID FileTypeID[1];

} FILE_TYPE_NOTIFICATION_INPUT, *PFILE_TYPE_NOTIFICATION_INPUT;












extern const GUID  FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
extern const GUID  FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
extern const GUID  FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;





typedef struct _CSV_MGMT_LOCK {
    ULONG      Flags;
}CSV_MGMT_LOCK, *PCSV_MGMT_LOCK;







typedef struct _CSV_NAMESPACE_INFO {

    ULONG         Version;
    ULONG         DeviceNumber;
    LARGE_INTEGER StartingOffset;
    ULONG         SectorSize;

} CSV_NAMESPACE_INFO, *PCSV_NAMESPACE_INFO;








typedef enum _CSV_CONTROL_OP {
    CsvControlStartRedirectFile                  = 0x02,
    CsvControlStopRedirectFile                   = 0x03,
    CsvControlQueryRedirectState                 = 0x04,
    CsvControlQueryFileRevision                  = 0x06,
    CsvControlQueryMdsPath                       = 0x08,
    CsvControlQueryFileRevisionFileId128         = 0x09,
    CsvControlQueryVolumeRedirectState           = 0x0a,
    CsvControlEnableUSNRangeModificationTracking = 0x0d,
    CsvControlMarkHandleLocalVolumeMount         = 0x0e,
    CsvControlUnmarkHandleLocalVolumeMount       = 0x0f,

} CSV_CONTROL_OP, *PCSV_CONTROL_OP;

typedef struct _CSV_CONTROL_PARAM {
    CSV_CONTROL_OP Operation;
    LONGLONG Unused;
} CSV_CONTROL_PARAM, *PCSV_CONTROL_PARAM;




typedef struct _CSV_QUERY_REDIRECT_STATE {
    ULONG MdsNodeId;
    ULONG DsNodeId;
    BOOLEAN FileRedirected;
} CSV_QUERY_REDIRECT_STATE, *PCSV_QUERY_REDIRECT_STATE;







typedef struct _CSV_QUERY_FILE_REVISION {
    
    
    
    LONGLONG FileId;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION, *PCSV_QUERY_FILE_REVISION;







typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
    
    
    
    FILE_ID_128 FileId;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION_FILE_ID_128, *PCSV_QUERY_FILE_REVISION_FILE_ID_128;







typedef struct _CSV_QUERY_MDS_PATH {
    ULONG MdsNodeId;
    ULONG DsNodeId;
    ULONG PathLength;
    WCHAR Path[1];
} CSV_QUERY_MDS_PATH, *PCSV_QUERY_MDS_PATH;

typedef enum _CSVFS_DISK_CONNECTIVITY
{
    CsvFsDiskConnectivityNone          = 0,
    CsvFsDiskConnectivityMdsNodeOnly   = 1,
    CsvFsDiskConnectivitySubsetOfNodes = 2,
    CsvFsDiskConnectivityAllNodes      = 3
} CSVFS_DISK_CONNECTIVITY, *PCSVFS_DISK_CONNECTIVITY;




typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
    ULONG MdsNodeId;
    ULONG DsNodeId;
    BOOLEAN IsDiskConnected;
    BOOLEAN ClusterEnableDirectIo;
    CSVFS_DISK_CONNECTIVITY DiskConnectivity;
} CSV_QUERY_VOLUME_REDIRECT_STATE, *PCSV_QUERY_VOLUME_REDIRECT_STATE;











typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
    ULONGLONG VetoedFromAltitudeIntegral;
    ULONGLONG VetoedFromAltitudeDecimal;
    WCHAR   Reason[256];
} CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT, *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;

#line 10769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"































































































































































































































































































































































































































































































































































































































































































































































#line 11505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



























#line 11533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





























































































































































































































































































































#line 11851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













typedef struct _WOF_EXTERNAL_INFO {
    ULONG Version;
    ULONG Provider;
} WOF_EXTERNAL_INFO, *PWOF_EXTERNAL_INFO;

typedef struct _WOF_EXTERNAL_FILE_ID {
    FILE_ID_128 FileId;
} WOF_EXTERNAL_FILE_ID, *PWOF_EXTERNAL_FILE_ID;

typedef struct _WOF_VERSION_INFO {
    ULONG WofVersion;
} WOF_VERSION_INFO, *PWOF_VERSION_INFO;







#line 11884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
    ULONG Version;
    ULONG Flags;
    LARGE_INTEGER DataSourceId;
    UCHAR ResourceHash[20];
} WIM_PROVIDER_EXTERNAL_INFO, *PWIM_PROVIDER_EXTERNAL_INFO;














typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
    ULONG WimType;
    ULONG WimIndex;
    ULONG WimFileNameOffset;
    ULONG WimFileNameLength;
} WIM_PROVIDER_ADD_OVERLAY_INPUT, *PWIM_PROVIDER_ADD_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
    LARGE_INTEGER DataSourceId;
    ULONG WimFileNameOffset;
    ULONG WimFileNameLength;
} WIM_PROVIDER_UPDATE_OVERLAY_INPUT, *PWIM_PROVIDER_UPDATE_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
    LARGE_INTEGER DataSourceId;
} WIM_PROVIDER_REMOVE_OVERLAY_INPUT, *PWIM_PROVIDER_REMOVE_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
    LARGE_INTEGER DataSourceId;
} WIM_PROVIDER_SUSPEND_OVERLAY_INPUT, *PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT;

typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
    ULONG NextEntryOffset;
    LARGE_INTEGER DataSourceId;
    GUID WimGuid;
    ULONG WimFileNameOffset;
    ULONG WimType;
    ULONG WimIndex;
    ULONG Flags;
} WIM_PROVIDER_OVERLAY_ENTRY, *PWIM_PROVIDER_OVERLAY_ENTRY;

#line 11942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
    ULONG Version;
    ULONG Algorithm;
} FILE_PROVIDER_EXTERNAL_INFO_V0, *PFILE_PROVIDER_EXTERNAL_INFO_V0;

typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
    ULONG Version;
    ULONG Algorithm;
    ULONG Flags;
} FILE_PROVIDER_EXTERNAL_INFO_V1, *PFILE_PROVIDER_EXTERNAL_INFO_V1;

typedef FILE_PROVIDER_EXTERNAL_INFO_V1  FILE_PROVIDER_EXTERNAL_INFO;
typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO;

#line 11977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



















































#line 12029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 12034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















#pragma warning(push)
#line 12053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma warning(disable:4201)       



typedef struct _REPARSE_DATA_BUFFER {
    ULONG  ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    union {
        struct {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            ULONG Flags;
            WCHAR PathBuffer[1];
        } SymbolicLinkReparseBuffer;
        struct {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;
        struct {
            UCHAR  DataBuffer[1];
        } GenericReparseBuffer;
    } ;
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;


#pragma warning(pop)


#line 12088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













typedef struct _REPARSE_GUID_DATA_BUFFER {
    ULONG  ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    GUID   ReparseGuid;
    struct {
        UCHAR  DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;














































































































































































































































































































































































































































































































































































































































































#pragma pack(4)

typedef struct _REPARSE_INDEX_KEY {

    
    
    

    ULONG FileReparseTag;

    
    
    

    LARGE_INTEGER FileId;

} REPARSE_INDEX_KEY, *PREPARSE_INDEX_KEY;

#pragma pack()




































#line 12820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















































































































































































































#line 13033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














































































#line 13112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















































































typedef struct _FILE_PIPE_ASSIGN_EVENT_BUFFER {
     HANDLE EventHandle;
     ULONG KeyValue;
} FILE_PIPE_ASSIGN_EVENT_BUFFER, *PFILE_PIPE_ASSIGN_EVENT_BUFFER;



typedef struct _FILE_PIPE_PEEK_BUFFER {
     ULONG NamedPipeState;
     ULONG ReadDataAvailable;
     ULONG NumberOfMessages;
     ULONG MessageLength;
     CHAR Data[1];
} FILE_PIPE_PEEK_BUFFER, *PFILE_PIPE_PEEK_BUFFER;



typedef struct _FILE_PIPE_EVENT_BUFFER {
     ULONG NamedPipeState;
     ULONG EntryType;
     ULONG ByteCount;
     ULONG KeyValue;
     ULONG NumberRequests;
} FILE_PIPE_EVENT_BUFFER, *PFILE_PIPE_EVENT_BUFFER;



typedef struct _FILE_PIPE_WAIT_FOR_BUFFER {
     LARGE_INTEGER Timeout;
     ULONG NameLength;
     BOOLEAN TimeoutSpecified;
     WCHAR Name[1];
} FILE_PIPE_WAIT_FOR_BUFFER, *PFILE_PIPE_WAIT_FOR_BUFFER;



typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER {

     PVOID ClientSession;
     PVOID ClientProcess;



#line 13237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} FILE_PIPE_CLIENT_PROCESS_BUFFER, *PFILE_PIPE_CLIENT_PROCESS_BUFFER;






typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX {

    PVOID ClientSession;
    PVOID ClientProcess;



#line 13252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    USHORT ClientComputerNameLength; 
    WCHAR ClientComputerBuffer[15+1]; 
} FILE_PIPE_CLIENT_PROCESS_BUFFER_EX, *PFILE_PIPE_CLIENT_PROCESS_BUFFER_EX;

















typedef enum _LINK_TRACKING_INFORMATION_TYPE {
    NtfsLinkTrackingInformation,
    DfsLinkTrackingInformation
} LINK_TRACKING_INFORMATION_TYPE, *PLINK_TRACKING_INFORMATION_TYPE;

typedef struct _LINK_TRACKING_INFORMATION {
    LINK_TRACKING_INFORMATION_TYPE Type;
    UCHAR   VolumeId[16];
} LINK_TRACKING_INFORMATION, *PLINK_TRACKING_INFORMATION;





typedef struct _REMOTE_LINK_TRACKING_INFORMATION_ {
    PVOID       TargetFileObject;
    ULONG   TargetLinkTrackingInformationLength;
    UCHAR   TargetLinkTrackingInformationBuffer[1];
} REMOTE_LINK_TRACKING_INFORMATION,
 *PREMOTE_LINK_TRACKING_INFORMATION;








typedef struct _VCN_RANGE_INPUT_BUFFER {

    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER ClusterCount;

} VCN_RANGE_INPUT_BUFFER, *PVCN_RANGE_INPUT_BUFFER;

typedef struct _EXTENT_READ_CACHE_INFO_BUFFER {

    LARGE_INTEGER AllocatedCache;
    LARGE_INTEGER PopulatedCache;
    LARGE_INTEGER InErrorCache;

} EXTENT_READ_CACHE_INFO_BUFFER, *PEXTENT_READ_CACHE_INFO_BUFFER;








typedef struct _REFS_VOLUME_COUNTER_INFO_INPUT_BUFFER {

    BOOLEAN ResetCounters;

} REFS_VOLUME_COUNTER_INFO_INPUT_BUFFER, *PREFS_VOLUME_COUNTER_INFO_INPUT_BUFFER;

typedef struct _VOLUME_REFS_INFO_BUFFER {

    
    
    

    LARGE_INTEGER CacheSizeInBytes;
    LARGE_INTEGER AllocatedCacheInBytes;
    LARGE_INTEGER PopulatedCacheInBytes;
    LARGE_INTEGER InErrorCacheInBytes;
    LARGE_INTEGER MemoryUsedForCacheMetadata;
    ULONG CacheLineSize;
    LONG CacheTransactionsOutstanding;
    LONG CacheLinesFree;
    LONG CacheLinesInError;

    
    
    

    LARGE_INTEGER CacheHitsInBytes;
    LARGE_INTEGER CacheMissesInBytes;
    LARGE_INTEGER CachePopulationUpdatesInBytes;
    LARGE_INTEGER CacheWriteThroughUpdatesInBytes;
    LARGE_INTEGER CacheInvalidationsInBytes;
    LARGE_INTEGER CacheOverReadsInBytes;
    LARGE_INTEGER MetadataWrittenBytes;

    LONG CacheHitCounter;
    LONG CacheMissCounter;
    LONG CacheLineAllocationCounter;
    LONG CacheInvalidationsCounter;
    LONG CachePopulationUpdatesCounter;
    LONG CacheWriteThroughUpdatesCounter;
    LONG MaxCacheTransactionsOutstanding;




    LONG DataWritesReallocationCount;
    LONG DataInPlaceWriteCount;
    LONG MetadataAllocationsFastTierCount;
    LONG MetadataAllocationsSlowTierCount;
    LONG DataAllocationsFastTierCount;
    LONG DataAllocationsSlowTierCount;

    LONG DestagesSlowTierToFastTier;
    LONG DestagesFastTierToSlowTier;
    LONG SlowTierDataFillRatio;
    LONG FastTierDataFillRatio;
    LONG SlowTierMetadataFillRatio;
    LONG FastTierMetadataFillRatio;

    LONG SlowToFastDestageReadLatency;
    LONG SlowToFastDestageReadLatencyBase;

    LONG SlowToFastDestageWriteLatency;
    LONG SlowToFastDestageWriteLatencyBase;

    LONG FastToSlowDestageReadLatency;
    LONG FastToSlowDestageReadLatencyBase;

    LONG FastToSlowDestageWriteLatency;
    LONG FastToSlowDestageWriteLatencyBase;

    LONG SlowTierContainerFillRatio;
    LONG SlowTierContainerFillRatioBase;

    LONG FastTierContainerFillRatio;
    LONG FastTierContainerFillRatioBase;

    LONG TreeUpdateLatency;
    LONG TreeUpdateLatencyBase;

    LONG CheckpointLatency;
    LONG CheckpointLatencyBase;

    LONG TreeUpdateCount;
    LONG CheckpointCount;
    LONG LogWriteCount;
    LONG LogFillRatio;

    LONG ReadCacheInvalidationsForOverwrite;
    LONG ReadCacheInvalidationsForReuse;
    LONG ReadCacheInvalidationsGeneral;

    LONG ReadCacheChecksOnMount;
    LONG ReadCacheIssuesOnMount;

    LONG TrimLatency;
    LONG TrimLatencyBase;

    LONG DataCompactionCount;

    LONG CompactionReadLatency;
    LONG CompactionReadLatencyBase;

    LONG CompactionWriteLatency;
    LONG CompactionWriteLatencyBase;

} VOLUME_REFS_INFO_BUFFER, *PVOLUME_REFS_INFO_BUFFER;

#line 13431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _FSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER ByteCount;

    GUID RecallOwnerGuid;

    ULONG RecallMetadataBufferSize;
    UCHAR RecallMetadataBuffer[1];

} FSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER, *PFSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER;
#line 13449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





typedef struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER ByteCount;

} FSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE, *PFSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE;

typedef struct _GHOSTED_FILE_EXTENT {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER ByteCount;

    GUID RecallOwnerGuid;
    ULONG NextEntryOffset;
    ULONG RecallMetadataBufferSize;
    UCHAR RecallMetadataBuffer[1];

} GHOSTED_FILE_EXTENT, *PGHOSTED_FILE_EXTENT;

typedef struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT {

    ULONG ExtentCount;
    ULONG TotalExtentCount;
    UCHAR Extents[1];

} FSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT, *PFSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT;













typedef struct _FSCTL_UNMAP_SPACE_INPUT_BUFFER {

    LARGE_INTEGER BytesToUnmap;

} FSCTL_UNMAP_SPACE_INPUT_BUFFER, *PFSCTL_UNMAP_SPACE_INPUT_BUFFER;

typedef struct _FSCTL_UNMAP_SPACE_OUTPUT {

    LARGE_INTEGER BytesUnmapped;

} FSCTL_UNMAP_SPACE_OUTPUT, *PFSCTL_UNMAP_SPACE_OUTPUT;

#line 13506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {

    ULONG OptimalWriteSize;
    ULONG StreamGranularitySize;
    ULONG StreamIdMin;
    ULONG StreamIdMax;

} STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER, *PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;








typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {

    ULONG Flags;
    ULONG StreamId;

} STREAMS_ASSOCIATE_ID_INPUT_BUFFER, *PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER;





typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {

    ULONG StreamId;

} STREAMS_QUERY_ID_OUTPUT_BUFFER, *PSTREAMS_QUERY_ID_OUTPUT_BUFFER;





typedef struct _FSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT {

    ULONG NumaNode;

} FSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT, *PFSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT;

#line 13561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct _REFS_DEALLOCATE_RANGES_RANGE{

    ULONGLONG StartOfRange;
    ULONGLONG CountOfRange;

} REFS_DEALLOCATE_RANGES_RANGE, *PREFS_DEALLOCATE_RANGES_RANGE;

typedef struct _REFS_DEALLOCATE_RANGES_INPUT_BUFFER {

    ULONG RangeCount;
    REFS_DEALLOCATE_RANGES_RANGE Ranges[1];

} REFS_DEALLOCATE_RANGES_INPUT_BUFFER, *PREFS_DEALLOCATE_RANGES_INPUT_BUFFER;

#line 13583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












#line 13596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








































#line 13637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 13639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef enum _OBJECT_INFORMATION_CLASS {
    ObjectBasicInformation = 0,
    ObjectTypeInformation = 2
} OBJECT_INFORMATION_CLASS;




typedef struct _PUBLIC_OBJECT_BASIC_INFORMATION {
    ULONG Attributes;
    ACCESS_MASK GrantedAccess;
    ULONG HandleCount;
    ULONG PointerCount;

    ULONG Reserved[10];    

} PUBLIC_OBJECT_BASIC_INFORMATION, *PPUBLIC_OBJECT_BASIC_INFORMATION;

typedef struct __PUBLIC_OBJECT_TYPE_INFORMATION {

    UNICODE_STRING TypeName;

    ULONG Reserved [22];    

} PUBLIC_OBJECT_TYPE_INFORMATION, *PPUBLIC_OBJECT_TYPE_INFORMATION;


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryObject (
      HANDLE Handle,
      OBJECT_INFORMATION_CLASS ObjectInformationClass,
      PVOID ObjectInformation,
      ULONG ObjectInformationLength,
      PULONG ReturnLength
    );
#line 13684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtSetSecurityObject (
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 13696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQuerySecurityObject (
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      ULONG Length,
      PULONG LengthNeeded
    );
#line 13710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtClose (
        HANDLE Handle
    );
#line 13720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



typedef enum _MEMORY_INFORMATION_CLASS {
    MemoryBasicInformation
} MEMORY_INFORMATION_CLASS;
#line 13727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef enum _VIRTUAL_MEMORY_INFORMATION_CLASS {
    VmPrefetchInformation
} VIRTUAL_MEMORY_INFORMATION_CLASS;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    ULONG AllocationProtect;
    SIZE_T RegionSize;
    ULONG State;
    ULONG Protect;
    ULONG Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;



 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtCreateSection (
      PHANDLE SectionHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PLARGE_INTEGER MaximumSize,
      ULONG SectionPageProtection,
      ULONG AllocationAttributes,
      HANDLE FileHandle
    );
#line 13759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtAllocateVirtualMemory (
      HANDLE ProcessHandle,
       PVOID *BaseAddress,
      ULONG_PTR ZeroBits,
      PSIZE_T RegionSize,
      ULONG AllocationType,
      ULONG Protect
    );
#line 13776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 __declspec(dllimport)
NTSTATUS
__stdcall
NtFreeVirtualMemory (
      HANDLE ProcessHandle,
        PVOID *BaseAddress,
      PSIZE_T RegionSize,
      ULONG FreeType
    );
#line 13788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 __declspec(dllimport)
NTSTATUS
__stdcall
NtQueryVirtualMemory (
      HANDLE ProcessHandle,
      PVOID BaseAddress,
      MEMORY_INFORMATION_CLASS MemoryInformationClass,
      PVOID MemoryInformation,
      SIZE_T MemoryInformationLength,
      PSIZE_T ReturnLength
    );
#line 13803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} MEMORY_RANGE_ENTRY, *PMEMORY_RANGE_ENTRY;














#line 13823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct _SECURITY_CLIENT_CONTEXT {
    SECURITY_QUALITY_OF_SERVICE SecurityQos;
    PACCESS_TOKEN ClientToken;
    BOOLEAN DirectlyAccessClientToken;
    BOOLEAN DirectAccessEffectiveOnly;
    BOOLEAN ServerIsRemote;
    TOKEN_CONTROL ClientTokenControl;
    } SECURITY_CLIENT_CONTEXT, *PSECURITY_CLIENT_CONTEXT;
























































































































































































typedef struct _KAPC_STATE {
    LIST_ENTRY ApcListHead[MaximumMode];
    struct _KPROCESS *Process;
    union {
        UCHAR InProgressFlags;
        struct {
            BOOLEAN KernelApcInProgress : 1;
            BOOLEAN SpecialApcInProgress : 1;
        };
    };

    BOOLEAN KernelApcPending;
    BOOLEAN UserApcPending;
} KAPC_STATE, *PKAPC_STATE, *PRKAPC_STATE;






typedef struct _KQUEUE {
    DISPATCHER_HEADER Header;
    LIST_ENTRY EntryListHead;       
    volatile ULONG CurrentCount;    
    ULONG MaximumCount;
    LIST_ENTRY ThreadListHead;      
} KQUEUE, *PKQUEUE, *PRKQUEUE;




__declspec(dllimport)
void
KeInitializeMutant (
      PRKMUTANT Mutant,
      BOOLEAN InitialOwner
    );
#line 14062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
KeQueryOwnerMutant (
      PKMUTANT Mutant,
      PCLIENT_ID ClientId
    );
#line 14072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
LONG
KeReadStateMutant (
      PRKMUTANT Mutant
    );
#line 14081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





#line 14089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
__declspec(dllimport)
LONG
KeReleaseMutant (
      PRKMUTANT Mutant,
      KPRIORITY Increment,
      BOOLEAN Abandoned,
      BOOLEAN Wait
    );
#line 14098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






__declspec(dllimport)
void
KeInitializeQueue (
      PRKQUEUE Queue,
      ULONG Count
    );
#line 14111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
LONG
KeReadStateQueue (
      PRKQUEUE Queue
    );
#line 14120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
LONG
KeInsertQueue (
      PRKQUEUE Queue,
      PLIST_ENTRY Entry
    );
#line 14131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
LONG
KeInsertHeadQueue (
      PRKQUEUE Queue,
      PLIST_ENTRY Entry
    );
#line 14142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 


__declspec(dllimport)
PLIST_ENTRY
KeRemoveQueue (
      PRKQUEUE Queue,
      KPROCESSOR_MODE WaitMode,
      PLARGE_INTEGER Timeout
    );
#line 14155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 


__declspec(dllimport)
ULONG
KeRemoveQueueEx (
      PKQUEUE Queue,
      KPROCESSOR_MODE WaitMode,
      BOOLEAN Alertable,
      PLARGE_INTEGER Timeout,
      PLIST_ENTRY *EntryArray,
      ULONG Count
    );
#line 14172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
PLIST_ENTRY
KeRundownQueue (
      PRKQUEUE Queue
    );
#line 14182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
KeAttachProcess (
      PRKPROCESS Process
    );
#line 14192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
KeDetachProcess (
    void
    );
#line 14201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
KeStackAttachProcess (
      PRKPROCESS PROCESS,
      PRKAPC_STATE ApcState
    );
#line 14211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
KeUnstackDetachProcess (
      PRKAPC_STATE ApcState
    );
#line 14220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
 
 
__declspec(dllimport)
NTSTATUS
KeExpandKernelStackAndCalloutEx (
      PEXPAND_STACK_CALLOUT Callout,
      PVOID Parameter,
      SIZE_T Size,
      BOOLEAN Wait,
      PVOID Context
    );
#line 14237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
UCHAR
KeSetIdealProcessorThread (
      PKTHREAD Thread,
      UCHAR Processor
    );
#line 14249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
BOOLEAN
KeSetKernelStackSwapEnable (
      BOOLEAN Enable
    );
#line 14259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





 
__declspec(dllimport)
KIRQL

KeAcquireQueuedSpinLock (
      KSPIN_LOCK_QUEUE_NUMBER Number
    );
#line 14272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
void

KeReleaseQueuedSpinLock (
      KSPIN_LOCK_QUEUE_NUMBER Number,
      KIRQL OldIrql
    );
#line 14284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
LOGICAL

KeTryToAcquireQueuedSpinLock (
      KSPIN_LOCK_QUEUE_NUMBER Number,
      
    PKIRQL OldIrql
    );
#line 14297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















#line 14314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





 
 
__declspec(dllimport)
KIRQL
KeAcquireSpinLockRaiseToSynch (
      PKSPIN_LOCK SpinLock
    );
#line 14327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 14329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



NTSTATUS
KeGetProcessorNumberFromIndex (
      ULONG ProcIndex,
      PPROCESSOR_NUMBER ProcNumber
    );

ULONG
KeGetProcessorIndexFromNumber (
      PPROCESSOR_NUMBER ProcNumber
    );




 
__declspec(dllimport)
SIZE_T
ExQueryPoolBlockSize (
      PVOID PoolBlock,
      PBOOLEAN QuotaCharged
    );

#line 14355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










PSLIST_ENTRY

InterlockedPushListSList (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      ULONG Count
    );

#line 14375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 14377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







 
__declspec(dllimport)
void
ExAdjustLookasideDepth (
    void
    );

#line 14392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef char __C_ASSERT__[(sizeof(ERESOURCE) == 0x68)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((ERESOURCE *)0)->ActiveCount)) == 0x18)?1:-1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR)&(((ERESOURCE *)0)->Flag)) == 0x1a)?1:-1];







#line 14409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 14411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
ExDisableResourceBoostLite (
      PERESOURCE Resource
    );

#line 14422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














void
ExInitializePushLock (
      PULONG_PTR PushLock
    );































typedef struct _SE_EXPORTS {

    
    
    

    LUID    SeCreateTokenPrivilege;
    LUID    SeAssignPrimaryTokenPrivilege;
    LUID    SeLockMemoryPrivilege;
    LUID    SeIncreaseQuotaPrivilege;
    LUID    SeUnsolicitedInputPrivilege;
    LUID    SeTcbPrivilege;
    LUID    SeSecurityPrivilege;
    LUID    SeTakeOwnershipPrivilege;
    LUID    SeLoadDriverPrivilege;
    LUID    SeCreatePagefilePrivilege;
    LUID    SeIncreaseBasePriorityPrivilege;
    LUID    SeSystemProfilePrivilege;
    LUID    SeSystemtimePrivilege;
    LUID    SeProfileSingleProcessPrivilege;
    LUID    SeCreatePermanentPrivilege;
    LUID    SeBackupPrivilege;
    LUID    SeRestorePrivilege;
    LUID    SeShutdownPrivilege;
    LUID    SeDebugPrivilege;
    LUID    SeAuditPrivilege;
    LUID    SeSystemEnvironmentPrivilege;
    LUID    SeChangeNotifyPrivilege;
    LUID    SeRemoteShutdownPrivilege;


    
    
    


    PSID  SeNullSid;
    PSID  SeWorldSid;
    PSID  SeLocalSid;
    PSID  SeCreatorOwnerSid;
    PSID  SeCreatorGroupSid;


    
    
    


    PSID  SeNtAuthoritySid;
    PSID  SeDialupSid;
    PSID  SeNetworkSid;
    PSID  SeBatchSid;
    PSID  SeInteractiveSid;
    PSID  SeLocalSystemSid;
    PSID  SeAliasAdminsSid;
    PSID  SeAliasUsersSid;
    PSID  SeAliasGuestsSid;
    PSID  SeAliasPowerUsersSid;
    PSID  SeAliasAccountOpsSid;
    PSID  SeAliasSystemOpsSid;
    PSID  SeAliasPrintOpsSid;
    PSID  SeAliasBackupOpsSid;

    
    
    

    PSID  SeAuthenticatedUsersSid;

    PSID  SeRestrictedSid;
    PSID  SeAnonymousLogonSid;

    
    
    

    LUID  SeUndockPrivilege;
    LUID  SeSyncAgentPrivilege;
    LUID  SeEnableDelegationPrivilege;

    
    

    PSID  SeLocalServiceSid;
    PSID  SeNetworkServiceSid;

    
    
    

    LUID  SeManageVolumePrivilege;
    LUID  SeImpersonatePrivilege;
    LUID  SeCreateGlobalPrivilege;

    
    
    

    LUID  SeTrustedCredManAccessPrivilege;
    LUID  SeRelabelPrivilege;
    LUID  SeIncreaseWorkingSetPrivilege;

    LUID  SeTimeZonePrivilege;
    LUID  SeCreateSymbolicLinkPrivilege;

    
    
    

    PSID  SeIUserSid;

    
    
    

    PSID SeUntrustedMandatorySid;
    PSID SeLowMandatorySid;
    PSID SeMediumMandatorySid;
    PSID SeHighMandatorySid;
    PSID SeSystemMandatorySid;

    PSID SeOwnerRightsSid;

    
    
    

    PSID SeAllAppPackagesSid;
    PSID SeUserModeDriversSid;

    
    
    

    PSID SeTrustedInstallerSid;

    
    
    

    LUID  SeDelegateSessionUserImpersonatePrivilege;

} SE_EXPORTS, *PSE_EXPORTS;













typedef
NTSTATUS
SE_LOGON_SESSION_TERMINATED_ROUTINE(
      PLUID LogonId);
typedef SE_LOGON_SESSION_TERMINATED_ROUTINE *PSE_LOGON_SESSION_TERMINATED_ROUTINE;









#line 14642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



























































































































__declspec(dllimport)
void
SeCaptureSubjectContextEx (
      PETHREAD Thread,
      PEPROCESS Process,
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 14773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
void
SeCaptureSubjectContext (
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 14783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeLockSubjectContext(
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 14791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeUnlockSubjectContext(
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 14799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeReleaseSubjectContext (
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 14807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


NTSTATUS
SeReportSecurityEventWithSubCategory(
      ULONG Flags,
      PUNICODE_STRING SourceName,
      PSID UserSid,
      PSE_ADT_PARAMETER_ARRAY AuditParameters,
      ULONG AuditSubcategoryId
    );

BOOLEAN
SeAccessCheckFromState (
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PTOKEN_ACCESS_INFORMATION PrimaryTokenInformation,
      PTOKEN_ACCESS_INFORMATION ClientTokenInformation,
      ACCESS_MASK DesiredAccess,
      ACCESS_MASK PreviouslyGrantedAccess,
     PPRIVILEGE_SET *Privileges,
      PGENERIC_MAPPING GenericMapping,
      KPROCESSOR_MODE AccessMode,
      PACCESS_MASK GrantedAccess,
      PNTSTATUS AccessStatus
    );















#line 14847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 14857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SePrivilegeCheck(
      PPRIVILEGE_SET RequiredPrivileges,
      PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
      KPROCESSOR_MODE AccessMode
    );
#line 14867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeFreePrivileges(
      PPRIVILEGE_SET Privileges
    );
#line 14875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeOpenObjectAuditAlarm (
      PUNICODE_STRING ObjectTypeName,
      PVOID Object,
      PUNICODE_STRING AbsoluteObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PACCESS_STATE AccessState,
      BOOLEAN ObjectCreated,
      BOOLEAN AccessGranted,
      KPROCESSOR_MODE AccessMode,
      PBOOLEAN GenerateOnClose
    );
#line 14891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeOpenObjectAuditAlarmWithTransaction (
      PUNICODE_STRING ObjectTypeName,
      PVOID Object,
      PUNICODE_STRING AbsoluteObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PACCESS_STATE AccessState,
      BOOLEAN ObjectCreated,
      BOOLEAN AccessGranted,
      KPROCESSOR_MODE AccessMode,
      GUID *TransactionId,
      PBOOLEAN GenerateOnClose
    );
#line 14908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
void
SeOpenObjectForDeleteAuditAlarm (
      PUNICODE_STRING ObjectTypeName,
      PVOID Object,
      PUNICODE_STRING AbsoluteObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PACCESS_STATE AccessState,
      BOOLEAN ObjectCreated,
      BOOLEAN AccessGranted,
      KPROCESSOR_MODE AccessMode,
      PBOOLEAN GenerateOnClose
    );
#line 14925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeOpenObjectForDeleteAuditAlarmWithTransaction (
      PUNICODE_STRING ObjectTypeName,
      PVOID Object,
      PUNICODE_STRING AbsoluteObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PACCESS_STATE AccessState,
      BOOLEAN ObjectCreated,
      BOOLEAN AccessGranted,
      KPROCESSOR_MODE AccessMode,
      GUID *TransactionId,
      PBOOLEAN GenerateOnClose
    );

__declspec(dllimport)
void
SeExamineSacl(
      PACL Sacl,
      PACL ResourceSacl,
      PACCESS_TOKEN Token,
      ACCESS_MASK DesiredAccess,
      BOOLEAN AccessGranted,
      PBOOLEAN GenerateAudit,
      PBOOLEAN GenerateAlarm
    );

#line 14955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeDeleteObjectAuditAlarm(
      PVOID Object,
      HANDLE Handle
    );
#line 14964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeDeleteObjectAuditAlarmWithTransaction(
      PVOID Object,
      HANDLE Handle,
      GUID *TransactionId
    );



#line 14977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)                                     
TOKEN_TYPE                                      
SeTokenType(                                    
      PACCESS_TOKEN Token                    
    );                                          
#line 14985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

__declspec(dllimport)
BOOLEAN
SeTokenIsAdmin(
      PACCESS_TOKEN Token
    );
#line 14992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeTokenIsRestricted(
      PACCESS_TOKEN Token
    );
#line 15000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeTokenIsWriteRestricted(
      PACCESS_TOKEN Token
    );
#line 15008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 15016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeFilterToken (
      PACCESS_TOKEN ExistingToken,
      ULONG Flags,
      PTOKEN_GROUPS SidsToDisable,
      PTOKEN_PRIVILEGES PrivilegesToDelete,
      PTOKEN_GROUPS RestrictedSids,
     PACCESS_TOKEN * FilteredToken
    );
#line 15029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
SeQueryAuthenticationIdToken(
      PACCESS_TOKEN Token,
      PLUID AuthenticationId
    );
#line 15039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
void
SeQueryTokenIntegrity(
      PACCESS_TOKEN Token,
      PSID_AND_ATTRIBUTES IntegritySA
    );
#line 15051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
SeQuerySessionIdToken(
      PACCESS_TOKEN Token,
      PULONG SessionId
    );

__declspec(dllimport)
NTSTATUS
SeQuerySessionIdTokenEx(
      PACCESS_TOKEN Token,
      PULONG SessionId,
      PBOOLEAN IsServiceSession
    );
#line 15069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 15079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
SeSetSessionIdToken(
      PACCESS_TOKEN Token,
      ULONG SessionId
    );
#line 15089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
SeCreateClientSecurity (
      PETHREAD ClientThread,
      PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos,
      BOOLEAN RemoteSession,
      PSECURITY_CLIENT_CONTEXT ClientContext
    );
#line 15101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
void
SeImpersonateClient(
      PSECURITY_CLIENT_CONTEXT ClientContext,
      PETHREAD ServerThread
    );
#line 15111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
SeImpersonateClientEx(
      PSECURITY_CLIENT_CONTEXT ClientContext,
      PETHREAD ServerThread
    );
#line 15121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeCreateClientSecurityFromSubjectContext (
      PSECURITY_SUBJECT_CONTEXT SubjectContext,
      PSECURITY_QUALITY_OF_SERVICE ClientSecurityQos,
      BOOLEAN ServerIsRemote,
      PSECURITY_CLIENT_CONTEXT ClientContext
    );
#line 15132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
SeQuerySecurityDescriptorInfo (
      PSECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PULONG Length,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor
    );
#line 15144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeSetSecurityDescriptorInfo (
      PVOID Object,
      PSECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
      POOL_TYPE PoolType,
      PGENERIC_MAPPING GenericMapping
    );
#line 15157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeSetSecurityDescriptorInfoEx (
      PVOID Object,
      PSECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
      ULONG AutoInheritFlags,
      POOL_TYPE PoolType,
      PGENERIC_MAPPING GenericMapping
    );
#line 15171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeAppendPrivileges(
      PACCESS_STATE AccessState,
      PPRIVILEGE_SET Privileges
    );
#line 15180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeAuditHardLinkCreation(
        PUNICODE_STRING FileName,
        PUNICODE_STRING LinkName,
        BOOLEAN bSuccess
    );
#line 15190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeAuditHardLinkCreationWithTransaction(
      PUNICODE_STRING FileName,
      PUNICODE_STRING LinkName,
      BOOLEAN bSuccess,
      GUID *TransactionId
    );
#line 15201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
SeAuditTransactionStateChange(
      GUID *TransactionId,
      GUID *ResourceManagerId,
      ULONG NewTransactionState
    );
#line 15220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeAuditingFileEvents(
      BOOLEAN AccessGranted,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 15229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeAuditingFileEventsWithContext(
      BOOLEAN AccessGranted,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext
    );
#line 15239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeAuditingAnyFileEventsWithContext(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext
    );
#line 15248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 15259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 15269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeAuditingHardLinkEvents(
      BOOLEAN AccessGranted,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 15305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeAuditingHardLinkEventsWithContext(
      BOOLEAN AccessGranted,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext
    );
#line 15315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
SeAuditingFileOrGlobalEvents(
      BOOLEAN AccessGranted,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext
    );
#line 15325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


void
SeSetAccessStateGenericMapping (
      PACCESS_STATE AccessState,
      PGENERIC_MAPPING GenericMapping
    );
#line 15333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeRegisterLogonSessionTerminatedRoutine(
      PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine
    );
#line 15341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeUnregisterLogonSessionTerminatedRoutine(
      PSE_LOGON_SESSION_TERMINATED_ROUTINE CallbackRoutine
    );
#line 15349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
SeMarkLogonSessionForTerminationNotification(
      PLUID LogonId
    );
#line 15375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















__declspec(dllimport)
NTSTATUS
SeQueryInformationToken (
      PACCESS_TOKEN Token,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
         PVOID *TokenInformation
    );
#line 15407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


NTSTATUS
SeLocateProcessImageName(
      PEPROCESS Process,
     PUNICODE_STRING *pImageFileName
    );





extern __declspec(dllimport) PSE_EXPORTS SeExports;




__declspec(dllimport)
void
SeExamineGlobalSacl(
      PUNICODE_STRING ObjectType,
      PACL ResourceSacl,
      PACCESS_TOKEN Token,
      ACCESS_MASK DesiredAccess,
      BOOLEAN AccessGranted,
      PBOOLEAN GenerateAudit,
      PBOOLEAN GenerateAlarm
);

__declspec(dllimport)
void
SeMaximumAuditMaskFromGlobalSacl(
      PUNICODE_STRING ObjectTypeName,
      ACCESS_MASK GrantedAccess,
      PACCESS_TOKEN Token,
      PACCESS_MASK AuditMask
    );

#line 15446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 15457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


































#line 15492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







 
__declspec(dllimport)
NTSTATUS
PsAssignImpersonationToken(
      PETHREAD Thread,
      HANDLE Token
    );
#line 15507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
PACCESS_TOKEN
PsReferencePrimaryToken (
      PEPROCESS Process
    );
#line 15516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
PsDereferencePrimaryToken(
      PACCESS_TOKEN PrimaryToken
    );
#line 15525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
PsDereferenceImpersonationToken(
      PACCESS_TOKEN ImpersonationToken
    );
#line 15534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
PACCESS_TOKEN
PsReferenceImpersonationToken(
      PETHREAD Thread,
      PBOOLEAN CopyOnOpen,
      PBOOLEAN EffectiveOnly,
      PSECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );
#line 15547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
LARGE_INTEGER
PsGetProcessExitTime(
    void
    );
#line 15557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
BOOLEAN
PsIsThreadTerminating(
      PETHREAD Thread
    );
#line 15567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
 
__declspec(dllimport)
NTSTATUS
PsImpersonateClient(
      PETHREAD Thread,
      PACCESS_TOKEN Token,
      BOOLEAN CopyOnOpen,
      BOOLEAN EffectiveOnly,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );
#line 15583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
BOOLEAN
PsDisableImpersonation(
      PETHREAD Thread,
      PSE_IMPERSONATION_STATE ImpersonationState
    );
#line 15595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
PsRestoreImpersonation(
      PETHREAD Thread,
      PSE_IMPERSONATION_STATE ImpersonationState
    );
#line 15605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
PsRevertToSelf(
    void
    );
#line 15615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
PsLookupProcessByProcessId(
      HANDLE ProcessId,
     PEPROCESS *Process
    );

 
 
__declspec(dllimport)
NTSTATUS
PsLookupThreadByThreadId(
      HANDLE ThreadId,
     PETHREAD *Thread
    );






 
__declspec(dllimport)
void
PsChargePoolQuota (
      PEPROCESS Process,
      POOL_TYPE PoolType,
      ULONG_PTR Amount
    );
#line 15649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
PsChargeProcessPoolQuota (
      PEPROCESS Process,
      POOL_TYPE PoolType,
      ULONG_PTR Amount
    );
#line 15661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
PsReturnPoolQuota(
      PEPROCESS Process,
      POOL_TYPE PoolType,
      ULONG_PTR Amount
    );
#line 15673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PEPROCESS
PsGetThreadProcess(
      PETHREAD Thread
    );


__declspec(dllimport)                         
BOOLEAN                             
PsIsSystemThread(                   
      PETHREAD Thread            
    );                              
#line 15688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












#line 15701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 15710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















typedef
void
DRIVER_FS_NOTIFICATION (
      struct _DEVICE_OBJECT *DeviceObject,
      BOOLEAN FsActive
    );

typedef DRIVER_FS_NOTIFICATION *PDRIVER_FS_NOTIFICATION;






typedef enum _FS_FILTER_SECTION_SYNC_TYPE {
    SyncTypeOther = 0,
    SyncTypeCreateSection
} FS_FILTER_SECTION_SYNC_TYPE, *PFS_FILTER_SECTION_SYNC_TYPE;








typedef struct _FS_FILTER_SECTION_SYNC_OUTPUT {
    ULONG StructureSize;
    ULONG SizeReturned;
    ULONG Flags;
    ULONG DesiredReadAlignment;
} FS_FILTER_SECTION_SYNC_OUTPUT, *PFS_FILTER_SECTION_SYNC_OUTPUT;





typedef enum _FS_FILTER_STREAM_FO_NOTIFICATION_TYPE {
    NotifyTypeCreate = 0,
    NotifyTypeRetired
} FS_FILTER_STREAM_FO_NOTIFICATION_TYPE, *PFS_FILTER_STREAM_FO_NOTIFICATION_TYPE;








#pragma warning(push)
#pragma warning(disable:4324) 
#line 15777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _IRP *PIRP;

typedef union _FS_FILTER_PARAMETERS {

    
    
    

    struct {
        PLARGE_INTEGER EndingOffset;
        PERESOURCE *ResourceToRelease;
    } AcquireForModifiedPageWriter;

    
    
    

    struct {
        PERESOURCE ResourceToRelease;
    } ReleaseForModifiedPageWriter;

    
    
    

    struct {
        FS_FILTER_SECTION_SYNC_TYPE SyncType;
        ULONG PageProtection;
        PFS_FILTER_SECTION_SYNC_OUTPUT OutputInformation;
    } AcquireForSectionSynchronization;

    
    
    

    struct {
        FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType;
        BOOLEAN __declspec(align(8)) SafeToRecurse;
    } NotifyStreamFileObject;

    
    
    

    struct {
        PIRP Irp;
        PVOID FileInformation;
        PULONG Length;
        FILE_INFORMATION_CLASS FileInformationClass;
    } QueryOpen;

    
    
    

    struct {
        PVOID Argument1;
        PVOID Argument2;
        PVOID Argument3;
        PVOID Argument4;
        PVOID Argument5;
    } Others;

} FS_FILTER_PARAMETERS, *PFS_FILTER_PARAMETERS;


#pragma warning(pop)
#line 15846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














typedef struct _FS_FILTER_CALLBACK_DATA {

    ULONG SizeOfFsFilterCallbackData;
    UCHAR Operation;
    UCHAR Reserved;

    struct _DEVICE_OBJECT *DeviceObject;
    struct _FILE_OBJECT *FileObject;

    FS_FILTER_PARAMETERS Parameters;

} FS_FILTER_CALLBACK_DATA, *PFS_FILTER_CALLBACK_DATA;









typedef
NTSTATUS
(*PFS_FILTER_CALLBACK) (
      PFS_FILTER_CALLBACK_DATA Data,
      PVOID *CompletionContext
    );






typedef
void
(*PFS_FILTER_COMPLETION_CALLBACK) (
      PFS_FILTER_CALLBACK_DATA Data,
      NTSTATUS OperationStatus,
      PVOID CompletionContext
    );









typedef struct _FS_FILTER_CALLBACKS {

    ULONG SizeOfFsFilterCallbacks;
    ULONG Reserved; 

    PFS_FILTER_CALLBACK PreAcquireForSectionSynchronization;
    PFS_FILTER_COMPLETION_CALLBACK PostAcquireForSectionSynchronization;
    PFS_FILTER_CALLBACK PreReleaseForSectionSynchronization;
    PFS_FILTER_COMPLETION_CALLBACK PostReleaseForSectionSynchronization;
    PFS_FILTER_CALLBACK PreAcquireForCcFlush;
    PFS_FILTER_COMPLETION_CALLBACK PostAcquireForCcFlush;
    PFS_FILTER_CALLBACK PreReleaseForCcFlush;
    PFS_FILTER_COMPLETION_CALLBACK PostReleaseForCcFlush;
    PFS_FILTER_CALLBACK PreAcquireForModifiedPageWriter;
    PFS_FILTER_COMPLETION_CALLBACK PostAcquireForModifiedPageWriter;
    PFS_FILTER_CALLBACK PreReleaseForModifiedPageWriter;
    PFS_FILTER_COMPLETION_CALLBACK PostReleaseForModifiedPageWriter;
    PFS_FILTER_CALLBACK PreQueryOpen;
    PFS_FILTER_COMPLETION_CALLBACK PostQueryOpen;

} FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS;


__declspec(dllimport)
NTSTATUS
FsRtlRegisterFileSystemFilterCallbacks (
      struct _DRIVER_OBJECT *FilterDriverObject,
      PFS_FILTER_CALLBACKS Callbacks
    );
#line 15939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
FsRtlNotifyStreamFileObject (
      struct _FILE_OBJECT * StreamFileObject,
      struct _DEVICE_OBJECT *DeviceObjectHint,
      FS_FILTER_STREAM_FO_NOTIFICATION_TYPE NotificationType,
      BOOLEAN SafeToRecurse
    );
#line 15950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



































extern KSPIN_LOCK IoStatisticsLock;
extern ULONG IoReadOperationCount;
extern ULONG IoWriteOperationCount;
extern ULONG IoOtherOperationCount;
extern LARGE_INTEGER IoReadTransferCount;
extern LARGE_INTEGER IoWriteTransferCount;
extern LARGE_INTEGER IoOtherTransferCount;






















__declspec(dllimport)
void
IoAcquireVpbSpinLock(
      PKIRQL Irql
    );
#line 16020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoCheckDesiredAccess(
      PACCESS_MASK DesiredAccess,
      ACCESS_MASK GrantedAccess
    );
#line 16030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoCheckEaBufferValidity(
       PFILE_FULL_EA_INFORMATION EaBuffer,
       ULONG EaLength,
      PULONG ErrorOffset
    );
#line 16040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoCheckFunctionAccess(
      ACCESS_MASK GrantedAccess,
      UCHAR MajorFunction,
      UCHAR MinorFunction,
      ULONG IoControlCode,
      PVOID Arg1,
      PVOID Arg2
    );
#line 16053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoCheckQuerySetFileInformation(
      FILE_INFORMATION_CLASS FileInformationClass,
      ULONG Length,
      BOOLEAN SetOperation
    );
#line 16063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoCheckQuerySetVolumeInformation(
      FS_INFORMATION_CLASS FsInformationClass,
      ULONG Length,
      BOOLEAN SetOperation
    );
#line 16073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoCheckQuotaBufferValidity(
       PFILE_QUOTA_INFORMATION QuotaBuffer,
       ULONG QuotaLength,
      PULONG ErrorOffset
    );
#line 16083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
PFILE_OBJECT
IoCreateStreamFileObject(
      PFILE_OBJECT FileObject,
      PDEVICE_OBJECT DeviceObject
    );
#line 16094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
PFILE_OBJECT
IoCreateStreamFileObjectEx(
       PFILE_OBJECT FileObject,
       PDEVICE_OBJECT DeviceObject,
      PHANDLE FileHandle
    );
#line 16105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
PFILE_OBJECT
IoCreateStreamFileObjectLite(
      PFILE_OBJECT FileObject,
      PDEVICE_OBJECT DeviceObject
    );
#line 16115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






















#line 16138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
BOOLEAN
IoFastQueryNetworkAttributes(
       POBJECT_ATTRIBUTES ObjectAttributes,
       ACCESS_MASK DesiredAccess,
       ULONG OpenOptions,
      PIO_STATUS_BLOCK IoStatus,
      PFILE_NETWORK_OPEN_INFORMATION Buffer
    );
#line 16151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoPageRead(
       PFILE_OBJECT FileObject,
       PMDL MemoryDescriptorList,
       PLARGE_INTEGER StartingOffset,
       PKEVENT Event,
      PIO_STATUS_BLOCK IoStatusBlock
    );
#line 16163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
PDEVICE_OBJECT
IoGetAttachedDevice(
      PDEVICE_OBJECT DeviceObject
    );
#line 16172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


                
__declspec(dllimport)                                 
PDEVICE_OBJECT                              
IoGetAttachedDeviceReference(               
      PDEVICE_OBJECT DeviceObject        
    );                                      
#line 16181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
                                            

__declspec(dllimport)
PDEVICE_OBJECT
IoGetBaseFileSystemDeviceObject(
      PFILE_OBJECT FileObject
    );
#line 16189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


                 
__declspec(dllimport)                                 
PCONFIGURATION_INFORMATION                  
IoGetConfigurationInformation( void );      
#line 16196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
PDEVICE_OBJECT
IoGetDeviceToVerify(
      PETHREAD Thread
    );
#line 16206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
ULONG
IoGetRequestorProcessId(
      PIRP Irp
    );
#line 16215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PEPROCESS
IoGetRequestorProcess(
      PIRP Irp
    );
#line 16223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
PIRP
IoGetTopLevelIrp(
    void
    );
#line 16233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






























__declspec(dllimport)
BOOLEAN
IoIsOperationSynchronous(
      PIRP Irp
    );
#line 16269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
IoIsSystemThread(
      PETHREAD Thread
    );
#line 16277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
BOOLEAN
IoIsValidNameGraftingBuffer(
      PIRP Irp,
      PREPARSE_DATA_BUFFER ReparseBuffer
    );
#line 16287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 16288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoQueryFileDosDeviceName(
       PFILE_OBJECT FileObject,
      POBJECT_NAME_INFORMATION *ObjectNameInformation
    );
#line 16298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoQueryFileInformation(
       PFILE_OBJECT FileObject,
       FILE_INFORMATION_CLASS FileInformationClass,
       ULONG Length,
      PVOID FileInformation,
      PULONG ReturnedLength
    );
#line 16311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoQueryVolumeInformation(
       PFILE_OBJECT FileObject,
       FS_INFORMATION_CLASS FsInformationClass,
       ULONG Length,
      PVOID FsInformation,
      PULONG ReturnedLength
    );
#line 16323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
IoQueueThreadIrp(
      PIRP Irp
    );
#line 16331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
void
IoRegisterFileSystem(
        PDEVICE_OBJECT DeviceObject
    );
#line 16342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoRegisterFsRegistrationChange(
      PDRIVER_OBJECT DriverObject,
      PDRIVER_FS_NOTIFICATION DriverNotificationRoutine
    );
#line 16351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoRegisterFsRegistrationChangeMountAware(
      PDRIVER_OBJECT DriverObject,
      PDRIVER_FS_NOTIFICATION DriverNotificationRoutine,
      BOOLEAN SynchronizeWithMounts
    );
#line 16361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 16371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoEnumerateRegisteredFiltersList(
      PDRIVER_OBJECT *DriverObjectList,
       ULONG  DriverObjectListSize,          
      PULONG ActualNumberDriverObjects      
    );
#line 16381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoReplaceFileObjectName (
      PFILE_OBJECT FileObject,
      PWSTR NewFileName,
      USHORT FileNameLength
    );
#line 16391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
void
IoReleaseVpbSpinLock(
      KIRQL Irql
    );
#line 16400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
IoSetDeviceToVerify(
      PETHREAD Thread,
      PDEVICE_OBJECT DeviceObject
    );
#line 16411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoSetInformation(
      PFILE_OBJECT FileObject,
      FILE_INFORMATION_CLASS FileInformationClass,
      ULONG Length,
      PVOID FileInformation
    );
#line 16423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
void
IoSetTopLevelIrp(
      PIRP Irp
    );
#line 16432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



































#line 16468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


   
__declspec(dllimport)
void
IoStartNextPacket(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN Cancelable
    );
#line 16478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
IoStartNextPacketByKey(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN Cancelable,
      ULONG Key
    );
#line 16489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
IoStartPacket(
      PDEVICE_OBJECT DeviceObject,
      PIRP Irp,
      PULONG Key,
      PDRIVER_CANCEL CancelFunction
    );
#line 16501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


void
IoSetStartIoAttributes(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN DeferredStartIo,
      BOOLEAN NonCancelable
    );
#line 16510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
IoStartTimer(
      PDEVICE_OBJECT DeviceObject
    );
#line 16520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 16521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
IoStopTimer(
      PDEVICE_OBJECT DeviceObject
    );
#line 16531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#line 16532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
NTSTATUS
IoSynchronousPageWrite(
       PFILE_OBJECT FileObject,
       PMDL MemoryDescriptorList,
       PLARGE_INTEGER StartingOffset,
       PKEVENT Event,
      PIO_STATUS_BLOCK IoStatusBlock
    );
#line 16547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
PEPROCESS
IoThreadToProcess(
      PETHREAD Thread
    );
#line 16557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
void
IoUnregisterFileSystem(
      PDEVICE_OBJECT DeviceObject
    );
#line 16566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
IoUnregisterFsRegistrationChange(
      PDRIVER_OBJECT DriverObject,
      PDRIVER_FS_NOTIFICATION DriverNotificationRoutine
    );
#line 16575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoVerifyVolume(
      PDEVICE_OBJECT DeviceObject,
      BOOLEAN AllowRawMount
    );
#line 16585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


                    
__declspec(dllimport)                                     
void                                            
IoWriteErrorLogEntry(                           
      PVOID ElEntry                          
    );                                          
#line 16594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoGetRequestorSessionId(
       PIRP Irp,
      PULONG pSessionId
    );
#line 16604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
IoEnumerateDeviceObjectList(
       PDRIVER_OBJECT DriverObject,
      PDEVICE_OBJECT *DeviceObjectList,
       ULONG          DeviceObjectListSize,
      PULONG         ActualNumberDeviceObjects
    );
#line 16616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PDEVICE_OBJECT
IoGetLowerDeviceObject(
       PDEVICE_OBJECT  DeviceObject
    );
#line 16624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PDEVICE_OBJECT
IoGetDeviceAttachmentBaseRef(
      PDEVICE_OBJECT DeviceObject
    );
#line 16632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
IoGetDiskDeviceObject(
       PDEVICE_OBJECT FileSystemDeviceObject,
      PDEVICE_OBJECT *DiskDeviceObject
    );
#line 16641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef struct _IO_PRIORITY_INFO {
    ULONG Size;
    ULONG ThreadPriority;
    ULONG PagePriority;
    IO_PRIORITY_HINT IoPriority;
} IO_PRIORITY_INFO, *PIO_PRIORITY_INFO;
#line 16655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


void
__forceinline
IoInitializePriorityInfo(
      PIO_PRIORITY_INFO PriorityInfo
    )
{
    PriorityInfo->Size = sizeof(IO_PRIORITY_INFO);
    PriorityInfo->ThreadPriority = 0xffff;
    PriorityInfo->IoPriority = IoPriorityNormal;
    PriorityInfo->PagePriority = 0;
}
#line 16669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


NTSTATUS
IoRetrievePriorityInfo (
      PIRP Irp,
      PFILE_OBJECT FileObject,
      PETHREAD Thread,
      PIO_PRIORITY_INFO PriorityInfo
    );
#line 16679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


NTSTATUS
IoApplyPriorityInfoThread(
      PIO_PRIORITY_INFO InputPriorityInfo,
      PIO_PRIORITY_INFO OutputPriorityInfo,
      PETHREAD Thread
    );
#line 16688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















#line 16709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















#line 16730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





















































#line 16784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


























#line 16811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
PVOID
PoRegisterSystemState (
      PVOID StateHandle,
      EXECUTION_STATE Flags
    );
#line 16822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
PoCreatePowerRequest (
     PVOID *PowerRequest,
      PDEVICE_OBJECT DeviceObject,
      PCOUNTED_REASON_CONTEXT Context
    );
#line 16833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
PoSetPowerRequest (
      PVOID PowerRequest,
      POWER_REQUEST_TYPE Type
    );
#line 16843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
PoClearPowerRequest (
      PVOID PowerRequest,
      POWER_REQUEST_TYPE Type
    );
#line 16853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
PoDeletePowerRequest (
      PVOID PowerRequest
    );
#line 16862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
PoUnregisterSystemState (
      PVOID StateHandle
    );
#line 16872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
POWER_STATE
PoSetPowerState (
      PDEVICE_OBJECT DeviceObject,
      POWER_STATE_TYPE Type,
      POWER_STATE State
    );
#line 16884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
PoCallDriver (
      PDEVICE_OBJECT DeviceObject,
        PIRP Irp
    );
#line 16894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
PoStartNextPowerIrp(
      PIRP Irp
    );
#line 16903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
PULONG
PoRegisterDeviceForIdleDetection (
      PDEVICE_OBJECT DeviceObject,
      ULONG ConservationIdleTime,
      ULONG PerformanceIdleTime,
      DEVICE_POWER_STATE State
    );
#line 16915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
void
PoSetDeviceBusyEx (
      PULONG IdlePointer
    );
#line 16926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
PoStartDeviceBusy (
      PULONG IdlePointer
    );
#line 16934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
PoEndDeviceBusy (
      PULONG IdlePointer
    );
#line 16942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
PoQueryWatchdogTime (
      PDEVICE_OBJECT Pdo,
      PULONG SecondsRemaining
    );
#line 16952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef
 
 
NTSTATUS
POWER_SETTING_CALLBACK (
      LPCGUID SettingGuid,
      PVOID Value,
      ULONG ValueLength,
      PVOID Context
);

typedef POWER_SETTING_CALLBACK *PPOWER_SETTING_CALLBACK;


 
__declspec(dllimport)
NTSTATUS
PoRegisterPowerSettingCallback (
      PDEVICE_OBJECT DeviceObject,
      LPCGUID SettingGuid,
      PPOWER_SETTING_CALLBACK Callback,
      PVOID Context,
     PVOID *Handle
    );
#line 16978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
PoUnregisterPowerSettingCallback (
      PVOID Handle
    );
#line 16987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















 
__declspec(dllimport)
NTSTATUS
PoQueueShutdownWorkItem(
        PWORK_QUEUE_ITEM WorkItem
    );
#line 17011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
BOOLEAN
MmIsRecursiveIoFault (
    void
    );
#line 17020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
BOOLEAN
MmForceSectionClosed (
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      BOOLEAN DelayClose
    );
#line 17031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 17040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef enum _MMFLUSH_TYPE {
    MmFlushForDelete,
    MmFlushForWrite
} MMFLUSH_TYPE;


 
__declspec(dllimport)
BOOLEAN
MmFlushImageSection (
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      MMFLUSH_TYPE FlushType
    );
#line 17056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
MmCanFileBeTruncated (
      PSECTION_OBJECT_POINTERS SectionPointer,
      PLARGE_INTEGER NewFileSize
    );
#line 17066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
MmSetAddressRangeModified (
      PVOID Address,
      SIZE_T Length
    );
#line 17076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _READ_LIST {
    PFILE_OBJECT FileObject;
    ULONG NumberOfEntries;
    LOGICAL IsImage;
    FILE_SEGMENT_ELEMENT List[1];
} READ_LIST, *PREAD_LIST;


typedef union _MM_PREFETCH_FLAGS {
    struct {
        ULONG Priority : 3;
        ULONG RepurposePriority : 3;
        ULONG PriorityProtection : 1;
        ULONG MustBeZero : 2;
        ULONG CannotBeUsedAsFlags : 23;
    } Flags;
    ULONG AllFlags;

} MM_PREFETCH_FLAGS, *PMM_PREFETCH_FLAGS;



 
__declspec(dllimport)
NTSTATUS
MmPrefetchPages (
      ULONG NumberOfLists,
      PREAD_LIST *ReadLists
    );
#line 17112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








 
__declspec(dllimport)
ULONG
MmDoesFileHaveUserWritableReferences (
      PSECTION_OBJECT_POINTERS SectionPointer
    );
#line 17127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 17135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef struct _PHYSICAL_MEMORY_RUN {
    PFN_NUMBER BasePage;
    PFN_NUMBER PageCount;
} PHYSICAL_MEMORY_RUN, *PPHYSICAL_MEMORY_RUN;

typedef struct _PHYSICAL_MEMORY_DESCRIPTOR {
    ULONG NumberOfRuns;
    PFN_NUMBER NumberOfPages;
    PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_MEMORY_DESCRIPTOR, *PPHYSICAL_MEMORY_DESCRIPTOR;

typedef struct _PHYSICAL_EXTENTS_DESCRIPTOR {
    ULONG NumberOfRuns;
    ULONG NumberOfValidRuns;
    PHYSICAL_MEMORY_RUN Run[1];
} PHYSICAL_EXTENTS_DESCRIPTOR, *PPHYSICAL_EXTENTS_DESCRIPTOR;

                                                

                                                

                                                




#line 17164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
                                                


#line 17168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
                                                





__declspec(dllimport)
LARGE_INTEGER
KeQueryPerformanceCounter (
     PLARGE_INTEGER PerformanceFrequency
   );
#line 17180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







__declspec(dllimport)
void
KeStallExecutionProcessor (
      ULONG MicroSeconds
    );
#line 17193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
ObInsertObject(
      PVOID Object,
      PACCESS_STATE PassedAccessState,
      ACCESS_MASK DesiredAccess,
      ULONG ObjectPointerBias,
      PVOID *NewObject,
      PHANDLE Handle
    );
#line 17207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
ObOpenObjectByPointer(
      PVOID Object,
      ULONG HandleAttributes,
      PACCESS_STATE PassedAccessState,
      ACCESS_MASK DesiredAccess,
      POBJECT_TYPE ObjectType,
      KPROCESSOR_MODE AccessMode,
      PHANDLE Handle
    );
#line 17221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
ObOpenObjectByPointerWithTag(
      PVOID Object,
      ULONG HandleAttributes,
      PACCESS_STATE PassedAccessState,
      ACCESS_MASK DesiredAccess,
      POBJECT_TYPE ObjectType,
      KPROCESSOR_MODE AccessMode,
      ULONG Tag,
      PHANDLE Handle
    );
#line 17236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
ObMakeTemporaryObject(
      PVOID Object
    );
#line 17244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
ObQueryNameString(
      PVOID Object,
      POBJECT_NAME_INFORMATION ObjectNameInfo,
      ULONG Length,
      PULONG ReturnLength
    );
#line 17255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
ObIsKernelHandle (
      HANDLE Handle
    );
#line 17263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
ObQueryObjectAuditingByHandle(
      HANDLE Handle,
      PBOOLEAN GenerateOnClose
    );
#line 17272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 17287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef ULONG LBN;
typedef LBN *PLBN;

typedef ULONG VBN;
typedef VBN *PVBN;








typedef PVOID OPLOCK, *POPLOCK;






typedef enum _FAST_IO_POSSIBLE {
    FastIoIsNotPossible = 0,
    FastIoIsPossible,
    FastIoIsQuestionable
} FAST_IO_POSSIBLE;


typedef struct _FSRTL_COMMON_FCB_HEADER {

    CSHORT NodeTypeCode;
    CSHORT NodeByteSize;

    
    
    

    UCHAR Flags;

    
    
    
    
    

    UCHAR IsFastIoPossible; 

    
    
    

    UCHAR Flags2;

    
    
    

    UCHAR Reserved : 4 ;

    
    
    

    UCHAR Version : 4 ;

    PERESOURCE Resource;

    PERESOURCE PagingIoResource;

    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER FileSize;
    LARGE_INTEGER ValidDataLength;

} FSRTL_COMMON_FCB_HEADER;
typedef FSRTL_COMMON_FCB_HEADER *PFSRTL_COMMON_FCB_HEADER;


































typedef struct _FSRTL_ADVANCED_FCB_HEADER {

    
    
    

    FSRTL_COMMON_FCB_HEADER ;

#line 17410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    
    
    
    

    
    
    
    
    

    PFAST_MUTEX FastMutex;

    
    
    
    
    

    LIST_ENTRY FilterContexts;



    
    
    
    
    
    

    
    
    
    

    ULONG_PTR PushLock;

    
    
    
    
    
    

    PVOID* FileContextSupportPointer;
#line 17457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


























#line 17484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 17495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

} FSRTL_ADVANCED_FCB_HEADER;
typedef FSRTL_ADVANCED_FCB_HEADER *PFSRTL_ADVANCED_FCB_HEADER;


















































































































typedef struct _EOF_WAIT_BLOCK {

    LIST_ENTRY EofWaitLinks;
    KEVENT Event;

} EOF_WAIT_BLOCK;

typedef EOF_WAIT_BLOCK *PEOF_WAIT_BLOCK;







 
 
 
__declspec(dllimport)
BOOLEAN
FsRtlCopyRead (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      ULONG LockKey,
      PVOID Buffer,
      PIO_STATUS_BLOCK IoStatus,
      PDEVICE_OBJECT DeviceObject
    );
#line 17643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
 
__declspec(dllimport)
BOOLEAN
FsRtlCopyWrite (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      ULONG LockKey,
      PVOID Buffer,
      PIO_STATUS_BLOCK IoStatus,
      PDEVICE_OBJECT DeviceObject
    );
#line 17661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 17676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
 
__declspec(dllimport)
BOOLEAN
FsRtlMdlReadDev (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG LockKey,
     PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus,
      PDEVICE_OBJECT DeviceObject
    );
#line 17693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlMdlReadCompleteDev (
      PFILE_OBJECT FileObject,
      PMDL MdlChain,
      PDEVICE_OBJECT DeviceObject
    );
#line 17705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













#line 17719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
 
__declspec(dllimport)
BOOLEAN
FsRtlPrepareMdlWriteDev (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG LockKey,
     PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus,
      PDEVICE_OBJECT DeviceObject
    );
#line 17736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
 
__declspec(dllimport)
BOOLEAN
FsRtlMdlWriteCompleteDev (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      PMDL MdlChain,
      PDEVICE_OBJECT DeviceObject
    );
#line 17750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef struct _FSRTL_AUXILIARY_BUFFER {

    
    
    

    PVOID Buffer;
    ULONG Length;

    
    
    

    ULONG Flags;

    
    
    

    PMDL Mdl;

} FSRTL_AUXILIARY_BUFFER;
typedef FSRTL_AUXILIARY_BUFFER *PFSRTL_AUXILIARY_BUFFER;


















 
__declspec(dllimport)
void
FsRtlAcquireFileExclusive (
      PFILE_OBJECT FileObject
    );
#line 17806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlReleaseFile (
      PFILE_OBJECT FileObject
    );
#line 17815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







 
 
NTSTATUS
FsRtlGetFileSize(
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileSize
    );
#line 17830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






 
__declspec(dllimport)
BOOLEAN
FsRtlIsTotalDeviceFailure(
      NTSTATUS Status
    );


#line 17845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct _FILE_LOCK_INFO {

    
    
    
    

    LARGE_INTEGER StartingByte;
    LARGE_INTEGER Length;
    BOOLEAN ExclusiveLock;

    
    
    

    ULONG Key;
    PFILE_OBJECT FileObject;
    PVOID ProcessId;

    
    
    

    LARGE_INTEGER EndingByte;

} FILE_LOCK_INFO;
typedef FILE_LOCK_INFO *PFILE_LOCK_INFO;











typedef NTSTATUS (*PCOMPLETE_LOCK_IRP_ROUTINE) (
      PVOID Context,
      PIRP Irp
    );

typedef void (*PUNLOCK_ROUTINE) (
      PVOID Context,
      PFILE_LOCK_INFO FileLockInfo
    );






typedef struct _FILE_LOCK {

    
    
    

    PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine;

    
    
    

    PUNLOCK_ROUTINE UnlockRoutine;

    
    
    
    
    
    

    BOOLEAN FastIoIsQuestionable;
    BOOLEAN SpareC[3];

    
    
    

    PVOID   LockInformation;

    
    
    

    FILE_LOCK_INFO  LastReturnedLockInfo;
    PVOID           LastReturnedLock;

    
    
    
    

    LONG volatile LockRequestsInProgress;

} FILE_LOCK;
typedef FILE_LOCK *PFILE_LOCK;


 
 
__declspec(dllimport)
PFILE_LOCK
FsRtlAllocateFileLock (
      PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine,
      PUNLOCK_ROUTINE UnlockRoutine
    );
#line 17965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlFreeFileLock (
      PFILE_LOCK FileLock
    );
#line 17974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlInitializeFileLock (
      PFILE_LOCK FileLock,
      PCOMPLETE_LOCK_IRP_ROUTINE CompleteLockIrpRoutine,
      PUNLOCK_ROUTINE UnlockRoutine
    );
#line 17985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlUninitializeFileLock (
      PFILE_LOCK FileLock
    );
#line 17994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
FsRtlProcessFileLock (
      PFILE_LOCK FileLock,
      PIRP Irp,
      PVOID Context
    );
#line 18006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlCheckLockForReadAccess (
      PFILE_LOCK FileLock,
      PIRP Irp
    );
#line 18017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlCheckLockForWriteAccess (
      PFILE_LOCK FileLock,
      PIRP Irp
    );
#line 18028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 18039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlFastCheckLockForRead (
      PFILE_LOCK FileLock,
      PLARGE_INTEGER StartingByte,
      PLARGE_INTEGER Length,
      ULONG Key,
      PFILE_OBJECT FileObject,
      PVOID ProcessId
    );
#line 18054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlFastCheckLockForWrite (
      PFILE_LOCK FileLock,
      PLARGE_INTEGER StartingByte,
      PLARGE_INTEGER Length,
      ULONG Key,
      PVOID FileObject,
      PVOID ProcessId
    );
#line 18069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
PFILE_LOCK_INFO
FsRtlGetNextFileLock (
      PFILE_LOCK FileLock,
      BOOLEAN Restart
    );
#line 18080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlAreThereCurrentOrInProgressFileLocks (
      PFILE_LOCK FileLock
    );
#line 18089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 18098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
FsRtlFastUnlockSingle (
      PFILE_LOCK FileLock,
      PFILE_OBJECT FileObject,
      LARGE_INTEGER __unaligned *FileOffset,
      PLARGE_INTEGER Length,
      PEPROCESS ProcessId,
      ULONG Key,
      PVOID Context,
      BOOLEAN AlreadySynchronized
    );
#line 18114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
FsRtlFastUnlockAll (
      PFILE_LOCK FileLock,
      PFILE_OBJECT FileObject,
      PEPROCESS ProcessId,
      PVOID Context
    );
#line 18126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
FsRtlFastUnlockAllByKey (
      PFILE_LOCK FileLock,
      PFILE_OBJECT FileObject,
      PEPROCESS ProcessId,
      ULONG Key,
      PVOID Context
    );
#line 18139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
 
__declspec(dllimport)
BOOLEAN
FsRtlPrivateLock (
      PFILE_LOCK FileLock,
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      PLARGE_INTEGER Length,
      PEPROCESS ProcessId,
      ULONG Key,
      BOOLEAN FailImmediately,
      BOOLEAN ExclusiveLock,
      PIO_STATUS_BLOCK Iosb,
      PIRP Irp,
        PVOID Context,
      BOOLEAN AlreadySynchronized
    );
#line 18161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







































































typedef struct {

    
    
    

    FAST_MUTEX          Mutex;

    
    
    
    

    PRTL_SPLAY_LINKS    Cache;

    
    
    

    LIST_ENTRY          TimerQueue;

    
    
    
    

    USHORT              NumEntries;

} TUNNEL, *PTUNNEL;


 
__declspec(dllimport)
void
FsRtlInitializeTunnelCache (
      TUNNEL *Cache
    );
#line 18270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlAddToTunnelCache (
      TUNNEL *Cache,
      ULONGLONG DirectoryKey,
      UNICODE_STRING *ShortName,
      UNICODE_STRING *LongName,
      BOOLEAN KeyByShortName,
      ULONG DataLength,
      void *Data
    );
#line 18285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 


 
 
__declspec(dllimport)
BOOLEAN
FsRtlFindInTunnelCache (
      TUNNEL *Cache,
      ULONGLONG DirectoryKey,
      UNICODE_STRING *Name,
      UNICODE_STRING *ShortName,
      UNICODE_STRING *LongName,
      ULONG  *DataLength,
      void *Data
    );
#line 18306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlDeleteKeyFromTunnelCache (
      TUNNEL *Cache,
      ULONGLONG DirectoryKey
    );
#line 18316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlDeleteTunnelCache (
      TUNNEL *Cache
    );
#line 18325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











typedef enum _FSRTL_COMPARISON_RESULT {
    LessThan = -1,
    EqualTo = 0,
    GreaterThan = 1
} FSRTL_COMPARISON_RESULT;



#line 18345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







extern UCHAR const* const (*FsRtlLegalAnsiCharacterArray);
extern PUSHORT (*NlsOemLeadByteInfo);  














































































































 
__declspec(dllimport)
void
FsRtlDissectDbcs (
      ANSI_STRING Path,
      PANSI_STRING FirstName,
      PANSI_STRING RemainingName
    );
#line 18473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlDoesDbcsContainWildCards (
      PANSI_STRING Name
    );
#line 18483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlIsDbcsInExpression (
      PANSI_STRING Expression,
      PANSI_STRING Name
    );
#line 18494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlIsFatDbcsLegal (
      ANSI_STRING DbcsName,
      BOOLEAN WildCardsPermissible,
      BOOLEAN PathNamePermissible,
      BOOLEAN LeadingBackslashPermissible
    );
#line 18507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
 
__declspec(dllimport)
BOOLEAN
FsRtlIsHpfsDbcsLegal (
      ANSI_STRING DbcsName,
      BOOLEAN WildCardsPermissible,
      BOOLEAN PathNamePermissible,
      BOOLEAN LeadingBackslashPermissible
    );
#line 18522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







__declspec(dllimport)
NTSTATUS
FsRtlNormalizeNtstatus (
      NTSTATUS Exception,
      NTSTATUS GenericException
    );
#line 18536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlIsNtstatusExpected (
      NTSTATUS Exception
    );
#line 18545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






















 
 
__declspec(dllimport)
PERESOURCE
FsRtlAllocateResource (
    void
    );
#line 18575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













typedef struct _BASE_MCB {
    ULONG MaximumPairCount;
    ULONG PairCount;
    USHORT PoolType;
    USHORT Flags;
    PVOID Mapping;
} BASE_MCB;
typedef BASE_MCB *PBASE_MCB;

typedef struct _LARGE_MCB {
    PKGUARDED_MUTEX GuardedMutex;
    BASE_MCB BaseMcb;
} LARGE_MCB;
typedef LARGE_MCB *PLARGE_MCB;




 
__declspec(dllimport)
void
FsRtlInitializeLargeMcb (
      PLARGE_MCB Mcb,
      POOL_TYPE PoolType
    );
#line 18614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlUninitializeLargeMcb (
      PLARGE_MCB Mcb
    );
#line 18623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlResetLargeMcb (
      PLARGE_MCB Mcb,
      BOOLEAN SelfSynchronized
    );
#line 18633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlTruncateLargeMcb (
      PLARGE_MCB Mcb,
      LONGLONG Vbn
    );
#line 18643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlAddLargeMcbEntry (
      PLARGE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG Lbn,
      LONGLONG SectorCount
    );
#line 18656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlRemoveLargeMcbEntry (
      PLARGE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG SectorCount
    );
#line 18667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupLargeMcbEntry (
      PLARGE_MCB Mcb,
      LONGLONG Vbn,
      PLONGLONG Lbn,
      PLONGLONG SectorCountFromLbn,
      PLONGLONG StartingLbn,
      PLONGLONG SectorCountFromStartingLbn,
      PULONG Index
    );
#line 18682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupLastLargeMcbEntry (
      PLARGE_MCB Mcb,
      PLONGLONG Vbn,
      PLONGLONG Lbn
    );
#line 18693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupLastLargeMcbEntryAndIndex (
      PLARGE_MCB OpaqueMcb,
      PLONGLONG LargeVbn,
      PLONGLONG LargeLbn,
      PULONG Index
    );
#line 18705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
ULONG
FsRtlNumberOfRunsInLargeMcb (
      PLARGE_MCB Mcb
    );
#line 18714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlGetNextLargeMcbEntry (
      PLARGE_MCB Mcb,
      ULONG RunIndex,
      PLONGLONG Vbn,
      PLONGLONG Lbn,
      PLONGLONG SectorCount
    );
#line 18728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlSplitLargeMcb (
      PLARGE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG Amount
    );
#line 18740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








 
__declspec(dllimport)
void
FsRtlInitializeBaseMcb (
      PBASE_MCB Mcb,
      POOL_TYPE PoolType
    );
#line 18756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
BOOLEAN
FsRtlInitializeBaseMcbEx (
      PBASE_MCB Mcb,
      POOL_TYPE PoolType,
      USHORT Flags
    );
#line 18767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlUninitializeBaseMcb (
      PBASE_MCB Mcb
    );
#line 18776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlResetBaseMcb (
      PBASE_MCB Mcb
    );
#line 18785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlTruncateBaseMcb (
      PBASE_MCB Mcb,
      LONGLONG Vbn
    );
#line 18795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlAddBaseMcbEntry (
      PBASE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG Lbn,
      LONGLONG SectorCount
    );
#line 18807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
NTSTATUS
FsRtlAddBaseMcbEntryEx (
      PBASE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG Lbn,
      LONGLONG SectorCount
    );
#line 18819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlRemoveBaseMcbEntry (
      PBASE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG SectorCount
    );
#line 18830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupBaseMcbEntry (
      PBASE_MCB Mcb,
      LONGLONG Vbn,
      PLONGLONG Lbn,
      PLONGLONG SectorCountFromLbn,
      PLONGLONG StartingLbn,
      PLONGLONG SectorCountFromStartingLbn,
      PULONG Index
    );
#line 18845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupLastBaseMcbEntry (
      PBASE_MCB Mcb,
      PLONGLONG Vbn,
      PLONGLONG Lbn
    );
#line 18856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupLastBaseMcbEntryAndIndex (
      PBASE_MCB OpaqueMcb,
      PLONGLONG LargeVbn,
      PLONGLONG LargeLbn,
      PULONG Index
    );
#line 18868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
ULONG
FsRtlNumberOfRunsInBaseMcb (
      PBASE_MCB Mcb
    );
#line 18877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlGetNextBaseMcbEntry (
      PBASE_MCB Mcb,
      ULONG RunIndex,
      PLONGLONG Vbn,
      PLONGLONG Lbn,
      PLONGLONG SectorCount
    );
#line 18890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlSplitBaseMcb (
      PBASE_MCB Mcb,
      LONGLONG Vbn,
      LONGLONG Amount
    );
#line 18901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct _MCB {
    LARGE_MCB DummyFieldThatSizesThisStructureCorrectly;
} MCB;
typedef MCB *PMCB;


 
 
__declspec(dllimport)
void
FsRtlInitializeMcb (
      PMCB Mcb,
      POOL_TYPE PoolType
    );
#line 18926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlUninitializeMcb (
      PMCB Mcb
    );
#line 18935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlTruncateMcb (
      PMCB Mcb,
      VBN Vbn
    );
#line 18945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlAddMcbEntry (
      PMCB Mcb,
      VBN Vbn,
      LBN Lbn,
      ULONG SectorCount
    );
#line 18957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlRemoveMcbEntry (
      PMCB Mcb,
      VBN Vbn,
      ULONG SectorCount
    );
#line 18968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupMcbEntry (
      PMCB Mcb,
      VBN Vbn,
      PLBN Lbn,
      PULONG SectorCount,
      PULONG Index
    );
#line 18981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlLookupLastMcbEntry (
      PMCB Mcb,
      PVBN Vbn,
      PLBN Lbn
    );
#line 18992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
ULONG
FsRtlNumberOfRunsInMcb (
      PMCB Mcb
    );
#line 19001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlGetNextMcbEntry (
      PMCB Mcb,
      ULONG RunIndex,
      PVBN Vbn,
      PLBN Lbn,
      PULONG SectorCount
    );
#line 19015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










 
__declspec(dllimport)
NTSTATUS
FsRtlBalanceReads (
      PDEVICE_OBJECT TargetDevice
    );
#line 19032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef
void
(*POPLOCK_WAIT_COMPLETE_ROUTINE) (
      PVOID Context,



#line 19046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
          PIRP Irp
#line 19048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    );

typedef
void
(*POPLOCK_FS_PREPOST_IRP) (
      PVOID Context,



#line 19058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
      PIRP Irp
#line 19060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    );


 
__declspec(dllimport)
void
FsRtlInitializeOplock (
      POPLOCK Oplock
    );
#line 19070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlUninitializeOplock (
      POPLOCK Oplock
    );
#line 19079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
FsRtlOplockFsctrl (
      POPLOCK Oplock,
      PIRP Irp,
      ULONG OpenCount
    );
#line 19091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
FsRtlCheckOplock (
      POPLOCK Oplock,
      PIRP Irp,
      PVOID Context,
      POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine,
      POPLOCK_FS_PREPOST_IRP PostIrpRoutine
    );
#line 19105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 19113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 19118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 19123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









#line 19133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 19142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
NTSTATUS
FsRtlCheckOplockEx (
      POPLOCK Oplock,
      PIRP Irp,
      ULONG Flags,
      PVOID Context,
      POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine,
      POPLOCK_FS_PREPOST_IRP PostIrpRoutine
    );

#line 19158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

























#line 19184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlOplockIsFastIoPossible (
      POPLOCK Oplock
    );
#line 19194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlCurrentBatchOplock (
      POPLOCK Oplock
    );
#line 19204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlCurrentOplock (
      POPLOCK Oplock
    );

 
 
__declspec(dllimport)
NTSTATUS
FsRtlOplockBreakToNone (
      POPLOCK Oplock,
      PIO_STACK_LOCATION IrpSp,
      PIRP Irp,
      PVOID Context,
      POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine,
      POPLOCK_FS_PREPOST_IRP PostIrpRoutine
    );
#line 19227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _OPLOCK_KEY_ECP_CONTEXT {

    
    
    
    

    GUID OplockKey;

    
    
    

    ULONG Reserved;

} OPLOCK_KEY_ECP_CONTEXT, *POPLOCK_KEY_ECP_CONTEXT;







extern const GUID  GUID_ECP_OPLOCK_KEY;

 
 
__declspec(dllimport)
BOOLEAN
FsRtlOplockIsSharedRequest(
      PIRP Irp
    );

 
 
__declspec(dllimport)
NTSTATUS
FsRtlOplockBreakH (
      POPLOCK Oplock,
      PIRP Irp,
      ULONG Flags,
      PVOID Context,
      POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine,
      POPLOCK_FS_PREPOST_IRP PostIrpRoutine
    );

 
__declspec(dllimport)
BOOLEAN
FsRtlCurrentOplockH (
      POPLOCK Oplock
    );

 
 
__declspec(dllimport)
NTSTATUS
FsRtlOplockBreakToNoneEx (
      POPLOCK Oplock,
      PIRP Irp,
      ULONG Flags,
      PVOID Context,
      POPLOCK_WAIT_COMPLETE_ROUTINE CompletionRoutine,
      POPLOCK_FS_PREPOST_IRP PostIrpRoutine
    );

 
 
__declspec(dllimport)
NTSTATUS
FsRtlOplockFsctrlEx (
      POPLOCK Oplock,
      PIRP Irp,
      ULONG OpenCount,
      ULONG Flags
    );

 
__declspec(dllimport)
BOOLEAN
FsRtlOplockKeysEqual (
      PFILE_OBJECT Fo1,
      PFILE_OBJECT Fo2
    );
#line 19318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















































#line 19366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

























 
__declspec(dllimport)
NTSTATUS
FsRtlNotifyVolumeEvent (
      PFILE_OBJECT FileObject,
      ULONG EventCode
    );
#line 19399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
FsRtlNotifyVolumeEventEx (
      PFILE_OBJECT FileObject,
      ULONG EventCode,
      PTARGET_DEVICE_CUSTOM_NOTIFICATION Event
    );
#line 19410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct _REAL_NOTIFY_SYNC *PNOTIFY_SYNC;

typedef
BOOLEAN (*PCHECK_FOR_TRAVERSE_ACCESS) (
      PVOID NotifyContext,
      PVOID TargetContext,
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );

typedef
BOOLEAN (*PFILTER_REPORT_CHANGE) (
      PVOID NotifyContext,
      PVOID FilterContext
    );


 
__declspec(dllimport)
void
FsRtlNotifyInitializeSync (
     PNOTIFY_SYNC *NotifySync
    );
#line 19443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlNotifyUninitializeSync (
      PNOTIFY_SYNC *NotifySync
    );
#line 19452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 


__declspec(dllimport)
void
FsRtlNotifyFullChangeDirectory (
      PNOTIFY_SYNC NotifySync,
      PLIST_ENTRY NotifyList,
      PVOID FsContext,
    PSTRING FullDirectoryName,
      BOOLEAN WatchTree,
      BOOLEAN IgnoreBuffer,
      ULONG CompletionFilter,
      PIRP NotifyIrp,
      PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback,
      PSECURITY_SUBJECT_CONTEXT SubjectContext
    );
#line 19472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlNotifyFilterChangeDirectory (
      PNOTIFY_SYNC NotifySync,
      PLIST_ENTRY NotifyList,
      PVOID FsContext,
      PSTRING FullDirectoryName,
      BOOLEAN WatchTree,
      BOOLEAN IgnoreBuffer,
      ULONG CompletionFilter,
      PIRP NotifyIrp,
      PCHECK_FOR_TRAVERSE_ACCESS TraverseCallback,
      PSECURITY_SUBJECT_CONTEXT SubjectContext,
      PFILTER_REPORT_CHANGE FilterCallback
    );
#line 19491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlNotifyFilterReportChange (
      PNOTIFY_SYNC NotifySync,
      PLIST_ENTRY NotifyList,
      PSTRING FullTargetName,
      USHORT TargetNameOffset,
      PSTRING StreamName,
      PSTRING NormalizedParentName,
      ULONG FilterMatch,
      ULONG Action,
      PVOID TargetContext,
      PVOID FilterContext
    );
#line 19509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlNotifyFullReportChange (
      PNOTIFY_SYNC NotifySync,
      PLIST_ENTRY NotifyList,
      PSTRING FullTargetName,
      USHORT TargetNameOffset,
      PSTRING StreamName,
      PSTRING NormalizedParentName,
      ULONG FilterMatch,
      ULONG Action,
      PVOID TargetContext
    );
#line 19526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlNotifyCleanup (
      PNOTIFY_SYNC NotifySync,
      PLIST_ENTRY NotifyList,
      PVOID FsContext
    );
#line 19537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlNotifyCleanupAll (
      PNOTIFY_SYNC NotifySync,
      PLIST_ENTRY NotifyList
    );
#line 19547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


















 
__declspec(dllimport)
void
FsRtlDissectName (
      UNICODE_STRING Path,
      PUNICODE_STRING FirstName,
      PUNICODE_STRING RemainingName
    );
#line 19574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlDoesNameContainWildCards (
      PUNICODE_STRING Name
    );
#line 19584 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
BOOLEAN
FsRtlAreNamesEqual (
      PCUNICODE_STRING ConstantNameA,
      PCUNICODE_STRING ConstantNameB,
      BOOLEAN IgnoreCase,
      PCWCH UpcaseTable
    );
#line 19597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
 
__declspec(dllimport)
BOOLEAN
FsRtlIsNameInExpression (
      PUNICODE_STRING Expression,
      PUNICODE_STRING Name,
      BOOLEAN IgnoreCase,
      PWCH UpcaseTable
    );
#line 19612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








typedef
void
(*PFSRTL_STACK_OVERFLOW_ROUTINE) (
      PVOID Context,
      PKEVENT Event
    );


 
__declspec(dllimport)
void
FsRtlPostStackOverflow (
      PVOID Context,
      PKEVENT Event,
      PFSRTL_STACK_OVERFLOW_ROUTINE StackOverflowRoutine
    );
#line 19637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlPostPagingFileStackOverflow (
      PVOID Context,
      PKEVENT Event,
      PFSRTL_STACK_OVERFLOW_ROUTINE StackOverflowRoutine
    );
#line 19648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







 
 
__declspec(dllimport)
NTSTATUS
FsRtlRegisterUncProvider(
      PHANDLE MupHandle,
      PCUNICODE_STRING RedirectorDeviceName,
      BOOLEAN MailslotsSupported
    );
#line 19665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef ULONG FSRTL_UNC_PROVIDER_FLAGS;












#line 19686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

 
 
NTSTATUS
FsRtlRegisterUncProviderEx(
      PHANDLE MupHandle,
      PCUNICODE_STRING RedirDevName,
      PDEVICE_OBJECT DeviceObject,
      FSRTL_UNC_PROVIDER_FLAGS Flags
    );
#line 19697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 19708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 19719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 19723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"























































#line 19779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
void
FsRtlDeregisterUncProvider(
      HANDLE Handle
    );
#line 19788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 


__declspec(dllimport)
NTSTATUS
FsRtlCancellableWaitForSingleObject(
      PVOID Object,
      PLARGE_INTEGER Timeout,
      PIRP Irp
    );

 


__declspec(dllimport)
NTSTATUS
FsRtlCancellableWaitForMultipleObjects(
      ULONG Count,
      PVOID ObjectArray[],
      WAIT_TYPE WaitType,
      PLARGE_INTEGER Timeout,
      PKWAIT_BLOCK WaitBlockArray,
      PIRP Irp
    );

#line 19817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










 
 
__declspec(dllimport)
NTSTATUS
FsRtlMupGetProviderInfoFromFileObject(
                             PFILE_OBJECT    pFileObject,
                             ULONG           Level,
       PVOID           pBuffer,
                          PULONG          pBufferSize
    );










typedef struct _FSRTL_MUP_PROVIDER_INFO_LEVEL_1 {
    ULONG32         ProviderId;         

} FSRTL_MUP_PROVIDER_INFO_LEVEL_1, *PFSRTL_MUP_PROVIDER_INFO_LEVEL_1;

typedef struct _FSRTL_MUP_PROVIDER_INFO_LEVEL_2 {
    ULONG32         ProviderId;         
    UNICODE_STRING  ProviderName;       

} FSRTL_MUP_PROVIDER_INFO_LEVEL_2, *PFSRTL_MUP_PROVIDER_INFO_LEVEL_2;


 
 
__declspec(dllimport)
NTSTATUS
FsRtlMupGetProviderIdFromName(
         PCUNICODE_STRING    pProviderName,
        PULONG32            pProviderId
    );


#line 19870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
























typedef struct _FSRTL_PER_FILE_CONTEXT {
    
    
    
    

    LIST_ENTRY Links;

    
    
    
    

    PVOID OwnerId;

    
    
    
    

    PVOID InstanceId;

    
    
    
    
    
    
    
    
    

    PFREE_FUNCTION FreeCallback;

} FSRTL_PER_FILE_CONTEXT, *PFSRTL_PER_FILE_CONTEXT;










































 
 
__declspec(dllimport)
NTSTATUS
FsRtlInsertPerFileContext (
      PVOID* PerFileContextPointer,
      PFSRTL_PER_FILE_CONTEXT Ptr
    );











 
 
__declspec(dllimport)
PFSRTL_PER_FILE_CONTEXT
FsRtlLookupPerFileContext (
      PVOID* PerFileContextPointer,
      PVOID OwnerId,
      PVOID InstanceId
    );

















 
 
__declspec(dllimport)
PFSRTL_PER_FILE_CONTEXT
FsRtlRemovePerFileContext (
      PVOID* PerFileContextPointer,
      PVOID OwnerId,
      PVOID InstanceId
    );




































 
__declspec(dllimport)
void
FsRtlTeardownPerFileContexts (
      PVOID* PerFileContextPointer
    );
























typedef struct _FSRTL_PER_STREAM_CONTEXT {
    
    
    
    

    LIST_ENTRY Links;

    
    
    
    

    PVOID OwnerId;

    
    
    
    

    PVOID InstanceId;

    
    
    
    
    
    
    
    
    

    PFREE_FUNCTION FreeCallback;

} FSRTL_PER_STREAM_CONTEXT, *PFSRTL_PER_STREAM_CONTEXT;






































 
 
__declspec(dllimport)
NTSTATUS
FsRtlInsertPerStreamContext (
      PFSRTL_ADVANCED_FCB_HEADER PerStreamContext,
      PFSRTL_PER_STREAM_CONTEXT Ptr
    );
#line 20173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











 
 
__declspec(dllimport)
PFSRTL_PER_STREAM_CONTEXT
FsRtlLookupPerStreamContextInternal (
      PFSRTL_ADVANCED_FCB_HEADER StreamContext,
      PVOID OwnerId,
      PVOID InstanceId
    );
#line 20194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
























 
 
__declspec(dllimport)
PFSRTL_PER_STREAM_CONTEXT
FsRtlRemovePerStreamContext (
      PFSRTL_ADVANCED_FCB_HEADER StreamContext,
      PVOID OwnerId,
      PVOID InstanceId
    );
#line 20228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















 
void
__forceinline
FsRtlSetupAdvancedHeader(
      PVOID AdvHdr,
      PFAST_MUTEX FMutex )











{
    PFSRTL_ADVANCED_FCB_HEADER localAdvHdr = (PFSRTL_ADVANCED_FCB_HEADER)AdvHdr;

    localAdvHdr->Flags |= (0x40);
    localAdvHdr->Flags2 |= (0x02);




#line 20271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 20273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    localAdvHdr->Version = (0x01);


#line 20277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    InitializeListHead( &localAdvHdr->FilterContexts );

    if (FMutex != ((void *)0)) {

        localAdvHdr->FastMutex = FMutex;
    }










    *((PULONG_PTR)(&localAdvHdr->PushLock)) = 0;
    

    localAdvHdr->FileContextSupportPointer = ((void *)0);
#line 20299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 20304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 20309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

}









 
__declspec(dllimport)
void
FsRtlTeardownPerStreamContexts (
      PFSRTL_ADVANCED_FCB_HEADER AdvancedHeader
    );





typedef void (*PFN_FSRTLTEARDOWNPERSTREAMCONTEXTS) (  PFSRTL_ADVANCED_FCB_HEADER AdvancedHeader);
#line 20333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

























typedef struct _FSRTL_PER_FILEOBJECT_CONTEXT {
    
    
    

    LIST_ENTRY Links;

    
    
    
    

    PVOID OwnerId;

    
    
    
    

    PVOID InstanceId;

} FSRTL_PER_FILEOBJECT_CONTEXT, *PFSRTL_PER_FILEOBJECT_CONTEXT;


















 
 
__declspec(dllimport)
NTSTATUS
FsRtlInsertPerFileObjectContext (
      PFILE_OBJECT FileObject,
      PFSRTL_PER_FILEOBJECT_CONTEXT Ptr
    );










 
 
__declspec(dllimport)
PFSRTL_PER_FILEOBJECT_CONTEXT
FsRtlLookupPerFileObjectContext (
      PFILE_OBJECT FileObject,
      PVOID OwnerId,
      PVOID InstanceId
    );














 
 
__declspec(dllimport)
PFSRTL_PER_FILEOBJECT_CONTEXT
FsRtlRemovePerFileObjectContext (
      PFILE_OBJECT FileObject,
      PVOID OwnerId,
      PVOID InstanceId
    );

















































































__declspec(dllimport)
void
FsRtlIncrementCcFastReadNotPossible(
    void
    );
#line 20535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
FsRtlIncrementCcFastReadWait(
    void
    );
#line 20543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
FsRtlIncrementCcFastReadNoWait(
    void
    );
#line 20551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
FsRtlIncrementCcFastReadResourceMiss(
    void
    );
#line 20559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
FsRtlIncrementCcFastMdlReadWait(
    void
    );
#line 20567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







 
__declspec(dllimport)
LOGICAL
FsRtlIsPagingFile (
      PFILE_OBJECT FileObject
    );
#line 20581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 20596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










 
 
__declspec(dllimport)
NTSTATUS
FsRtlCreateSectionForDataScan(
      PHANDLE SectionHandle,
     PVOID *SectionObject,
      PLARGE_INTEGER SectionFileSize,
      PFILE_OBJECT FileObject,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      PLARGE_INTEGER MaximumSize,
      ULONG SectionPageProtection,
      ULONG AllocationAttributes,
      ULONG Flags
    );
#line 20623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






 
 
__declspec(dllimport)
NTSTATUS
FsRtlValidateReparsePointBuffer (
      ULONG BufferLength,
      PREPARSE_DATA_BUFFER ReparseBuffer
);

 
 
__declspec(dllimport)
NTSTATUS
FsRtlRemoveDotsFromPath(
      PWSTR OriginalString,
      USHORT PathLength,
      USHORT *NewLength
);
#line 20648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 20656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













typedef struct _ECP_LIST ECP_LIST;
typedef struct _ECP_LIST *PECP_LIST;
#line 20672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef struct _ECP_HEADER ECP_HEADER;
typedef struct _ECP_HEADER *PECP_HEADER;
#line 20677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef void
(*PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK) (
      PVOID EcpContext,
      LPCGUID EcpType
    );
#line 20689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












typedef ULONG FSRTL_ALLOCATE_ECPLIST_FLAGS;

    
    
    

    
#line 20709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
FsRtlAllocateExtraCreateParameterList (
      FSRTL_ALLOCATE_ECPLIST_FLAGS Flags,
     PECP_LIST *EcpList
    );
#line 20721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
FsRtlFreeExtraCreateParameterList (
      PECP_LIST EcpList
    );
#line 20731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
FsRtlInitializeExtraCreateParameterList (
      PECP_LIST EcpList
    );
#line 20739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







typedef ULONG FSRTL_ALLOCATE_ECP_FLAGS;

    
    
    
    

    

    
    
    
    

    
#line 20762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
FsRtlAllocateExtraCreateParameter (
      LPCGUID EcpType,
      ULONG SizeOfContext,
      FSRTL_ALLOCATE_ECP_FLAGS Flags,
      PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback,
      ULONG PoolTag,
     PVOID *EcpContext
    );
#line 20778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
FsRtlFreeExtraCreateParameter (
      PVOID EcpContext
    );
#line 20788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
FsRtlInitializeExtraCreateParameter(
      PECP_HEADER Ecp,
      ULONG EcpFlags,
      PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback,
      ULONG TotalSize,
      LPCGUID EcpType,
      PVOID ListAllocatedFrom
    );
#line 20801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef ULONG FSRTL_ECP_LOOKASIDE_FLAGS;

    
    
    
    

    
#line 20816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
void
FsRtlInitExtraCreateParameterLookasideList (
      PVOID Lookaside,
      FSRTL_ECP_LOOKASIDE_FLAGS Flags,
      SIZE_T Size,
      ULONG Tag
    );
#line 20830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




void
FsRtlDeleteExtraCreateParameterLookasideList (
      PVOID Lookaside,
      FSRTL_ECP_LOOKASIDE_FLAGS Flags
    );
#line 20840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
FsRtlAllocateExtraCreateParameterFromLookasideList (
      LPCGUID EcpType,
     ULONG SizeOfContext,
      FSRTL_ALLOCATE_ECP_FLAGS Flags,
      PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK CleanupCallback,
      PVOID LookasideList,
     PVOID *EcpContext
    );
#line 20855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
FsRtlInsertExtraCreateParameter (
      PECP_LIST EcpList,
      PVOID EcpContext
    );
#line 20867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
FsRtlFindExtraCreateParameter (
      PECP_LIST EcpList,
      LPCGUID EcpType,
     PVOID *EcpContext,
      ULONG *EcpContextSize
    );
#line 20881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
FsRtlRemoveExtraCreateParameter (
      PECP_LIST EcpList,
      LPCGUID EcpType,
     PVOID *EcpContext,
      ULONG *EcpContextSize
    );
#line 20895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







 
 
__declspec(dllimport)
NTSTATUS
FsRtlGetEcpListFromIrp (
      PIRP Irp,
     PECP_LIST *EcpList
    );
#line 20911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
 
__declspec(dllimport)
NTSTATUS
FsRtlSetEcpListIntoIrp (
      PIRP Irp,
      PECP_LIST EcpList
    );
#line 20923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








 
 
__declspec(dllimport)
NTSTATUS
FsRtlGetNextExtraCreateParameter (
      PECP_LIST EcpList,
      PVOID CurrentEcpContext,
      LPGUID NextEcpType,
     PVOID *NextEcpContext,
      ULONG *NextEcpContextSize
    );
#line 20943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
void
FsRtlAcknowledgeEcp (
      PVOID EcpContext
    );
#line 20953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 20961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
BOOLEAN
FsRtlIsEcpAcknowledged (
      PVOID EcpContext
    );
#line 20970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



 
__declspec(dllimport)
BOOLEAN
FsRtlIsEcpFromUserMode (
      PVOID EcpContext
    );
#line 20980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















typedef enum {

    NetworkOpenLocationAny,         
    NetworkOpenLocationRemote,      
    NetworkOpenLocationLoopback     

} NETWORK_OPEN_LOCATION_QUALIFIER;


typedef enum {

    NetworkOpenIntegrityAny,        
    NetworkOpenIntegrityNone,       
    NetworkOpenIntegritySigned,     
    NetworkOpenIntegrityEncrypted,  
    NetworkOpenIntegrityMaximum     

} NETWORK_OPEN_INTEGRITY_QUALIFIER;

















typedef ULONG NETWORK_OPEN_IN_FLAGS;








#line 21042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 21046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



typedef ULONG NETWORK_OPEN_OUT_FLAGS;



#line 21054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _NETWORK_OPEN_ECP_CONTEXT {

    USHORT Size;        
    USHORT Reserved;    

    struct {

        
        
        

        struct {

            NETWORK_OPEN_LOCATION_QUALIFIER Location;
            NETWORK_OPEN_INTEGRITY_QUALIFIER Integrity;
            NETWORK_OPEN_IN_FLAGS Flags;

        } in;

        
        
        

        struct {

            NETWORK_OPEN_LOCATION_QUALIFIER Location;
            NETWORK_OPEN_INTEGRITY_QUALIFIER Integrity;
            NETWORK_OPEN_OUT_FLAGS Flags;

        } out;

    } ;

} NETWORK_OPEN_ECP_CONTEXT, *PNETWORK_OPEN_ECP_CONTEXT;







typedef struct _NETWORK_OPEN_ECP_CONTEXT_V0 {

    USHORT Size;        
    USHORT Reserved;    

    struct {

        
        
        

        struct {

            NETWORK_OPEN_LOCATION_QUALIFIER Location;
            NETWORK_OPEN_INTEGRITY_QUALIFIER Integrity;

        } in;

        
        
        

        struct {

            NETWORK_OPEN_LOCATION_QUALIFIER Location;
            NETWORK_OPEN_INTEGRITY_QUALIFIER Integrity;

        } out;

    } ;

} NETWORK_OPEN_ECP_CONTEXT_V0, *PNETWORK_OPEN_ECP_CONTEXT_V0;







































#line 21168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





extern const GUID  GUID_ECP_NETWORK_OPEN_CONTEXT;





#line 21180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






































#line 21219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








































#line 21260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















typedef struct _PREFETCH_OPEN_ECP_CONTEXT {

    PVOID Context;      

} PREFETCH_OPEN_ECP_CONTEXT, *PPREFETCH_OPEN_ECP_CONTEXT;





extern const GUID  GUID_ECP_PREFETCH_OPEN;





#line 21294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef struct sockaddr_storage *PSOCKADDR_STORAGE_NFS;


extern const GUID  GUID_ECP_NFS_OPEN;
#line 21312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef struct _NFS_OPEN_ECP_CONTEXT {

    
    
    
    
    PUNICODE_STRING             ExportAlias;


    
    
    
    PSOCKADDR_STORAGE_NFS       ClientSocketAddress;

} NFS_OPEN_ECP_CONTEXT, *PNFS_OPEN_ECP_CONTEXT, **PPNFS_OPEN_ECP_CONTEXT;











extern const GUID  GUID_ECP_SRV_OPEN;
#line 21345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _SRV_OPEN_ECP_CONTEXT {

    
    
    

    PUNICODE_STRING ShareName;

    
    
    

    PSOCKADDR_STORAGE_NFS SocketAddress;

    
    
    

    BOOLEAN OplockBlockState;
    BOOLEAN OplockAppState;
    BOOLEAN OplockFinalState;

} SRV_OPEN_ECP_CONTEXT, *PSRV_OPEN_ECP_CONTEXT;





#line 21375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

















































#line 21425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





















#line 21447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





















































































































































































































#line 21661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




















































































#line 21746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










extern const GUID  ECP_TYPE_CLFS_CREATE_CONTAINER;
#line 21761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









extern const GUID  GUID_ECP_CREATE_REDIRECTION;
#line 21775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _CREATE_REDIRECTION_ECP_CONTEXT {

    
    
    

    USHORT Size;

    
    
    

    USHORT Flags;

    
    
    

    FILE_ID_128 FileId;

    
    
    

    GUID VolumeGuid;

} CREATE_REDIRECTION_ECP_CONTEXT, *PCREATE_REDIRECTION_ECP_CONTEXT;


























#line 21835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















































































































































#line 21980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










typedef enum _FSRTL_CHANGE_BACKING_TYPE {

    ChangeDataControlArea,
    ChangeImageControlArea,
    ChangeSharedCacheMap

} FSRTL_CHANGE_BACKING_TYPE, *PFSRTL_CHANGE_BACKING_TYPE;

 
 
__declspec(dllimport)
NTSTATUS
FsRtlChangeBackingFileObject (
      PFILE_OBJECT CurrentFileObject,
      PFILE_OBJECT NewFileObject,
      FSRTL_CHANGE_BACKING_TYPE ChangeBackingType,
      ULONG Flags                
    );

#line 22010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










 
 
__declspec(dllimport)
NTSTATUS
FsRtlLogCcFlushError(
      PUNICODE_STRING FileName,
      PDEVICE_OBJECT DeviceObject,
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      NTSTATUS FlushError,
      ULONG Flags
    );

#line 22033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








 
__declspec(dllimport)
BOOLEAN
FsRtlAreVolumeStartupApplicationsComplete(
    void
    );

#line 22049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









__declspec(dllimport)
ULONG
FsRtlQueryMaximumVirtualDiskNestingLevel (
    void
    );





__declspec(dllimport)
NTSTATUS
FsRtlGetVirtualDiskNestingLevel (
      PDEVICE_OBJECT DeviceObject,
      PULONG NestingLevel,
      PULONG NestingFlags
    );








#line 22084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 22099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"































#line 22131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


















































#line 22182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






NTSTATUS
FsRtlQueryInformationFile(
      PFILE_OBJECT FileObject,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass,
      PULONG RetFileInformationSize
    );

#line 22198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











#line 22210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"











#line 22222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








#line 22231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















#line 22247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







#line 22255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















#line 22271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













typedef struct _PUBLIC_BCB {

    
    
    
    
    

    CSHORT NodeTypeCode;
    CSHORT NodeByteSize;

    
    
    

    ULONG MappedLength;
    LARGE_INTEGER MappedFileOffset;
} PUBLIC_BCB, *PPUBLIC_BCB;





typedef struct _CC_FILE_SIZES {

    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER FileSize;
    LARGE_INTEGER ValidDataLength;

} CC_FILE_SIZES, *PCC_FILE_SIZES;





typedef struct _READ_AHEAD_PARAMETERS {

    CSHORT NodeByteSize;

    
    
    

    ULONG Granularity;

    
    
    
    
    
    
    
    
    
    
    

    ULONG PipelinedRequestSize;

    
    
    
    

    ULONG ReadAheadGrowthPercentage;

} READ_AHEAD_PARAMETERS, *PREAD_AHEAD_PARAMETERS;























typedef
BOOLEAN (*PACQUIRE_FOR_LAZY_WRITE) (
       PVOID Context,
       BOOLEAN Wait
     );





typedef
void (*PRELEASE_FROM_LAZY_WRITE) (
       PVOID Context
     );





typedef
BOOLEAN (*PACQUIRE_FOR_READ_AHEAD) (
       PVOID Context,
       BOOLEAN Wait
     );





typedef
void (*PRELEASE_FROM_READ_AHEAD) (
       PVOID Context
     );

typedef struct _CACHE_MANAGER_CALLBACKS {

    PACQUIRE_FOR_LAZY_WRITE AcquireForLazyWrite;
    PRELEASE_FROM_LAZY_WRITE ReleaseFromLazyWrite;
    PACQUIRE_FOR_READ_AHEAD AcquireForReadAhead;
    PRELEASE_FROM_READ_AHEAD ReleaseFromReadAhead;

} CACHE_MANAGER_CALLBACKS, *PCACHE_MANAGER_CALLBACKS;






typedef struct _CACHE_UNINITIALIZE_EVENT {
    struct _CACHE_UNINITIALIZE_EVENT *Next;
    KEVENT Event;
} CACHE_UNINITIALIZE_EVENT, *PCACHE_UNINITIALIZE_EVENT;





typedef
void (*PDIRTY_PAGE_ROUTINE) (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      PLARGE_INTEGER OldestLsn,
      PLARGE_INTEGER NewestLsn,
      PVOID Context1,
      PVOID Context2
    );





typedef
void (*PFLUSH_TO_LSN) (
      PVOID LogHandle,
      LARGE_INTEGER Lsn
    );





typedef
void (*PQUERY_LOG_USAGE) (
      PVOID LogHandle,
      PUSHORT PercentageFull
    );






typedef
BOOLEAN (*PASYNC_READ_COMPLETION_CALLBACK) (
       PVOID Context
     );











extern ULONG CcFastMdlReadWait;





typedef struct _CC_ASYNC_READ_CONTEXT {

    
    
    

    PASYNC_READ_COMPLETION_CALLBACK CompletionRoutine;

    
    
    

    PVOID Context;

    
    
    

    PMDL Mdl;

    
    
    
    

    KPROCESSOR_MODE RequestorMode;

    
    
    

    ULONG NestingLevel;

} CC_ASYNC_READ_CONTEXT, *PCC_ASYNC_READ_CONTEXT;






__declspec(dllimport)
void
CcInitializeCacheMap (
      PFILE_OBJECT FileObject,
      PCC_FILE_SIZES FileSizes,
      BOOLEAN PinAccess,
      PCACHE_MANAGER_CALLBACKS Callbacks,
      PVOID LazyWriteContext
    );
#line 22538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcUninitializeCacheMap (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER TruncateSize,
      PCACHE_UNINITIALIZE_EVENT UninitializeEvent
    );
#line 22548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetFileSizes (
      PFILE_OBJECT FileObject,
      PCC_FILE_SIZES FileSizes
    );
#line 22557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
NTSTATUS
CcSetFileSizesEx (
      PFILE_OBJECT FileObject,
      PCC_FILE_SIZES FileSizes
    );
#line 22566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












































__declspec(dllimport)
BOOLEAN
CcPurgeCacheSection (
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG Flags
    );











#line 22630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
void
CcCoherencyFlushAndPurgeCache (
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      PIO_STATUS_BLOCK IoStatus,
      ULONG Flags
    );
#line 22645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetDirtyPageThreshold (
      PFILE_OBJECT FileObject,
      ULONG DirtyPageThreshold
    );
#line 22654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcFlushCache (
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      PIO_STATUS_BLOCK IoStatus
    );
#line 22665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
LARGE_INTEGER
CcGetFlushedValidData (
      PSECTION_OBJECT_POINTERS SectionObjectPointer,
      BOOLEAN BcbListHeld
    );
#line 22675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcZeroData (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER StartOffset,
      PLARGE_INTEGER EndOffset,
      BOOLEAN Wait
    );
#line 22686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PVOID
CcRemapBcb (
      PVOID Bcb
    );
#line 22694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcRepinBcb (
      PVOID Bcb
    );
#line 22702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcUnpinRepinnedBcb (
      PVOID Bcb,
      BOOLEAN WriteThrough,
      PIO_STATUS_BLOCK IoStatus
    );
#line 22712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PFILE_OBJECT
CcGetFileObjectFromSectionPtrs (
      PSECTION_OBJECT_POINTERS SectionObjectPointer
    );
#line 22720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PFILE_OBJECT
CcGetFileObjectFromSectionPtrsRef (
      PSECTION_OBJECT_POINTERS SectionObjectPointer
    );
#line 22728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
PFILE_OBJECT
CcGetFileObjectFromBcb (
      PVOID Bcb
    );
#line 22736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
















__declspec(dllimport)
BOOLEAN
CcCopyWriteWontFlush (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length
    );


#line 22762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcCanIWrite (
      PFILE_OBJECT FileObject,
      ULONG BytesToWrite,
      BOOLEAN Wait,
      UCHAR Retrying
    );
#line 22773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef
void (*PCC_POST_DEFERRED_WRITE) (
      PVOID Context1,
      PVOID Context2
    );


__declspec(dllimport)
void
CcDeferWrite (
      PFILE_OBJECT FileObject,
      PCC_POST_DEFERRED_WRITE PostRoutine,
      PVOID Context1,
      PVOID Context2,
      ULONG BytesToWrite,
      BOOLEAN Retrying
    );
#line 22792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"







__declspec(dllimport)
BOOLEAN
CcCopyRead (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      PVOID Buffer,
      PIO_STATUS_BLOCK IoStatus
    );
#line 22810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcFastCopyRead (
      PFILE_OBJECT FileObject,
      ULONG FileOffset,
      ULONG Length,
      ULONG PageCount,
      PVOID Buffer,
      PIO_STATUS_BLOCK IoStatus
    );
#line 22823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcCopyWrite (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Wait,
      PVOID Buffer
    );
#line 22835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcFastCopyWrite (
      PFILE_OBJECT FileObject,
      ULONG FileOffset,
      ULONG Length,
      PVOID Buffer
    );
#line 22846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










__declspec(dllimport)
void
CcMdlRead (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus
    );
#line 22866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
void
CcMdlReadComplete (
      PFILE_OBJECT FileObject,
      PMDL MdlChain
    );
#line 22878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcPrepareMdlWrite (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      PMDL *MdlChain,
      PIO_STATUS_BLOCK IoStatus
    );
#line 22890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
void
CcMdlWriteComplete (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      PMDL MdlChain
    );
#line 22902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcMdlWriteAbort (
      PFILE_OBJECT FileObject,
      PMDL MdlChain
    );
#line 22911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



















__declspec(dllimport)
void
CcScheduleReadAhead (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length
    );
#line 22938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








__declspec(dllimport)
NTSTATUS
CcWaitForCurrentLazyWriterActivity (
    void
    );
#line 22952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






__declspec(dllimport)
void
CcSetReadAheadGranularity (
      PFILE_OBJECT FileObject,
      ULONG Granularity
    );
#line 22965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













#line 22979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













#line 22993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 23008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 23019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














#line 23034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

























































































































__declspec(dllimport)
BOOLEAN
CcPinRead (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG Flags,
     PVOID *Bcb,
     PVOID *Buffer
    );
#line 23166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcMapData (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG Flags,
     PVOID *Bcb,
     PVOID *Buffer
    );












#line 23191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcPinMappedData (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      ULONG Flags,
      PVOID *Bcb
    );
#line 23203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcPreparePinWrite (
      PFILE_OBJECT FileObject,
      PLARGE_INTEGER FileOffset,
      ULONG Length,
      BOOLEAN Zero,
      ULONG Flags,
     PVOID *Bcb,
     PVOID *Buffer
    );
#line 23217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetDirtyPinnedData (
      PVOID BcbVoid,
      PLARGE_INTEGER Lsn
    );
#line 23226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcUnpinData (
      PVOID Bcb
    );
#line 23234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetBcbOwnerPointer (
      PVOID Bcb,
      PVOID OwnerPointer
    );
#line 23243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcUnpinDataForThread (
      PVOID Bcb,
      ERESOURCE_THREAD ResourceThreadId
    );
#line 23252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetAdditionalCacheAttributes (
      PFILE_OBJECT FileObject,
      BOOLEAN DisableReadAhead,
      BOOLEAN DisableWriteBehind
    );
#line 23262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






















































#line 23317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetParallelFlushFile (
      PFILE_OBJECT FileObject,
      BOOLEAN EnableParallelFlush
    );
#line 23326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
void
CcSetLogHandleForFile (
      PFILE_OBJECT FileObject,
      PVOID LogHandle,
      PFLUSH_TO_LSN FlushToLsnRoutine
    );
#line 23336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
LARGE_INTEGER
CcGetDirtyPages (
      PVOID LogHandle,
      PDIRTY_PAGE_ROUTINE DirtyPageRoutine,
      PVOID Context1,
      PVOID Context2
    );
#line 23348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcIsThereDirtyData (
      PVPB Vpb
    );
#line 23356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


__declspec(dllimport)
BOOLEAN
CcIsThereDirtyDataEx (
      PVPB Vpb,
      PULONG NumberOfDirtyPages
    );
#line 23365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 23376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



#line 23380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef WCHAR SEC_WCHAR;
typedef CHAR SEC_CHAR;












typedef struct _SecHandle
{
    ULONG_PTR dwLower ;
    ULONG_PTR dwUpper ;
} SecHandle, * PSecHandle ;


#line 23403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"














typedef SecHandle CredHandle;
typedef PSecHandle PCredHandle;

typedef SecHandle CtxtHandle;
typedef PSecHandle PCtxtHandle;

typedef LARGE_INTEGER _SECURITY_INTEGER, SECURITY_INTEGER, *PSECURITY_INTEGER; 
typedef SECURITY_INTEGER TimeStamp;                 
typedef SECURITY_INTEGER * PTimeStamp;      
typedef UNICODE_STRING SECURITY_STRING, *PSECURITY_STRING;  







typedef struct _SecPkgInfoW
{
    unsigned long fCapabilities;        
    unsigned short wVersion;            
    unsigned short wRPCID;              
    unsigned long cbMaxToken;           



    SEC_WCHAR * Name;           




    SEC_WCHAR * Comment;        
} SecPkgInfoW, * PSecPkgInfoW;































                                                            
                                                            
                                                            
                                                            























typedef struct _SecBuffer {
    unsigned long cbBuffer;             
    unsigned long BufferType;           



      void  * pvBuffer;            
#line 23516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} SecBuffer, * PSecBuffer;

typedef struct _SecBufferDesc {
    unsigned long ulVersion;            
    unsigned long cBuffers;             



      PSecBuffer pBuffers;                
} SecBufferDesc,  * PSecBufferDesc;




































typedef struct _SEC_NEGOTIATION_INFO {
    unsigned long       Size;           
    unsigned long       NameLength;     
    SEC_WCHAR * Name;           
    void *      Reserved;       
} SEC_NEGOTIATION_INFO, * PSEC_NEGOTIATION_INFO ;

typedef struct _SEC_CHANNEL_BINDINGS {
    unsigned long  dwInitiatorAddrType;
    unsigned long  cbInitiatorLength;
    unsigned long  dwInitiatorOffset;
    unsigned long  dwAcceptorAddrType;
    unsigned long  cbAcceptorLength;
    unsigned long  dwAcceptorOffset;
    unsigned long  cbApplicationDataLength;
    unsigned long  dwApplicationDataOffset;
} SEC_CHANNEL_BINDINGS, * PSEC_CHANNEL_BINDINGS ;


typedef enum _SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT
{
    SecApplicationProtocolNegotiationExt_None,
    SecApplicationProtocolNegotiationExt_NPN,
    SecApplicationProtocolNegotiationExt_ALPN
} SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT, *PSEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT;

typedef struct _SEC_APPLICATION_PROTOCOL_LIST {
    SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT ProtoNegoExt; 
    unsigned short ProtocolListSize;                       
    unsigned char ProtocolList[1];             
} SEC_APPLICATION_PROTOCOL_LIST, *PSEC_APPLICATION_PROTOCOL_LIST;

typedef struct _SEC_APPLICATION_PROTOCOLS {
    unsigned long ProtocolListsSize;                            
    SEC_APPLICATION_PROTOCOL_LIST ProtocolLists[1]; 
} SEC_APPLICATION_PROTOCOLS, *PSEC_APPLICATION_PROTOCOLS;


typedef struct _SEC_SRTP_PROTECTION_PROFILES {
    unsigned short ProfilesSize;                
    unsigned short ProfilesList[1]; 
} SEC_SRTP_PROTECTION_PROFILES, *PSEC_SRTP_PROTECTION_PROFILES;

typedef struct _SEC_SRTP_MASTER_KEY_IDENTIFIER {
    unsigned char MasterKeyIdentifierSize;             
    unsigned char MasterKeyIdentifier[1];  
} SEC_SRTP_MASTER_KEY_IDENTIFIER, *PSEC_SRTP_MASTER_KEY_IDENTIFIER;


typedef struct _SEC_TOKEN_BINDING {
    unsigned char MajorVersion;                 
    unsigned char MinorVersion;                 
    unsigned short KeyParametersSize;           
    unsigned char KeyParameters[1]; 
} SEC_TOKEN_BINDING, *PSEC_TOKEN_BINDING;

typedef struct _SEC_PRESHAREDKEY {
    unsigned short KeySize;                     
    unsigned char  Key[1];          
} SEC_PRESHAREDKEY, *PSEC_PRESHAREDKEY;

typedef struct _SEC_PRESHAREDKEY_IDENTITY {
    unsigned short KeyIdentitySize;             
    unsigned char  KeyIdentity[1];  
} SEC_PRESHAREDKEY_IDENTITY, *PSEC_PRESHAREDKEY_IDENTITY;

typedef struct _SEC_DTLS_MTU {
    unsigned short PathMTU;                     
} SEC_DTLS_MTU, *PSEC_DTLS_MTU;

































































































































































typedef struct _SecPkgCredentials_NamesW
{



    SEC_WCHAR * sUserName;

} SecPkgCredentials_NamesW, * PSecPkgCredentials_NamesW;





typedef struct _SecPkgCredentials_SSIProviderW
{
    SEC_WCHAR * sProviderName;
    unsigned long       ProviderInfoLength;
    char *      ProviderInfo;
} SecPkgCredentials_SSIProviderW, * PSecPkgCredentials_SSIProviderW;
#line 23812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _SecPkgCredentials_KdcProxySettingsW
{
    ULONG  Version;             
    ULONG  Flags;               
    USHORT ProxyServerOffset;   
    USHORT ProxyServerLength;
    USHORT ClientTlsCredOffset; 
    USHORT ClientTlsCredLength;
} SecPkgCredentials_KdcProxySettingsW, *PSecPkgCredentials_KdcProxySettingsW;


typedef struct _SecPkgCredentials_Cert
{
    unsigned long  EncodedCertSize;
    unsigned char* EncodedCert;
} SecPkgCredentials_Cert, * PSecPkgCredentials_Cert;
































































typedef struct _SecPkgContext_SubjectAttributes {
    void* AttributeInfo; 
} SecPkgContext_SubjectAttributes, *PSecPkgContext_SubjectAttributes;








typedef enum _SECPKG_CRED_CLASS {
    SecPkgCredClass_None = 0,  
    SecPkgCredClass_Ephemeral = 10,  
    SecPkgCredClass_PersistedGeneric = 20, 
    SecPkgCredClass_PersistedSpecific = 30, 
    SecPkgCredClass_Explicit = 40, 
} SECPKG_CRED_CLASS, * PSECPKG_CRED_CLASS;

typedef struct _SecPkgContext_CredInfo {
    SECPKG_CRED_CLASS CredClass;
    unsigned long IsPromptingNeeded;
} SecPkgContext_CredInfo, *PSecPkgContext_CredInfo;

typedef struct _SecPkgContext_NegoPackageInfo
{
    unsigned long PackageMask;
} SecPkgContext_NegoPackageInfo, * PSecPkgContext_NegoPackageInfo;

typedef struct _SecPkgContext_NegoStatus
{
    unsigned long LastStatus;
} SecPkgContext_NegoStatus, * PSecPkgContext_NegoStatus;

typedef struct _SecPkgContext_Sizes
{
    unsigned long cbMaxToken;
    unsigned long cbMaxSignature;
    unsigned long cbBlockSize;
    unsigned long cbSecurityTrailer;
} SecPkgContext_Sizes, * PSecPkgContext_Sizes;

typedef struct _SecPkgContext_StreamSizes
{
    unsigned long   cbHeader;
    unsigned long   cbTrailer;
    unsigned long   cbMaximumMessage;
    unsigned long   cBuffers;
    unsigned long   cbBlockSize;
} SecPkgContext_StreamSizes, * PSecPkgContext_StreamSizes;

typedef SecPkgContext_StreamSizes SecPkgContext_DatagramSizes;
typedef PSecPkgContext_StreamSizes PSecPkgContext_DatagramSizes;

typedef struct _SecPkgContext_NamesW
{
    SEC_WCHAR * sUserName;
} SecPkgContext_NamesW, * PSecPkgContext_NamesW;




typedef struct _SecPkgContext_Lifespan
{
    TimeStamp tsStart;
    TimeStamp tsExpiry;
} SecPkgContext_Lifespan, * PSecPkgContext_Lifespan;

typedef struct _SecPkgContext_DceInfo
{
    unsigned long AuthzSvc;
    void * pPac;
} SecPkgContext_DceInfo, * PSecPkgContext_DceInfo;


typedef struct _SecPkgContext_KeyInfoW
{
    SEC_WCHAR * sSignatureAlgorithmName;
    SEC_WCHAR * sEncryptAlgorithmName;
    unsigned long       KeySize;
    unsigned long       SignatureAlgorithm;
    unsigned long       EncryptAlgorithm;
} SecPkgContext_KeyInfoW, * PSecPkgContext_KeyInfoW;




typedef struct _SecPkgContext_AuthorityW
{
    SEC_WCHAR * sAuthorityName;
} SecPkgContext_AuthorityW, * PSecPkgContext_AuthorityW;




typedef struct _SecPkgContext_ProtoInfoW
{
    SEC_WCHAR * sProtocolName;
    unsigned long majorVersion;
    unsigned long minorVersion;
} SecPkgContext_ProtoInfoW, * PSecPkgContext_ProtoInfoW;




typedef struct _SecPkgContext_PasswordExpiry
{
    TimeStamp tsPasswordExpires;
} SecPkgContext_PasswordExpiry, * PSecPkgContext_PasswordExpiry;


typedef struct _SecPkgContext_LogoffTime
{
    TimeStamp tsLogoffTime;
} SecPkgContext_LogoffTime, * PSecPkgContext_LogoffTime;
#line 24014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _SecPkgContext_SessionKey
{
    unsigned long SessionKeyLength;
      unsigned char * SessionKey;
} SecPkgContext_SessionKey, *PSecPkgContext_SessionKey;


typedef struct _SecPkgContext_NegoKeys
{
  unsigned long KeyType;
  unsigned short KeyLength;
    unsigned char* KeyValue;
  unsigned long  VerifyKeyType;
  unsigned short VerifyKeyLength;
    unsigned char* VerifyKeyValue;
} SecPkgContext_NegoKeys, * PSecPkgContext_NegoKeys;

typedef struct _SecPkgContext_PackageInfoW
{
    PSecPkgInfoW PackageInfo;
} SecPkgContext_PackageInfoW, * PSecPkgContext_PackageInfoW;


typedef struct _SecPkgContext_UserFlags
{
    unsigned long UserFlags;
} SecPkgContext_UserFlags, * PSecPkgContext_UserFlags;

typedef struct _SecPkgContext_Flags
{
    unsigned long Flags;
} SecPkgContext_Flags, * PSecPkgContext_Flags;



typedef struct _SecPkgContext_NegotiationInfoW
{
    PSecPkgInfoW    PackageInfo ;
    unsigned long   NegotiationState ;
} SecPkgContext_NegotiationInfoW, * PSecPkgContext_NegotiationInfoW ;






typedef struct _SecPkgContext_CredentialNameW
{
    unsigned long CredentialType;
    SEC_WCHAR *sCredentialName;
} SecPkgContext_CredentialNameW, * PSecPkgContext_CredentialNameW;

#line 24068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



typedef void
(__stdcall * SEC_GET_KEY_FN) (
    void * Arg,                 
    void * Principal,           
    unsigned long KeyVer,               
    void * * Key,       
    SECURITY_STATUS * Status    
    );











__declspec(dllimport)
SECURITY_STATUS __stdcall
AcquireCredentialsHandleW(

       PSECURITY_STRING pPrincipal,
           PSECURITY_STRING pPackage,



#line 24100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
           unsigned long fCredentialUse,       
       void * pvLogonId,                   
       void * pAuthData,                   
       SEC_GET_KEY_FN pGetKeyFn,           
       void * pvGetKeyArgument,            
          PCredHandle phCredential,           
      PTimeStamp ptsExpiry                
    );

typedef SECURITY_STATUS
(__stdcall * ACQUIRE_CREDENTIALS_HANDLE_FN_W)(

    PSECURITY_STRING,
    PSECURITY_STRING,



#line 24118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    unsigned long,
    void *,
    void *,
    SEC_GET_KEY_FN,
    void *,
    PCredHandle,
    PTimeStamp);




__declspec(dllimport)
SECURITY_STATUS __stdcall
FreeCredentialsHandle(
      PCredHandle phCredential            
    );

typedef SECURITY_STATUS
(__stdcall * FREE_CREDENTIALS_HANDLE_FN)(
    PCredHandle );

__declspec(dllimport)
SECURITY_STATUS __stdcall
AddCredentialsW(
           PCredHandle hCredentials,

       PSECURITY_STRING pPrincipal,
           PSECURITY_STRING pPackage,



#line 24150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
           unsigned long fCredentialUse,       
       void * pAuthData,           
       SEC_GET_KEY_FN pGetKeyFn,           
       void * pvGetKeyArgument,    
      PTimeStamp ptsExpiry                
    );

typedef SECURITY_STATUS
(__stdcall * ADD_CREDENTIALS_FN_W)(
    PCredHandle,

    PSECURITY_STRING,
    PSECURITY_STRING,



#line 24167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    unsigned long,
    void *,
    SEC_GET_KEY_FN,
    void *,
    PTimeStamp);

SECURITY_STATUS __stdcall
AddCredentialsA(
      PCredHandle hCredentials,
      LPSTR pszPrincipal,             
      LPSTR pszPackage,                   
      unsigned long fCredentialUse,       
      void * pAuthData,           
      SEC_GET_KEY_FN pGetKeyFn,           
      void * pvGetKeyArgument,    
      PTimeStamp ptsExpiry                
    );

typedef SECURITY_STATUS
(__stdcall * ADD_CREDENTIALS_FN_A)(
    PCredHandle,
    SEC_CHAR *,
    SEC_CHAR *,
    unsigned long,
    void *,
    SEC_GET_KEY_FN,
    void *,
    PTimeStamp);







#line 24203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 24205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

#pragma region Desktop Family










typedef struct _SspiAsyncContext SspiAsyncContext;




typedef void (*SspiAsyncNotifyCallback)(
          SspiAsyncContext* Handle,
      PVOID CallbackData
);




SspiAsyncContext* SspiCreateAsyncContext();




void SspiFreeAsyncContext(
      SspiAsyncContext* Handle
);







NTSTATUS SspiReinitAsyncContext(
      SspiAsyncContext* Handle
);




SECURITY_STATUS SspiSetAsyncNotifyCallback(
      SspiAsyncContext* Context,
      SspiAsyncNotifyCallback Callback,
      void* CallbackData
);





BOOLEAN SspiAsyncContextRequiresNotify(
      SspiAsyncContext* AsyncContext
);





SECURITY_STATUS SspiGetAsyncCallStatus(
      SspiAsyncContext* Handle
);

SECURITY_STATUS SspiAcquireCredentialsHandleAsyncW(
        SspiAsyncContext* AsyncContext,

       PSECURITY_STRING pszPrincipal,            
           PSECURITY_STRING pszPackage,              



#line 24284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
           unsigned long fCredentialUse,             
       void * pvLogonId,                         
       void * pAuthData,                         
       SEC_GET_KEY_FN pGetKeyFn,                 
       void * pvGetKeyArgument,                  
           PCredHandle phCredential,                 
       PTimeStamp ptsExpiry                      
);

SECURITY_STATUS SspiAcquireCredentialsHandleAsyncA(
        SspiAsyncContext* AsyncContext,
       LPSTR pszPrincipal,                       
           LPSTR pszPackage,                         
           unsigned long fCredentialUse,             
       void * pvLogonId,                         
       void * pAuthData,                         
       SEC_GET_KEY_FN pGetKeyFn,                 
       void * pvGetKeyArgument,                  
           PCredHandle phCredential,                 
       PTimeStamp ptsExpiry                      
);

SECURITY_STATUS SspiInitializeSecurityContextAsyncW(
          SspiAsyncContext* AsyncContext,
         PCredHandle phCredential,               
         PCtxtHandle phContext,                  

         PSECURITY_STRING pszTargetName,         


#line 24315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
             unsigned long fContextReq,              
             unsigned long Reserved1,                
             unsigned long TargetDataRep,            
         PSecBufferDesc pInput,                  
             unsigned long Reserved2,                
         PCtxtHandle phNewContext,               
         PSecBufferDesc pOutput,                 
             unsigned long * pfContextAttr,          
         PTimeStamp ptsExpiry                    
);

SECURITY_STATUS SspiInitializeSecurityContextAsyncA(
          SspiAsyncContext* AsyncContext,
         PCredHandle phCredential,               
         PCtxtHandle phContext,                  
         LPSTR pszTargetName,                    
             unsigned long fContextReq,              
             unsigned long Reserved1,                
             unsigned long TargetDataRep,            
         PSecBufferDesc pInput,                  
             unsigned long Reserved2,                
         PCtxtHandle phNewContext,               
         PSecBufferDesc pOutput,                 
             unsigned long * pfContextAttr,          
         PTimeStamp ptsExpiry                    
);

SECURITY_STATUS SspiAcceptSecurityContextAsync(
        SspiAsyncContext* AsyncContext,       
       PCredHandle phCredential,               
       PCtxtHandle phContext,                  
       PSecBufferDesc pInput,                  
           unsigned long fContextReq,              
           unsigned long TargetDataRep,            
       PCtxtHandle phNewContext,               
       PSecBufferDesc pOutput,                 
           unsigned long* pfContextAttr,           
       PTimeStamp ptsExpiry                    
);

SECURITY_STATUS SspiFreeCredentialsHandleAsync(
        SspiAsyncContext* AsyncContext,
           PCredHandle phCredential                  
);

SECURITY_STATUS SspiDeleteSecurityContextAsync(
        SspiAsyncContext* AsyncContext,
           PCtxtHandle phContext                     
);







#line 24372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 24374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 24376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family




































































#line 24448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"








__declspec(dllimport)
SECURITY_STATUS __stdcall
InitializeSecurityContextW(
         PCredHandle phCredential,               
         PCtxtHandle phContext,                  

      PSECURITY_STRING pTargetName,


#line 24466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
             unsigned long fContextReq,              
             unsigned long Reserved1,                
             unsigned long TargetDataRep,            
         PSecBufferDesc pInput,                  
             unsigned long Reserved2,                
      PCtxtHandle phNewContext,               
      PSecBufferDesc pOutput,                 
            unsigned long * pfContextAttr,  
        PTimeStamp ptsExpiry                    
    );

typedef SECURITY_STATUS
(__stdcall * INITIALIZE_SECURITY_CONTEXT_FN_W)(
    PCredHandle,
    PCtxtHandle,

    PSECURITY_STRING,


#line 24486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    unsigned long,
    unsigned long,
    unsigned long,
    PSecBufferDesc,
    unsigned long,
    PCtxtHandle,
    PSecBufferDesc,
    unsigned long *,
    PTimeStamp);




__declspec(dllimport)
SECURITY_STATUS __stdcall
AcceptSecurityContext(
         PCredHandle phCredential,               
         PCtxtHandle phContext,                  
         PSecBufferDesc pInput,                  
             unsigned long fContextReq,              
             unsigned long TargetDataRep,            
      PCtxtHandle phNewContext,               
      PSecBufferDesc pOutput,                 
            unsigned long * pfContextAttr,  
        PTimeStamp ptsExpiry                    
    );

typedef SECURITY_STATUS
(__stdcall * ACCEPT_SECURITY_CONTEXT_FN)(
    PCredHandle,
    PCtxtHandle,
    PSecBufferDesc,
    unsigned long,
    unsigned long,
    PCtxtHandle,
    PSecBufferDesc,
    unsigned long *,
    PTimeStamp);



SECURITY_STATUS __stdcall
CompleteAuthToken(
      PCtxtHandle phContext,              
      PSecBufferDesc pToken               
    );

typedef SECURITY_STATUS
(__stdcall * COMPLETE_AUTH_TOKEN_FN)(
    PCtxtHandle,
    PSecBufferDesc);

__declspec(dllimport)
 
SECURITY_STATUS __stdcall
ImpersonateSecurityContext(
      PCtxtHandle phContext               
    );

typedef SECURITY_STATUS
(__stdcall * IMPERSONATE_SECURITY_CONTEXT_FN)(
    PCtxtHandle);


__declspec(dllimport)
SECURITY_STATUS __stdcall
RevertSecurityContext(
      PCtxtHandle phContext               
    );

typedef SECURITY_STATUS
(__stdcall * REVERT_SECURITY_CONTEXT_FN)(
    PCtxtHandle);


__declspec(dllimport)
SECURITY_STATUS __stdcall
QuerySecurityContextToken(
       PCtxtHandle phContext,
      void * * Token
    );

typedef SECURITY_STATUS
(__stdcall * QUERY_SECURITY_CONTEXT_TOKEN_FN)(
    PCtxtHandle, void * *);


__declspec(dllimport)
SECURITY_STATUS __stdcall
DeleteSecurityContext(
      PCtxtHandle phContext               
    );

typedef SECURITY_STATUS
(__stdcall * DELETE_SECURITY_CONTEXT_FN)(
    PCtxtHandle);


__declspec(dllimport)
SECURITY_STATUS __stdcall
ApplyControlToken(
      PCtxtHandle phContext,              
      PSecBufferDesc pInput               
    );

typedef SECURITY_STATUS
(__stdcall * APPLY_CONTROL_TOKEN_FN)(
    PCtxtHandle, PSecBufferDesc);


__declspec(dllimport)
SECURITY_STATUS __stdcall
QueryContextAttributesW(
       PCtxtHandle phContext,              
       unsigned long ulAttribute,          
      void * pBuffer              
    );

typedef SECURITY_STATUS
(__stdcall * QUERY_CONTEXT_ATTRIBUTES_FN_W)(
    PCtxtHandle,
    unsigned long,
    void *);

SECURITY_STATUS __stdcall
QueryContextAttributesExW(
       PCtxtHandle phContext,              
       unsigned long ulAttribute,          
      void * pBuffer,    
       unsigned long cbBuffer              
    );

typedef SECURITY_STATUS
(__stdcall * QUERY_CONTEXT_ATTRIBUTES_EX_FN_W)(
    PCtxtHandle,
    unsigned long,
    void *,
    unsigned long);








SECURITY_STATUS __stdcall
SetContextAttributesW(
      PCtxtHandle phContext,                   
      unsigned long ulAttribute,               
      void * pBuffer, 
      unsigned long cbBuffer                   
    );

typedef SECURITY_STATUS
(__stdcall * SET_CONTEXT_ATTRIBUTES_FN_W)(
    PCtxtHandle,
    unsigned long,
    void *,
    unsigned long );

#line 24648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




__declspec(dllimport)
SECURITY_STATUS __stdcall
QueryCredentialsAttributesW(
         PCredHandle phCredential,           
         unsigned long ulAttribute,          
      void * pBuffer              
    );

typedef SECURITY_STATUS
(__stdcall * QUERY_CREDENTIALS_ATTRIBUTES_FN_W)(
    PCredHandle,
    unsigned long,
    void *);

SECURITY_STATUS __stdcall
QueryCredentialsAttributesExW(
         PCredHandle phCredential,           
         unsigned long ulAttribute,          
      void * pBuffer, 
         unsigned long cbBuffer              
    );

typedef SECURITY_STATUS
(__stdcall * QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W)(
    PCredHandle,
    unsigned long,
    void *,
    unsigned long);








__declspec(dllimport)
SECURITY_STATUS __stdcall
SetCredentialsAttributesW(
      PCredHandle phCredential,                
      unsigned long ulAttribute,               
      void * pBuffer, 
      unsigned long cbBuffer                   
    );

typedef SECURITY_STATUS
(__stdcall * SET_CREDENTIALS_ATTRIBUTES_FN_W)(
    PCredHandle,
    unsigned long,
    void *,
    unsigned long );

#line 24705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




SECURITY_STATUS __stdcall
FreeContextBuffer(
      PVOID pvContextBuffer      
    );

typedef SECURITY_STATUS
(__stdcall * FREE_CONTEXT_BUFFER_FN)(
      PVOID
    );







__declspec(dllimport)
SECURITY_STATUS __stdcall
MakeSignature(
      PCtxtHandle phContext,              
      unsigned long fQOP,                 
      PSecBufferDesc pMessage,            
      unsigned long MessageSeqNo          
    );

typedef SECURITY_STATUS
(__stdcall * MAKE_SIGNATURE_FN)(
    PCtxtHandle,
    unsigned long,
    PSecBufferDesc,
    unsigned long);


__declspec(dllimport)
SECURITY_STATUS __stdcall
VerifySignature(
       PCtxtHandle phContext,              
       PSecBufferDesc pMessage,            
       unsigned long MessageSeqNo,         
      unsigned long * pfQOP       
    );

typedef SECURITY_STATUS
(__stdcall * VERIFY_SIGNATURE_FN)(
    PCtxtHandle,
    PSecBufferDesc,
    unsigned long,
    unsigned long *);





SECURITY_STATUS __stdcall
EncryptMessage(      PCtxtHandle         phContext,
                     unsigned long       fQOP,
                     PSecBufferDesc      pMessage,
                     unsigned long       MessageSeqNo);

typedef SECURITY_STATUS
(__stdcall * ENCRYPT_MESSAGE_FN)(
    PCtxtHandle, unsigned long, PSecBufferDesc, unsigned long);


SECURITY_STATUS __stdcall
DecryptMessage(        PCtxtHandle         phContext,
                       PSecBufferDesc      pMessage,
                       unsigned long       MessageSeqNo,
                  unsigned long *     pfQOP);


typedef SECURITY_STATUS
(__stdcall * DECRYPT_MESSAGE_FN)(
    PCtxtHandle, PSecBufferDesc, unsigned long,
    unsigned long *);








__declspec(dllimport)
SECURITY_STATUS __stdcall
EnumerateSecurityPackagesW(
            unsigned long * pcPackages,     
     PSecPkgInfoW  * ppPackageInfo    
    );

typedef SECURITY_STATUS
(__stdcall * ENUMERATE_SECURITY_PACKAGES_FN_W)(
    unsigned long *,
    PSecPkgInfoW *);




__declspec(dllimport)
SECURITY_STATUS __stdcall
QuerySecurityPackageInfoW(

             PSECURITY_STRING pPackageName,


#line 24815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
     PSecPkgInfoW *ppPackageInfo     
    );

typedef SECURITY_STATUS
(__stdcall * QUERY_SECURITY_PACKAGE_INFO_FN_W)(

    PSECURITY_STRING,


#line 24825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    PSecPkgInfoW *);











__declspec(dllimport)
SECURITY_STATUS __stdcall
ExportSecurityContext(
       PCtxtHandle          phContext,             
       ULONG                fFlags,                
      PSecBuffer           pPackedContext,        
      void * * pToken             
    );

typedef SECURITY_STATUS
(__stdcall * EXPORT_SECURITY_CONTEXT_FN)(
    PCtxtHandle,
    ULONG,
    PSecBuffer,
    void * *
    );

__declspec(dllimport)
SECURITY_STATUS __stdcall
ImportSecurityContextW(

       PSECURITY_STRING     pszPackage,


#line 24862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
       PSecBuffer           pPackedContext,        
       void *               Token,                 
      PCtxtHandle          phContext              
    );

typedef SECURITY_STATUS
(__stdcall * IMPORT_SECURITY_CONTEXT_FN_W)(

    PSECURITY_STRING,


#line 24874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    PSecBuffer,
    void *,
    PCtxtHandle
    );





__declspec(dllimport)
NTSTATUS
__stdcall
SecMakeSPN(
     PUNICODE_STRING ServiceClass,
     PUNICODE_STRING ServiceName,
     PUNICODE_STRING InstanceName ,
     USHORT InstancePort ,
     PUNICODE_STRING Referrer ,
      PUNICODE_STRING Spn,
     PULONG Length ,
     BOOLEAN Allocate
    );



__declspec(dllimport)
NTSTATUS
__stdcall
SecMakeSPNEx(
     PUNICODE_STRING ServiceClass,
     PUNICODE_STRING ServiceName,
     PUNICODE_STRING InstanceName ,
     USHORT InstancePort ,
     PUNICODE_STRING Referrer ,
     PUNICODE_STRING TargetInfo ,
      PUNICODE_STRING Spn,
     PULONG Length ,
     BOOLEAN Allocate
    );



__declspec(dllimport)
NTSTATUS
__stdcall
SecMakeSPNEx2(
     PUNICODE_STRING ServiceClass,
     PUNICODE_STRING ServiceName,
     PUNICODE_STRING InstanceName ,
     USHORT InstancePort ,
     PUNICODE_STRING Referrer ,
     PUNICODE_STRING InTargetInfo ,
      PUNICODE_STRING Spn,
     PULONG TotalSize ,
     BOOLEAN Allocate,
     BOOLEAN IsTargetInfoMarshaled
    );

#line 24933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

__declspec(dllimport)
NTSTATUS
__stdcall
SecLookupAccountSid(
           PSID Sid,
          PULONG NameSize,
        PUNICODE_STRING NameBuffer,
          PULONG DomainSize ,
      PUNICODE_STRING DomainBuffer ,
          PSID_NAME_USE NameUse
    );

__declspec(dllimport)
NTSTATUS
__stdcall
SecLookupAccountName(
             PUNICODE_STRING Name,
          PULONG SidSize,
            PSID Sid,
            PSID_NAME_USE NameUse,
            PULONG DomainSize ,
      PUNICODE_STRING ReferencedDomain 
    );

#line 24959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"



__declspec(dllimport)
NTSTATUS
__stdcall
SecLookupWellKnownSid(
             WELL_KNOWN_SID_TYPE SidType,
            PSID Sid,
             ULONG SidBufferSize,
      PULONG SidSize 
    );

#line 24973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 24976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"






typedef struct _SECURITY_FUNCTION_TABLE_W {
    unsigned long                       dwVersion;
    ENUMERATE_SECURITY_PACKAGES_FN_W    EnumerateSecurityPackagesW;
    QUERY_CREDENTIALS_ATTRIBUTES_FN_W   QueryCredentialsAttributesW;
    ACQUIRE_CREDENTIALS_HANDLE_FN_W     AcquireCredentialsHandleW;
    FREE_CREDENTIALS_HANDLE_FN          FreeCredentialsHandle;
    void *                      Reserved2;
    INITIALIZE_SECURITY_CONTEXT_FN_W    InitializeSecurityContextW;
    ACCEPT_SECURITY_CONTEXT_FN          AcceptSecurityContext;
    COMPLETE_AUTH_TOKEN_FN              CompleteAuthToken;
    DELETE_SECURITY_CONTEXT_FN          DeleteSecurityContext;
    APPLY_CONTROL_TOKEN_FN              ApplyControlToken;
    QUERY_CONTEXT_ATTRIBUTES_FN_W       QueryContextAttributesW;
    IMPERSONATE_SECURITY_CONTEXT_FN     ImpersonateSecurityContext;
    REVERT_SECURITY_CONTEXT_FN          RevertSecurityContext;
    MAKE_SIGNATURE_FN                   MakeSignature;
    VERIFY_SIGNATURE_FN                 VerifySignature;
    FREE_CONTEXT_BUFFER_FN              FreeContextBuffer;
    QUERY_SECURITY_PACKAGE_INFO_FN_W    QuerySecurityPackageInfoW;
    void *                      Reserved3;
    void *                      Reserved4;
    EXPORT_SECURITY_CONTEXT_FN          ExportSecurityContext;
    IMPORT_SECURITY_CONTEXT_FN_W        ImportSecurityContextW;
    ADD_CREDENTIALS_FN_W                AddCredentialsW ;
    void *                      Reserved8;
    QUERY_SECURITY_CONTEXT_TOKEN_FN     QuerySecurityContextToken;
    ENCRYPT_MESSAGE_FN                  EncryptMessage;
    DECRYPT_MESSAGE_FN                  DecryptMessage;

    
    SET_CONTEXT_ATTRIBUTES_FN_W         SetContextAttributesW;
#line 25014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


    
    SET_CREDENTIALS_ATTRIBUTES_FN_W     SetCredentialsAttributesW;
#line 25019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


#line 25022 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
    void *                      Reserved9;
#line 25024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




#line 25029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} SecurityFunctionTableW, * PSecurityFunctionTableW;









__declspec(dllimport)
PSecurityFunctionTableW __stdcall
InitSecurityInterfaceW(
    void
    );

typedef PSecurityFunctionTableW
(__stdcall * INIT_SECURITY_INTERFACE_W)(void);









typedef struct _SEC_WINNT_AUTH_IDENTITY_EX2 {
   unsigned long Version; 
   unsigned short cbHeaderLength;
   unsigned long cbStructureLength;
   unsigned long UserOffset;                
   unsigned short UserLength;               
   unsigned long DomainOffset;              
   unsigned short DomainLength;             
   unsigned long PackedCredentialsOffset;   
   unsigned short PackedCredentialsLength;  
   unsigned long Flags;
   unsigned long PackageListOffset;         
   unsigned short PackageListLength;
} SEC_WINNT_AUTH_IDENTITY_EX2, *PSEC_WINNT_AUTH_IDENTITY_EX2;

#line 25072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"













typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
  unsigned short *User;         
  unsigned long UserLength;     
  unsigned short *Domain;       
  unsigned long DomainLength;   
  unsigned short *Password;     
  unsigned long PasswordLength; 
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;





#line 25100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"









typedef struct _SEC_WINNT_AUTH_IDENTITY_EXW {
    unsigned long Version;
    unsigned long Length;
    unsigned short *User;           
    unsigned long UserLength;       
    unsigned short *Domain;         
    unsigned long DomainLength;     
    unsigned short *Password;       
    unsigned long PasswordLength;   
    unsigned long Flags;
    unsigned short *PackageList;
    unsigned long PackageListLength;
} SEC_WINNT_AUTH_IDENTITY_EXW, *PSEC_WINNT_AUTH_IDENTITY_EXW;




#line 25127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


typedef PVOID PSEC_WINNT_AUTH_IDENTITY_OPAQUE; 


















SECURITY_STATUS
__stdcall
SspiEncodeAuthIdentityAsStrings(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE pAuthIdentity,
     PCWSTR* ppszUserName,
     PCWSTR* ppszDomainName,
     PCWSTR* ppszPackedCredentialsString
    );

SECURITY_STATUS
__stdcall
SspiValidateAuthIdentity(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
    );





SECURITY_STATUS
__stdcall
SspiCopyAuthIdentity(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData,
     PSEC_WINNT_AUTH_IDENTITY_OPAQUE* AuthDataCopy
    );






void
__stdcall
SspiFreeAuthIdentity(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
    );

void
__stdcall
SspiZeroAuthIdentity(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData
    );

void
__stdcall
SspiLocalFree(
      PVOID DataBuffer
    );






SECURITY_STATUS
__stdcall
SspiEncodeStringsAsAuthIdentity(
      PCWSTR pszUserName,
      PCWSTR pszDomainName,
      PCWSTR pszPackedCredentialsString,
     PSEC_WINNT_AUTH_IDENTITY_OPAQUE* ppAuthIdentity
    );

SECURITY_STATUS
__stdcall
SspiCompareAuthIdentities(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity1,
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity2,
      PBOOLEAN SameSuppliedUser,
      PBOOLEAN SameSuppliedIdentity
    );






SECURITY_STATUS
__stdcall
SspiMarshalAuthIdentity(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity,
      unsigned long* AuthIdentityLength,
     char** AuthIdentityByteArray
    );





SECURITY_STATUS
__stdcall
SspiUnmarshalAuthIdentity(
      unsigned long AuthIdentityLength,
      char* AuthIdentityByteArray,
     PSEC_WINNT_AUTH_IDENTITY_OPAQUE* ppAuthIdentity
    );

#line 25246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

#pragma region Desktop Family


BOOLEAN
__stdcall
SspiIsPromptingNeeded(
      unsigned long ErrorOrNtStatus
    );

#line 25258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

#pragma region Desktop Family or OneCore Family


SECURITY_STATUS
__stdcall
SspiGetTargetHostName(
      PCWSTR pszTargetName,
     PWSTR* pszHostName
    );

SECURITY_STATUS
__stdcall
SspiExcludePackage(
      PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity,
      PCWSTR pszPackageName,
     PSEC_WINNT_AUTH_IDENTITY_OPAQUE* ppNewAuthIdentity
    );

#line 25279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"










#line 25290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




typedef struct _SECURITY_USER_DATA {
    SECURITY_STRING UserName;           
    SECURITY_STRING LogonDomainName;    
    SECURITY_STRING LogonServer;        
    PSID            pSid;               
} SECURITY_USER_DATA, *PSECURITY_USER_DATA;

typedef SECURITY_USER_DATA SecurityUserData, * PSecurityUserData;





#line 25308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

NTSTATUS __stdcall
GetSecurityUserInfo(
         PLUID LogonId,
             ULONG Flags,
        PSecurityUserData * UserInformation
    );

NTSTATUS __stdcall
MapSecurityError(   SECURITY_STATUS SecStatus );






























typedef struct _QUERY_PATH_REQUEST {
    ULONG                   PathNameLength;
    PIO_SECURITY_CONTEXT    SecurityContext;
    WCHAR                   FilePathName[1];
} QUERY_PATH_REQUEST, *PQUERY_PATH_REQUEST;









typedef struct _QUERY_PATH_REQUEST_EX {
    PIO_SECURITY_CONTEXT    pSecurityContext;
    ULONG                   EaLength;
    PVOID                   pEaBuffer;

    
    
    
    

    UNICODE_STRING          PathName;

    
    
    
    
    
    
    
    

    UNICODE_STRING          DomainServiceName;

    
    
    
    

    PECP_LIST               EcpList;





















#line 25413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

    
    
    

    ULONG_PTR               Reserved[2];

#line 25421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
} QUERY_PATH_REQUEST_EX, *PQUERY_PATH_REQUEST_EX;

#line 25424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

typedef struct _QUERY_PATH_RESPONSE {
    ULONG LengthAccepted;
} QUERY_PATH_RESPONSE, *PQUERY_PATH_RESPONSE;




#pragma region Desktop Family or OneCore Family




















































































#line 25518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"
#pragma endregion

#line 25521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryObject(
      HANDLE Handle,
      OBJECT_INFORMATION_CLASS ObjectInformationClass,
      PVOID ObjectInformation,
      ULONG ObjectInformationLength,
      PULONG ReturnLength
    );
#line 25537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwNotifyChangeKey(
      HANDLE KeyHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG CompletionFilter,
      BOOLEAN WatchTree,
      PVOID Buffer,
      ULONG BufferSize,
      BOOLEAN Asynchronous
    );
#line 25556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwCreateEvent (
      PHANDLE EventHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      EVENT_TYPE EventType,
      BOOLEAN InitialState
    );
#line 25570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDeleteFile(
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 25580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDeviceIoControlFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG IoControlCode,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );
#line 25599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryDirectoryFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FileInformation,
      ULONG Length,
      FILE_INFORMATION_CLASS FileInformationClass,
      BOOLEAN ReturnSingleEntry,
      PUNICODE_STRING FileName,
      BOOLEAN RestartScan
    );
#line 25619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryVolumeInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FsInformation,
      ULONG Length,
      FS_INFORMATION_CLASS FsInformationClass
    );
#line 25633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetVolumeInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID FsInformation,
      ULONG Length,
      FS_INFORMATION_CLASS FsInformationClass
    );
#line 25647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwFsControlFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      ULONG FsControlCode,
      PVOID InputBuffer,
      ULONG InputBufferLength,
      PVOID OutputBuffer,
      ULONG OutputBufferLength
    );
#line 25666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDuplicateObject(
      HANDLE SourceProcessHandle,
      HANDLE SourceHandle,
      HANDLE TargetProcessHandle,
      PHANDLE TargetHandle,
      ACCESS_MASK DesiredAccess,
      ULONG HandleAttributes,
      ULONG Options
    );
#line 25684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"




 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenDirectoryObject(
      PHANDLE DirectoryHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes
    );
#line 25698 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 

__declspec(dllimport)
NTSTATUS
__stdcall
ZwAllocateVirtualMemory(
      HANDLE ProcessHandle,
      PVOID *BaseAddress,
      ULONG_PTR ZeroBits,
      PSIZE_T RegionSize,
      ULONG AllocationType,
      ULONG Protect
    );
#line 25715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 

__declspec(dllimport)
NTSTATUS
__stdcall
ZwFreeVirtualMemory(
      HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PSIZE_T RegionSize,
      ULONG FreeType
    );
#line 25729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryVirtualMemory(
      HANDLE ProcessHandle,
      PVOID BaseAddress,
      MEMORY_INFORMATION_CLASS MemoryInformationClass,
      PVOID MemoryInformation,
      SIZE_T MemoryInformationLength,
      PSIZE_T ReturnLength
    );
#line 25745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"















#line 25761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"





__declspec(dllimport)
NTSTATUS
__stdcall
ZwWaitForSingleObject(
      HANDLE Handle,
      BOOLEAN Alertable,
      PLARGE_INTEGER Timeout
    );
#line 25775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetEvent (
      HANDLE EventHandle,
      PLONG PreviousState
    );
#line 25786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwFlushVirtualMemory(
      HANDLE ProcessHandle,
      PVOID *BaseAddress,
      PSIZE_T RegionSize,
      PIO_STATUS_BLOCK IoStatus
    );
#line 25799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenProcessTokenEx(
      HANDLE ProcessHandle,
      ACCESS_MASK DesiredAccess,
      ULONG HandleAttributes,
      PHANDLE TokenHandle
    );
#line 25812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwOpenThreadTokenEx(
      HANDLE ThreadHandle,
      ACCESS_MASK DesiredAccess,
      BOOLEAN OpenAsSelf,
      ULONG HandleAttributes,
      PHANDLE TokenHandle
    );
#line 25826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryInformationToken (
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      PVOID TokenInformation,
      ULONG TokenInformationLength,
      PULONG ReturnLength
    );
#line 25840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetInformationToken (
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      PVOID TokenInformation,
      ULONG TokenInformationLength
    );
#line 25853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetSecurityObject(
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );
#line 25865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQuerySecurityObject(
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      ULONG Length,
      PULONG LengthNeeded
    );
#line 25879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwLockFile(
      HANDLE FileHandle,
      HANDLE Event,
      PIO_APC_ROUTINE ApcRoutine,
      PVOID ApcContext,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER ByteOffset,
      PLARGE_INTEGER Length,
      ULONG Key,
      BOOLEAN FailImmediately,
      BOOLEAN ExclusiveLock
    );
#line 25898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwUnlockFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PLARGE_INTEGER ByteOffset,
      PLARGE_INTEGER Length,
      ULONG Key
    );
#line 25912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwQueryQuotaInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      BOOLEAN ReturnSingleEntry,
      PVOID SidList,
      ULONG SidListLength,
      PSID StartSid,
      BOOLEAN RestartScan
    );
#line 25930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwSetQuotaInformationFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length
    );
#line 25943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"


 
__declspec(dllimport)
NTSTATUS
ZwFlushBuffersFile(
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock
    );
#line 25953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"












#line 25966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

 
NTSTATUS
ZwQueryEaFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length,
      BOOLEAN ReturnSingleEntry,
      PVOID EaList,
      ULONG EaListLength,
      PULONG EaIndex,
      BOOLEAN RestartScan
    );

 
NTSTATUS
ZwSetEaFile (
      HANDLE FileHandle,
      PIO_STATUS_BLOCK IoStatusBlock,
      PVOID Buffer,
      ULONG Length
    );

 
__declspec(dllimport)
NTSTATUS
__stdcall
ZwDuplicateToken(
      HANDLE ExistingTokenHandle,
      ACCESS_MASK DesiredAccess,
      POBJECT_ATTRIBUTES ObjectAttributes,
      BOOLEAN EffectiveOnly,
      TOKEN_TYPE TokenType,
      PHANDLE NewTokenHandle
    );








#pragma warning(pop)




#line 26016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 26018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntifs.h"

#line 3 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\patch/patch.h"





typedef struct _AVM_SERVICE_TABLE_DESCRIPTOR
{
  PULONG Base;
  PULONG Count;
  ULONG  Limit;
  PUCHAR Number;
} AVM_SERVICE_TABLE_DESCRIPTOR, *PAVM_SERVICE_TABLE_DESCRIPTOR;









typedef struct _AVM_PATCH_STUB
{
  UCHAR Instructions[12];
} AVM_PATCH_STUB, *PAVM_PATCH_STUB;

typedef char __C_ASSERT__[(sizeof(AVM_PATCH_STUB) == 12)?1:-1];

typedef struct _AVM_PATCH_SSDT_ENTRY
{
  LIST_ENTRY ListEntry;

  PVOID OriginalRoutineAddress;
  PVOID NewRoutineAddress;
  ULONG SyscallNumber;

  AVM_PATCH_STUB OriginalCaveData;
#line 41 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\patch/patch.h"
} AVM_PATCH_SSDT_ENTRY, *PAVM_PATCH_SSDT_ENTRY;





NTSTATUS
__stdcall
AvmPatchInitialize(
  void
  );

void
__stdcall
AvmPatchDestroy(
  void
  );

NTSTATUS
__stdcall
AvmPatchSSDTHook(
    PANSI_STRING AnsiRoutineName,
    PVOID NewAddress,
    PAVM_PATCH_SSDT_ENTRY* HookEntry
  );

NTSTATUS
__stdcall
AvmPatchSSDTUnhook(
    PAVM_PATCH_SSDT_ENTRY HookEntry
  );

NTSTATUS
__stdcall
AvmPatchSSDTUnhookAll(
  void
  );





PVOID
__stdcall
AvmpPatchFindExportedRoutineByName(
    PVOID DllBase,
    PANSI_STRING AnsiRoutineName
  );

NTSTATUS
__stdcall
AvmpPatchFindSyscallNumberByRoutineName(
    PANSI_STRING AnsiRoutineName,
    PULONG SyscallNumber
  );

PVOID
AvmpPatchFindNtoskrnlBase(
  void
  );

PAVM_SERVICE_TABLE_DESCRIPTOR
AvmpPatchFindSSDT(
    PVOID NtoskrnlBaseAddress
  );



PVOID
__stdcall
AvmpPatchFindCaveAddress(
    PVOID AddressBegin,
    PVOID AddressEnd,
    ULONG DesiredSize
  );

#line 118 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\patch/patch.h"





extern LIST_ENTRY AvmPatchSSDTList;

#line 3 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hook.h"







typedef enum _AVM_HOOK_DEFINITION_TYPE
{
  AHDT_ENUM,
  AHDT_FUNCTION,
} AVM_HOOK_DEFINITION_TYPE, *PAVM_HOOK_DEFINITION_TYPE;





typedef struct _AVM_HOOK_DEFINITION_ENUM_NAME_VALUE
{
  ANSI_STRING Name;
  ULONG Value;
} AVM_HOOK_DEFINITION_ENUM_NAME_VALUE, *PAVM_HOOK_DEFINITION_ENUM_NAME_VALUE;

typedef __declspec(align(16)) struct _AVM_HOOK_DEFINITION
{
  ULONG Id;
  AVM_HOOK_DEFINITION_TYPE Type;
  ANSI_STRING Name;

  
  
  
  
  KGUARDED_MUTEX DescriptionSentLock;
  BOOLEAN DescriptionSent;

  union
  {
    struct
    {
      ULONG EnumType; 
      ULONG EnumTypeSize;
      ULONG ItemCount;
      PAVM_HOOK_DEFINITION_ENUM_NAME_VALUE Items;
    } Enum;

    struct
    {
      ANSI_STRING CategoryName;
      PAVM_PATCH_SSDT_ENTRY SSDTEntry;
      PVOID NewFunctionAddress;

      
      
      
      KGUARDED_MUTEX PatchLock;
      BOOLEAN PatchEnabled;
    } Function;
  };
} AVM_HOOK_DEFINITION, *PAVM_HOOK_DEFINITION;






NTSTATUS
__stdcall
AvmHookInitialize(
    PDEVICE_OBJECT DeviceObject
  );

void
__stdcall
AvmHookDestroy(
    PDEVICE_OBJECT DeviceObject
  );

NTSTATUS
__stdcall
AvmHookEnable(
  void
  );

void
__stdcall
AvmHookDisable(
  void
  );

void
__stdcall
AvmHookResetDescriptionSentStatus(
  void
  );

NTSTATUS
__stdcall
AvmHookSetFunctionInformation(
  ULONG FunctionId,
  BOOLEAN Enable
  );





NTSTATUS
__stdcall
AvmHookAddWatchedProcessId(
  HANDLE ProcessId
  );

NTSTATUS
__stdcall
AvmHookRemoveWatchedProcessId(
  HANDLE ProcessId
  );

void
__stdcall
AvmHookRemoveAllWatchedProcessIds(
  void
  );

BOOLEAN
__stdcall
AvmHookIsProcessIdWatched(
  HANDLE ProcessId
  );





ULONG
__stdcall
AvmpHookCreateFunctionDefinitionBuffer(
    BOOLEAN Simulate
  );


extern const ULONG AvmpHookDefinitionCount;
#line 2 "device\\hook.c"

#line 1 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\entry.h"
#pragma once






















#line 25 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\entry.h"





typedef void (__stdcall *PAVM_DESTROY_COMPONENT_ROUTINE)(
    PDRIVER_OBJECT DriverObject
  );





NTSTATUS
__stdcall
AvmInitialize(
    PDRIVER_OBJECT DriverObject
  );

void
__stdcall
AvmDestroy(
    PDRIVER_OBJECT DriverObject
  );

void
__stdcall
AvmRegisterDestroyComponentRoutine(
    PAVM_DESTROY_COMPONENT_ROUTINE DestroyComponentRoutine
  );





NTSTATUS
__stdcall
AvmpDriverDispatch(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
  );

void
__stdcall
AvmpDbgPrintV(
      PCSTR Format,
  va_list Args
  );

void
__cdecl
AvmpDbgPrint(
      PCSTR Format,
  ...
  );





DRIVER_INITIALIZE DriverEntry;

NTSTATUS
__stdcall
DriverEntry(
    PDRIVER_OBJECT DriverObject,
    PUNICODE_STRING RegistryPath
  );





extern PDRIVER_OBJECT AvmDriverObject;
#line 4 "device\\hook.c"
#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\device.h"
#pragma once

#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\event.h"
#pragma once








typedef enum _AVM_EVENT_TYPE
{
  AET_FUNCTION_CALL,
  AET_PROCESS,
  AET_THREAD,
  AET_LOAD_IMAGE,
} AVM_EVENT_TYPE, *PAVM_EVENT_TYPE;

typedef enum _AVM_EVENT_VARIANT_TYPE
{
  
  
  
  AEVT_VOID                  = 0,
  AEVT_BOOL                  = 1,
  AEVT_INTEGER               = 2,
  AEVT_UNSIGNED_INTEGER      = 3,
  AEVT_FLOAT                 = 4,
  AEVT_BINARY                = 5, 
  AEVT_STRING                = 6, 
  AEVT_UNICODE_STRING        = 7, 
  AEVT_ENUM                  = 8,

  
  
  
  AEVT_HINT_POINTER          = 1 << 4,
  AEVT_HINT_HEX              = 1 << 5,
  AEVT_HINT_FLAGS            = 1 << 6,
  AEVT_HINT_PROBE            = 1 << 7,
  AEVT_HINT_INDIRECT         = 1 << 8, 
  AEVT_HINT_INDIRECT_PROCESS = 1 << 9,
  AEVT_HINT_ERROR            = 1 << 10,

  
  
  
  
  

  
  
  
  AEVT_TYPE_MASK          = 0x0000000F,
  AEVT_HINT_MASK          = 0x00000FF0,
  AEVT_ENUM_MASK          = 0xFFFFF000,
} AVM_EVENT_VARIANT_TYPE, *PAVM_EVENT_VARIANT_TYPE;








typedef struct _AVM_EVENT_VARIANT
{
  ULONG  RequestedSize;
  ULONG  Size;
  ULONG  Type; 
  UCHAR  Buffer[];
} AVM_EVENT_VARIANT, *PAVM_EVENT_VARIANT;





typedef struct _AVM_EVENT_FUNCTION_CALL
{
  ULONG    FunctionId;
  ULONG    FunctionParameterCount;
  ULONG    FunctionDescription;
  NTSTATUS ReturnValue;

  HANDLE   ProcessId;
  HANDLE   ThreadId;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
} AVM_EVENT_FUNCTION_CALL, *PAVM_EVENT_FUNCTION_CALL;




typedef struct _AVM_EVENT_PROCESS
{
  BOOLEAN Created;
  HANDLE ProcessId;
  HANDLE ParentProcessId;

  
  
  
  
  
  
} AVM_EVENT_PROCESS, *PAVM_EVENT_PROCESS;

typedef struct _AVM_EVENT_THREAD
{
  BOOLEAN Created;
  HANDLE ProcessId;
  HANDLE ThreadId;
} AVM_EVENT_THREAD, *PAVM_EVENT_THREAD;

typedef struct _AVM_EVENT_LOAD_IMAGE
{
  HANDLE ProcessId;
  PVOID ImageBase;
  SIZE_T ImageSize;
  AVM_EVENT_VARIANT ImageFileName;
} AVM_EVENT_LOAD_IMAGE, *PAVM_EVENT_LOAD_IMAGE;

typedef struct _AVM_EVENT
{
  
  
  
  ULONG Size;

  
  
  
  ULONG SequenceId;

  
  
  
  ULONG Type;

  
  
  
  UCHAR EventData[];
} AVM_EVENT, *PAVM_EVENT;





PAVM_EVENT
__stdcall
AvmEventAllocate(
  ULONG EventType,
  ULONG EventSize
  );

void
__stdcall
AvmEventFree(
  PAVM_EVENT Event
  );





PAVM_EVENT
__stdcall
AvmEventFunctionCallCreate(
    PAVM_HOOK_DEFINITION FunctionDefinition,
    NTSTATUS ReturnValue,
    va_list Args
  );

PAVM_EVENT
__stdcall
AvmEventProcessCreate(
    BOOLEAN Created,
    HANDLE ProcessId,
    HANDLE ParentProcessId,
    PCUNICODE_STRING ImageFileName
  );

PAVM_EVENT
__stdcall
AvmEventThreadCreate(
    BOOLEAN Created,
    HANDLE ProcessId,
    HANDLE ThreadId
  );

PAVM_EVENT
__stdcall
AvmEventLoadImageCreate(
    HANDLE ProcessId,
    PUNICODE_STRING FullImageName,
    PIMAGE_INFO ImageInfo
  );









void
__stdcall
AvmpEventBufferWrite(
  PVOID* EventData,
  ULONG Type,
  ULONG Size,
  PVOID Data,
  BOOLEAN Simulate
  );

void
__stdcall
AvmpEventBufferIndirectWrite(
  PVOID* EventData,
  ULONG Type,
  ULONG Size,
  PVOID Data,
  HANDLE ProcessHandle,
  BOOLEAN Simulate
  );





typedef struct _AVM_EVENT_FUNCTION_CALL_PARAMETER
{
  ULONG ParameterType;

  union
  {
    ULONG ParameterSize;
    PAVM_HOOK_DEFINITION EnumDefinition;
  };

  PCHAR ParameterName;
  PCHAR ParameterValue;
  HANDLE ProcessHandle;
} AVM_EVENT_FUNCTION_CALL_PARAMETER, *PAVM_EVENT_FUNCTION_CALL_PARAMETER;

typedef void (__stdcall *PAVM_EVENT_FUNCTION_CALL_PARAMETER_ROUTINE)(
    PAVM_EVENT_FUNCTION_CALL_PARAMETER ParameterStruct,
    PVOID* EventPosition,
    BOOLEAN Simulate
  );

void
__stdcall
AvmpEventEnumWrite(
  PVOID* EventData,
  PAVM_HOOK_DEFINITION EnumDefinition,
  BOOLEAN Simulate
  );

ULONG
__stdcall
AvmpEventFunctionCallWrite(
    PAVM_HOOK_DEFINITION FunctionDefinition,
  PAVM_EVENT_FUNCTION_CALL EventData,
  PVOID* EventPosition,
  va_list Args
  );

ULONG
__stdcall
AvmpEventFunctionCallEnumerateParameters(
    va_list Args,
    PAVM_EVENT_FUNCTION_CALL_PARAMETER_ROUTINE EnumRoutine,
    PVOID* EventPosition,
    BOOLEAN Simulate
  );

void
__stdcall
AvmpEventFunctionCallWriteParameterDescription(
    PAVM_EVENT_FUNCTION_CALL_PARAMETER ParameterStruct,
    PVOID* EventPosition,
    BOOLEAN Simulate
  );

void
__stdcall
AvmpEventFunctionCallWriteParameters(
    PAVM_EVENT_FUNCTION_CALL_PARAMETER ParameterStruct,
    PVOID* EventPosition,
    BOOLEAN Simulate
  );
#line 4 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\device.h"


































typedef struct _AVM_DEVICE_EXTENSION
{
  
  
  
  
  PDRIVER_DISPATCH MajorFunction[0x1b + 1];

  struct _AVM_DEVICE_EXTENSION_DEVICE
  {
    
    
    
    volatile LONG IsOpen;
  } Device;

  struct _AVM_DEVICE_EXTENSION_EVENT_QUEUE_IRP_QUEUE
  {
    
    
    
    IO_CSQ Csq;
    KSPIN_LOCK CsqLock;

    
    
    
    LIST_ENTRY Queue;

    
    
    
    KSEMAPHORE QueueSemaphore;
  } IrpQueue;

  struct _AVM_DEVICE_EXTENSION_EVENT_QUEUE
  {
    
    
    
    
    LIST_ENTRY Queue;

    
    
    
    KSPIN_LOCK QueueLock;

    
    
    
    
    KEVENT QueueEvent;

    
    
    



    LONG ActiveSources;

    
    
    
    ULONG VariantSizeLimit;

    
    
    
    ULONG ItemSizeLimit;

    
    
    
    ULONG ItemCount;

    
    
    
    ULONG ItemCountLimit;

    
    
    
    ULONG Size;

    
    
    
    ULONG SizeLimit;
  } EventQueue;

  struct _AVM_DEVICE_EXTENSION_POLLING_THREAD
  {
    
    
    
    PETHREAD ThreadObject;

    
    
    
    BOOLEAN ShouldStop;
  } PollingThread;

  struct _AVM_DEVICE_EXTENSION_HOOK
  {
    
    
    
    PAVM_HOOK_DEFINITION DefinitionList;
    PAVM_HOOK_DEFINITION* DefinitionIdToDefinitionMap;

    
    
    
    ULONG DefinitionCount;

    
    
    
    PVOID FunctionDefinitionBuffer;
    ULONG FunctionDefinitionBufferSize;

    
    
    
    LIST_ENTRY WatchedProcessIdList;

    
    
    
    KSPIN_LOCK WatchedProcessIdListLock;

    
    
    
    LONG WatchedProcessCount;
  } Hook;
} AVM_DEVICE_EXTENSION, *PAVM_DEVICE_EXTENSION;





NTSTATUS
__stdcall
AvmDeviceInitialize(
    PDRIVER_OBJECT DriverObject
  );

void
__stdcall
AvmDeviceDestroy(
    PDRIVER_OBJECT DriverObject
  );









NTSTATUS
__stdcall
AvmpDeviceInitializeDevice(
    PDRIVER_OBJECT DriverObject,
    PDEVICE_OBJECT* DeviceObject
  );

void
__stdcall
AvmpDeviceDestroyDevice(
    PDEVICE_OBJECT DeviceObject
  );





NTSTATUS
__stdcall
AvmpDeviceInitializeIrpQueue(
    PDEVICE_OBJECT DeviceObject
  );

void
__stdcall
AvmpDeviceDestroyIrpQueue(
    PDEVICE_OBJECT DeviceObject
  );





NTSTATUS
__stdcall
AvmpDeviceInitializeEventQueue(
    PDEVICE_OBJECT DeviceObject
  );

void
__stdcall
AvmpDeviceDestroyEventQueue(
    PDEVICE_OBJECT DeviceObject
  );





NTSTATUS
__stdcall
AvmpDeviceInitializePollingThread(
    PDEVICE_OBJECT DeviceObject
  );

void
__stdcall
AvmpDeviceDestroyPollingThread(
    PDEVICE_OBJECT DeviceObject
  );





NTSTATUS
__stdcall
AvmpDeviceInitializePatch(
    PDEVICE_OBJECT DeviceObject
  );

void
__stdcall
AvmpDeviceDestroyPatch(
    PDEVICE_OBJECT DeviceObject
  );





NTSTATUS
__stdcall
AvmpDeviceInitializeHook(
    PDEVICE_OBJECT DeviceObject
  );

void
__stdcall
AvmpDeviceDestroyHook(
    PDEVICE_OBJECT DeviceObject
  );






NTSTATUS
__stdcall
AvmpDevice_Create(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
  );

NTSTATUS
__stdcall
AvmpDevice_Cleanup(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
  );

NTSTATUS
__stdcall
AvmpDevice_Close(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
  );

NTSTATUS
__stdcall
AvmpDevice_Read(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
  );

NTSTATUS
__stdcall
AvmpDevice_IoControl(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
  );





extern PAVM_DEVICE_EXTENSION AvmDeviceExtension;

#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\csq.h"
#pragma once






void
__stdcall
AvmCsqInsertIrp(
    PIO_CSQ Csq,
    PIRP Irp
  );

void
__stdcall
AvmCsqRemoveIrp(
    PIO_CSQ Csq,
    PIRP Irp
  );

PIRP
__stdcall
AvmCsqPeekNextIrp(
    PIO_CSQ Csq,
    PIRP Irp,
    PVOID PeekContext
  );

 
 

void
__stdcall
AvmCsqAcquireLock(
    PIO_CSQ Csq,
    PKIRQL Irql
  );

 

void
__stdcall
AvmCsqReleaseLock(
    PIO_CSQ Csq,
      KIRQL Irql
  );

void
__stdcall
AvmCsqCompleteCanceledIrp(
    PIO_CSQ Csq,
    PIRP Irp
  );
#line 344 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\device.h"
#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\queue.h"
#pragma once








void
__stdcall
AvmQueuePollingThread(
    PVOID Context
  );

NTSTATUS
__stdcall
AvmQueueFunctionCallEvent(
    PAVM_HOOK_DEFINITION FunctionDefinition,
    NTSTATUS ReturnValue,
  ...
  );

NTSTATUS
__stdcall
AvmQueueProcessEvent(
    BOOLEAN Created,
    HANDLE ProcessId,
    HANDLE ParentProcessId,
    PCUNICODE_STRING ImageFileName
  );

NTSTATUS
__stdcall
AvmQueueThreadEvent(
    BOOLEAN Created,
    HANDLE ProcessId,
    HANDLE ThreadId
  );

NTSTATUS
__stdcall
AvmQueueLoadImageEvent(
    HANDLE ProcessId,
    PUNICODE_STRING FullImageName,
    PIMAGE_INFO ImageInfo
  );

void
__stdcall
AvmQueueFlush(
  void
  );





NTSTATUS
__stdcall
AvmpQueueInsert(
  PAVM_EVENT Event
  );

NTSTATUS
__stdcall
AvmpQueueInsertEventOrFail(
  PAVM_EVENT Event
  );
#line 345 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\device.h"
#line 5 "device\\hook.c"

#line 1 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\nt/psapi.h"
#pragma once











__declspec(dllimport)
HANDLE
__stdcall
PsGetProcessInheritedFromUniqueProcessId(
    PEPROCESS Process
  );
#line 7 "device\\hook.c"
#line 1 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\nt/rtlapi.h"
#pragma once











__declspec(dllimport)
PVOID
__stdcall
RtlImageDirectoryEntryToData(
    PVOID BaseOfImage,
    BOOLEAN MappedAsImage,
    USHORT DirectoryEntry,
    PULONG Size
  );

__declspec(dllimport)
PIMAGE_NT_HEADERS
__stdcall
RtlImageNtHeader(
    PVOID Base
  );

__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
    PVOID PcValue,
    PVOID *BaseOfImage
  );
#line 8 "device\\hook.c"
#line 1 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\utils/image.h"
#pragma once

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"


















#pragma once
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"


#pragma warning(push)
#pragma warning(disable:4820) 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"
#pragma warning (disable:4201) 
#pragma warning (disable:4214) 



















#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack4.h"
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"







#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"









#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_DOS_HEADER {      
    USHORT e_magic;                     
    USHORT e_cblp;                      
    USHORT e_cp;                        
    USHORT e_crlc;                      
    USHORT e_cparhdr;                   
    USHORT e_minalloc;                  
    USHORT e_maxalloc;                  
    USHORT e_ss;                        
    USHORT e_sp;                        
    USHORT e_csum;                      
    USHORT e_ip;                        
    USHORT e_cs;                        
    USHORT e_lfarlc;                    
    USHORT e_ovno;                      
    USHORT e_res[4];                    
    USHORT e_oemid;                     
    USHORT e_oeminfo;                   
    USHORT e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    USHORT ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    USHORT ne_enttab;                   
    USHORT ne_cbenttab;                 
    LONG   ne_crc;                      
    USHORT ne_flags;                    
    USHORT ne_autodata;                 
    USHORT ne_heap;                     
    USHORT ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    USHORT ne_cseg;                     
    USHORT ne_cmod;                     
    USHORT ne_cbnrestab;                
    USHORT ne_segtab;                   
    USHORT ne_rsrctab;                  
    USHORT ne_restab;                   
    USHORT ne_modtab;                   
    USHORT ne_imptab;                   
    LONG   ne_nrestab;                  
    USHORT ne_cmovent;                  
    USHORT ne_align;                    
    USHORT ne_cres;                     
    UCHAR  ne_exetyp;                   
    UCHAR  ne_flagsothers;              
    USHORT ne_pretthunks;               
    USHORT ne_psegrefbytes;             
    USHORT ne_swaparea;                 
    USHORT ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    USHORT e32_magic;                   
    UCHAR  e32_border;                  
    UCHAR  e32_worder;                  
    ULONG  e32_level;                   
    USHORT e32_cpu;                     
    USHORT e32_os;                      
    ULONG  e32_ver;                     
    ULONG  e32_mflags;                  
    ULONG  e32_mpages;                  
    ULONG  e32_startobj;                
    ULONG  e32_eip;                     
    ULONG  e32_stackobj;                
    ULONG  e32_esp;                     
    ULONG  e32_pagesize;                
    ULONG  e32_lastpagesize;            
    ULONG  e32_fixupsize;               
    ULONG  e32_fixupsum;                
    ULONG  e32_ldrsize;                 
    ULONG  e32_ldrsum;                  
    ULONG  e32_objtab;                  
    ULONG  e32_objcnt;                  
    ULONG  e32_objmap;                  
    ULONG  e32_itermap;                 
    ULONG  e32_rsrctab;                 
    ULONG  e32_rsrccnt;                 
    ULONG  e32_restab;                  
    ULONG  e32_enttab;                  
    ULONG  e32_dirtab;                  
    ULONG  e32_dircnt;                  
    ULONG  e32_fpagetab;                
    ULONG  e32_frectab;                 
    ULONG  e32_impmod;                  
    ULONG  e32_impmodcnt;               
    ULONG  e32_impproc;                 
    ULONG  e32_pagesum;                 
    ULONG  e32_datapage;                
    ULONG  e32_preload;                 
    ULONG  e32_nrestab;                 
    ULONG  e32_cbnrestab;               
    ULONG  e32_nressum;                 
    ULONG  e32_autodata;                
    ULONG  e32_debuginfo;               
    ULONG  e32_debuglen;                
    ULONG  e32_instpreload;             
    ULONG  e32_instdemand;              
    ULONG  e32_heapsize;                
    UCHAR  e32_res3[12];                
    ULONG  e32_winresoff;
    ULONG  e32_winreslen;
    USHORT e32_devid;                   
    USHORT e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





typedef struct _IMAGE_FILE_HEADER {
    USHORT  Machine;
    USHORT  NumberOfSections;
    ULONG   TimeDateStamp;
    ULONG   PointerToSymbolTable;
    ULONG   NumberOfSymbols;
    USHORT  SizeOfOptionalHeader;
    USHORT  Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

























































 




typedef struct _IMAGE_DATA_DIRECTORY {
    ULONG   VirtualAddress;
    ULONG   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    USHORT  Magic;
    UCHAR   MajorLinkerVersion;
    UCHAR   MinorLinkerVersion;
    ULONG   SizeOfCode;
    ULONG   SizeOfInitializedData;
    ULONG   SizeOfUninitializedData;
    ULONG   AddressOfEntryPoint;
    ULONG   BaseOfCode;
    ULONG   BaseOfData;

    
    
    

    ULONG   ImageBase;
    ULONG   SectionAlignment;
    ULONG   FileAlignment;
    USHORT  MajorOperatingSystemVersion;
    USHORT  MinorOperatingSystemVersion;
    USHORT  MajorImageVersion;
    USHORT  MinorImageVersion;
    USHORT  MajorSubsystemVersion;
    USHORT  MinorSubsystemVersion;
    ULONG   Win32VersionValue;
    ULONG   SizeOfImage;
    ULONG   SizeOfHeaders;
    ULONG   CheckSum;
    USHORT  Subsystem;
    USHORT  DllCharacteristics;
    ULONG   SizeOfStackReserve;
    ULONG   SizeOfStackCommit;
    ULONG   SizeOfHeapReserve;
    ULONG   SizeOfHeapCommit;
    ULONG   LoaderFlags;
    ULONG   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    USHORT Magic;
    UCHAR  MajorLinkerVersion;
    UCHAR  MinorLinkerVersion;
    ULONG  SizeOfCode;
    ULONG  SizeOfInitializedData;
    ULONG  SizeOfUninitializedData;
    ULONG  AddressOfEntryPoint;
    ULONG  BaseOfCode;
    ULONG  BaseOfData;
    ULONG  BaseOfBss;
    ULONG  GprMask;
    ULONG  CprMask[4];
    ULONG  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    USHORT      Magic;
    UCHAR       MajorLinkerVersion;
    UCHAR       MinorLinkerVersion;
    ULONG       SizeOfCode;
    ULONG       SizeOfInitializedData;
    ULONG       SizeOfUninitializedData;
    ULONG       AddressOfEntryPoint;
    ULONG       BaseOfCode;
    ULONGLONG   ImageBase;
    ULONG       SectionAlignment;
    ULONG       FileAlignment;
    USHORT      MajorOperatingSystemVersion;
    USHORT      MinorOperatingSystemVersion;
    USHORT      MajorImageVersion;
    USHORT      MinorImageVersion;
    USHORT      MajorSubsystemVersion;
    USHORT      MinorSubsystemVersion;
    ULONG       Win32VersionValue;
    ULONG       SizeOfImage;
    ULONG       SizeOfHeaders;
    ULONG       CheckSum;
    USHORT      Subsystem;
    USHORT      DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    ULONG       LoaderFlags;
    ULONG       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;






typedef IMAGE_OPTIONAL_HEADER64             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64            PIMAGE_OPTIONAL_HEADER;





#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_NT_HEADERS64 {
    ULONG Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    ULONG Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;


typedef IMAGE_NT_HEADERS64                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64                 PIMAGE_NT_HEADERS;



#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"
















































































typedef struct ANON_OBJECT_HEADER {
    USHORT  Sig1;            
    USHORT  Sig2;            
    USHORT  Version;         
    USHORT  Machine;
    ULONG   TimeDateStamp;
    CLSID   ClassID;         
    ULONG   SizeOfData;      
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    USHORT  Sig1;            
    USHORT  Sig2;            
    USHORT  Version;         
    USHORT  Machine;
    ULONG   TimeDateStamp;
    CLSID   ClassID;         
    ULONG   SizeOfData;      
    ULONG   Flags;           
    ULONG   MetaDataSize;    
    ULONG   MetaDataOffset;  
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
   
    USHORT  Sig1;            
    USHORT  Sig2;            
    USHORT  Version;         
    USHORT  Machine;         
    ULONG   TimeDateStamp;
    CLSID   ClassID;         
    ULONG   SizeOfData;      
    ULONG   Flags;           
    ULONG   MetaDataSize;    
    ULONG   MetaDataOffset;  

    
    ULONG   NumberOfSections; 
    ULONG   PointerToSymbolTable;
    ULONG   NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    UCHAR   Name[8];
    union {
            ULONG   PhysicalAddress;
            ULONG   VirtualSize;
    } Misc;
    ULONG   VirtualAddress;
    ULONG   SizeOfRawData;
    ULONG   PointerToRawData;
    ULONG   PointerToRelocations;
    ULONG   PointerToLinenumbers;
    USHORT  NumberOfRelocations;
    USHORT  NumberOfLinenumbers;
    ULONG   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

































































#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"
#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"
#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





typedef struct _IMAGE_SYMBOL {
    union {
        UCHAR   ShortName[8];
        struct {
            ULONG   Short;     
            ULONG   Long;      
        } Name;
        ULONG   LongName[2];    
    } N;
    ULONG   Value;
    SHORT   SectionNumber;
    USHORT  Type;
    UCHAR   StorageClass;
    UCHAR   NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL __unaligned *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        UCHAR    ShortName[8];
        struct {
            ULONG   Short;     
            ULONG   Long;      
        } Name;
        ULONG   LongName[2];    
    } N;
    ULONG   Value;
    LONG    SectionNumber;
    USHORT  Type;
    UCHAR   StorageClass;
    UCHAR   NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX __unaligned *PIMAGE_SYMBOL_EX;
































































































#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"




#line 748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"




#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"



#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"


#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack2.h"
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    UCHAR bAuxType;                  
    UCHAR bReserved;                 
    ULONG SymbolTableIndex;
    UCHAR rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF __unaligned *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        ULONG    TagIndex;                      
        union {
            struct {
                USHORT  Linenumber;             
                USHORT  Size;                   
            } LnSz;
           ULONG    TotalSize;
        } Misc;
        union {
            struct {                            
                ULONG    PointerToLinenumber;
                ULONG    PointerToNextFunction;
            } Function;
            struct {                            
                USHORT   Dimension[4];
            } Array;
        } FcnAry;
        USHORT  TvIndex;                        
    } Sym;
    struct {
        UCHAR   Name[18];
    } File;
    struct {
        ULONG   Length;                         
        USHORT  NumberOfRelocations;            
        USHORT  NumberOfLinenumbers;            
        ULONG   CheckSum;                       
        SHORT   Number;                         
        UCHAR   Selection;                      
	UCHAR   bReserved;
	SHORT   HighNumber;                     
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        ULONG crc;
        UCHAR rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL __unaligned *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        ULONG   WeakDefaultSymIndex;                       
        ULONG   WeakSearchType;
        UCHAR   rgbReserved[12];
    } Sym;
    struct {
        UCHAR   Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        ULONG   Length;                         
        USHORT  NumberOfRelocations;            
        USHORT  NumberOfLinenumbers;            
        ULONG   CheckSum;                       
        SHORT   Number;                         
        UCHAR   Selection;                      
        UCHAR   bReserved;
        SHORT   HighNumber;                     
        UCHAR   rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        UCHAR rgbReserved[2];
    } ;
    struct {
        ULONG crc;
        UCHAR rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX __unaligned *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;






















typedef struct _IMAGE_RELOCATION {
    union {
        ULONG   VirtualAddress;
        ULONG   RelocCount;             
    } ;
    ULONG   SymbolTableIndex;
    USHORT  Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION __unaligned *PIMAGE_RELOCATION;




























































































































                                                
                                                
                                                
                                                









































































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        ULONG   SymbolTableIndex;               
        ULONG   VirtualAddress;                 
    } Type;
    USHORT  Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER __unaligned *PIMAGE_LINENUMBER;


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





typedef struct _IMAGE_BASE_RELOCATION {
    ULONG   VirtualAddress;
    ULONG   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION __unaligned * PIMAGE_BASE_RELOCATION;











































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    UCHAR    Name[16];                          
    UCHAR    Date[12];                          
    UCHAR    UserID[6];                         
    UCHAR    GroupID[6];                        
    UCHAR    Mode[8];                           
    UCHAR    Size[10];                          
    UCHAR    EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    ULONG   Name;
    ULONG   Base;
    ULONG   NumberOfFunctions;
    ULONG   NumberOfNames;
    ULONG   AddressOfFunctions;     
    ULONG   AddressOfNames;         
    ULONG   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    USHORT  Hint;
    CHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack8.h"
#line 1394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        ULONG ForwarderString;      
        ULONG Function;             
        ULONG Ordinal;
        ULONG AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    ULONG Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;         
    ULONGLONG AddressOfCallBacks;     
    ULONG SizeOfZeroFill;
    union {
        ULONG Characteristics;
        struct {
            ULONG Reserved0 : 20;
            ULONG Alignment : 4;
            ULONG Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY64;

typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    ULONG   StartAddressOfRawData;
    ULONG   EndAddressOfRawData;
    ULONG   AddressOfIndex;             
    ULONG   AddressOfCallBacks;         
    ULONG   SizeOfZeroFill;
    union {
        ULONG Characteristics;
        struct {
            ULONG Reserved0 : 20;
            ULONG Alignment : 4;
            ULONG Reserved1 : 8;
        } ;
    } ;

} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;




typedef IMAGE_THUNK_DATA64              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY64           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64          PIMAGE_TLS_DIRECTORY;








#line 1489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        ULONG   Characteristics;            
        ULONG   OriginalFirstThunk;         
    } ;
    ULONG   TimeDateStamp;                  
                                            
                                            
                                            

    ULONG   ForwarderChain;                 
    ULONG   Name;
    ULONG   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    ULONG   TimeDateStamp;
    USHORT  OffsetModuleName;
    USHORT  NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    ULONG   TimeDateStamp;
    USHORT  OffsetModuleName;
    USHORT  Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        ULONG AllAttributes;
        struct {
            ULONG RvaBased : 1;             
            ULONG ReservedAttributes : 31;
        } ;
    } Attributes;

    ULONG DllNameRVA;                       
    ULONG ModuleHandleRVA;                  
    ULONG ImportAddressTableRVA;            
    ULONG ImportNameTableRVA;               
    ULONG BoundImportAddressTableRVA;       
    ULONG UnloadInformationTableRVA;        
    ULONG TimeDateStamp;                    
                                            

} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    USHORT  NumberOfNamedEntries;
    USHORT  NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            ULONG NameOffset:31;
            ULONG NameIsString:1;
        } ;
        ULONG   Name;
        USHORT  Id;
    } ;
    union {
        ULONG   OffsetToData;
        struct {
            ULONG   OffsetToDirectory:31;
            ULONG   DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    USHORT  Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    USHORT  Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    ULONG   OffsetToData;
    ULONG   Size;
    ULONG   CodePage;
    ULONG   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;







typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    USHORT  Flags;          
    USHORT  Catalog;        
    ULONG   CatalogOffset;
    ULONG   Reserved;       
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;





typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
    ULONG Version;
    ULONG Size;

} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_DYNAMIC_RELOCATION32 {
    ULONG      Symbol;
    ULONG      BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION32, *PIMAGE_DYNAMIC_RELOCATION32;

typedef struct _IMAGE_DYNAMIC_RELOCATION64 {
    ULONGLONG  Symbol;
    ULONG      BaseRelocSize;

} IMAGE_DYNAMIC_RELOCATION64, *PIMAGE_DYNAMIC_RELOCATION64;

typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
    ULONG      HeaderSize;
    ULONG      FixupInfoSize;
    ULONG      Symbol;
    ULONG      SymbolGroup;
    ULONG      Flags;
    
    
} IMAGE_DYNAMIC_RELOCATION32_V2, *PIMAGE_DYNAMIC_RELOCATION32_V2;

typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
    ULONG      HeaderSize;
    ULONG      FixupInfoSize;
    ULONGLONG  Symbol;
    ULONG      SymbolGroup;
    ULONG      Flags;
    
    
} IMAGE_DYNAMIC_RELOCATION64_V2, *PIMAGE_DYNAMIC_RELOCATION64_V2;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"


typedef IMAGE_DYNAMIC_RELOCATION64          IMAGE_DYNAMIC_RELOCATION;
typedef PIMAGE_DYNAMIC_RELOCATION64         PIMAGE_DYNAMIC_RELOCATION;
typedef IMAGE_DYNAMIC_RELOCATION64_V2       IMAGE_DYNAMIC_RELOCATION_V2;
typedef PIMAGE_DYNAMIC_RELOCATION64_V2      PIMAGE_DYNAMIC_RELOCATION_V2;





#line 1719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"








#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\pshpack1.h"
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
    UCHAR      PrologueByteCount;
    
} IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER __unaligned * PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;

typedef struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
    ULONG      EpilogueCount;
    UCHAR      EpilogueByteCount;
    UCHAR      BranchDescriptorElementSize;
    USHORT     BranchDescriptorCount;
    
    
} IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER __unaligned * PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    ULONG   Size;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    ULONG   GlobalFlagsClear;
    ULONG   GlobalFlagsSet;
    ULONG   CriticalSectionDefaultTimeout;
    ULONG   DeCommitFreeBlockThreshold;
    ULONG   DeCommitTotalFreeThreshold;
    ULONG   LockPrefixTable;                
    ULONG   MaximumAllocationSize;
    ULONG   VirtualMemoryThreshold;
    ULONG   ProcessHeapFlags;
    ULONG   ProcessAffinityMask;
    USHORT  CSDVersion;
    USHORT  DependentLoadFlags;
    ULONG   EditList;                       
    ULONG   SecurityCookie;                 
    ULONG   SEHandlerTable;                 
    ULONG   SEHandlerCount;
    ULONG   GuardCFCheckFunctionPointer;    
    ULONG   GuardCFDispatchFunctionPointer; 
    ULONG   GuardCFFunctionTable;           
    ULONG   GuardCFFunctionCount;
    ULONG   GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONG   GuardAddressTakenIatEntryTable; 
    ULONG   GuardAddressTakenIatEntryCount;
    ULONG   GuardLongJumpTargetTable;       
    ULONG   GuardLongJumpTargetCount;
    ULONG   DynamicValueRelocTable;         
    ULONG   CHPEMetadataPointer;
    ULONG   GuardRFFailureRoutine;          
    ULONG   GuardRFFailureRoutineFunctionPointer; 
    ULONG   DynamicValueRelocTableOffset;
    USHORT  DynamicValueRelocTableSection;
    USHORT  Reserved2;
    ULONG   GuardRFVerifyStackPointerFunctionPointer; 
    ULONG   HotPatchTableOffset;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    ULONG      Size;
    ULONG      TimeDateStamp;
    USHORT     MajorVersion;
    USHORT     MinorVersion;
    ULONG      GlobalFlagsClear;
    ULONG      GlobalFlagsSet;
    ULONG      CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;                
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    ULONG      ProcessHeapFlags;
    USHORT     CSDVersion;
    USHORT     DependentLoadFlags;
    ULONGLONG  EditList;                       
    ULONGLONG  SecurityCookie;                 
    ULONGLONG  SEHandlerTable;                 
    ULONGLONG  SEHandlerCount;
    ULONGLONG  GuardCFCheckFunctionPointer;    
    ULONGLONG  GuardCFDispatchFunctionPointer; 
    ULONGLONG  GuardCFFunctionTable;           
    ULONGLONG  GuardCFFunctionCount;
    ULONG      GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONGLONG  GuardAddressTakenIatEntryTable; 
    ULONGLONG  GuardAddressTakenIatEntryCount;
    ULONGLONG  GuardLongJumpTargetTable;       
    ULONGLONG  GuardLongJumpTargetCount;
    ULONGLONG  DynamicValueRelocTable;         
    ULONGLONG  CHPEMetadataPointer;            
    ULONGLONG  GuardRFFailureRoutine;          
    ULONGLONG  GuardRFFailureRoutineFunctionPointer; 
    ULONG      DynamicValueRelocTableOffset;
    USHORT     DynamicValueRelocTableSection;
    USHORT     Reserved2;
    ULONGLONG  GuardRFVerifyStackPointerFunctionPointer; 
    ULONG      HotPatchTableOffset;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;




typedef struct _IMAGE_CHPE_METADATA_X86 {
    ULONG  Version;
    ULONG  CHPECodeAddressRangeOffset;
    ULONG  CHPECodeAddressRangeCount;
    ULONG  WowA64ExceptionHandlerFunctionPointer;
    ULONG  WowA64DispatchCallFunctionPointer;
    ULONG  WowA64DispatchIndirectCallFunctionPointer;
    ULONG  WowA64DispatchIndirectCallCfgFunctionPointer;
    ULONG  WowA64DispatchRetFunctionPointer;
    ULONG  WowA64DispatchRetLeafFunctionPointer;
    ULONG  WowA64DispatchJumpFunctionPointer;
} IMAGE_CHPE_METADATA_X86, *PIMAGE_CHPE_METADATA_X86;

typedef struct _IMAGE_CHPE_RANGE_ENTRY {
    union {
        ULONG StartOffset;
        struct {
            ULONG NativeCode : 1;
            ULONG AddressBits : 31;
        } ;
    } ;

    ULONG Length;
} IMAGE_CHPE_RANGE_ENTRY, *PIMAGE_CHPE_RANGE_ENTRY;





typedef IMAGE_LOAD_CONFIG_DIRECTORY64     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64    PIMAGE_LOAD_CONFIG_DIRECTORY;



#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"



typedef struct _IMAGE_HOT_PATCH_INFO {
    ULONG Version;
    ULONG Size;
    ULONG SequenceNumber;
    ULONG BaseImageList;
    ULONG BaseImageCount;
} IMAGE_HOT_PATCH_INFO, *PIMAGE_HOT_PATCH_INFO;

typedef struct _IMAGE_HOT_PATCH_BASE {
    ULONG SequenceNumber;
    ULONG Flags;
    ULONG OriginalTimeDateStamp;
    ULONG OriginalCheckSum;
    ULONG CodeIntegrityInfo;
    ULONG CodeIntegritySize;
    ULONG PatchTable;
} IMAGE_HOT_PATCH_BASE, *PIMAGE_HOT_PATCH_BASE;

typedef struct _IMAGE_HOT_PATCH_HASHES {
    UCHAR SHA256[32];
    UCHAR SHA1[20];
} IMAGE_HOT_PATCH_HASHES, *PIMAGE_HOT_PATCH_HASHES;



























                                                                  
























typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    ULONG FuncStart;
    ULONG PrologLen : 8;
    ULONG FuncLen : 22;
    ULONG ThirtyTwoBit : 1;
    ULONG ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    union {
        ULONG UnwindData;
        struct {
            ULONG Flag : 2;
            ULONG FunctionLength : 11;
            ULONG Ret : 2;
            ULONG H : 1;
            ULONG Reg : 3;
            ULONG R : 1;
            ULONG L : 1;
            ULONG C : 1;
            ULONG StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    union {
        ULONG UnwindData;
        struct {
            ULONG Flag : 2;
            ULONG FunctionLength : 11;
            ULONG RegF : 3;
            ULONG RegI : 4;
            ULONG H : 1;
            ULONG CR : 2;
            ULONG FrameSize : 9;
        } ;
    } ;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    ULONG ExceptionHandler;
    ULONG HandlerData;
    ULONG PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    ULONG BeginAddress;
    ULONG EndAddress;
    union {
        ULONG UnwindInfoAddress;
        ULONG UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"




#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"




#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"




#line 2043 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"





typedef struct _IMAGE_DEBUG_DIRECTORY {
    ULONG   Characteristics;
    ULONG   TimeDateStamp;
    USHORT  MajorVersion;
    USHORT  MinorVersion;
    ULONG   Type;
    ULONG   SizeOfData;
    ULONG   AddressOfRawData;
    ULONG   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

























typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    ULONG   NumberOfSymbols;
    ULONG   LvaToFirstSymbol;
    ULONG   NumberOfLinenumbers;
    ULONG   LvaToFirstLinenumber;
    ULONG   RvaToFirstByteOfCode;
    ULONG   RvaToLastByteOfCode;
    ULONG   RvaToFirstByteOfData;
    ULONG   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    ULONG       ulOffStart;             
    ULONG       cbProcSize;             
    ULONG       cdwLocals;              
    USHORT      cdwParams;              
    USHORT      cbProlog : 8;           
    USHORT      cbRegs   : 3;           
    USHORT      fHasSEH  : 1;           
    USHORT      fUseBP   : 1;           
    USHORT      reserved : 1;           
    USHORT      cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    ULONG       DataType;               
    ULONG       Length;                 
                                        
    BOOLEAN     Unicode;                
    UCHAR       Reserved[ 3 ];
    UCHAR       Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    ULONG   StartingAddress;
    ULONG   EndingAddress;
    ULONG   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    USHORT      Signature;
    USHORT      Flags;
    USHORT      Machine;
    USHORT      Characteristics;
    ULONG       TimeDateStamp;
    ULONG       CheckSum;
    ULONG       ImageBase;
    ULONG       SizeOfImage;
    ULONG       NumberOfSections;
    ULONG       ExportedNamesSize;
    ULONG       DebugDirectorySize;
    ULONG       SectionAlignment;
    ULONG       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;



typedef struct _NON_PAGED_DEBUG_INFO {
    USHORT      Signature;
    USHORT      Flags;
    ULONG       Size;
    USHORT      Machine;
    USHORT      Characteristics;
    ULONG       TimeDateStamp;
    ULONG       CheckSum;
    ULONG       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;









#line 2213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    ULONG FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    ULONG FixupInstRVA;                         
    ULONG NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\shared\\poppack.h"
#line 2241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"








typedef struct IMPORT_OBJECT_HEADER {
    USHORT  Sig1;                       
    USHORT  Sig2;                       
    USHORT  Version;
    USHORT  Machine;
    ULONG   TimeDateStamp;              
    ULONG   SizeOfData;                 

    union {
        USHORT  Ordinal;                
        USHORT  Hint;
    } ;

    USHORT  Type : 2;                   
    USHORT  NameType : 3;               
    USHORT  Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
    IMPORT_OBJECT_NAME_EXPORTAS = 4,    
} IMPORT_OBJECT_NAME_TYPE;











typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT    =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED       =0x00020000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =5,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN  =0x08,  
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    ULONG                   cb;
    USHORT                  MajorRuntimeVersion;
    USHORT                  MinorRuntimeVersion;

    
    IMAGE_DATA_DIRECTORY    MetaData;
    ULONG                   Flags;

    
    
    union {
        ULONG               EntryPointToken;
        ULONG               EntryPointRVA;
    } ;

    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#line 2371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"







typedef IMAGE_OS2_HEADER __unaligned * PUIMAGE_OS2_HEADER;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned const *PCIMAGE_IMPORT_DESCRIPTOR;
typedef const IMAGE_BOUND_IMPORT_DESCRIPTOR *PCIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef const IMAGE_BOUND_FORWARDER_REF     *PCIMAGE_BOUND_FORWARDER_REF;
typedef const IMAGE_IMPORT_BY_NAME          *PCIMAGE_IMPORT_BY_NAME;
typedef const IMAGE_THUNK_DATA              *PCIMAGE_THUNK_DATA;
typedef const IMAGE_THUNK_DATA32            *PCIMAGE_THUNK_DATA32;
typedef const IMAGE_THUNK_DATA64            *PCIMAGE_THUNK_DATA64;
typedef const IMAGE_TLS_DIRECTORY           *PCIMAGE_TLS_DIRECTORY;
typedef const IMAGE_TLS_DIRECTORY32         *PCIMAGE_TLS_DIRECTORY32;
typedef const IMAGE_TLS_DIRECTORY64         *PCIMAGE_TLS_DIRECTORY64;
typedef const IMAGE_EXPORT_DIRECTORY        *PCIMAGE_EXPORT_DIRECTORY;
typedef const IMAGE_SECTION_HEADER          *PCIMAGE_SECTION_HEADER;


#pragma warning(pop)
#line 2395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

#line 2397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.15063.0\\km\\ntimage.h"

#line 4 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\utils/image.h"





 
PIMAGE_SECTION_HEADER
__stdcall
AvmSectionTableFromVirtualAddress(
    PIMAGE_NT_HEADERS NtHeaders,
    ULONG Address
  );

 
PIMAGE_SECTION_HEADER
__stdcall
AvmSectionTableFromSectionName(
    PIMAGE_NT_HEADERS NtHeaders,
    PCHAR SectionName
  );

 
PVOID
__stdcall
AvmFindEndOfSectionFromAddress(
    PVOID Address,
    PVOID BaseAddress,
    PULONG SizeOfSection
  );

#line 9 "device\\hook.c"

#pragma prefast(disable:28132)









#pragma section(".hdef", read, write)




const ULONG AvmpHookDefinitionFirst = 2;
#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"































#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_ntstatus.inl"
AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_NTSTATUS[] = { { { sizeof( "STATUS_SUCCESS" ) - sizeof( ("STATUS_SUCCESS")[0] ), sizeof( "STATUS_SUCCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SUCCESS")), ("STATUS_SUCCESS") }, (ULONG)((NTSTATUS)0x00000000L) }, { { sizeof( "STATUS_WAIT_1" ) - sizeof( ("STATUS_WAIT_1")[0] ), sizeof( "STATUS_WAIT_1" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAIT_1")), ("STATUS_WAIT_1") }, (ULONG)((NTSTATUS)0x00000001L) }, { { sizeof( "STATUS_WAIT_2" ) - sizeof( ("STATUS_WAIT_2")[0] ), sizeof( "STATUS_WAIT_2" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAIT_2")), ("STATUS_WAIT_2") }, (ULONG)((NTSTATUS)0x00000002L) }, { { sizeof( "STATUS_WAIT_3" ) - sizeof( ("STATUS_WAIT_3")[0] ), sizeof( "STATUS_WAIT_3" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAIT_3")), ("STATUS_WAIT_3") }, (ULONG)((NTSTATUS)0x00000003L) }, { { sizeof( "STATUS_WAIT_63" ) - sizeof( ("STATUS_WAIT_63")[0] ), sizeof( "STATUS_WAIT_63" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAIT_63")), ("STATUS_WAIT_63") }, (ULONG)((NTSTATUS)0x0000003FL) }, { { sizeof( "STATUS_ABANDONED" ) - sizeof( ("STATUS_ABANDONED")[0] ), sizeof( "STATUS_ABANDONED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABANDONED")), ("STATUS_ABANDONED") }, (ULONG)((NTSTATUS)0x00000080L) }, { { sizeof( "STATUS_ABANDONED_WAIT_0" ) - sizeof( ("STATUS_ABANDONED_WAIT_0")[0] ), sizeof( "STATUS_ABANDONED_WAIT_0" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABANDONED_WAIT_0")), ("STATUS_ABANDONED_WAIT_0") }, (ULONG)((NTSTATUS)0x00000080L) }, { { sizeof( "STATUS_ABANDONED_WAIT_63" ) - sizeof( ("STATUS_ABANDONED_WAIT_63")[0] ), sizeof( "STATUS_ABANDONED_WAIT_63" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABANDONED_WAIT_63")), ("STATUS_ABANDONED_WAIT_63") }, (ULONG)((NTSTATUS)0x000000BFL) }, { { sizeof( "STATUS_USER_APC" ) - sizeof( ("STATUS_USER_APC")[0] ), sizeof( "STATUS_USER_APC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_USER_APC")), ("STATUS_USER_APC") }, (ULONG)((NTSTATUS)0x000000C0L) }, { { sizeof( "STATUS_ALREADY_COMPLETE" ) - sizeof( ("STATUS_ALREADY_COMPLETE")[0] ), sizeof( "STATUS_ALREADY_COMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALREADY_COMPLETE")), ("STATUS_ALREADY_COMPLETE") }, (ULONG)((NTSTATUS)0x000000FFL) }, { { sizeof( "STATUS_KERNEL_APC" ) - sizeof( ("STATUS_KERNEL_APC")[0] ), sizeof( "STATUS_KERNEL_APC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KERNEL_APC")), ("STATUS_KERNEL_APC") }, (ULONG)((NTSTATUS)0x00000100L) }, { { sizeof( "STATUS_ALERTED" ) - sizeof( ("STATUS_ALERTED")[0] ), sizeof( "STATUS_ALERTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALERTED")), ("STATUS_ALERTED") }, (ULONG)((NTSTATUS)0x00000101L) }, { { sizeof( "STATUS_TIMEOUT" ) - sizeof( ("STATUS_TIMEOUT")[0] ), sizeof( "STATUS_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TIMEOUT")), ("STATUS_TIMEOUT") }, (ULONG)((NTSTATUS)0x00000102L) }, { { sizeof( "STATUS_PENDING" ) - sizeof( ("STATUS_PENDING")[0] ), sizeof( "STATUS_PENDING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PENDING")), ("STATUS_PENDING") }, (ULONG)((NTSTATUS)0x00000103L) }, { { sizeof( "STATUS_REPARSE" ) - sizeof( ("STATUS_REPARSE")[0] ), sizeof( "STATUS_REPARSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPARSE")), ("STATUS_REPARSE") }, (ULONG)((NTSTATUS)0x00000104L) }, { { sizeof( "STATUS_MORE_ENTRIES" ) - sizeof( ("STATUS_MORE_ENTRIES")[0] ), sizeof( "STATUS_MORE_ENTRIES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MORE_ENTRIES")), ("STATUS_MORE_ENTRIES") }, (ULONG)((NTSTATUS)0x00000105L) }, { { sizeof( "STATUS_NOT_ALL_ASSIGNED" ) - sizeof( ("STATUS_NOT_ALL_ASSIGNED")[0] ), sizeof( "STATUS_NOT_ALL_ASSIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_ALL_ASSIGNED")), ("STATUS_NOT_ALL_ASSIGNED") }, (ULONG)((NTSTATUS)0x00000106L) }, { { sizeof( "STATUS_SOME_NOT_MAPPED" ) - sizeof( ("STATUS_SOME_NOT_MAPPED")[0] ), sizeof( "STATUS_SOME_NOT_MAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SOME_NOT_MAPPED")), ("STATUS_SOME_NOT_MAPPED") }, (ULONG)((NTSTATUS)0x00000107L) }, { { sizeof( "STATUS_OPLOCK_BREAK_IN_PROGRESS" ) - sizeof( ("STATUS_OPLOCK_BREAK_IN_PROGRESS")[0] ), sizeof( "STATUS_OPLOCK_BREAK_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPLOCK_BREAK_IN_PROGRESS")), ("STATUS_OPLOCK_BREAK_IN_PROGRESS") }, (ULONG)((NTSTATUS)0x00000108L) }, { { sizeof( "STATUS_VOLUME_MOUNTED" ) - sizeof( ("STATUS_VOLUME_MOUNTED")[0] ), sizeof( "STATUS_VOLUME_MOUNTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLUME_MOUNTED")), ("STATUS_VOLUME_MOUNTED") }, (ULONG)((NTSTATUS)0x00000109L) }, { { sizeof( "STATUS_RXACT_COMMITTED" ) - sizeof( ("STATUS_RXACT_COMMITTED")[0] ), sizeof( "STATUS_RXACT_COMMITTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RXACT_COMMITTED")), ("STATUS_RXACT_COMMITTED") }, (ULONG)((NTSTATUS)0x0000010AL) }, { { sizeof( "STATUS_NOTIFY_CLEANUP" ) - sizeof( ("STATUS_NOTIFY_CLEANUP")[0] ), sizeof( "STATUS_NOTIFY_CLEANUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOTIFY_CLEANUP")), ("STATUS_NOTIFY_CLEANUP") }, (ULONG)((NTSTATUS)0x0000010BL) }, { { sizeof( "STATUS_NOTIFY_ENUM_DIR" ) - sizeof( ("STATUS_NOTIFY_ENUM_DIR")[0] ), sizeof( "STATUS_NOTIFY_ENUM_DIR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOTIFY_ENUM_DIR")), ("STATUS_NOTIFY_ENUM_DIR") }, (ULONG)((NTSTATUS)0x0000010CL) }, { { sizeof( "STATUS_NO_QUOTAS_FOR_ACCOUNT" ) - sizeof( ("STATUS_NO_QUOTAS_FOR_ACCOUNT")[0] ), sizeof( "STATUS_NO_QUOTAS_FOR_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_QUOTAS_FOR_ACCOUNT")), ("STATUS_NO_QUOTAS_FOR_ACCOUNT") }, (ULONG)((NTSTATUS)0x0000010DL) }, { { sizeof( "STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED" ) - sizeof( ("STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED")[0] ), sizeof( "STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED")), ("STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED") }, (ULONG)((NTSTATUS)0x0000010EL) }, { { sizeof( "STATUS_PAGE_FAULT_TRANSITION" ) - sizeof( ("STATUS_PAGE_FAULT_TRANSITION")[0] ), sizeof( "STATUS_PAGE_FAULT_TRANSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGE_FAULT_TRANSITION")), ("STATUS_PAGE_FAULT_TRANSITION") }, (ULONG)((NTSTATUS)0x00000110L) }, { { sizeof( "STATUS_PAGE_FAULT_DEMAND_ZERO" ) - sizeof( ("STATUS_PAGE_FAULT_DEMAND_ZERO")[0] ), sizeof( "STATUS_PAGE_FAULT_DEMAND_ZERO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGE_FAULT_DEMAND_ZERO")), ("STATUS_PAGE_FAULT_DEMAND_ZERO") }, (ULONG)((NTSTATUS)0x00000111L) }, { { sizeof( "STATUS_PAGE_FAULT_COPY_ON_WRITE" ) - sizeof( ("STATUS_PAGE_FAULT_COPY_ON_WRITE")[0] ), sizeof( "STATUS_PAGE_FAULT_COPY_ON_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGE_FAULT_COPY_ON_WRITE")), ("STATUS_PAGE_FAULT_COPY_ON_WRITE") }, (ULONG)((NTSTATUS)0x00000112L) }, { { sizeof( "STATUS_PAGE_FAULT_GUARD_PAGE" ) - sizeof( ("STATUS_PAGE_FAULT_GUARD_PAGE")[0] ), sizeof( "STATUS_PAGE_FAULT_GUARD_PAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGE_FAULT_GUARD_PAGE")), ("STATUS_PAGE_FAULT_GUARD_PAGE") }, (ULONG)((NTSTATUS)0x00000113L) }, { { sizeof( "STATUS_PAGE_FAULT_PAGING_FILE" ) - sizeof( ("STATUS_PAGE_FAULT_PAGING_FILE")[0] ), sizeof( "STATUS_PAGE_FAULT_PAGING_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGE_FAULT_PAGING_FILE")), ("STATUS_PAGE_FAULT_PAGING_FILE") }, (ULONG)((NTSTATUS)0x00000114L) }, { { sizeof( "STATUS_CACHE_PAGE_LOCKED" ) - sizeof( ("STATUS_CACHE_PAGE_LOCKED")[0] ), sizeof( "STATUS_CACHE_PAGE_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CACHE_PAGE_LOCKED")), ("STATUS_CACHE_PAGE_LOCKED") }, (ULONG)((NTSTATUS)0x00000115L) }, { { sizeof( "STATUS_CRASH_DUMP" ) - sizeof( ("STATUS_CRASH_DUMP")[0] ), sizeof( "STATUS_CRASH_DUMP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CRASH_DUMP")), ("STATUS_CRASH_DUMP") }, (ULONG)((NTSTATUS)0x00000116L) }, { { sizeof( "STATUS_BUFFER_ALL_ZEROS" ) - sizeof( ("STATUS_BUFFER_ALL_ZEROS")[0] ), sizeof( "STATUS_BUFFER_ALL_ZEROS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BUFFER_ALL_ZEROS")), ("STATUS_BUFFER_ALL_ZEROS") }, (ULONG)((NTSTATUS)0x00000117L) }, { { sizeof( "STATUS_REPARSE_OBJECT" ) - sizeof( ("STATUS_REPARSE_OBJECT")[0] ), sizeof( "STATUS_REPARSE_OBJECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPARSE_OBJECT")), ("STATUS_REPARSE_OBJECT") }, (ULONG)((NTSTATUS)0x00000118L) }, { { sizeof( "STATUS_RESOURCE_REQUIREMENTS_CHANGED" ) - sizeof( ("STATUS_RESOURCE_REQUIREMENTS_CHANGED")[0] ), sizeof( "STATUS_RESOURCE_REQUIREMENTS_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_REQUIREMENTS_CHANGED")), ("STATUS_RESOURCE_REQUIREMENTS_CHANGED") }, (ULONG)((NTSTATUS)0x00000119L) }, { { sizeof( "STATUS_TRANSLATION_COMPLETE" ) - sizeof( ("STATUS_TRANSLATION_COMPLETE")[0] ), sizeof( "STATUS_TRANSLATION_COMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSLATION_COMPLETE")), ("STATUS_TRANSLATION_COMPLETE") }, (ULONG)((NTSTATUS)0x00000120L) }, { { sizeof( "STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY" ) - sizeof( ("STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY")[0] ), sizeof( "STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY")), ("STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY") }, (ULONG)((NTSTATUS)0x00000121L) }, { { sizeof( "STATUS_NOTHING_TO_TERMINATE" ) - sizeof( ("STATUS_NOTHING_TO_TERMINATE")[0] ), sizeof( "STATUS_NOTHING_TO_TERMINATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOTHING_TO_TERMINATE")), ("STATUS_NOTHING_TO_TERMINATE") }, (ULONG)((NTSTATUS)0x00000122L) }, { { sizeof( "STATUS_PROCESS_NOT_IN_JOB" ) - sizeof( ("STATUS_PROCESS_NOT_IN_JOB")[0] ), sizeof( "STATUS_PROCESS_NOT_IN_JOB" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROCESS_NOT_IN_JOB")), ("STATUS_PROCESS_NOT_IN_JOB") }, (ULONG)((NTSTATUS)0x00000123L) }, { { sizeof( "STATUS_PROCESS_IN_JOB" ) - sizeof( ("STATUS_PROCESS_IN_JOB")[0] ), sizeof( "STATUS_PROCESS_IN_JOB" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROCESS_IN_JOB")), ("STATUS_PROCESS_IN_JOB") }, (ULONG)((NTSTATUS)0x00000124L) }, { { sizeof( "STATUS_VOLSNAP_HIBERNATE_READY" ) - sizeof( ("STATUS_VOLSNAP_HIBERNATE_READY")[0] ), sizeof( "STATUS_VOLSNAP_HIBERNATE_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLSNAP_HIBERNATE_READY")), ("STATUS_VOLSNAP_HIBERNATE_READY") }, (ULONG)((NTSTATUS)0x00000125L) }, { { sizeof( "STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY" ) - sizeof( ("STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY")[0] ), sizeof( "STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY")), ("STATUS_FSFILTER_OP_COMPLETED_SUCCESSFULLY") }, (ULONG)((NTSTATUS)0x00000126L) }, { { sizeof( "STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED" ) - sizeof( ("STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED")[0] ), sizeof( "STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED")), ("STATUS_INTERRUPT_VECTOR_ALREADY_CONNECTED") }, (ULONG)((NTSTATUS)0x00000127L) }, { { sizeof( "STATUS_INTERRUPT_STILL_CONNECTED" ) - sizeof( ("STATUS_INTERRUPT_STILL_CONNECTED")[0] ), sizeof( "STATUS_INTERRUPT_STILL_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTERRUPT_STILL_CONNECTED")), ("STATUS_INTERRUPT_STILL_CONNECTED") }, (ULONG)((NTSTATUS)0x00000128L) }, { { sizeof( "STATUS_PROCESS_CLONED" ) - sizeof( ("STATUS_PROCESS_CLONED")[0] ), sizeof( "STATUS_PROCESS_CLONED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROCESS_CLONED")), ("STATUS_PROCESS_CLONED") }, (ULONG)((NTSTATUS)0x00000129L) }, { { sizeof( "STATUS_FILE_LOCKED_WITH_ONLY_READERS" ) - sizeof( ("STATUS_FILE_LOCKED_WITH_ONLY_READERS")[0] ), sizeof( "STATUS_FILE_LOCKED_WITH_ONLY_READERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_LOCKED_WITH_ONLY_READERS")), ("STATUS_FILE_LOCKED_WITH_ONLY_READERS") }, (ULONG)((NTSTATUS)0x0000012AL) }, { { sizeof( "STATUS_FILE_LOCKED_WITH_WRITERS" ) - sizeof( ("STATUS_FILE_LOCKED_WITH_WRITERS")[0] ), sizeof( "STATUS_FILE_LOCKED_WITH_WRITERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_LOCKED_WITH_WRITERS")), ("STATUS_FILE_LOCKED_WITH_WRITERS") }, (ULONG)((NTSTATUS)0x0000012BL) }, { { sizeof( "STATUS_VALID_IMAGE_HASH" ) - sizeof( ("STATUS_VALID_IMAGE_HASH")[0] ), sizeof( "STATUS_VALID_IMAGE_HASH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VALID_IMAGE_HASH")), ("STATUS_VALID_IMAGE_HASH") }, (ULONG)((NTSTATUS)0x0000012CL) }, { { sizeof( "STATUS_VALID_CATALOG_HASH" ) - sizeof( ("STATUS_VALID_CATALOG_HASH")[0] ), sizeof( "STATUS_VALID_CATALOG_HASH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VALID_CATALOG_HASH")), ("STATUS_VALID_CATALOG_HASH") }, (ULONG)((NTSTATUS)0x0000012DL) }, { { sizeof( "STATUS_VALID_STRONG_CODE_HASH" ) - sizeof( ("STATUS_VALID_STRONG_CODE_HASH")[0] ), sizeof( "STATUS_VALID_STRONG_CODE_HASH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VALID_STRONG_CODE_HASH")), ("STATUS_VALID_STRONG_CODE_HASH") }, (ULONG)((NTSTATUS)0x0000012EL) }, { { sizeof( "STATUS_GHOSTED" ) - sizeof( ("STATUS_GHOSTED")[0] ), sizeof( "STATUS_GHOSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GHOSTED")), ("STATUS_GHOSTED") }, (ULONG)((NTSTATUS)0x0000012FL) }, { { sizeof( "STATUS_RESOURCEMANAGER_READ_ONLY" ) - sizeof( ("STATUS_RESOURCEMANAGER_READ_ONLY")[0] ), sizeof( "STATUS_RESOURCEMANAGER_READ_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCEMANAGER_READ_ONLY")), ("STATUS_RESOURCEMANAGER_READ_ONLY") }, (ULONG)((NTSTATUS)0x00000202L) }, { { sizeof( "STATUS_RING_PREVIOUSLY_EMPTY" ) - sizeof( ("STATUS_RING_PREVIOUSLY_EMPTY")[0] ), sizeof( "STATUS_RING_PREVIOUSLY_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RING_PREVIOUSLY_EMPTY")), ("STATUS_RING_PREVIOUSLY_EMPTY") }, (ULONG)((NTSTATUS)0x00000210L) }, { { sizeof( "STATUS_RING_PREVIOUSLY_FULL" ) - sizeof( ("STATUS_RING_PREVIOUSLY_FULL")[0] ), sizeof( "STATUS_RING_PREVIOUSLY_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RING_PREVIOUSLY_FULL")), ("STATUS_RING_PREVIOUSLY_FULL") }, (ULONG)((NTSTATUS)0x00000211L) }, { { sizeof( "STATUS_RING_PREVIOUSLY_ABOVE_QUOTA" ) - sizeof( ("STATUS_RING_PREVIOUSLY_ABOVE_QUOTA")[0] ), sizeof( "STATUS_RING_PREVIOUSLY_ABOVE_QUOTA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RING_PREVIOUSLY_ABOVE_QUOTA")), ("STATUS_RING_PREVIOUSLY_ABOVE_QUOTA") }, (ULONG)((NTSTATUS)0x00000212L) }, { { sizeof( "STATUS_RING_NEWLY_EMPTY" ) - sizeof( ("STATUS_RING_NEWLY_EMPTY")[0] ), sizeof( "STATUS_RING_NEWLY_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RING_NEWLY_EMPTY")), ("STATUS_RING_NEWLY_EMPTY") }, (ULONG)((NTSTATUS)0x00000213L) }, { { sizeof( "STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT" ) - sizeof( ("STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT")[0] ), sizeof( "STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT")), ("STATUS_RING_SIGNAL_OPPOSITE_ENDPOINT") }, (ULONG)((NTSTATUS)0x00000214L) }, { { sizeof( "STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE" ) - sizeof( ("STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE")[0] ), sizeof( "STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE")), ("STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE") }, (ULONG)((NTSTATUS)0x00000215L) }, { { sizeof( "STATUS_OPLOCK_HANDLE_CLOSED" ) - sizeof( ("STATUS_OPLOCK_HANDLE_CLOSED")[0] ), sizeof( "STATUS_OPLOCK_HANDLE_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPLOCK_HANDLE_CLOSED")), ("STATUS_OPLOCK_HANDLE_CLOSED") }, (ULONG)((NTSTATUS)0x00000216L) }, { { sizeof( "STATUS_WAIT_FOR_OPLOCK" ) - sizeof( ("STATUS_WAIT_FOR_OPLOCK")[0] ), sizeof( "STATUS_WAIT_FOR_OPLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAIT_FOR_OPLOCK")), ("STATUS_WAIT_FOR_OPLOCK") }, (ULONG)((NTSTATUS)0x00000367L) }, { { sizeof( "STATUS_REPARSE_GLOBAL" ) - sizeof( ("STATUS_REPARSE_GLOBAL")[0] ), sizeof( "STATUS_REPARSE_GLOBAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPARSE_GLOBAL")), ("STATUS_REPARSE_GLOBAL") }, (ULONG)((NTSTATUS)0x00000368L) }, { { sizeof( "STATUS_FLT_IO_COMPLETE" ) - sizeof( ("STATUS_FLT_IO_COMPLETE")[0] ), sizeof( "STATUS_FLT_IO_COMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_IO_COMPLETE")), ("STATUS_FLT_IO_COMPLETE") }, (ULONG)((NTSTATUS)0x001C0001L) }, { { sizeof( "STATUS_OBJECT_NAME_EXISTS" ) - sizeof( ("STATUS_OBJECT_NAME_EXISTS")[0] ), sizeof( "STATUS_OBJECT_NAME_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_NAME_EXISTS")), ("STATUS_OBJECT_NAME_EXISTS") }, (ULONG)((NTSTATUS)0x40000000L) }, { { sizeof( "STATUS_THREAD_WAS_SUSPENDED" ) - sizeof( ("STATUS_THREAD_WAS_SUSPENDED")[0] ), sizeof( "STATUS_THREAD_WAS_SUSPENDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREAD_WAS_SUSPENDED")), ("STATUS_THREAD_WAS_SUSPENDED") }, (ULONG)((NTSTATUS)0x40000001L) }, { { sizeof( "STATUS_WORKING_SET_LIMIT_RANGE" ) - sizeof( ("STATUS_WORKING_SET_LIMIT_RANGE")[0] ), sizeof( "STATUS_WORKING_SET_LIMIT_RANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WORKING_SET_LIMIT_RANGE")), ("STATUS_WORKING_SET_LIMIT_RANGE") }, (ULONG)((NTSTATUS)0x40000002L) }, { { sizeof( "STATUS_IMAGE_NOT_AT_BASE" ) - sizeof( ("STATUS_IMAGE_NOT_AT_BASE")[0] ), sizeof( "STATUS_IMAGE_NOT_AT_BASE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_NOT_AT_BASE")), ("STATUS_IMAGE_NOT_AT_BASE") }, (ULONG)((NTSTATUS)0x40000003L) }, { { sizeof( "STATUS_RXACT_STATE_CREATED" ) - sizeof( ("STATUS_RXACT_STATE_CREATED")[0] ), sizeof( "STATUS_RXACT_STATE_CREATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RXACT_STATE_CREATED")), ("STATUS_RXACT_STATE_CREATED") }, (ULONG)((NTSTATUS)0x40000004L) }, { { sizeof( "STATUS_SEGMENT_NOTIFICATION" ) - sizeof( ("STATUS_SEGMENT_NOTIFICATION")[0] ), sizeof( "STATUS_SEGMENT_NOTIFICATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SEGMENT_NOTIFICATION")), ("STATUS_SEGMENT_NOTIFICATION") }, (ULONG)((NTSTATUS)0x40000005L) }, { { sizeof( "STATUS_LOCAL_USER_SESSION_KEY" ) - sizeof( ("STATUS_LOCAL_USER_SESSION_KEY")[0] ), sizeof( "STATUS_LOCAL_USER_SESSION_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOCAL_USER_SESSION_KEY")), ("STATUS_LOCAL_USER_SESSION_KEY") }, (ULONG)((NTSTATUS)0x40000006L) }, { { sizeof( "STATUS_BAD_CURRENT_DIRECTORY" ) - sizeof( ("STATUS_BAD_CURRENT_DIRECTORY")[0] ), sizeof( "STATUS_BAD_CURRENT_DIRECTORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_CURRENT_DIRECTORY")), ("STATUS_BAD_CURRENT_DIRECTORY") }, (ULONG)((NTSTATUS)0x40000007L) }, { { sizeof( "STATUS_SERIAL_MORE_WRITES" ) - sizeof( ("STATUS_SERIAL_MORE_WRITES")[0] ), sizeof( "STATUS_SERIAL_MORE_WRITES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERIAL_MORE_WRITES")), ("STATUS_SERIAL_MORE_WRITES") }, (ULONG)((NTSTATUS)0x40000008L) }, { { sizeof( "STATUS_REGISTRY_RECOVERED" ) - sizeof( ("STATUS_REGISTRY_RECOVERED")[0] ), sizeof( "STATUS_REGISTRY_RECOVERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REGISTRY_RECOVERED")), ("STATUS_REGISTRY_RECOVERED") }, (ULONG)((NTSTATUS)0x40000009L) }, { { sizeof( "STATUS_FT_READ_RECOVERY_FROM_BACKUP" ) - sizeof( ("STATUS_FT_READ_RECOVERY_FROM_BACKUP")[0] ), sizeof( "STATUS_FT_READ_RECOVERY_FROM_BACKUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_READ_RECOVERY_FROM_BACKUP")), ("STATUS_FT_READ_RECOVERY_FROM_BACKUP") }, (ULONG)((NTSTATUS)0x4000000AL) }, { { sizeof( "STATUS_FT_WRITE_RECOVERY" ) - sizeof( ("STATUS_FT_WRITE_RECOVERY")[0] ), sizeof( "STATUS_FT_WRITE_RECOVERY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_WRITE_RECOVERY")), ("STATUS_FT_WRITE_RECOVERY") }, (ULONG)((NTSTATUS)0x4000000BL) }, { { sizeof( "STATUS_SERIAL_COUNTER_TIMEOUT" ) - sizeof( ("STATUS_SERIAL_COUNTER_TIMEOUT")[0] ), sizeof( "STATUS_SERIAL_COUNTER_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERIAL_COUNTER_TIMEOUT")), ("STATUS_SERIAL_COUNTER_TIMEOUT") }, (ULONG)((NTSTATUS)0x4000000CL) }, { { sizeof( "STATUS_NULL_LM_PASSWORD" ) - sizeof( ("STATUS_NULL_LM_PASSWORD")[0] ), sizeof( "STATUS_NULL_LM_PASSWORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NULL_LM_PASSWORD")), ("STATUS_NULL_LM_PASSWORD") }, (ULONG)((NTSTATUS)0x4000000DL) }, { { sizeof( "STATUS_IMAGE_MACHINE_TYPE_MISMATCH" ) - sizeof( ("STATUS_IMAGE_MACHINE_TYPE_MISMATCH")[0] ), sizeof( "STATUS_IMAGE_MACHINE_TYPE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_MACHINE_TYPE_MISMATCH")), ("STATUS_IMAGE_MACHINE_TYPE_MISMATCH") }, (ULONG)((NTSTATUS)0x4000000EL) }, { { sizeof( "STATUS_RECEIVE_PARTIAL" ) - sizeof( ("STATUS_RECEIVE_PARTIAL")[0] ), sizeof( "STATUS_RECEIVE_PARTIAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RECEIVE_PARTIAL")), ("STATUS_RECEIVE_PARTIAL") }, (ULONG)((NTSTATUS)0x4000000FL) }, { { sizeof( "STATUS_RECEIVE_EXPEDITED" ) - sizeof( ("STATUS_RECEIVE_EXPEDITED")[0] ), sizeof( "STATUS_RECEIVE_EXPEDITED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RECEIVE_EXPEDITED")), ("STATUS_RECEIVE_EXPEDITED") }, (ULONG)((NTSTATUS)0x40000010L) }, { { sizeof( "STATUS_RECEIVE_PARTIAL_EXPEDITED" ) - sizeof( ("STATUS_RECEIVE_PARTIAL_EXPEDITED")[0] ), sizeof( "STATUS_RECEIVE_PARTIAL_EXPEDITED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RECEIVE_PARTIAL_EXPEDITED")), ("STATUS_RECEIVE_PARTIAL_EXPEDITED") }, (ULONG)((NTSTATUS)0x40000011L) }, { { sizeof( "STATUS_EVENT_DONE" ) - sizeof( ("STATUS_EVENT_DONE")[0] ), sizeof( "STATUS_EVENT_DONE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EVENT_DONE")), ("STATUS_EVENT_DONE") }, (ULONG)((NTSTATUS)0x40000012L) }, { { sizeof( "STATUS_EVENT_PENDING" ) - sizeof( ("STATUS_EVENT_PENDING")[0] ), sizeof( "STATUS_EVENT_PENDING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EVENT_PENDING")), ("STATUS_EVENT_PENDING") }, (ULONG)((NTSTATUS)0x40000013L) }, { { sizeof( "STATUS_CHECKING_FILE_SYSTEM" ) - sizeof( ("STATUS_CHECKING_FILE_SYSTEM")[0] ), sizeof( "STATUS_CHECKING_FILE_SYSTEM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CHECKING_FILE_SYSTEM")), ("STATUS_CHECKING_FILE_SYSTEM") }, (ULONG)((NTSTATUS)0x40000014L) }, { { sizeof( "STATUS_FATAL_APP_EXIT" ) - sizeof( ("STATUS_FATAL_APP_EXIT")[0] ), sizeof( "STATUS_FATAL_APP_EXIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FATAL_APP_EXIT")), ("STATUS_FATAL_APP_EXIT") }, (ULONG)((NTSTATUS)0x40000015L) }, { { sizeof( "STATUS_PREDEFINED_HANDLE" ) - sizeof( ("STATUS_PREDEFINED_HANDLE")[0] ), sizeof( "STATUS_PREDEFINED_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PREDEFINED_HANDLE")), ("STATUS_PREDEFINED_HANDLE") }, (ULONG)((NTSTATUS)0x40000016L) }, { { sizeof( "STATUS_WAS_UNLOCKED" ) - sizeof( ("STATUS_WAS_UNLOCKED")[0] ), sizeof( "STATUS_WAS_UNLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAS_UNLOCKED")), ("STATUS_WAS_UNLOCKED") }, (ULONG)((NTSTATUS)0x40000017L) }, { { sizeof( "STATUS_SERVICE_NOTIFICATION" ) - sizeof( ("STATUS_SERVICE_NOTIFICATION")[0] ), sizeof( "STATUS_SERVICE_NOTIFICATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVICE_NOTIFICATION")), ("STATUS_SERVICE_NOTIFICATION") }, (ULONG)((NTSTATUS)0x40000018L) }, { { sizeof( "STATUS_WAS_LOCKED" ) - sizeof( ("STATUS_WAS_LOCKED")[0] ), sizeof( "STATUS_WAS_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAS_LOCKED")), ("STATUS_WAS_LOCKED") }, (ULONG)((NTSTATUS)0x40000019L) }, { { sizeof( "STATUS_LOG_HARD_ERROR" ) - sizeof( ("STATUS_LOG_HARD_ERROR")[0] ), sizeof( "STATUS_LOG_HARD_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_HARD_ERROR")), ("STATUS_LOG_HARD_ERROR") }, (ULONG)((NTSTATUS)0x4000001AL) }, { { sizeof( "STATUS_ALREADY_WIN32" ) - sizeof( ("STATUS_ALREADY_WIN32")[0] ), sizeof( "STATUS_ALREADY_WIN32" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALREADY_WIN32")), ("STATUS_ALREADY_WIN32") }, (ULONG)((NTSTATUS)0x4000001BL) }, { { sizeof( "STATUS_WX86_UNSIMULATE" ) - sizeof( ("STATUS_WX86_UNSIMULATE")[0] ), sizeof( "STATUS_WX86_UNSIMULATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_UNSIMULATE")), ("STATUS_WX86_UNSIMULATE") }, (ULONG)((NTSTATUS)0x4000001CL) }, { { sizeof( "STATUS_WX86_CONTINUE" ) - sizeof( ("STATUS_WX86_CONTINUE")[0] ), sizeof( "STATUS_WX86_CONTINUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_CONTINUE")), ("STATUS_WX86_CONTINUE") }, (ULONG)((NTSTATUS)0x4000001DL) }, { { sizeof( "STATUS_WX86_SINGLE_STEP" ) - sizeof( ("STATUS_WX86_SINGLE_STEP")[0] ), sizeof( "STATUS_WX86_SINGLE_STEP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_SINGLE_STEP")), ("STATUS_WX86_SINGLE_STEP") }, (ULONG)((NTSTATUS)0x4000001EL) }, { { sizeof( "STATUS_WX86_BREAKPOINT" ) - sizeof( ("STATUS_WX86_BREAKPOINT")[0] ), sizeof( "STATUS_WX86_BREAKPOINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_BREAKPOINT")), ("STATUS_WX86_BREAKPOINT") }, (ULONG)((NTSTATUS)0x4000001FL) }, { { sizeof( "STATUS_WX86_EXCEPTION_CONTINUE" ) - sizeof( ("STATUS_WX86_EXCEPTION_CONTINUE")[0] ), sizeof( "STATUS_WX86_EXCEPTION_CONTINUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_EXCEPTION_CONTINUE")), ("STATUS_WX86_EXCEPTION_CONTINUE") }, (ULONG)((NTSTATUS)0x40000020L) }, { { sizeof( "STATUS_WX86_EXCEPTION_LASTCHANCE" ) - sizeof( ("STATUS_WX86_EXCEPTION_LASTCHANCE")[0] ), sizeof( "STATUS_WX86_EXCEPTION_LASTCHANCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_EXCEPTION_LASTCHANCE")), ("STATUS_WX86_EXCEPTION_LASTCHANCE") }, (ULONG)((NTSTATUS)0x40000021L) }, { { sizeof( "STATUS_WX86_EXCEPTION_CHAIN" ) - sizeof( ("STATUS_WX86_EXCEPTION_CHAIN")[0] ), sizeof( "STATUS_WX86_EXCEPTION_CHAIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_EXCEPTION_CHAIN")), ("STATUS_WX86_EXCEPTION_CHAIN") }, (ULONG)((NTSTATUS)0x40000022L) }, { { sizeof( "STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE" ) - sizeof( ("STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE")[0] ), sizeof( "STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE")), ("STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE") }, (ULONG)((NTSTATUS)0x40000023L) }, { { sizeof( "STATUS_NO_YIELD_PERFORMED" ) - sizeof( ("STATUS_NO_YIELD_PERFORMED")[0] ), sizeof( "STATUS_NO_YIELD_PERFORMED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_YIELD_PERFORMED")), ("STATUS_NO_YIELD_PERFORMED") }, (ULONG)((NTSTATUS)0x40000024L) }, { { sizeof( "STATUS_TIMER_RESUME_IGNORED" ) - sizeof( ("STATUS_TIMER_RESUME_IGNORED")[0] ), sizeof( "STATUS_TIMER_RESUME_IGNORED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TIMER_RESUME_IGNORED")), ("STATUS_TIMER_RESUME_IGNORED") }, (ULONG)((NTSTATUS)0x40000025L) }, { { sizeof( "STATUS_ARBITRATION_UNHANDLED" ) - sizeof( ("STATUS_ARBITRATION_UNHANDLED")[0] ), sizeof( "STATUS_ARBITRATION_UNHANDLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ARBITRATION_UNHANDLED")), ("STATUS_ARBITRATION_UNHANDLED") }, (ULONG)((NTSTATUS)0x40000026L) }, { { sizeof( "STATUS_CARDBUS_NOT_SUPPORTED" ) - sizeof( ("STATUS_CARDBUS_NOT_SUPPORTED")[0] ), sizeof( "STATUS_CARDBUS_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CARDBUS_NOT_SUPPORTED")), ("STATUS_CARDBUS_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0x40000027L) }, { { sizeof( "STATUS_WX86_CREATEWX86TIB" ) - sizeof( ("STATUS_WX86_CREATEWX86TIB")[0] ), sizeof( "STATUS_WX86_CREATEWX86TIB" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_CREATEWX86TIB")), ("STATUS_WX86_CREATEWX86TIB") }, (ULONG)((NTSTATUS)0x40000028L) }, { { sizeof( "STATUS_MP_PROCESSOR_MISMATCH" ) - sizeof( ("STATUS_MP_PROCESSOR_MISMATCH")[0] ), sizeof( "STATUS_MP_PROCESSOR_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MP_PROCESSOR_MISMATCH")), ("STATUS_MP_PROCESSOR_MISMATCH") }, (ULONG)((NTSTATUS)0x40000029L) }, { { sizeof( "STATUS_HIBERNATED" ) - sizeof( ("STATUS_HIBERNATED")[0] ), sizeof( "STATUS_HIBERNATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HIBERNATED")), ("STATUS_HIBERNATED") }, (ULONG)((NTSTATUS)0x4000002AL) }, { { sizeof( "STATUS_RESUME_HIBERNATION" ) - sizeof( ("STATUS_RESUME_HIBERNATION")[0] ), sizeof( "STATUS_RESUME_HIBERNATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESUME_HIBERNATION")), ("STATUS_RESUME_HIBERNATION") }, (ULONG)((NTSTATUS)0x4000002BL) }, { { sizeof( "STATUS_FIRMWARE_UPDATED" ) - sizeof( ("STATUS_FIRMWARE_UPDATED")[0] ), sizeof( "STATUS_FIRMWARE_UPDATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FIRMWARE_UPDATED")), ("STATUS_FIRMWARE_UPDATED") }, (ULONG)((NTSTATUS)0x4000002CL) }, { { sizeof( "STATUS_DRIVERS_LEAKING_LOCKED_PAGES" ) - sizeof( ("STATUS_DRIVERS_LEAKING_LOCKED_PAGES")[0] ), sizeof( "STATUS_DRIVERS_LEAKING_LOCKED_PAGES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVERS_LEAKING_LOCKED_PAGES")), ("STATUS_DRIVERS_LEAKING_LOCKED_PAGES") }, (ULONG)((NTSTATUS)0x4000002DL) }, { { sizeof( "STATUS_MESSAGE_RETRIEVED" ) - sizeof( ("STATUS_MESSAGE_RETRIEVED")[0] ), sizeof( "STATUS_MESSAGE_RETRIEVED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MESSAGE_RETRIEVED")), ("STATUS_MESSAGE_RETRIEVED") }, (ULONG)((NTSTATUS)0x4000002EL) }, { { sizeof( "STATUS_SYSTEM_POWERSTATE_TRANSITION" ) - sizeof( ("STATUS_SYSTEM_POWERSTATE_TRANSITION")[0] ), sizeof( "STATUS_SYSTEM_POWERSTATE_TRANSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_POWERSTATE_TRANSITION")), ("STATUS_SYSTEM_POWERSTATE_TRANSITION") }, (ULONG)((NTSTATUS)0x4000002FL) }, { { sizeof( "STATUS_ALPC_CHECK_COMPLETION_LIST" ) - sizeof( ("STATUS_ALPC_CHECK_COMPLETION_LIST")[0] ), sizeof( "STATUS_ALPC_CHECK_COMPLETION_LIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALPC_CHECK_COMPLETION_LIST")), ("STATUS_ALPC_CHECK_COMPLETION_LIST") }, (ULONG)((NTSTATUS)0x40000030L) }, { { sizeof( "STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION" ) - sizeof( ("STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION")[0] ), sizeof( "STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION")), ("STATUS_SYSTEM_POWERSTATE_COMPLEX_TRANSITION") }, (ULONG)((NTSTATUS)0x40000031L) }, { { sizeof( "STATUS_ACCESS_AUDIT_BY_POLICY" ) - sizeof( ("STATUS_ACCESS_AUDIT_BY_POLICY")[0] ), sizeof( "STATUS_ACCESS_AUDIT_BY_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_AUDIT_BY_POLICY")), ("STATUS_ACCESS_AUDIT_BY_POLICY") }, (ULONG)((NTSTATUS)0x40000032L) }, { { sizeof( "STATUS_ABANDON_HIBERFILE" ) - sizeof( ("STATUS_ABANDON_HIBERFILE")[0] ), sizeof( "STATUS_ABANDON_HIBERFILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABANDON_HIBERFILE")), ("STATUS_ABANDON_HIBERFILE") }, (ULONG)((NTSTATUS)0x40000033L) }, { { sizeof( "STATUS_BIZRULES_NOT_ENABLED" ) - sizeof( ("STATUS_BIZRULES_NOT_ENABLED")[0] ), sizeof( "STATUS_BIZRULES_NOT_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BIZRULES_NOT_ENABLED")), ("STATUS_BIZRULES_NOT_ENABLED") }, (ULONG)((NTSTATUS)0x40000034L) }, { { sizeof( "STATUS_FT_READ_FROM_COPY" ) - sizeof( ("STATUS_FT_READ_FROM_COPY")[0] ), sizeof( "STATUS_FT_READ_FROM_COPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_READ_FROM_COPY")), ("STATUS_FT_READ_FROM_COPY") }, (ULONG)((NTSTATUS)0x40000035L) }, { { sizeof( "STATUS_IMAGE_AT_DIFFERENT_BASE" ) - sizeof( ("STATUS_IMAGE_AT_DIFFERENT_BASE")[0] ), sizeof( "STATUS_IMAGE_AT_DIFFERENT_BASE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_AT_DIFFERENT_BASE")), ("STATUS_IMAGE_AT_DIFFERENT_BASE") }, (ULONG)((NTSTATUS)0x40000036L) }, { { sizeof( "STATUS_HEURISTIC_DAMAGE_POSSIBLE" ) - sizeof( ("STATUS_HEURISTIC_DAMAGE_POSSIBLE")[0] ), sizeof( "STATUS_HEURISTIC_DAMAGE_POSSIBLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HEURISTIC_DAMAGE_POSSIBLE")), ("STATUS_HEURISTIC_DAMAGE_POSSIBLE") }, (ULONG)((NTSTATUS)0x40190001L) }, { { sizeof( "STATUS_GUARD_PAGE_VIOLATION" ) - sizeof( ("STATUS_GUARD_PAGE_VIOLATION")[0] ), sizeof( "STATUS_GUARD_PAGE_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GUARD_PAGE_VIOLATION")), ("STATUS_GUARD_PAGE_VIOLATION") }, (ULONG)((NTSTATUS)0x80000001L) }, { { sizeof( "STATUS_DATATYPE_MISALIGNMENT" ) - sizeof( ("STATUS_DATATYPE_MISALIGNMENT")[0] ), sizeof( "STATUS_DATATYPE_MISALIGNMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATATYPE_MISALIGNMENT")), ("STATUS_DATATYPE_MISALIGNMENT") }, (ULONG)((NTSTATUS)0x80000002L) }, { { sizeof( "STATUS_BREAKPOINT" ) - sizeof( ("STATUS_BREAKPOINT")[0] ), sizeof( "STATUS_BREAKPOINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BREAKPOINT")), ("STATUS_BREAKPOINT") }, (ULONG)((NTSTATUS)0x80000003L) }, { { sizeof( "STATUS_SINGLE_STEP" ) - sizeof( ("STATUS_SINGLE_STEP")[0] ), sizeof( "STATUS_SINGLE_STEP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SINGLE_STEP")), ("STATUS_SINGLE_STEP") }, (ULONG)((NTSTATUS)0x80000004L) }, { { sizeof( "STATUS_BUFFER_OVERFLOW" ) - sizeof( ("STATUS_BUFFER_OVERFLOW")[0] ), sizeof( "STATUS_BUFFER_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BUFFER_OVERFLOW")), ("STATUS_BUFFER_OVERFLOW") }, (ULONG)((NTSTATUS)0x80000005L) }, { { sizeof( "STATUS_NO_MORE_FILES" ) - sizeof( ("STATUS_NO_MORE_FILES")[0] ), sizeof( "STATUS_NO_MORE_FILES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MORE_FILES")), ("STATUS_NO_MORE_FILES") }, (ULONG)((NTSTATUS)0x80000006L) }, { { sizeof( "STATUS_WAKE_SYSTEM_DEBUGGER" ) - sizeof( ("STATUS_WAKE_SYSTEM_DEBUGGER")[0] ), sizeof( "STATUS_WAKE_SYSTEM_DEBUGGER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAKE_SYSTEM_DEBUGGER")), ("STATUS_WAKE_SYSTEM_DEBUGGER") }, (ULONG)((NTSTATUS)0x80000007L) }, { { sizeof( "STATUS_HANDLES_CLOSED" ) - sizeof( ("STATUS_HANDLES_CLOSED")[0] ), sizeof( "STATUS_HANDLES_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HANDLES_CLOSED")), ("STATUS_HANDLES_CLOSED") }, (ULONG)((NTSTATUS)0x8000000AL) }, { { sizeof( "STATUS_NO_INHERITANCE" ) - sizeof( ("STATUS_NO_INHERITANCE")[0] ), sizeof( "STATUS_NO_INHERITANCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_INHERITANCE")), ("STATUS_NO_INHERITANCE") }, (ULONG)((NTSTATUS)0x8000000BL) }, { { sizeof( "STATUS_GUID_SUBSTITUTION_MADE" ) - sizeof( ("STATUS_GUID_SUBSTITUTION_MADE")[0] ), sizeof( "STATUS_GUID_SUBSTITUTION_MADE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GUID_SUBSTITUTION_MADE")), ("STATUS_GUID_SUBSTITUTION_MADE") }, (ULONG)((NTSTATUS)0x8000000CL) }, { { sizeof( "STATUS_PARTIAL_COPY" ) - sizeof( ("STATUS_PARTIAL_COPY")[0] ), sizeof( "STATUS_PARTIAL_COPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PARTIAL_COPY")), ("STATUS_PARTIAL_COPY") }, (ULONG)((NTSTATUS)0x8000000DL) }, { { sizeof( "STATUS_DEVICE_PAPER_EMPTY" ) - sizeof( ("STATUS_DEVICE_PAPER_EMPTY")[0] ), sizeof( "STATUS_DEVICE_PAPER_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_PAPER_EMPTY")), ("STATUS_DEVICE_PAPER_EMPTY") }, (ULONG)((NTSTATUS)0x8000000EL) }, { { sizeof( "STATUS_DEVICE_POWERED_OFF" ) - sizeof( ("STATUS_DEVICE_POWERED_OFF")[0] ), sizeof( "STATUS_DEVICE_POWERED_OFF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_POWERED_OFF")), ("STATUS_DEVICE_POWERED_OFF") }, (ULONG)((NTSTATUS)0x8000000FL) }, { { sizeof( "STATUS_DEVICE_OFF_LINE" ) - sizeof( ("STATUS_DEVICE_OFF_LINE")[0] ), sizeof( "STATUS_DEVICE_OFF_LINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_OFF_LINE")), ("STATUS_DEVICE_OFF_LINE") }, (ULONG)((NTSTATUS)0x80000010L) }, { { sizeof( "STATUS_DEVICE_BUSY" ) - sizeof( ("STATUS_DEVICE_BUSY")[0] ), sizeof( "STATUS_DEVICE_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_BUSY")), ("STATUS_DEVICE_BUSY") }, (ULONG)((NTSTATUS)0x80000011L) }, { { sizeof( "STATUS_NO_MORE_EAS" ) - sizeof( ("STATUS_NO_MORE_EAS")[0] ), sizeof( "STATUS_NO_MORE_EAS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MORE_EAS")), ("STATUS_NO_MORE_EAS") }, (ULONG)((NTSTATUS)0x80000012L) }, { { sizeof( "STATUS_INVALID_EA_NAME" ) - sizeof( ("STATUS_INVALID_EA_NAME")[0] ), sizeof( "STATUS_INVALID_EA_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_EA_NAME")), ("STATUS_INVALID_EA_NAME") }, (ULONG)((NTSTATUS)0x80000013L) }, { { sizeof( "STATUS_EA_LIST_INCONSISTENT" ) - sizeof( ("STATUS_EA_LIST_INCONSISTENT")[0] ), sizeof( "STATUS_EA_LIST_INCONSISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EA_LIST_INCONSISTENT")), ("STATUS_EA_LIST_INCONSISTENT") }, (ULONG)((NTSTATUS)0x80000014L) }, { { sizeof( "STATUS_INVALID_EA_FLAG" ) - sizeof( ("STATUS_INVALID_EA_FLAG")[0] ), sizeof( "STATUS_INVALID_EA_FLAG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_EA_FLAG")), ("STATUS_INVALID_EA_FLAG") }, (ULONG)((NTSTATUS)0x80000015L) }, { { sizeof( "STATUS_VERIFY_REQUIRED" ) - sizeof( ("STATUS_VERIFY_REQUIRED")[0] ), sizeof( "STATUS_VERIFY_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VERIFY_REQUIRED")), ("STATUS_VERIFY_REQUIRED") }, (ULONG)((NTSTATUS)0x80000016L) }, { { sizeof( "STATUS_EXTRANEOUS_INFORMATION" ) - sizeof( ("STATUS_EXTRANEOUS_INFORMATION")[0] ), sizeof( "STATUS_EXTRANEOUS_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EXTRANEOUS_INFORMATION")), ("STATUS_EXTRANEOUS_INFORMATION") }, (ULONG)((NTSTATUS)0x80000017L) }, { { sizeof( "STATUS_RXACT_COMMIT_NECESSARY" ) - sizeof( ("STATUS_RXACT_COMMIT_NECESSARY")[0] ), sizeof( "STATUS_RXACT_COMMIT_NECESSARY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RXACT_COMMIT_NECESSARY")), ("STATUS_RXACT_COMMIT_NECESSARY") }, (ULONG)((NTSTATUS)0x80000018L) }, { { sizeof( "STATUS_NO_MORE_ENTRIES" ) - sizeof( ("STATUS_NO_MORE_ENTRIES")[0] ), sizeof( "STATUS_NO_MORE_ENTRIES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MORE_ENTRIES")), ("STATUS_NO_MORE_ENTRIES") }, (ULONG)((NTSTATUS)0x8000001AL) }, { { sizeof( "STATUS_FILEMARK_DETECTED" ) - sizeof( ("STATUS_FILEMARK_DETECTED")[0] ), sizeof( "STATUS_FILEMARK_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILEMARK_DETECTED")), ("STATUS_FILEMARK_DETECTED") }, (ULONG)((NTSTATUS)0x8000001BL) }, { { sizeof( "STATUS_MEDIA_CHANGED" ) - sizeof( ("STATUS_MEDIA_CHANGED")[0] ), sizeof( "STATUS_MEDIA_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEDIA_CHANGED")), ("STATUS_MEDIA_CHANGED") }, (ULONG)((NTSTATUS)0x8000001CL) }, { { sizeof( "STATUS_BUS_RESET" ) - sizeof( ("STATUS_BUS_RESET")[0] ), sizeof( "STATUS_BUS_RESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BUS_RESET")), ("STATUS_BUS_RESET") }, (ULONG)((NTSTATUS)0x8000001DL) }, { { sizeof( "STATUS_END_OF_MEDIA" ) - sizeof( ("STATUS_END_OF_MEDIA")[0] ), sizeof( "STATUS_END_OF_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_END_OF_MEDIA")), ("STATUS_END_OF_MEDIA") }, (ULONG)((NTSTATUS)0x8000001EL) }, { { sizeof( "STATUS_BEGINNING_OF_MEDIA" ) - sizeof( ("STATUS_BEGINNING_OF_MEDIA")[0] ), sizeof( "STATUS_BEGINNING_OF_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BEGINNING_OF_MEDIA")), ("STATUS_BEGINNING_OF_MEDIA") }, (ULONG)((NTSTATUS)0x8000001FL) }, { { sizeof( "STATUS_MEDIA_CHECK" ) - sizeof( ("STATUS_MEDIA_CHECK")[0] ), sizeof( "STATUS_MEDIA_CHECK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEDIA_CHECK")), ("STATUS_MEDIA_CHECK") }, (ULONG)((NTSTATUS)0x80000020L) }, { { sizeof( "STATUS_SETMARK_DETECTED" ) - sizeof( ("STATUS_SETMARK_DETECTED")[0] ), sizeof( "STATUS_SETMARK_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SETMARK_DETECTED")), ("STATUS_SETMARK_DETECTED") }, (ULONG)((NTSTATUS)0x80000021L) }, { { sizeof( "STATUS_NO_DATA_DETECTED" ) - sizeof( ("STATUS_NO_DATA_DETECTED")[0] ), sizeof( "STATUS_NO_DATA_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_DATA_DETECTED")), ("STATUS_NO_DATA_DETECTED") }, (ULONG)((NTSTATUS)0x80000022L) }, { { sizeof( "STATUS_REDIRECTOR_HAS_OPEN_HANDLES" ) - sizeof( ("STATUS_REDIRECTOR_HAS_OPEN_HANDLES")[0] ), sizeof( "STATUS_REDIRECTOR_HAS_OPEN_HANDLES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REDIRECTOR_HAS_OPEN_HANDLES")), ("STATUS_REDIRECTOR_HAS_OPEN_HANDLES") }, (ULONG)((NTSTATUS)0x80000023L) }, { { sizeof( "STATUS_SERVER_HAS_OPEN_HANDLES" ) - sizeof( ("STATUS_SERVER_HAS_OPEN_HANDLES")[0] ), sizeof( "STATUS_SERVER_HAS_OPEN_HANDLES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVER_HAS_OPEN_HANDLES")), ("STATUS_SERVER_HAS_OPEN_HANDLES") }, (ULONG)((NTSTATUS)0x80000024L) }, { { sizeof( "STATUS_ALREADY_DISCONNECTED" ) - sizeof( ("STATUS_ALREADY_DISCONNECTED")[0] ), sizeof( "STATUS_ALREADY_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALREADY_DISCONNECTED")), ("STATUS_ALREADY_DISCONNECTED") }, (ULONG)((NTSTATUS)0x80000025L) }, { { sizeof( "STATUS_LONGJUMP" ) - sizeof( ("STATUS_LONGJUMP")[0] ), sizeof( "STATUS_LONGJUMP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LONGJUMP")), ("STATUS_LONGJUMP") }, (ULONG)((NTSTATUS)0x80000026L) }, { { sizeof( "STATUS_CLEANER_CARTRIDGE_INSTALLED" ) - sizeof( ("STATUS_CLEANER_CARTRIDGE_INSTALLED")[0] ), sizeof( "STATUS_CLEANER_CARTRIDGE_INSTALLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLEANER_CARTRIDGE_INSTALLED")), ("STATUS_CLEANER_CARTRIDGE_INSTALLED") }, (ULONG)((NTSTATUS)0x80000027L) }, { { sizeof( "STATUS_PLUGPLAY_QUERY_VETOED" ) - sizeof( ("STATUS_PLUGPLAY_QUERY_VETOED")[0] ), sizeof( "STATUS_PLUGPLAY_QUERY_VETOED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLUGPLAY_QUERY_VETOED")), ("STATUS_PLUGPLAY_QUERY_VETOED") }, (ULONG)((NTSTATUS)0x80000028L) }, { { sizeof( "STATUS_UNWIND_CONSOLIDATE" ) - sizeof( ("STATUS_UNWIND_CONSOLIDATE")[0] ), sizeof( "STATUS_UNWIND_CONSOLIDATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNWIND_CONSOLIDATE")), ("STATUS_UNWIND_CONSOLIDATE") }, (ULONG)((NTSTATUS)0x80000029L) }, { { sizeof( "STATUS_REGISTRY_HIVE_RECOVERED" ) - sizeof( ("STATUS_REGISTRY_HIVE_RECOVERED")[0] ), sizeof( "STATUS_REGISTRY_HIVE_RECOVERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REGISTRY_HIVE_RECOVERED")), ("STATUS_REGISTRY_HIVE_RECOVERED") }, (ULONG)((NTSTATUS)0x8000002AL) }, { { sizeof( "STATUS_DLL_MIGHT_BE_INSECURE" ) - sizeof( ("STATUS_DLL_MIGHT_BE_INSECURE")[0] ), sizeof( "STATUS_DLL_MIGHT_BE_INSECURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DLL_MIGHT_BE_INSECURE")), ("STATUS_DLL_MIGHT_BE_INSECURE") }, (ULONG)((NTSTATUS)0x8000002BL) }, { { sizeof( "STATUS_DLL_MIGHT_BE_INCOMPATIBLE" ) - sizeof( ("STATUS_DLL_MIGHT_BE_INCOMPATIBLE")[0] ), sizeof( "STATUS_DLL_MIGHT_BE_INCOMPATIBLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DLL_MIGHT_BE_INCOMPATIBLE")), ("STATUS_DLL_MIGHT_BE_INCOMPATIBLE") }, (ULONG)((NTSTATUS)0x8000002CL) }, { { sizeof( "STATUS_STOPPED_ON_SYMLINK" ) - sizeof( ("STATUS_STOPPED_ON_SYMLINK")[0] ), sizeof( "STATUS_STOPPED_ON_SYMLINK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STOPPED_ON_SYMLINK")), ("STATUS_STOPPED_ON_SYMLINK") }, (ULONG)((NTSTATUS)0x8000002DL) }, { { sizeof( "STATUS_CANNOT_GRANT_REQUESTED_OPLOCK" ) - sizeof( ("STATUS_CANNOT_GRANT_REQUESTED_OPLOCK")[0] ), sizeof( "STATUS_CANNOT_GRANT_REQUESTED_OPLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_GRANT_REQUESTED_OPLOCK")), ("STATUS_CANNOT_GRANT_REQUESTED_OPLOCK") }, (ULONG)((NTSTATUS)0x8000002EL) }, { { sizeof( "STATUS_NO_ACE_CONDITION" ) - sizeof( ("STATUS_NO_ACE_CONDITION")[0] ), sizeof( "STATUS_NO_ACE_CONDITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_ACE_CONDITION")), ("STATUS_NO_ACE_CONDITION") }, (ULONG)((NTSTATUS)0x8000002FL) }, { { sizeof( "STATUS_DEVICE_SUPPORT_IN_PROGRESS" ) - sizeof( ("STATUS_DEVICE_SUPPORT_IN_PROGRESS")[0] ), sizeof( "STATUS_DEVICE_SUPPORT_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_SUPPORT_IN_PROGRESS")), ("STATUS_DEVICE_SUPPORT_IN_PROGRESS") }, (ULONG)((NTSTATUS)0x80000030L) }, { { sizeof( "STATUS_DEVICE_POWER_CYCLE_REQUIRED" ) - sizeof( ("STATUS_DEVICE_POWER_CYCLE_REQUIRED")[0] ), sizeof( "STATUS_DEVICE_POWER_CYCLE_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_POWER_CYCLE_REQUIRED")), ("STATUS_DEVICE_POWER_CYCLE_REQUIRED") }, (ULONG)((NTSTATUS)0x80000031L) }, { { sizeof( "STATUS_NO_WORK_DONE" ) - sizeof( ("STATUS_NO_WORK_DONE")[0] ), sizeof( "STATUS_NO_WORK_DONE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_WORK_DONE")), ("STATUS_NO_WORK_DONE") }, (ULONG)((NTSTATUS)0x80000032L) }, { { sizeof( "STATUS_CLUSTER_NODE_ALREADY_UP" ) - sizeof( ("STATUS_CLUSTER_NODE_ALREADY_UP")[0] ), sizeof( "STATUS_CLUSTER_NODE_ALREADY_UP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_ALREADY_UP")), ("STATUS_CLUSTER_NODE_ALREADY_UP") }, (ULONG)((NTSTATUS)0x80130001L) }, { { sizeof( "STATUS_CLUSTER_NODE_ALREADY_DOWN" ) - sizeof( ("STATUS_CLUSTER_NODE_ALREADY_DOWN")[0] ), sizeof( "STATUS_CLUSTER_NODE_ALREADY_DOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_ALREADY_DOWN")), ("STATUS_CLUSTER_NODE_ALREADY_DOWN") }, (ULONG)((NTSTATUS)0x80130002L) }, { { sizeof( "STATUS_CLUSTER_NETWORK_ALREADY_ONLINE" ) - sizeof( ("STATUS_CLUSTER_NETWORK_ALREADY_ONLINE")[0] ), sizeof( "STATUS_CLUSTER_NETWORK_ALREADY_ONLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETWORK_ALREADY_ONLINE")), ("STATUS_CLUSTER_NETWORK_ALREADY_ONLINE") }, (ULONG)((NTSTATUS)0x80130003L) }, { { sizeof( "STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE" ) - sizeof( ("STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE")[0] ), sizeof( "STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE")), ("STATUS_CLUSTER_NETWORK_ALREADY_OFFLINE") }, (ULONG)((NTSTATUS)0x80130004L) }, { { sizeof( "STATUS_CLUSTER_NODE_ALREADY_MEMBER" ) - sizeof( ("STATUS_CLUSTER_NODE_ALREADY_MEMBER")[0] ), sizeof( "STATUS_CLUSTER_NODE_ALREADY_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_ALREADY_MEMBER")), ("STATUS_CLUSTER_NODE_ALREADY_MEMBER") }, (ULONG)((NTSTATUS)0x80130005L) }, { { sizeof( "STATUS_FLT_BUFFER_TOO_SMALL" ) - sizeof( ("STATUS_FLT_BUFFER_TOO_SMALL")[0] ), sizeof( "STATUS_FLT_BUFFER_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_BUFFER_TOO_SMALL")), ("STATUS_FLT_BUFFER_TOO_SMALL") }, (ULONG)((NTSTATUS)0x801C0001L) }, { { sizeof( "STATUS_FVE_PARTIAL_METADATA" ) - sizeof( ("STATUS_FVE_PARTIAL_METADATA")[0] ), sizeof( "STATUS_FVE_PARTIAL_METADATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_PARTIAL_METADATA")), ("STATUS_FVE_PARTIAL_METADATA") }, (ULONG)((NTSTATUS)0x80210001L) }, { { sizeof( "STATUS_FVE_TRANSIENT_STATE" ) - sizeof( ("STATUS_FVE_TRANSIENT_STATE")[0] ), sizeof( "STATUS_FVE_TRANSIENT_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_TRANSIENT_STATE")), ("STATUS_FVE_TRANSIENT_STATE") }, (ULONG)((NTSTATUS)0x80210002L) }, { { sizeof( "STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH" ) - sizeof( ("STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH")[0] ), sizeof( "STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH")), ("STATUS_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH") }, (ULONG)((NTSTATUS)0x8000CF00L) }, { { sizeof( "STATUS_UNSUCCESSFUL" ) - sizeof( ("STATUS_UNSUCCESSFUL")[0] ), sizeof( "STATUS_UNSUCCESSFUL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNSUCCESSFUL")), ("STATUS_UNSUCCESSFUL") }, (ULONG)((NTSTATUS)0xC0000001L) }, { { sizeof( "STATUS_NOT_IMPLEMENTED" ) - sizeof( ("STATUS_NOT_IMPLEMENTED")[0] ), sizeof( "STATUS_NOT_IMPLEMENTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_IMPLEMENTED")), ("STATUS_NOT_IMPLEMENTED") }, (ULONG)((NTSTATUS)0xC0000002L) }, { { sizeof( "STATUS_INVALID_INFO_CLASS" ) - sizeof( ("STATUS_INVALID_INFO_CLASS")[0] ), sizeof( "STATUS_INVALID_INFO_CLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_INFO_CLASS")), ("STATUS_INVALID_INFO_CLASS") }, (ULONG)((NTSTATUS)0xC0000003L) }, { { sizeof( "STATUS_INFO_LENGTH_MISMATCH" ) - sizeof( ("STATUS_INFO_LENGTH_MISMATCH")[0] ), sizeof( "STATUS_INFO_LENGTH_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INFO_LENGTH_MISMATCH")), ("STATUS_INFO_LENGTH_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000004L) }, { { sizeof( "STATUS_ACCESS_VIOLATION" ) - sizeof( ("STATUS_ACCESS_VIOLATION")[0] ), sizeof( "STATUS_ACCESS_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_VIOLATION")), ("STATUS_ACCESS_VIOLATION") }, (ULONG)((NTSTATUS)0xC0000005L) }, { { sizeof( "STATUS_IN_PAGE_ERROR" ) - sizeof( ("STATUS_IN_PAGE_ERROR")[0] ), sizeof( "STATUS_IN_PAGE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IN_PAGE_ERROR")), ("STATUS_IN_PAGE_ERROR") }, (ULONG)((NTSTATUS)0xC0000006L) }, { { sizeof( "STATUS_PAGEFILE_QUOTA" ) - sizeof( ("STATUS_PAGEFILE_QUOTA")[0] ), sizeof( "STATUS_PAGEFILE_QUOTA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGEFILE_QUOTA")), ("STATUS_PAGEFILE_QUOTA") }, (ULONG)((NTSTATUS)0xC0000007L) }, { { sizeof( "STATUS_INVALID_HANDLE" ) - sizeof( ("STATUS_INVALID_HANDLE")[0] ), sizeof( "STATUS_INVALID_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_HANDLE")), ("STATUS_INVALID_HANDLE") }, (ULONG)((NTSTATUS)0xC0000008L) }, { { sizeof( "STATUS_BAD_INITIAL_STACK" ) - sizeof( ("STATUS_BAD_INITIAL_STACK")[0] ), sizeof( "STATUS_BAD_INITIAL_STACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_INITIAL_STACK")), ("STATUS_BAD_INITIAL_STACK") }, (ULONG)((NTSTATUS)0xC0000009L) }, { { sizeof( "STATUS_BAD_INITIAL_PC" ) - sizeof( ("STATUS_BAD_INITIAL_PC")[0] ), sizeof( "STATUS_BAD_INITIAL_PC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_INITIAL_PC")), ("STATUS_BAD_INITIAL_PC") }, (ULONG)((NTSTATUS)0xC000000AL) }, { { sizeof( "STATUS_INVALID_CID" ) - sizeof( ("STATUS_INVALID_CID")[0] ), sizeof( "STATUS_INVALID_CID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_CID")), ("STATUS_INVALID_CID") }, (ULONG)((NTSTATUS)0xC000000BL) }, { { sizeof( "STATUS_TIMER_NOT_CANCELED" ) - sizeof( ("STATUS_TIMER_NOT_CANCELED")[0] ), sizeof( "STATUS_TIMER_NOT_CANCELED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TIMER_NOT_CANCELED")), ("STATUS_TIMER_NOT_CANCELED") }, (ULONG)((NTSTATUS)0xC000000CL) }, { { sizeof( "STATUS_INVALID_PARAMETER" ) - sizeof( ("STATUS_INVALID_PARAMETER")[0] ), sizeof( "STATUS_INVALID_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER")), ("STATUS_INVALID_PARAMETER") }, (ULONG)((NTSTATUS)0xC000000DL) }, { { sizeof( "STATUS_NO_SUCH_DEVICE" ) - sizeof( ("STATUS_NO_SUCH_DEVICE")[0] ), sizeof( "STATUS_NO_SUCH_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_DEVICE")), ("STATUS_NO_SUCH_DEVICE") }, (ULONG)((NTSTATUS)0xC000000EL) }, { { sizeof( "STATUS_NO_SUCH_FILE" ) - sizeof( ("STATUS_NO_SUCH_FILE")[0] ), sizeof( "STATUS_NO_SUCH_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_FILE")), ("STATUS_NO_SUCH_FILE") }, (ULONG)((NTSTATUS)0xC000000FL) }, { { sizeof( "STATUS_INVALID_DEVICE_REQUEST" ) - sizeof( ("STATUS_INVALID_DEVICE_REQUEST")[0] ), sizeof( "STATUS_INVALID_DEVICE_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_DEVICE_REQUEST")), ("STATUS_INVALID_DEVICE_REQUEST") }, (ULONG)((NTSTATUS)0xC0000010L) }, { { sizeof( "STATUS_END_OF_FILE" ) - sizeof( ("STATUS_END_OF_FILE")[0] ), sizeof( "STATUS_END_OF_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_END_OF_FILE")), ("STATUS_END_OF_FILE") }, (ULONG)((NTSTATUS)0xC0000011L) }, { { sizeof( "STATUS_WRONG_VOLUME" ) - sizeof( ("STATUS_WRONG_VOLUME")[0] ), sizeof( "STATUS_WRONG_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WRONG_VOLUME")), ("STATUS_WRONG_VOLUME") }, (ULONG)((NTSTATUS)0xC0000012L) }, { { sizeof( "STATUS_NO_MEDIA_IN_DEVICE" ) - sizeof( ("STATUS_NO_MEDIA_IN_DEVICE")[0] ), sizeof( "STATUS_NO_MEDIA_IN_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MEDIA_IN_DEVICE")), ("STATUS_NO_MEDIA_IN_DEVICE") }, (ULONG)((NTSTATUS)0xC0000013L) }, { { sizeof( "STATUS_UNRECOGNIZED_MEDIA" ) - sizeof( ("STATUS_UNRECOGNIZED_MEDIA")[0] ), sizeof( "STATUS_UNRECOGNIZED_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNRECOGNIZED_MEDIA")), ("STATUS_UNRECOGNIZED_MEDIA") }, (ULONG)((NTSTATUS)0xC0000014L) }, { { sizeof( "STATUS_NONEXISTENT_SECTOR" ) - sizeof( ("STATUS_NONEXISTENT_SECTOR")[0] ), sizeof( "STATUS_NONEXISTENT_SECTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NONEXISTENT_SECTOR")), ("STATUS_NONEXISTENT_SECTOR") }, (ULONG)((NTSTATUS)0xC0000015L) }, { { sizeof( "STATUS_MORE_PROCESSING_REQUIRED" ) - sizeof( ("STATUS_MORE_PROCESSING_REQUIRED")[0] ), sizeof( "STATUS_MORE_PROCESSING_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MORE_PROCESSING_REQUIRED")), ("STATUS_MORE_PROCESSING_REQUIRED") }, (ULONG)((NTSTATUS)0xC0000016L) }, { { sizeof( "STATUS_NO_MEMORY" ) - sizeof( ("STATUS_NO_MEMORY")[0] ), sizeof( "STATUS_NO_MEMORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MEMORY")), ("STATUS_NO_MEMORY") }, (ULONG)((NTSTATUS)0xC0000017L) }, { { sizeof( "STATUS_CONFLICTING_ADDRESSES" ) - sizeof( ("STATUS_CONFLICTING_ADDRESSES")[0] ), sizeof( "STATUS_CONFLICTING_ADDRESSES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONFLICTING_ADDRESSES")), ("STATUS_CONFLICTING_ADDRESSES") }, (ULONG)((NTSTATUS)0xC0000018L) }, { { sizeof( "STATUS_NOT_MAPPED_VIEW" ) - sizeof( ("STATUS_NOT_MAPPED_VIEW")[0] ), sizeof( "STATUS_NOT_MAPPED_VIEW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_MAPPED_VIEW")), ("STATUS_NOT_MAPPED_VIEW") }, (ULONG)((NTSTATUS)0xC0000019L) }, { { sizeof( "STATUS_UNABLE_TO_FREE_VM" ) - sizeof( ("STATUS_UNABLE_TO_FREE_VM")[0] ), sizeof( "STATUS_UNABLE_TO_FREE_VM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNABLE_TO_FREE_VM")), ("STATUS_UNABLE_TO_FREE_VM") }, (ULONG)((NTSTATUS)0xC000001AL) }, { { sizeof( "STATUS_UNABLE_TO_DELETE_SECTION" ) - sizeof( ("STATUS_UNABLE_TO_DELETE_SECTION")[0] ), sizeof( "STATUS_UNABLE_TO_DELETE_SECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNABLE_TO_DELETE_SECTION")), ("STATUS_UNABLE_TO_DELETE_SECTION") }, (ULONG)((NTSTATUS)0xC000001BL) }, { { sizeof( "STATUS_INVALID_SYSTEM_SERVICE" ) - sizeof( ("STATUS_INVALID_SYSTEM_SERVICE")[0] ), sizeof( "STATUS_INVALID_SYSTEM_SERVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SYSTEM_SERVICE")), ("STATUS_INVALID_SYSTEM_SERVICE") }, (ULONG)((NTSTATUS)0xC000001CL) }, { { sizeof( "STATUS_ILLEGAL_INSTRUCTION" ) - sizeof( ("STATUS_ILLEGAL_INSTRUCTION")[0] ), sizeof( "STATUS_ILLEGAL_INSTRUCTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILLEGAL_INSTRUCTION")), ("STATUS_ILLEGAL_INSTRUCTION") }, (ULONG)((NTSTATUS)0xC000001DL) }, { { sizeof( "STATUS_INVALID_LOCK_SEQUENCE" ) - sizeof( ("STATUS_INVALID_LOCK_SEQUENCE")[0] ), sizeof( "STATUS_INVALID_LOCK_SEQUENCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LOCK_SEQUENCE")), ("STATUS_INVALID_LOCK_SEQUENCE") }, (ULONG)((NTSTATUS)0xC000001EL) }, { { sizeof( "STATUS_INVALID_VIEW_SIZE" ) - sizeof( ("STATUS_INVALID_VIEW_SIZE")[0] ), sizeof( "STATUS_INVALID_VIEW_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_VIEW_SIZE")), ("STATUS_INVALID_VIEW_SIZE") }, (ULONG)((NTSTATUS)0xC000001FL) }, { { sizeof( "STATUS_INVALID_FILE_FOR_SECTION" ) - sizeof( ("STATUS_INVALID_FILE_FOR_SECTION")[0] ), sizeof( "STATUS_INVALID_FILE_FOR_SECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_FILE_FOR_SECTION")), ("STATUS_INVALID_FILE_FOR_SECTION") }, (ULONG)((NTSTATUS)0xC0000020L) }, { { sizeof( "STATUS_ALREADY_COMMITTED" ) - sizeof( ("STATUS_ALREADY_COMMITTED")[0] ), sizeof( "STATUS_ALREADY_COMMITTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALREADY_COMMITTED")), ("STATUS_ALREADY_COMMITTED") }, (ULONG)((NTSTATUS)0xC0000021L) }, { { sizeof( "STATUS_ACCESS_DENIED" ) - sizeof( ("STATUS_ACCESS_DENIED")[0] ), sizeof( "STATUS_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_DENIED")), ("STATUS_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC0000022L) }, { { sizeof( "STATUS_BUFFER_TOO_SMALL" ) - sizeof( ("STATUS_BUFFER_TOO_SMALL")[0] ), sizeof( "STATUS_BUFFER_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BUFFER_TOO_SMALL")), ("STATUS_BUFFER_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC0000023L) }, { { sizeof( "STATUS_OBJECT_TYPE_MISMATCH" ) - sizeof( ("STATUS_OBJECT_TYPE_MISMATCH")[0] ), sizeof( "STATUS_OBJECT_TYPE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_TYPE_MISMATCH")), ("STATUS_OBJECT_TYPE_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000024L) }, { { sizeof( "STATUS_NONCONTINUABLE_EXCEPTION" ) - sizeof( ("STATUS_NONCONTINUABLE_EXCEPTION")[0] ), sizeof( "STATUS_NONCONTINUABLE_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NONCONTINUABLE_EXCEPTION")), ("STATUS_NONCONTINUABLE_EXCEPTION") }, (ULONG)((NTSTATUS)0xC0000025L) }, { { sizeof( "STATUS_INVALID_DISPOSITION" ) - sizeof( ("STATUS_INVALID_DISPOSITION")[0] ), sizeof( "STATUS_INVALID_DISPOSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_DISPOSITION")), ("STATUS_INVALID_DISPOSITION") }, (ULONG)((NTSTATUS)0xC0000026L) }, { { sizeof( "STATUS_UNWIND" ) - sizeof( ("STATUS_UNWIND")[0] ), sizeof( "STATUS_UNWIND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNWIND")), ("STATUS_UNWIND") }, (ULONG)((NTSTATUS)0xC0000027L) }, { { sizeof( "STATUS_BAD_STACK" ) - sizeof( ("STATUS_BAD_STACK")[0] ), sizeof( "STATUS_BAD_STACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_STACK")), ("STATUS_BAD_STACK") }, (ULONG)((NTSTATUS)0xC0000028L) }, { { sizeof( "STATUS_INVALID_UNWIND_TARGET" ) - sizeof( ("STATUS_INVALID_UNWIND_TARGET")[0] ), sizeof( "STATUS_INVALID_UNWIND_TARGET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_UNWIND_TARGET")), ("STATUS_INVALID_UNWIND_TARGET") }, (ULONG)((NTSTATUS)0xC0000029L) }, { { sizeof( "STATUS_NOT_LOCKED" ) - sizeof( ("STATUS_NOT_LOCKED")[0] ), sizeof( "STATUS_NOT_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_LOCKED")), ("STATUS_NOT_LOCKED") }, (ULONG)((NTSTATUS)0xC000002AL) }, { { sizeof( "STATUS_PARITY_ERROR" ) - sizeof( ("STATUS_PARITY_ERROR")[0] ), sizeof( "STATUS_PARITY_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PARITY_ERROR")), ("STATUS_PARITY_ERROR") }, (ULONG)((NTSTATUS)0xC000002BL) }, { { sizeof( "STATUS_UNABLE_TO_DECOMMIT_VM" ) - sizeof( ("STATUS_UNABLE_TO_DECOMMIT_VM")[0] ), sizeof( "STATUS_UNABLE_TO_DECOMMIT_VM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNABLE_TO_DECOMMIT_VM")), ("STATUS_UNABLE_TO_DECOMMIT_VM") }, (ULONG)((NTSTATUS)0xC000002CL) }, { { sizeof( "STATUS_NOT_COMMITTED" ) - sizeof( ("STATUS_NOT_COMMITTED")[0] ), sizeof( "STATUS_NOT_COMMITTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_COMMITTED")), ("STATUS_NOT_COMMITTED") }, (ULONG)((NTSTATUS)0xC000002DL) }, { { sizeof( "STATUS_INVALID_PORT_ATTRIBUTES" ) - sizeof( ("STATUS_INVALID_PORT_ATTRIBUTES")[0] ), sizeof( "STATUS_INVALID_PORT_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PORT_ATTRIBUTES")), ("STATUS_INVALID_PORT_ATTRIBUTES") }, (ULONG)((NTSTATUS)0xC000002EL) }, { { sizeof( "STATUS_PORT_MESSAGE_TOO_LONG" ) - sizeof( ("STATUS_PORT_MESSAGE_TOO_LONG")[0] ), sizeof( "STATUS_PORT_MESSAGE_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_MESSAGE_TOO_LONG")), ("STATUS_PORT_MESSAGE_TOO_LONG") }, (ULONG)((NTSTATUS)0xC000002FL) }, { { sizeof( "STATUS_INVALID_PARAMETER_MIX" ) - sizeof( ("STATUS_INVALID_PARAMETER_MIX")[0] ), sizeof( "STATUS_INVALID_PARAMETER_MIX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_MIX")), ("STATUS_INVALID_PARAMETER_MIX") }, (ULONG)((NTSTATUS)0xC0000030L) }, { { sizeof( "STATUS_INVALID_QUOTA_LOWER" ) - sizeof( ("STATUS_INVALID_QUOTA_LOWER")[0] ), sizeof( "STATUS_INVALID_QUOTA_LOWER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_QUOTA_LOWER")), ("STATUS_INVALID_QUOTA_LOWER") }, (ULONG)((NTSTATUS)0xC0000031L) }, { { sizeof( "STATUS_DISK_CORRUPT_ERROR" ) - sizeof( ("STATUS_DISK_CORRUPT_ERROR")[0] ), sizeof( "STATUS_DISK_CORRUPT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_CORRUPT_ERROR")), ("STATUS_DISK_CORRUPT_ERROR") }, (ULONG)((NTSTATUS)0xC0000032L) }, { { sizeof( "STATUS_OBJECT_NAME_INVALID" ) - sizeof( ("STATUS_OBJECT_NAME_INVALID")[0] ), sizeof( "STATUS_OBJECT_NAME_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_NAME_INVALID")), ("STATUS_OBJECT_NAME_INVALID") }, (ULONG)((NTSTATUS)0xC0000033L) }, { { sizeof( "STATUS_OBJECT_NAME_NOT_FOUND" ) - sizeof( ("STATUS_OBJECT_NAME_NOT_FOUND")[0] ), sizeof( "STATUS_OBJECT_NAME_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_NAME_NOT_FOUND")), ("STATUS_OBJECT_NAME_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000034L) }, { { sizeof( "STATUS_OBJECT_NAME_COLLISION" ) - sizeof( ("STATUS_OBJECT_NAME_COLLISION")[0] ), sizeof( "STATUS_OBJECT_NAME_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_NAME_COLLISION")), ("STATUS_OBJECT_NAME_COLLISION") }, (ULONG)((NTSTATUS)0xC0000035L) }, { { sizeof( "STATUS_PORT_DO_NOT_DISTURB" ) - sizeof( ("STATUS_PORT_DO_NOT_DISTURB")[0] ), sizeof( "STATUS_PORT_DO_NOT_DISTURB" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_DO_NOT_DISTURB")), ("STATUS_PORT_DO_NOT_DISTURB") }, (ULONG)((NTSTATUS)0xC0000036L) }, { { sizeof( "STATUS_PORT_DISCONNECTED" ) - sizeof( ("STATUS_PORT_DISCONNECTED")[0] ), sizeof( "STATUS_PORT_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_DISCONNECTED")), ("STATUS_PORT_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC0000037L) }, { { sizeof( "STATUS_DEVICE_ALREADY_ATTACHED" ) - sizeof( ("STATUS_DEVICE_ALREADY_ATTACHED")[0] ), sizeof( "STATUS_DEVICE_ALREADY_ATTACHED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_ALREADY_ATTACHED")), ("STATUS_DEVICE_ALREADY_ATTACHED") }, (ULONG)((NTSTATUS)0xC0000038L) }, { { sizeof( "STATUS_OBJECT_PATH_INVALID" ) - sizeof( ("STATUS_OBJECT_PATH_INVALID")[0] ), sizeof( "STATUS_OBJECT_PATH_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_PATH_INVALID")), ("STATUS_OBJECT_PATH_INVALID") }, (ULONG)((NTSTATUS)0xC0000039L) }, { { sizeof( "STATUS_OBJECT_PATH_NOT_FOUND" ) - sizeof( ("STATUS_OBJECT_PATH_NOT_FOUND")[0] ), sizeof( "STATUS_OBJECT_PATH_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_PATH_NOT_FOUND")), ("STATUS_OBJECT_PATH_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000003AL) }, { { sizeof( "STATUS_OBJECT_PATH_SYNTAX_BAD" ) - sizeof( ("STATUS_OBJECT_PATH_SYNTAX_BAD")[0] ), sizeof( "STATUS_OBJECT_PATH_SYNTAX_BAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_PATH_SYNTAX_BAD")), ("STATUS_OBJECT_PATH_SYNTAX_BAD") }, (ULONG)((NTSTATUS)0xC000003BL) }, { { sizeof( "STATUS_DATA_OVERRUN" ) - sizeof( ("STATUS_DATA_OVERRUN")[0] ), sizeof( "STATUS_DATA_OVERRUN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATA_OVERRUN")), ("STATUS_DATA_OVERRUN") }, (ULONG)((NTSTATUS)0xC000003CL) }, { { sizeof( "STATUS_DATA_LATE_ERROR" ) - sizeof( ("STATUS_DATA_LATE_ERROR")[0] ), sizeof( "STATUS_DATA_LATE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATA_LATE_ERROR")), ("STATUS_DATA_LATE_ERROR") }, (ULONG)((NTSTATUS)0xC000003DL) }, { { sizeof( "STATUS_DATA_ERROR" ) - sizeof( ("STATUS_DATA_ERROR")[0] ), sizeof( "STATUS_DATA_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATA_ERROR")), ("STATUS_DATA_ERROR") }, (ULONG)((NTSTATUS)0xC000003EL) }, { { sizeof( "STATUS_CRC_ERROR" ) - sizeof( ("STATUS_CRC_ERROR")[0] ), sizeof( "STATUS_CRC_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CRC_ERROR")), ("STATUS_CRC_ERROR") }, (ULONG)((NTSTATUS)0xC000003FL) }, { { sizeof( "STATUS_SECTION_TOO_BIG" ) - sizeof( ("STATUS_SECTION_TOO_BIG")[0] ), sizeof( "STATUS_SECTION_TOO_BIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECTION_TOO_BIG")), ("STATUS_SECTION_TOO_BIG") }, (ULONG)((NTSTATUS)0xC0000040L) }, { { sizeof( "STATUS_PORT_CONNECTION_REFUSED" ) - sizeof( ("STATUS_PORT_CONNECTION_REFUSED")[0] ), sizeof( "STATUS_PORT_CONNECTION_REFUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_CONNECTION_REFUSED")), ("STATUS_PORT_CONNECTION_REFUSED") }, (ULONG)((NTSTATUS)0xC0000041L) }, { { sizeof( "STATUS_INVALID_PORT_HANDLE" ) - sizeof( ("STATUS_INVALID_PORT_HANDLE")[0] ), sizeof( "STATUS_INVALID_PORT_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PORT_HANDLE")), ("STATUS_INVALID_PORT_HANDLE") }, (ULONG)((NTSTATUS)0xC0000042L) }, { { sizeof( "STATUS_SHARING_VIOLATION" ) - sizeof( ("STATUS_SHARING_VIOLATION")[0] ), sizeof( "STATUS_SHARING_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHARING_VIOLATION")), ("STATUS_SHARING_VIOLATION") }, (ULONG)((NTSTATUS)0xC0000043L) }, { { sizeof( "STATUS_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_QUOTA_EXCEEDED")), ("STATUS_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000044L) }, { { sizeof( "STATUS_INVALID_PAGE_PROTECTION" ) - sizeof( ("STATUS_INVALID_PAGE_PROTECTION")[0] ), sizeof( "STATUS_INVALID_PAGE_PROTECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PAGE_PROTECTION")), ("STATUS_INVALID_PAGE_PROTECTION") }, (ULONG)((NTSTATUS)0xC0000045L) }, { { sizeof( "STATUS_MUTANT_NOT_OWNED" ) - sizeof( ("STATUS_MUTANT_NOT_OWNED")[0] ), sizeof( "STATUS_MUTANT_NOT_OWNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUTANT_NOT_OWNED")), ("STATUS_MUTANT_NOT_OWNED") }, (ULONG)((NTSTATUS)0xC0000046L) }, { { sizeof( "STATUS_SEMAPHORE_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_SEMAPHORE_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_SEMAPHORE_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SEMAPHORE_LIMIT_EXCEEDED")), ("STATUS_SEMAPHORE_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000047L) }, { { sizeof( "STATUS_PORT_ALREADY_SET" ) - sizeof( ("STATUS_PORT_ALREADY_SET")[0] ), sizeof( "STATUS_PORT_ALREADY_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_ALREADY_SET")), ("STATUS_PORT_ALREADY_SET") }, (ULONG)((NTSTATUS)0xC0000048L) }, { { sizeof( "STATUS_SECTION_NOT_IMAGE" ) - sizeof( ("STATUS_SECTION_NOT_IMAGE")[0] ), sizeof( "STATUS_SECTION_NOT_IMAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECTION_NOT_IMAGE")), ("STATUS_SECTION_NOT_IMAGE") }, (ULONG)((NTSTATUS)0xC0000049L) }, { { sizeof( "STATUS_SUSPEND_COUNT_EXCEEDED" ) - sizeof( ("STATUS_SUSPEND_COUNT_EXCEEDED")[0] ), sizeof( "STATUS_SUSPEND_COUNT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SUSPEND_COUNT_EXCEEDED")), ("STATUS_SUSPEND_COUNT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC000004AL) }, { { sizeof( "STATUS_THREAD_IS_TERMINATING" ) - sizeof( ("STATUS_THREAD_IS_TERMINATING")[0] ), sizeof( "STATUS_THREAD_IS_TERMINATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREAD_IS_TERMINATING")), ("STATUS_THREAD_IS_TERMINATING") }, (ULONG)((NTSTATUS)0xC000004BL) }, { { sizeof( "STATUS_BAD_WORKING_SET_LIMIT" ) - sizeof( ("STATUS_BAD_WORKING_SET_LIMIT")[0] ), sizeof( "STATUS_BAD_WORKING_SET_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_WORKING_SET_LIMIT")), ("STATUS_BAD_WORKING_SET_LIMIT") }, (ULONG)((NTSTATUS)0xC000004CL) }, { { sizeof( "STATUS_INCOMPATIBLE_FILE_MAP" ) - sizeof( ("STATUS_INCOMPATIBLE_FILE_MAP")[0] ), sizeof( "STATUS_INCOMPATIBLE_FILE_MAP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INCOMPATIBLE_FILE_MAP")), ("STATUS_INCOMPATIBLE_FILE_MAP") }, (ULONG)((NTSTATUS)0xC000004DL) }, { { sizeof( "STATUS_SECTION_PROTECTION" ) - sizeof( ("STATUS_SECTION_PROTECTION")[0] ), sizeof( "STATUS_SECTION_PROTECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECTION_PROTECTION")), ("STATUS_SECTION_PROTECTION") }, (ULONG)((NTSTATUS)0xC000004EL) }, { { sizeof( "STATUS_EAS_NOT_SUPPORTED" ) - sizeof( ("STATUS_EAS_NOT_SUPPORTED")[0] ), sizeof( "STATUS_EAS_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EAS_NOT_SUPPORTED")), ("STATUS_EAS_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000004FL) }, { { sizeof( "STATUS_EA_TOO_LARGE" ) - sizeof( ("STATUS_EA_TOO_LARGE")[0] ), sizeof( "STATUS_EA_TOO_LARGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EA_TOO_LARGE")), ("STATUS_EA_TOO_LARGE") }, (ULONG)((NTSTATUS)0xC0000050L) }, { { sizeof( "STATUS_NONEXISTENT_EA_ENTRY" ) - sizeof( ("STATUS_NONEXISTENT_EA_ENTRY")[0] ), sizeof( "STATUS_NONEXISTENT_EA_ENTRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NONEXISTENT_EA_ENTRY")), ("STATUS_NONEXISTENT_EA_ENTRY") }, (ULONG)((NTSTATUS)0xC0000051L) }, { { sizeof( "STATUS_NO_EAS_ON_FILE" ) - sizeof( ("STATUS_NO_EAS_ON_FILE")[0] ), sizeof( "STATUS_NO_EAS_ON_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_EAS_ON_FILE")), ("STATUS_NO_EAS_ON_FILE") }, (ULONG)((NTSTATUS)0xC0000052L) }, { { sizeof( "STATUS_EA_CORRUPT_ERROR" ) - sizeof( ("STATUS_EA_CORRUPT_ERROR")[0] ), sizeof( "STATUS_EA_CORRUPT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EA_CORRUPT_ERROR")), ("STATUS_EA_CORRUPT_ERROR") }, (ULONG)((NTSTATUS)0xC0000053L) }, { { sizeof( "STATUS_FILE_LOCK_CONFLICT" ) - sizeof( ("STATUS_FILE_LOCK_CONFLICT")[0] ), sizeof( "STATUS_FILE_LOCK_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_LOCK_CONFLICT")), ("STATUS_FILE_LOCK_CONFLICT") }, (ULONG)((NTSTATUS)0xC0000054L) }, { { sizeof( "STATUS_LOCK_NOT_GRANTED" ) - sizeof( ("STATUS_LOCK_NOT_GRANTED")[0] ), sizeof( "STATUS_LOCK_NOT_GRANTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOCK_NOT_GRANTED")), ("STATUS_LOCK_NOT_GRANTED") }, (ULONG)((NTSTATUS)0xC0000055L) }, { { sizeof( "STATUS_DELETE_PENDING" ) - sizeof( ("STATUS_DELETE_PENDING")[0] ), sizeof( "STATUS_DELETE_PENDING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DELETE_PENDING")), ("STATUS_DELETE_PENDING") }, (ULONG)((NTSTATUS)0xC0000056L) }, { { sizeof( "STATUS_CTL_FILE_NOT_SUPPORTED" ) - sizeof( ("STATUS_CTL_FILE_NOT_SUPPORTED")[0] ), sizeof( "STATUS_CTL_FILE_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTL_FILE_NOT_SUPPORTED")), ("STATUS_CTL_FILE_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0000057L) }, { { sizeof( "STATUS_UNKNOWN_REVISION" ) - sizeof( ("STATUS_UNKNOWN_REVISION")[0] ), sizeof( "STATUS_UNKNOWN_REVISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNKNOWN_REVISION")), ("STATUS_UNKNOWN_REVISION") }, (ULONG)((NTSTATUS)0xC0000058L) }, { { sizeof( "STATUS_REVISION_MISMATCH" ) - sizeof( ("STATUS_REVISION_MISMATCH")[0] ), sizeof( "STATUS_REVISION_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REVISION_MISMATCH")), ("STATUS_REVISION_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000059L) }, { { sizeof( "STATUS_INVALID_OWNER" ) - sizeof( ("STATUS_INVALID_OWNER")[0] ), sizeof( "STATUS_INVALID_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_OWNER")), ("STATUS_INVALID_OWNER") }, (ULONG)((NTSTATUS)0xC000005AL) }, { { sizeof( "STATUS_INVALID_PRIMARY_GROUP" ) - sizeof( ("STATUS_INVALID_PRIMARY_GROUP")[0] ), sizeof( "STATUS_INVALID_PRIMARY_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PRIMARY_GROUP")), ("STATUS_INVALID_PRIMARY_GROUP") }, (ULONG)((NTSTATUS)0xC000005BL) }, { { sizeof( "STATUS_NO_IMPERSONATION_TOKEN" ) - sizeof( ("STATUS_NO_IMPERSONATION_TOKEN")[0] ), sizeof( "STATUS_NO_IMPERSONATION_TOKEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_IMPERSONATION_TOKEN")), ("STATUS_NO_IMPERSONATION_TOKEN") }, (ULONG)((NTSTATUS)0xC000005CL) }, { { sizeof( "STATUS_CANT_DISABLE_MANDATORY" ) - sizeof( ("STATUS_CANT_DISABLE_MANDATORY")[0] ), sizeof( "STATUS_CANT_DISABLE_MANDATORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_DISABLE_MANDATORY")), ("STATUS_CANT_DISABLE_MANDATORY") }, (ULONG)((NTSTATUS)0xC000005DL) }, { { sizeof( "STATUS_NO_LOGON_SERVERS" ) - sizeof( ("STATUS_NO_LOGON_SERVERS")[0] ), sizeof( "STATUS_NO_LOGON_SERVERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_LOGON_SERVERS")), ("STATUS_NO_LOGON_SERVERS") }, (ULONG)((NTSTATUS)0xC000005EL) }, { { sizeof( "STATUS_NO_SUCH_LOGON_SESSION" ) - sizeof( ("STATUS_NO_SUCH_LOGON_SESSION")[0] ), sizeof( "STATUS_NO_SUCH_LOGON_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_LOGON_SESSION")), ("STATUS_NO_SUCH_LOGON_SESSION") }, (ULONG)((NTSTATUS)0xC000005FL) }, { { sizeof( "STATUS_NO_SUCH_PRIVILEGE" ) - sizeof( ("STATUS_NO_SUCH_PRIVILEGE")[0] ), sizeof( "STATUS_NO_SUCH_PRIVILEGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_PRIVILEGE")), ("STATUS_NO_SUCH_PRIVILEGE") }, (ULONG)((NTSTATUS)0xC0000060L) }, { { sizeof( "STATUS_PRIVILEGE_NOT_HELD" ) - sizeof( ("STATUS_PRIVILEGE_NOT_HELD")[0] ), sizeof( "STATUS_PRIVILEGE_NOT_HELD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PRIVILEGE_NOT_HELD")), ("STATUS_PRIVILEGE_NOT_HELD") }, (ULONG)((NTSTATUS)0xC0000061L) }, { { sizeof( "STATUS_INVALID_ACCOUNT_NAME" ) - sizeof( ("STATUS_INVALID_ACCOUNT_NAME")[0] ), sizeof( "STATUS_INVALID_ACCOUNT_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ACCOUNT_NAME")), ("STATUS_INVALID_ACCOUNT_NAME") }, (ULONG)((NTSTATUS)0xC0000062L) }, { { sizeof( "STATUS_USER_EXISTS" ) - sizeof( ("STATUS_USER_EXISTS")[0] ), sizeof( "STATUS_USER_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_USER_EXISTS")), ("STATUS_USER_EXISTS") }, (ULONG)((NTSTATUS)0xC0000063L) }, { { sizeof( "STATUS_NO_SUCH_USER" ) - sizeof( ("STATUS_NO_SUCH_USER")[0] ), sizeof( "STATUS_NO_SUCH_USER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_USER")), ("STATUS_NO_SUCH_USER") }, (ULONG)((NTSTATUS)0xC0000064L) }, { { sizeof( "STATUS_GROUP_EXISTS" ) - sizeof( ("STATUS_GROUP_EXISTS")[0] ), sizeof( "STATUS_GROUP_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GROUP_EXISTS")), ("STATUS_GROUP_EXISTS") }, (ULONG)((NTSTATUS)0xC0000065L) }, { { sizeof( "STATUS_NO_SUCH_GROUP" ) - sizeof( ("STATUS_NO_SUCH_GROUP")[0] ), sizeof( "STATUS_NO_SUCH_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_GROUP")), ("STATUS_NO_SUCH_GROUP") }, (ULONG)((NTSTATUS)0xC0000066L) }, { { sizeof( "STATUS_MEMBER_IN_GROUP" ) - sizeof( ("STATUS_MEMBER_IN_GROUP")[0] ), sizeof( "STATUS_MEMBER_IN_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEMBER_IN_GROUP")), ("STATUS_MEMBER_IN_GROUP") }, (ULONG)((NTSTATUS)0xC0000067L) }, { { sizeof( "STATUS_MEMBER_NOT_IN_GROUP" ) - sizeof( ("STATUS_MEMBER_NOT_IN_GROUP")[0] ), sizeof( "STATUS_MEMBER_NOT_IN_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEMBER_NOT_IN_GROUP")), ("STATUS_MEMBER_NOT_IN_GROUP") }, (ULONG)((NTSTATUS)0xC0000068L) }, { { sizeof( "STATUS_LAST_ADMIN" ) - sizeof( ("STATUS_LAST_ADMIN")[0] ), sizeof( "STATUS_LAST_ADMIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LAST_ADMIN")), ("STATUS_LAST_ADMIN") }, (ULONG)((NTSTATUS)0xC0000069L) }, { { sizeof( "STATUS_WRONG_PASSWORD" ) - sizeof( ("STATUS_WRONG_PASSWORD")[0] ), sizeof( "STATUS_WRONG_PASSWORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WRONG_PASSWORD")), ("STATUS_WRONG_PASSWORD") }, (ULONG)((NTSTATUS)0xC000006AL) }, { { sizeof( "STATUS_ILL_FORMED_PASSWORD" ) - sizeof( ("STATUS_ILL_FORMED_PASSWORD")[0] ), sizeof( "STATUS_ILL_FORMED_PASSWORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILL_FORMED_PASSWORD")), ("STATUS_ILL_FORMED_PASSWORD") }, (ULONG)((NTSTATUS)0xC000006BL) }, { { sizeof( "STATUS_PASSWORD_RESTRICTION" ) - sizeof( ("STATUS_PASSWORD_RESTRICTION")[0] ), sizeof( "STATUS_PASSWORD_RESTRICTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PASSWORD_RESTRICTION")), ("STATUS_PASSWORD_RESTRICTION") }, (ULONG)((NTSTATUS)0xC000006CL) }, { { sizeof( "STATUS_LOGON_FAILURE" ) - sizeof( ("STATUS_LOGON_FAILURE")[0] ), sizeof( "STATUS_LOGON_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGON_FAILURE")), ("STATUS_LOGON_FAILURE") }, (ULONG)((NTSTATUS)0xC000006DL) }, { { sizeof( "STATUS_ACCOUNT_RESTRICTION" ) - sizeof( ("STATUS_ACCOUNT_RESTRICTION")[0] ), sizeof( "STATUS_ACCOUNT_RESTRICTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCOUNT_RESTRICTION")), ("STATUS_ACCOUNT_RESTRICTION") }, (ULONG)((NTSTATUS)0xC000006EL) }, { { sizeof( "STATUS_INVALID_LOGON_HOURS" ) - sizeof( ("STATUS_INVALID_LOGON_HOURS")[0] ), sizeof( "STATUS_INVALID_LOGON_HOURS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LOGON_HOURS")), ("STATUS_INVALID_LOGON_HOURS") }, (ULONG)((NTSTATUS)0xC000006FL) }, { { sizeof( "STATUS_INVALID_WORKSTATION" ) - sizeof( ("STATUS_INVALID_WORKSTATION")[0] ), sizeof( "STATUS_INVALID_WORKSTATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_WORKSTATION")), ("STATUS_INVALID_WORKSTATION") }, (ULONG)((NTSTATUS)0xC0000070L) }, { { sizeof( "STATUS_PASSWORD_EXPIRED" ) - sizeof( ("STATUS_PASSWORD_EXPIRED")[0] ), sizeof( "STATUS_PASSWORD_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PASSWORD_EXPIRED")), ("STATUS_PASSWORD_EXPIRED") }, (ULONG)((NTSTATUS)0xC0000071L) }, { { sizeof( "STATUS_ACCOUNT_DISABLED" ) - sizeof( ("STATUS_ACCOUNT_DISABLED")[0] ), sizeof( "STATUS_ACCOUNT_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCOUNT_DISABLED")), ("STATUS_ACCOUNT_DISABLED") }, (ULONG)((NTSTATUS)0xC0000072L) }, { { sizeof( "STATUS_NONE_MAPPED" ) - sizeof( ("STATUS_NONE_MAPPED")[0] ), sizeof( "STATUS_NONE_MAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NONE_MAPPED")), ("STATUS_NONE_MAPPED") }, (ULONG)((NTSTATUS)0xC0000073L) }, { { sizeof( "STATUS_TOO_MANY_LUIDS_REQUESTED" ) - sizeof( ("STATUS_TOO_MANY_LUIDS_REQUESTED")[0] ), sizeof( "STATUS_TOO_MANY_LUIDS_REQUESTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_LUIDS_REQUESTED")), ("STATUS_TOO_MANY_LUIDS_REQUESTED") }, (ULONG)((NTSTATUS)0xC0000074L) }, { { sizeof( "STATUS_LUIDS_EXHAUSTED" ) - sizeof( ("STATUS_LUIDS_EXHAUSTED")[0] ), sizeof( "STATUS_LUIDS_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LUIDS_EXHAUSTED")), ("STATUS_LUIDS_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC0000075L) }, { { sizeof( "STATUS_INVALID_SUB_AUTHORITY" ) - sizeof( ("STATUS_INVALID_SUB_AUTHORITY")[0] ), sizeof( "STATUS_INVALID_SUB_AUTHORITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SUB_AUTHORITY")), ("STATUS_INVALID_SUB_AUTHORITY") }, (ULONG)((NTSTATUS)0xC0000076L) }, { { sizeof( "STATUS_INVALID_ACL" ) - sizeof( ("STATUS_INVALID_ACL")[0] ), sizeof( "STATUS_INVALID_ACL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ACL")), ("STATUS_INVALID_ACL") }, (ULONG)((NTSTATUS)0xC0000077L) }, { { sizeof( "STATUS_INVALID_SID" ) - sizeof( ("STATUS_INVALID_SID")[0] ), sizeof( "STATUS_INVALID_SID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SID")), ("STATUS_INVALID_SID") }, (ULONG)((NTSTATUS)0xC0000078L) }, { { sizeof( "STATUS_INVALID_SECURITY_DESCR" ) - sizeof( ("STATUS_INVALID_SECURITY_DESCR")[0] ), sizeof( "STATUS_INVALID_SECURITY_DESCR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SECURITY_DESCR")), ("STATUS_INVALID_SECURITY_DESCR") }, (ULONG)((NTSTATUS)0xC0000079L) }, { { sizeof( "STATUS_PROCEDURE_NOT_FOUND" ) - sizeof( ("STATUS_PROCEDURE_NOT_FOUND")[0] ), sizeof( "STATUS_PROCEDURE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROCEDURE_NOT_FOUND")), ("STATUS_PROCEDURE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000007AL) }, { { sizeof( "STATUS_INVALID_IMAGE_FORMAT" ) - sizeof( ("STATUS_INVALID_IMAGE_FORMAT")[0] ), sizeof( "STATUS_INVALID_IMAGE_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_FORMAT")), ("STATUS_INVALID_IMAGE_FORMAT") }, (ULONG)((NTSTATUS)0xC000007BL) }, { { sizeof( "STATUS_NO_TOKEN" ) - sizeof( ("STATUS_NO_TOKEN")[0] ), sizeof( "STATUS_NO_TOKEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_TOKEN")), ("STATUS_NO_TOKEN") }, (ULONG)((NTSTATUS)0xC000007CL) }, { { sizeof( "STATUS_BAD_INHERITANCE_ACL" ) - sizeof( ("STATUS_BAD_INHERITANCE_ACL")[0] ), sizeof( "STATUS_BAD_INHERITANCE_ACL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_INHERITANCE_ACL")), ("STATUS_BAD_INHERITANCE_ACL") }, (ULONG)((NTSTATUS)0xC000007DL) }, { { sizeof( "STATUS_RANGE_NOT_LOCKED" ) - sizeof( ("STATUS_RANGE_NOT_LOCKED")[0] ), sizeof( "STATUS_RANGE_NOT_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RANGE_NOT_LOCKED")), ("STATUS_RANGE_NOT_LOCKED") }, (ULONG)((NTSTATUS)0xC000007EL) }, { { sizeof( "STATUS_DISK_FULL" ) - sizeof( ("STATUS_DISK_FULL")[0] ), sizeof( "STATUS_DISK_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_FULL")), ("STATUS_DISK_FULL") }, (ULONG)((NTSTATUS)0xC000007FL) }, { { sizeof( "STATUS_SERVER_DISABLED" ) - sizeof( ("STATUS_SERVER_DISABLED")[0] ), sizeof( "STATUS_SERVER_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVER_DISABLED")), ("STATUS_SERVER_DISABLED") }, (ULONG)((NTSTATUS)0xC0000080L) }, { { sizeof( "STATUS_SERVER_NOT_DISABLED" ) - sizeof( ("STATUS_SERVER_NOT_DISABLED")[0] ), sizeof( "STATUS_SERVER_NOT_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVER_NOT_DISABLED")), ("STATUS_SERVER_NOT_DISABLED") }, (ULONG)((NTSTATUS)0xC0000081L) }, { { sizeof( "STATUS_TOO_MANY_GUIDS_REQUESTED" ) - sizeof( ("STATUS_TOO_MANY_GUIDS_REQUESTED")[0] ), sizeof( "STATUS_TOO_MANY_GUIDS_REQUESTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_GUIDS_REQUESTED")), ("STATUS_TOO_MANY_GUIDS_REQUESTED") }, (ULONG)((NTSTATUS)0xC0000082L) }, { { sizeof( "STATUS_GUIDS_EXHAUSTED" ) - sizeof( ("STATUS_GUIDS_EXHAUSTED")[0] ), sizeof( "STATUS_GUIDS_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GUIDS_EXHAUSTED")), ("STATUS_GUIDS_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC0000083L) }, { { sizeof( "STATUS_INVALID_ID_AUTHORITY" ) - sizeof( ("STATUS_INVALID_ID_AUTHORITY")[0] ), sizeof( "STATUS_INVALID_ID_AUTHORITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ID_AUTHORITY")), ("STATUS_INVALID_ID_AUTHORITY") }, (ULONG)((NTSTATUS)0xC0000084L) }, { { sizeof( "STATUS_AGENTS_EXHAUSTED" ) - sizeof( ("STATUS_AGENTS_EXHAUSTED")[0] ), sizeof( "STATUS_AGENTS_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AGENTS_EXHAUSTED")), ("STATUS_AGENTS_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC0000085L) }, { { sizeof( "STATUS_INVALID_VOLUME_LABEL" ) - sizeof( ("STATUS_INVALID_VOLUME_LABEL")[0] ), sizeof( "STATUS_INVALID_VOLUME_LABEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_VOLUME_LABEL")), ("STATUS_INVALID_VOLUME_LABEL") }, (ULONG)((NTSTATUS)0xC0000086L) }, { { sizeof( "STATUS_SECTION_NOT_EXTENDED" ) - sizeof( ("STATUS_SECTION_NOT_EXTENDED")[0] ), sizeof( "STATUS_SECTION_NOT_EXTENDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECTION_NOT_EXTENDED")), ("STATUS_SECTION_NOT_EXTENDED") }, (ULONG)((NTSTATUS)0xC0000087L) }, { { sizeof( "STATUS_NOT_MAPPED_DATA" ) - sizeof( ("STATUS_NOT_MAPPED_DATA")[0] ), sizeof( "STATUS_NOT_MAPPED_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_MAPPED_DATA")), ("STATUS_NOT_MAPPED_DATA") }, (ULONG)((NTSTATUS)0xC0000088L) }, { { sizeof( "STATUS_RESOURCE_DATA_NOT_FOUND" ) - sizeof( ("STATUS_RESOURCE_DATA_NOT_FOUND")[0] ), sizeof( "STATUS_RESOURCE_DATA_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_DATA_NOT_FOUND")), ("STATUS_RESOURCE_DATA_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000089L) }, { { sizeof( "STATUS_RESOURCE_TYPE_NOT_FOUND" ) - sizeof( ("STATUS_RESOURCE_TYPE_NOT_FOUND")[0] ), sizeof( "STATUS_RESOURCE_TYPE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_TYPE_NOT_FOUND")), ("STATUS_RESOURCE_TYPE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000008AL) }, { { sizeof( "STATUS_RESOURCE_NAME_NOT_FOUND" ) - sizeof( ("STATUS_RESOURCE_NAME_NOT_FOUND")[0] ), sizeof( "STATUS_RESOURCE_NAME_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_NAME_NOT_FOUND")), ("STATUS_RESOURCE_NAME_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000008BL) }, { { sizeof( "STATUS_ARRAY_BOUNDS_EXCEEDED" ) - sizeof( ("STATUS_ARRAY_BOUNDS_EXCEEDED")[0] ), sizeof( "STATUS_ARRAY_BOUNDS_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ARRAY_BOUNDS_EXCEEDED")), ("STATUS_ARRAY_BOUNDS_EXCEEDED") }, (ULONG)((NTSTATUS)0xC000008CL) }, { { sizeof( "STATUS_FLOAT_DENORMAL_OPERAND" ) - sizeof( ("STATUS_FLOAT_DENORMAL_OPERAND")[0] ), sizeof( "STATUS_FLOAT_DENORMAL_OPERAND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_DENORMAL_OPERAND")), ("STATUS_FLOAT_DENORMAL_OPERAND") }, (ULONG)((NTSTATUS)0xC000008DL) }, { { sizeof( "STATUS_FLOAT_DIVIDE_BY_ZERO" ) - sizeof( ("STATUS_FLOAT_DIVIDE_BY_ZERO")[0] ), sizeof( "STATUS_FLOAT_DIVIDE_BY_ZERO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_DIVIDE_BY_ZERO")), ("STATUS_FLOAT_DIVIDE_BY_ZERO") }, (ULONG)((NTSTATUS)0xC000008EL) }, { { sizeof( "STATUS_FLOAT_INEXACT_RESULT" ) - sizeof( ("STATUS_FLOAT_INEXACT_RESULT")[0] ), sizeof( "STATUS_FLOAT_INEXACT_RESULT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_INEXACT_RESULT")), ("STATUS_FLOAT_INEXACT_RESULT") }, (ULONG)((NTSTATUS)0xC000008FL) }, { { sizeof( "STATUS_FLOAT_INVALID_OPERATION" ) - sizeof( ("STATUS_FLOAT_INVALID_OPERATION")[0] ), sizeof( "STATUS_FLOAT_INVALID_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_INVALID_OPERATION")), ("STATUS_FLOAT_INVALID_OPERATION") }, (ULONG)((NTSTATUS)0xC0000090L) }, { { sizeof( "STATUS_FLOAT_OVERFLOW" ) - sizeof( ("STATUS_FLOAT_OVERFLOW")[0] ), sizeof( "STATUS_FLOAT_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_OVERFLOW")), ("STATUS_FLOAT_OVERFLOW") }, (ULONG)((NTSTATUS)0xC0000091L) }, { { sizeof( "STATUS_FLOAT_STACK_CHECK" ) - sizeof( ("STATUS_FLOAT_STACK_CHECK")[0] ), sizeof( "STATUS_FLOAT_STACK_CHECK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_STACK_CHECK")), ("STATUS_FLOAT_STACK_CHECK") }, (ULONG)((NTSTATUS)0xC0000092L) }, { { sizeof( "STATUS_FLOAT_UNDERFLOW" ) - sizeof( ("STATUS_FLOAT_UNDERFLOW")[0] ), sizeof( "STATUS_FLOAT_UNDERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_UNDERFLOW")), ("STATUS_FLOAT_UNDERFLOW") }, (ULONG)((NTSTATUS)0xC0000093L) }, { { sizeof( "STATUS_INTEGER_DIVIDE_BY_ZERO" ) - sizeof( ("STATUS_INTEGER_DIVIDE_BY_ZERO")[0] ), sizeof( "STATUS_INTEGER_DIVIDE_BY_ZERO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTEGER_DIVIDE_BY_ZERO")), ("STATUS_INTEGER_DIVIDE_BY_ZERO") }, (ULONG)((NTSTATUS)0xC0000094L) }, { { sizeof( "STATUS_INTEGER_OVERFLOW" ) - sizeof( ("STATUS_INTEGER_OVERFLOW")[0] ), sizeof( "STATUS_INTEGER_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTEGER_OVERFLOW")), ("STATUS_INTEGER_OVERFLOW") }, (ULONG)((NTSTATUS)0xC0000095L) }, { { sizeof( "STATUS_PRIVILEGED_INSTRUCTION" ) - sizeof( ("STATUS_PRIVILEGED_INSTRUCTION")[0] ), sizeof( "STATUS_PRIVILEGED_INSTRUCTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PRIVILEGED_INSTRUCTION")), ("STATUS_PRIVILEGED_INSTRUCTION") }, (ULONG)((NTSTATUS)0xC0000096L) }, { { sizeof( "STATUS_TOO_MANY_PAGING_FILES" ) - sizeof( ("STATUS_TOO_MANY_PAGING_FILES")[0] ), sizeof( "STATUS_TOO_MANY_PAGING_FILES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_PAGING_FILES")), ("STATUS_TOO_MANY_PAGING_FILES") }, (ULONG)((NTSTATUS)0xC0000097L) }, { { sizeof( "STATUS_FILE_INVALID" ) - sizeof( ("STATUS_FILE_INVALID")[0] ), sizeof( "STATUS_FILE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_INVALID")), ("STATUS_FILE_INVALID") }, (ULONG)((NTSTATUS)0xC0000098L) }, { { sizeof( "STATUS_ALLOTTED_SPACE_EXCEEDED" ) - sizeof( ("STATUS_ALLOTTED_SPACE_EXCEEDED")[0] ), sizeof( "STATUS_ALLOTTED_SPACE_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALLOTTED_SPACE_EXCEEDED")), ("STATUS_ALLOTTED_SPACE_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000099L) }, { { sizeof( "STATUS_INSUFFICIENT_RESOURCES" ) - sizeof( ("STATUS_INSUFFICIENT_RESOURCES")[0] ), sizeof( "STATUS_INSUFFICIENT_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSUFFICIENT_RESOURCES")), ("STATUS_INSUFFICIENT_RESOURCES") }, (ULONG)((NTSTATUS)0xC000009AL) }, { { sizeof( "STATUS_DFS_EXIT_PATH_FOUND" ) - sizeof( ("STATUS_DFS_EXIT_PATH_FOUND")[0] ), sizeof( "STATUS_DFS_EXIT_PATH_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DFS_EXIT_PATH_FOUND")), ("STATUS_DFS_EXIT_PATH_FOUND") }, (ULONG)((NTSTATUS)0xC000009BL) }, { { sizeof( "STATUS_DEVICE_DATA_ERROR" ) - sizeof( ("STATUS_DEVICE_DATA_ERROR")[0] ), sizeof( "STATUS_DEVICE_DATA_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_DATA_ERROR")), ("STATUS_DEVICE_DATA_ERROR") }, (ULONG)((NTSTATUS)0xC000009CL) }, { { sizeof( "STATUS_DEVICE_NOT_CONNECTED" ) - sizeof( ("STATUS_DEVICE_NOT_CONNECTED")[0] ), sizeof( "STATUS_DEVICE_NOT_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_NOT_CONNECTED")), ("STATUS_DEVICE_NOT_CONNECTED") }, (ULONG)((NTSTATUS)0xC000009DL) }, { { sizeof( "STATUS_DEVICE_POWER_FAILURE" ) - sizeof( ("STATUS_DEVICE_POWER_FAILURE")[0] ), sizeof( "STATUS_DEVICE_POWER_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_POWER_FAILURE")), ("STATUS_DEVICE_POWER_FAILURE") }, (ULONG)((NTSTATUS)0xC000009EL) }, { { sizeof( "STATUS_FREE_VM_NOT_AT_BASE" ) - sizeof( ("STATUS_FREE_VM_NOT_AT_BASE")[0] ), sizeof( "STATUS_FREE_VM_NOT_AT_BASE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FREE_VM_NOT_AT_BASE")), ("STATUS_FREE_VM_NOT_AT_BASE") }, (ULONG)((NTSTATUS)0xC000009FL) }, { { sizeof( "STATUS_MEMORY_NOT_ALLOCATED" ) - sizeof( ("STATUS_MEMORY_NOT_ALLOCATED")[0] ), sizeof( "STATUS_MEMORY_NOT_ALLOCATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEMORY_NOT_ALLOCATED")), ("STATUS_MEMORY_NOT_ALLOCATED") }, (ULONG)((NTSTATUS)0xC00000A0L) }, { { sizeof( "STATUS_WORKING_SET_QUOTA" ) - sizeof( ("STATUS_WORKING_SET_QUOTA")[0] ), sizeof( "STATUS_WORKING_SET_QUOTA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WORKING_SET_QUOTA")), ("STATUS_WORKING_SET_QUOTA") }, (ULONG)((NTSTATUS)0xC00000A1L) }, { { sizeof( "STATUS_MEDIA_WRITE_PROTECTED" ) - sizeof( ("STATUS_MEDIA_WRITE_PROTECTED")[0] ), sizeof( "STATUS_MEDIA_WRITE_PROTECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEDIA_WRITE_PROTECTED")), ("STATUS_MEDIA_WRITE_PROTECTED") }, (ULONG)((NTSTATUS)0xC00000A2L) }, { { sizeof( "STATUS_DEVICE_NOT_READY" ) - sizeof( ("STATUS_DEVICE_NOT_READY")[0] ), sizeof( "STATUS_DEVICE_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_NOT_READY")), ("STATUS_DEVICE_NOT_READY") }, (ULONG)((NTSTATUS)0xC00000A3L) }, { { sizeof( "STATUS_INVALID_GROUP_ATTRIBUTES" ) - sizeof( ("STATUS_INVALID_GROUP_ATTRIBUTES")[0] ), sizeof( "STATUS_INVALID_GROUP_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_GROUP_ATTRIBUTES")), ("STATUS_INVALID_GROUP_ATTRIBUTES") }, (ULONG)((NTSTATUS)0xC00000A4L) }, { { sizeof( "STATUS_BAD_IMPERSONATION_LEVEL" ) - sizeof( ("STATUS_BAD_IMPERSONATION_LEVEL")[0] ), sizeof( "STATUS_BAD_IMPERSONATION_LEVEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_IMPERSONATION_LEVEL")), ("STATUS_BAD_IMPERSONATION_LEVEL") }, (ULONG)((NTSTATUS)0xC00000A5L) }, { { sizeof( "STATUS_CANT_OPEN_ANONYMOUS" ) - sizeof( ("STATUS_CANT_OPEN_ANONYMOUS")[0] ), sizeof( "STATUS_CANT_OPEN_ANONYMOUS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_OPEN_ANONYMOUS")), ("STATUS_CANT_OPEN_ANONYMOUS") }, (ULONG)((NTSTATUS)0xC00000A6L) }, { { sizeof( "STATUS_BAD_VALIDATION_CLASS" ) - sizeof( ("STATUS_BAD_VALIDATION_CLASS")[0] ), sizeof( "STATUS_BAD_VALIDATION_CLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_VALIDATION_CLASS")), ("STATUS_BAD_VALIDATION_CLASS") }, (ULONG)((NTSTATUS)0xC00000A7L) }, { { sizeof( "STATUS_BAD_TOKEN_TYPE" ) - sizeof( ("STATUS_BAD_TOKEN_TYPE")[0] ), sizeof( "STATUS_BAD_TOKEN_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_TOKEN_TYPE")), ("STATUS_BAD_TOKEN_TYPE") }, (ULONG)((NTSTATUS)0xC00000A8L) }, { { sizeof( "STATUS_BAD_MASTER_BOOT_RECORD" ) - sizeof( ("STATUS_BAD_MASTER_BOOT_RECORD")[0] ), sizeof( "STATUS_BAD_MASTER_BOOT_RECORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_MASTER_BOOT_RECORD")), ("STATUS_BAD_MASTER_BOOT_RECORD") }, (ULONG)((NTSTATUS)0xC00000A9L) }, { { sizeof( "STATUS_INSTRUCTION_MISALIGNMENT" ) - sizeof( ("STATUS_INSTRUCTION_MISALIGNMENT")[0] ), sizeof( "STATUS_INSTRUCTION_MISALIGNMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSTRUCTION_MISALIGNMENT")), ("STATUS_INSTRUCTION_MISALIGNMENT") }, (ULONG)((NTSTATUS)0xC00000AAL) }, { { sizeof( "STATUS_INSTANCE_NOT_AVAILABLE" ) - sizeof( ("STATUS_INSTANCE_NOT_AVAILABLE")[0] ), sizeof( "STATUS_INSTANCE_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSTANCE_NOT_AVAILABLE")), ("STATUS_INSTANCE_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC00000ABL) }, { { sizeof( "STATUS_PIPE_NOT_AVAILABLE" ) - sizeof( ("STATUS_PIPE_NOT_AVAILABLE")[0] ), sizeof( "STATUS_PIPE_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_NOT_AVAILABLE")), ("STATUS_PIPE_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC00000ACL) }, { { sizeof( "STATUS_INVALID_PIPE_STATE" ) - sizeof( ("STATUS_INVALID_PIPE_STATE")[0] ), sizeof( "STATUS_INVALID_PIPE_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PIPE_STATE")), ("STATUS_INVALID_PIPE_STATE") }, (ULONG)((NTSTATUS)0xC00000ADL) }, { { sizeof( "STATUS_PIPE_BUSY" ) - sizeof( ("STATUS_PIPE_BUSY")[0] ), sizeof( "STATUS_PIPE_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_BUSY")), ("STATUS_PIPE_BUSY") }, (ULONG)((NTSTATUS)0xC00000AEL) }, { { sizeof( "STATUS_ILLEGAL_FUNCTION" ) - sizeof( ("STATUS_ILLEGAL_FUNCTION")[0] ), sizeof( "STATUS_ILLEGAL_FUNCTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILLEGAL_FUNCTION")), ("STATUS_ILLEGAL_FUNCTION") }, (ULONG)((NTSTATUS)0xC00000AFL) }, { { sizeof( "STATUS_PIPE_DISCONNECTED" ) - sizeof( ("STATUS_PIPE_DISCONNECTED")[0] ), sizeof( "STATUS_PIPE_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_DISCONNECTED")), ("STATUS_PIPE_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC00000B0L) }, { { sizeof( "STATUS_PIPE_CLOSING" ) - sizeof( ("STATUS_PIPE_CLOSING")[0] ), sizeof( "STATUS_PIPE_CLOSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_CLOSING")), ("STATUS_PIPE_CLOSING") }, (ULONG)((NTSTATUS)0xC00000B1L) }, { { sizeof( "STATUS_PIPE_CONNECTED" ) - sizeof( ("STATUS_PIPE_CONNECTED")[0] ), sizeof( "STATUS_PIPE_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_CONNECTED")), ("STATUS_PIPE_CONNECTED") }, (ULONG)((NTSTATUS)0xC00000B2L) }, { { sizeof( "STATUS_PIPE_LISTENING" ) - sizeof( ("STATUS_PIPE_LISTENING")[0] ), sizeof( "STATUS_PIPE_LISTENING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_LISTENING")), ("STATUS_PIPE_LISTENING") }, (ULONG)((NTSTATUS)0xC00000B3L) }, { { sizeof( "STATUS_INVALID_READ_MODE" ) - sizeof( ("STATUS_INVALID_READ_MODE")[0] ), sizeof( "STATUS_INVALID_READ_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_READ_MODE")), ("STATUS_INVALID_READ_MODE") }, (ULONG)((NTSTATUS)0xC00000B4L) }, { { sizeof( "STATUS_IO_TIMEOUT" ) - sizeof( ("STATUS_IO_TIMEOUT")[0] ), sizeof( "STATUS_IO_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_TIMEOUT")), ("STATUS_IO_TIMEOUT") }, (ULONG)((NTSTATUS)0xC00000B5L) }, { { sizeof( "STATUS_FILE_FORCED_CLOSED" ) - sizeof( ("STATUS_FILE_FORCED_CLOSED")[0] ), sizeof( "STATUS_FILE_FORCED_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_FORCED_CLOSED")), ("STATUS_FILE_FORCED_CLOSED") }, (ULONG)((NTSTATUS)0xC00000B6L) }, { { sizeof( "STATUS_PROFILING_NOT_STARTED" ) - sizeof( ("STATUS_PROFILING_NOT_STARTED")[0] ), sizeof( "STATUS_PROFILING_NOT_STARTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROFILING_NOT_STARTED")), ("STATUS_PROFILING_NOT_STARTED") }, (ULONG)((NTSTATUS)0xC00000B7L) }, { { sizeof( "STATUS_PROFILING_NOT_STOPPED" ) - sizeof( ("STATUS_PROFILING_NOT_STOPPED")[0] ), sizeof( "STATUS_PROFILING_NOT_STOPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROFILING_NOT_STOPPED")), ("STATUS_PROFILING_NOT_STOPPED") }, (ULONG)((NTSTATUS)0xC00000B8L) }, { { sizeof( "STATUS_COULD_NOT_INTERPRET" ) - sizeof( ("STATUS_COULD_NOT_INTERPRET")[0] ), sizeof( "STATUS_COULD_NOT_INTERPRET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COULD_NOT_INTERPRET")), ("STATUS_COULD_NOT_INTERPRET") }, (ULONG)((NTSTATUS)0xC00000B9L) }, { { sizeof( "STATUS_FILE_IS_A_DIRECTORY" ) - sizeof( ("STATUS_FILE_IS_A_DIRECTORY")[0] ), sizeof( "STATUS_FILE_IS_A_DIRECTORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_IS_A_DIRECTORY")), ("STATUS_FILE_IS_A_DIRECTORY") }, (ULONG)((NTSTATUS)0xC00000BAL) }, { { sizeof( "STATUS_NOT_SUPPORTED" ) - sizeof( ("STATUS_NOT_SUPPORTED")[0] ), sizeof( "STATUS_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SUPPORTED")), ("STATUS_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC00000BBL) }, { { sizeof( "STATUS_REMOTE_NOT_LISTENING" ) - sizeof( ("STATUS_REMOTE_NOT_LISTENING")[0] ), sizeof( "STATUS_REMOTE_NOT_LISTENING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_NOT_LISTENING")), ("STATUS_REMOTE_NOT_LISTENING") }, (ULONG)((NTSTATUS)0xC00000BCL) }, { { sizeof( "STATUS_DUPLICATE_NAME" ) - sizeof( ("STATUS_DUPLICATE_NAME")[0] ), sizeof( "STATUS_DUPLICATE_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DUPLICATE_NAME")), ("STATUS_DUPLICATE_NAME") }, (ULONG)((NTSTATUS)0xC00000BDL) }, { { sizeof( "STATUS_BAD_NETWORK_PATH" ) - sizeof( ("STATUS_BAD_NETWORK_PATH")[0] ), sizeof( "STATUS_BAD_NETWORK_PATH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_NETWORK_PATH")), ("STATUS_BAD_NETWORK_PATH") }, (ULONG)((NTSTATUS)0xC00000BEL) }, { { sizeof( "STATUS_NETWORK_BUSY" ) - sizeof( ("STATUS_NETWORK_BUSY")[0] ), sizeof( "STATUS_NETWORK_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_BUSY")), ("STATUS_NETWORK_BUSY") }, (ULONG)((NTSTATUS)0xC00000BFL) }, { { sizeof( "STATUS_DEVICE_DOES_NOT_EXIST" ) - sizeof( ("STATUS_DEVICE_DOES_NOT_EXIST")[0] ), sizeof( "STATUS_DEVICE_DOES_NOT_EXIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_DOES_NOT_EXIST")), ("STATUS_DEVICE_DOES_NOT_EXIST") }, (ULONG)((NTSTATUS)0xC00000C0L) }, { { sizeof( "STATUS_TOO_MANY_COMMANDS" ) - sizeof( ("STATUS_TOO_MANY_COMMANDS")[0] ), sizeof( "STATUS_TOO_MANY_COMMANDS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_COMMANDS")), ("STATUS_TOO_MANY_COMMANDS") }, (ULONG)((NTSTATUS)0xC00000C1L) }, { { sizeof( "STATUS_ADAPTER_HARDWARE_ERROR" ) - sizeof( ("STATUS_ADAPTER_HARDWARE_ERROR")[0] ), sizeof( "STATUS_ADAPTER_HARDWARE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ADAPTER_HARDWARE_ERROR")), ("STATUS_ADAPTER_HARDWARE_ERROR") }, (ULONG)((NTSTATUS)0xC00000C2L) }, { { sizeof( "STATUS_INVALID_NETWORK_RESPONSE" ) - sizeof( ("STATUS_INVALID_NETWORK_RESPONSE")[0] ), sizeof( "STATUS_INVALID_NETWORK_RESPONSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_NETWORK_RESPONSE")), ("STATUS_INVALID_NETWORK_RESPONSE") }, (ULONG)((NTSTATUS)0xC00000C3L) }, { { sizeof( "STATUS_UNEXPECTED_NETWORK_ERROR" ) - sizeof( ("STATUS_UNEXPECTED_NETWORK_ERROR")[0] ), sizeof( "STATUS_UNEXPECTED_NETWORK_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNEXPECTED_NETWORK_ERROR")), ("STATUS_UNEXPECTED_NETWORK_ERROR") }, (ULONG)((NTSTATUS)0xC00000C4L) }, { { sizeof( "STATUS_BAD_REMOTE_ADAPTER" ) - sizeof( ("STATUS_BAD_REMOTE_ADAPTER")[0] ), sizeof( "STATUS_BAD_REMOTE_ADAPTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_REMOTE_ADAPTER")), ("STATUS_BAD_REMOTE_ADAPTER") }, (ULONG)((NTSTATUS)0xC00000C5L) }, { { sizeof( "STATUS_PRINT_QUEUE_FULL" ) - sizeof( ("STATUS_PRINT_QUEUE_FULL")[0] ), sizeof( "STATUS_PRINT_QUEUE_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PRINT_QUEUE_FULL")), ("STATUS_PRINT_QUEUE_FULL") }, (ULONG)((NTSTATUS)0xC00000C6L) }, { { sizeof( "STATUS_NO_SPOOL_SPACE" ) - sizeof( ("STATUS_NO_SPOOL_SPACE")[0] ), sizeof( "STATUS_NO_SPOOL_SPACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SPOOL_SPACE")), ("STATUS_NO_SPOOL_SPACE") }, (ULONG)((NTSTATUS)0xC00000C7L) }, { { sizeof( "STATUS_PRINT_CANCELLED" ) - sizeof( ("STATUS_PRINT_CANCELLED")[0] ), sizeof( "STATUS_PRINT_CANCELLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PRINT_CANCELLED")), ("STATUS_PRINT_CANCELLED") }, (ULONG)((NTSTATUS)0xC00000C8L) }, { { sizeof( "STATUS_NETWORK_NAME_DELETED" ) - sizeof( ("STATUS_NETWORK_NAME_DELETED")[0] ), sizeof( "STATUS_NETWORK_NAME_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_NAME_DELETED")), ("STATUS_NETWORK_NAME_DELETED") }, (ULONG)((NTSTATUS)0xC00000C9L) }, { { sizeof( "STATUS_NETWORK_ACCESS_DENIED" ) - sizeof( ("STATUS_NETWORK_ACCESS_DENIED")[0] ), sizeof( "STATUS_NETWORK_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_ACCESS_DENIED")), ("STATUS_NETWORK_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC00000CAL) }, { { sizeof( "STATUS_BAD_DEVICE_TYPE" ) - sizeof( ("STATUS_BAD_DEVICE_TYPE")[0] ), sizeof( "STATUS_BAD_DEVICE_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_DEVICE_TYPE")), ("STATUS_BAD_DEVICE_TYPE") }, (ULONG)((NTSTATUS)0xC00000CBL) }, { { sizeof( "STATUS_BAD_NETWORK_NAME" ) - sizeof( ("STATUS_BAD_NETWORK_NAME")[0] ), sizeof( "STATUS_BAD_NETWORK_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_NETWORK_NAME")), ("STATUS_BAD_NETWORK_NAME") }, (ULONG)((NTSTATUS)0xC00000CCL) }, { { sizeof( "STATUS_TOO_MANY_NAMES" ) - sizeof( ("STATUS_TOO_MANY_NAMES")[0] ), sizeof( "STATUS_TOO_MANY_NAMES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_NAMES")), ("STATUS_TOO_MANY_NAMES") }, (ULONG)((NTSTATUS)0xC00000CDL) }, { { sizeof( "STATUS_TOO_MANY_SESSIONS" ) - sizeof( ("STATUS_TOO_MANY_SESSIONS")[0] ), sizeof( "STATUS_TOO_MANY_SESSIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_SESSIONS")), ("STATUS_TOO_MANY_SESSIONS") }, (ULONG)((NTSTATUS)0xC00000CEL) }, { { sizeof( "STATUS_SHARING_PAUSED" ) - sizeof( ("STATUS_SHARING_PAUSED")[0] ), sizeof( "STATUS_SHARING_PAUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHARING_PAUSED")), ("STATUS_SHARING_PAUSED") }, (ULONG)((NTSTATUS)0xC00000CFL) }, { { sizeof( "STATUS_REQUEST_NOT_ACCEPTED" ) - sizeof( ("STATUS_REQUEST_NOT_ACCEPTED")[0] ), sizeof( "STATUS_REQUEST_NOT_ACCEPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REQUEST_NOT_ACCEPTED")), ("STATUS_REQUEST_NOT_ACCEPTED") }, (ULONG)((NTSTATUS)0xC00000D0L) }, { { sizeof( "STATUS_REDIRECTOR_PAUSED" ) - sizeof( ("STATUS_REDIRECTOR_PAUSED")[0] ), sizeof( "STATUS_REDIRECTOR_PAUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REDIRECTOR_PAUSED")), ("STATUS_REDIRECTOR_PAUSED") }, (ULONG)((NTSTATUS)0xC00000D1L) }, { { sizeof( "STATUS_NET_WRITE_FAULT" ) - sizeof( ("STATUS_NET_WRITE_FAULT")[0] ), sizeof( "STATUS_NET_WRITE_FAULT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NET_WRITE_FAULT")), ("STATUS_NET_WRITE_FAULT") }, (ULONG)((NTSTATUS)0xC00000D2L) }, { { sizeof( "STATUS_PROFILING_AT_LIMIT" ) - sizeof( ("STATUS_PROFILING_AT_LIMIT")[0] ), sizeof( "STATUS_PROFILING_AT_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROFILING_AT_LIMIT")), ("STATUS_PROFILING_AT_LIMIT") }, (ULONG)((NTSTATUS)0xC00000D3L) }, { { sizeof( "STATUS_NOT_SAME_DEVICE" ) - sizeof( ("STATUS_NOT_SAME_DEVICE")[0] ), sizeof( "STATUS_NOT_SAME_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SAME_DEVICE")), ("STATUS_NOT_SAME_DEVICE") }, (ULONG)((NTSTATUS)0xC00000D4L) }, { { sizeof( "STATUS_FILE_RENAMED" ) - sizeof( ("STATUS_FILE_RENAMED")[0] ), sizeof( "STATUS_FILE_RENAMED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_RENAMED")), ("STATUS_FILE_RENAMED") }, (ULONG)((NTSTATUS)0xC00000D5L) }, { { sizeof( "STATUS_VIRTUAL_CIRCUIT_CLOSED" ) - sizeof( ("STATUS_VIRTUAL_CIRCUIT_CLOSED")[0] ), sizeof( "STATUS_VIRTUAL_CIRCUIT_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTUAL_CIRCUIT_CLOSED")), ("STATUS_VIRTUAL_CIRCUIT_CLOSED") }, (ULONG)((NTSTATUS)0xC00000D6L) }, { { sizeof( "STATUS_NO_SECURITY_ON_OBJECT" ) - sizeof( ("STATUS_NO_SECURITY_ON_OBJECT")[0] ), sizeof( "STATUS_NO_SECURITY_ON_OBJECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SECURITY_ON_OBJECT")), ("STATUS_NO_SECURITY_ON_OBJECT") }, (ULONG)((NTSTATUS)0xC00000D7L) }, { { sizeof( "STATUS_CANT_WAIT" ) - sizeof( ("STATUS_CANT_WAIT")[0] ), sizeof( "STATUS_CANT_WAIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_WAIT")), ("STATUS_CANT_WAIT") }, (ULONG)((NTSTATUS)0xC00000D8L) }, { { sizeof( "STATUS_PIPE_EMPTY" ) - sizeof( ("STATUS_PIPE_EMPTY")[0] ), sizeof( "STATUS_PIPE_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_EMPTY")), ("STATUS_PIPE_EMPTY") }, (ULONG)((NTSTATUS)0xC00000D9L) }, { { sizeof( "STATUS_CANT_ACCESS_DOMAIN_INFO" ) - sizeof( ("STATUS_CANT_ACCESS_DOMAIN_INFO")[0] ), sizeof( "STATUS_CANT_ACCESS_DOMAIN_INFO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_ACCESS_DOMAIN_INFO")), ("STATUS_CANT_ACCESS_DOMAIN_INFO") }, (ULONG)((NTSTATUS)0xC00000DAL) }, { { sizeof( "STATUS_CANT_TERMINATE_SELF" ) - sizeof( ("STATUS_CANT_TERMINATE_SELF")[0] ), sizeof( "STATUS_CANT_TERMINATE_SELF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_TERMINATE_SELF")), ("STATUS_CANT_TERMINATE_SELF") }, (ULONG)((NTSTATUS)0xC00000DBL) }, { { sizeof( "STATUS_INVALID_SERVER_STATE" ) - sizeof( ("STATUS_INVALID_SERVER_STATE")[0] ), sizeof( "STATUS_INVALID_SERVER_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SERVER_STATE")), ("STATUS_INVALID_SERVER_STATE") }, (ULONG)((NTSTATUS)0xC00000DCL) }, { { sizeof( "STATUS_INVALID_DOMAIN_STATE" ) - sizeof( ("STATUS_INVALID_DOMAIN_STATE")[0] ), sizeof( "STATUS_INVALID_DOMAIN_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_DOMAIN_STATE")), ("STATUS_INVALID_DOMAIN_STATE") }, (ULONG)((NTSTATUS)0xC00000DDL) }, { { sizeof( "STATUS_INVALID_DOMAIN_ROLE" ) - sizeof( ("STATUS_INVALID_DOMAIN_ROLE")[0] ), sizeof( "STATUS_INVALID_DOMAIN_ROLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_DOMAIN_ROLE")), ("STATUS_INVALID_DOMAIN_ROLE") }, (ULONG)((NTSTATUS)0xC00000DEL) }, { { sizeof( "STATUS_NO_SUCH_DOMAIN" ) - sizeof( ("STATUS_NO_SUCH_DOMAIN")[0] ), sizeof( "STATUS_NO_SUCH_DOMAIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_DOMAIN")), ("STATUS_NO_SUCH_DOMAIN") }, (ULONG)((NTSTATUS)0xC00000DFL) }, { { sizeof( "STATUS_DOMAIN_EXISTS" ) - sizeof( ("STATUS_DOMAIN_EXISTS")[0] ), sizeof( "STATUS_DOMAIN_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DOMAIN_EXISTS")), ("STATUS_DOMAIN_EXISTS") }, (ULONG)((NTSTATUS)0xC00000E0L) }, { { sizeof( "STATUS_DOMAIN_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_DOMAIN_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_DOMAIN_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DOMAIN_LIMIT_EXCEEDED")), ("STATUS_DOMAIN_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC00000E1L) }, { { sizeof( "STATUS_OPLOCK_NOT_GRANTED" ) - sizeof( ("STATUS_OPLOCK_NOT_GRANTED")[0] ), sizeof( "STATUS_OPLOCK_NOT_GRANTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPLOCK_NOT_GRANTED")), ("STATUS_OPLOCK_NOT_GRANTED") }, (ULONG)((NTSTATUS)0xC00000E2L) }, { { sizeof( "STATUS_INVALID_OPLOCK_PROTOCOL" ) - sizeof( ("STATUS_INVALID_OPLOCK_PROTOCOL")[0] ), sizeof( "STATUS_INVALID_OPLOCK_PROTOCOL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_OPLOCK_PROTOCOL")), ("STATUS_INVALID_OPLOCK_PROTOCOL") }, (ULONG)((NTSTATUS)0xC00000E3L) }, { { sizeof( "STATUS_INTERNAL_DB_CORRUPTION" ) - sizeof( ("STATUS_INTERNAL_DB_CORRUPTION")[0] ), sizeof( "STATUS_INTERNAL_DB_CORRUPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTERNAL_DB_CORRUPTION")), ("STATUS_INTERNAL_DB_CORRUPTION") }, (ULONG)((NTSTATUS)0xC00000E4L) }, { { sizeof( "STATUS_INTERNAL_ERROR" ) - sizeof( ("STATUS_INTERNAL_ERROR")[0] ), sizeof( "STATUS_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTERNAL_ERROR")), ("STATUS_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC00000E5L) }, { { sizeof( "STATUS_GENERIC_NOT_MAPPED" ) - sizeof( ("STATUS_GENERIC_NOT_MAPPED")[0] ), sizeof( "STATUS_GENERIC_NOT_MAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GENERIC_NOT_MAPPED")), ("STATUS_GENERIC_NOT_MAPPED") }, (ULONG)((NTSTATUS)0xC00000E6L) }, { { sizeof( "STATUS_BAD_DESCRIPTOR_FORMAT" ) - sizeof( ("STATUS_BAD_DESCRIPTOR_FORMAT")[0] ), sizeof( "STATUS_BAD_DESCRIPTOR_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_DESCRIPTOR_FORMAT")), ("STATUS_BAD_DESCRIPTOR_FORMAT") }, (ULONG)((NTSTATUS)0xC00000E7L) }, { { sizeof( "STATUS_INVALID_USER_BUFFER" ) - sizeof( ("STATUS_INVALID_USER_BUFFER")[0] ), sizeof( "STATUS_INVALID_USER_BUFFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_USER_BUFFER")), ("STATUS_INVALID_USER_BUFFER") }, (ULONG)((NTSTATUS)0xC00000E8L) }, { { sizeof( "STATUS_UNEXPECTED_IO_ERROR" ) - sizeof( ("STATUS_UNEXPECTED_IO_ERROR")[0] ), sizeof( "STATUS_UNEXPECTED_IO_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNEXPECTED_IO_ERROR")), ("STATUS_UNEXPECTED_IO_ERROR") }, (ULONG)((NTSTATUS)0xC00000E9L) }, { { sizeof( "STATUS_UNEXPECTED_MM_CREATE_ERR" ) - sizeof( ("STATUS_UNEXPECTED_MM_CREATE_ERR")[0] ), sizeof( "STATUS_UNEXPECTED_MM_CREATE_ERR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNEXPECTED_MM_CREATE_ERR")), ("STATUS_UNEXPECTED_MM_CREATE_ERR") }, (ULONG)((NTSTATUS)0xC00000EAL) }, { { sizeof( "STATUS_UNEXPECTED_MM_MAP_ERROR" ) - sizeof( ("STATUS_UNEXPECTED_MM_MAP_ERROR")[0] ), sizeof( "STATUS_UNEXPECTED_MM_MAP_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNEXPECTED_MM_MAP_ERROR")), ("STATUS_UNEXPECTED_MM_MAP_ERROR") }, (ULONG)((NTSTATUS)0xC00000EBL) }, { { sizeof( "STATUS_UNEXPECTED_MM_EXTEND_ERR" ) - sizeof( ("STATUS_UNEXPECTED_MM_EXTEND_ERR")[0] ), sizeof( "STATUS_UNEXPECTED_MM_EXTEND_ERR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNEXPECTED_MM_EXTEND_ERR")), ("STATUS_UNEXPECTED_MM_EXTEND_ERR") }, (ULONG)((NTSTATUS)0xC00000ECL) }, { { sizeof( "STATUS_NOT_LOGON_PROCESS" ) - sizeof( ("STATUS_NOT_LOGON_PROCESS")[0] ), sizeof( "STATUS_NOT_LOGON_PROCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_LOGON_PROCESS")), ("STATUS_NOT_LOGON_PROCESS") }, (ULONG)((NTSTATUS)0xC00000EDL) }, { { sizeof( "STATUS_LOGON_SESSION_EXISTS" ) - sizeof( ("STATUS_LOGON_SESSION_EXISTS")[0] ), sizeof( "STATUS_LOGON_SESSION_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGON_SESSION_EXISTS")), ("STATUS_LOGON_SESSION_EXISTS") }, (ULONG)((NTSTATUS)0xC00000EEL) }, { { sizeof( "STATUS_INVALID_PARAMETER_1" ) - sizeof( ("STATUS_INVALID_PARAMETER_1")[0] ), sizeof( "STATUS_INVALID_PARAMETER_1" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_1")), ("STATUS_INVALID_PARAMETER_1") }, (ULONG)((NTSTATUS)0xC00000EFL) }, { { sizeof( "STATUS_INVALID_PARAMETER_2" ) - sizeof( ("STATUS_INVALID_PARAMETER_2")[0] ), sizeof( "STATUS_INVALID_PARAMETER_2" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_2")), ("STATUS_INVALID_PARAMETER_2") }, (ULONG)((NTSTATUS)0xC00000F0L) }, { { sizeof( "STATUS_INVALID_PARAMETER_3" ) - sizeof( ("STATUS_INVALID_PARAMETER_3")[0] ), sizeof( "STATUS_INVALID_PARAMETER_3" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_3")), ("STATUS_INVALID_PARAMETER_3") }, (ULONG)((NTSTATUS)0xC00000F1L) }, { { sizeof( "STATUS_INVALID_PARAMETER_4" ) - sizeof( ("STATUS_INVALID_PARAMETER_4")[0] ), sizeof( "STATUS_INVALID_PARAMETER_4" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_4")), ("STATUS_INVALID_PARAMETER_4") }, (ULONG)((NTSTATUS)0xC00000F2L) }, { { sizeof( "STATUS_INVALID_PARAMETER_5" ) - sizeof( ("STATUS_INVALID_PARAMETER_5")[0] ), sizeof( "STATUS_INVALID_PARAMETER_5" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_5")), ("STATUS_INVALID_PARAMETER_5") }, (ULONG)((NTSTATUS)0xC00000F3L) }, { { sizeof( "STATUS_INVALID_PARAMETER_6" ) - sizeof( ("STATUS_INVALID_PARAMETER_6")[0] ), sizeof( "STATUS_INVALID_PARAMETER_6" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_6")), ("STATUS_INVALID_PARAMETER_6") }, (ULONG)((NTSTATUS)0xC00000F4L) }, { { sizeof( "STATUS_INVALID_PARAMETER_7" ) - sizeof( ("STATUS_INVALID_PARAMETER_7")[0] ), sizeof( "STATUS_INVALID_PARAMETER_7" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_7")), ("STATUS_INVALID_PARAMETER_7") }, (ULONG)((NTSTATUS)0xC00000F5L) }, { { sizeof( "STATUS_INVALID_PARAMETER_8" ) - sizeof( ("STATUS_INVALID_PARAMETER_8")[0] ), sizeof( "STATUS_INVALID_PARAMETER_8" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_8")), ("STATUS_INVALID_PARAMETER_8") }, (ULONG)((NTSTATUS)0xC00000F6L) }, { { sizeof( "STATUS_INVALID_PARAMETER_9" ) - sizeof( ("STATUS_INVALID_PARAMETER_9")[0] ), sizeof( "STATUS_INVALID_PARAMETER_9" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_9")), ("STATUS_INVALID_PARAMETER_9") }, (ULONG)((NTSTATUS)0xC00000F7L) }, { { sizeof( "STATUS_INVALID_PARAMETER_10" ) - sizeof( ("STATUS_INVALID_PARAMETER_10")[0] ), sizeof( "STATUS_INVALID_PARAMETER_10" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_10")), ("STATUS_INVALID_PARAMETER_10") }, (ULONG)((NTSTATUS)0xC00000F8L) }, { { sizeof( "STATUS_INVALID_PARAMETER_11" ) - sizeof( ("STATUS_INVALID_PARAMETER_11")[0] ), sizeof( "STATUS_INVALID_PARAMETER_11" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_11")), ("STATUS_INVALID_PARAMETER_11") }, (ULONG)((NTSTATUS)0xC00000F9L) }, { { sizeof( "STATUS_INVALID_PARAMETER_12" ) - sizeof( ("STATUS_INVALID_PARAMETER_12")[0] ), sizeof( "STATUS_INVALID_PARAMETER_12" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PARAMETER_12")), ("STATUS_INVALID_PARAMETER_12") }, (ULONG)((NTSTATUS)0xC00000FAL) }, { { sizeof( "STATUS_REDIRECTOR_NOT_STARTED" ) - sizeof( ("STATUS_REDIRECTOR_NOT_STARTED")[0] ), sizeof( "STATUS_REDIRECTOR_NOT_STARTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REDIRECTOR_NOT_STARTED")), ("STATUS_REDIRECTOR_NOT_STARTED") }, (ULONG)((NTSTATUS)0xC00000FBL) }, { { sizeof( "STATUS_REDIRECTOR_STARTED" ) - sizeof( ("STATUS_REDIRECTOR_STARTED")[0] ), sizeof( "STATUS_REDIRECTOR_STARTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REDIRECTOR_STARTED")), ("STATUS_REDIRECTOR_STARTED") }, (ULONG)((NTSTATUS)0xC00000FCL) }, { { sizeof( "STATUS_STACK_OVERFLOW" ) - sizeof( ("STATUS_STACK_OVERFLOW")[0] ), sizeof( "STATUS_STACK_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STACK_OVERFLOW")), ("STATUS_STACK_OVERFLOW") }, (ULONG)((NTSTATUS)0xC00000FDL) }, { { sizeof( "STATUS_NO_SUCH_PACKAGE" ) - sizeof( ("STATUS_NO_SUCH_PACKAGE")[0] ), sizeof( "STATUS_NO_SUCH_PACKAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_PACKAGE")), ("STATUS_NO_SUCH_PACKAGE") }, (ULONG)((NTSTATUS)0xC00000FEL) }, { { sizeof( "STATUS_BAD_FUNCTION_TABLE" ) - sizeof( ("STATUS_BAD_FUNCTION_TABLE")[0] ), sizeof( "STATUS_BAD_FUNCTION_TABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_FUNCTION_TABLE")), ("STATUS_BAD_FUNCTION_TABLE") }, (ULONG)((NTSTATUS)0xC00000FFL) }, { { sizeof( "STATUS_VARIABLE_NOT_FOUND" ) - sizeof( ("STATUS_VARIABLE_NOT_FOUND")[0] ), sizeof( "STATUS_VARIABLE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VARIABLE_NOT_FOUND")), ("STATUS_VARIABLE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000100L) }, { { sizeof( "STATUS_DIRECTORY_NOT_EMPTY" ) - sizeof( ("STATUS_DIRECTORY_NOT_EMPTY")[0] ), sizeof( "STATUS_DIRECTORY_NOT_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DIRECTORY_NOT_EMPTY")), ("STATUS_DIRECTORY_NOT_EMPTY") }, (ULONG)((NTSTATUS)0xC0000101L) }, { { sizeof( "STATUS_FILE_CORRUPT_ERROR" ) - sizeof( ("STATUS_FILE_CORRUPT_ERROR")[0] ), sizeof( "STATUS_FILE_CORRUPT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_CORRUPT_ERROR")), ("STATUS_FILE_CORRUPT_ERROR") }, (ULONG)((NTSTATUS)0xC0000102L) }, { { sizeof( "STATUS_NOT_A_DIRECTORY" ) - sizeof( ("STATUS_NOT_A_DIRECTORY")[0] ), sizeof( "STATUS_NOT_A_DIRECTORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_A_DIRECTORY")), ("STATUS_NOT_A_DIRECTORY") }, (ULONG)((NTSTATUS)0xC0000103L) }, { { sizeof( "STATUS_BAD_LOGON_SESSION_STATE" ) - sizeof( ("STATUS_BAD_LOGON_SESSION_STATE")[0] ), sizeof( "STATUS_BAD_LOGON_SESSION_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_LOGON_SESSION_STATE")), ("STATUS_BAD_LOGON_SESSION_STATE") }, (ULONG)((NTSTATUS)0xC0000104L) }, { { sizeof( "STATUS_LOGON_SESSION_COLLISION" ) - sizeof( ("STATUS_LOGON_SESSION_COLLISION")[0] ), sizeof( "STATUS_LOGON_SESSION_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGON_SESSION_COLLISION")), ("STATUS_LOGON_SESSION_COLLISION") }, (ULONG)((NTSTATUS)0xC0000105L) }, { { sizeof( "STATUS_NAME_TOO_LONG" ) - sizeof( ("STATUS_NAME_TOO_LONG")[0] ), sizeof( "STATUS_NAME_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NAME_TOO_LONG")), ("STATUS_NAME_TOO_LONG") }, (ULONG)((NTSTATUS)0xC0000106L) }, { { sizeof( "STATUS_FILES_OPEN" ) - sizeof( ("STATUS_FILES_OPEN")[0] ), sizeof( "STATUS_FILES_OPEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILES_OPEN")), ("STATUS_FILES_OPEN") }, (ULONG)((NTSTATUS)0xC0000107L) }, { { sizeof( "STATUS_CONNECTION_IN_USE" ) - sizeof( ("STATUS_CONNECTION_IN_USE")[0] ), sizeof( "STATUS_CONNECTION_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_IN_USE")), ("STATUS_CONNECTION_IN_USE") }, (ULONG)((NTSTATUS)0xC0000108L) }, { { sizeof( "STATUS_MESSAGE_NOT_FOUND" ) - sizeof( ("STATUS_MESSAGE_NOT_FOUND")[0] ), sizeof( "STATUS_MESSAGE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MESSAGE_NOT_FOUND")), ("STATUS_MESSAGE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000109L) }, { { sizeof( "STATUS_PROCESS_IS_TERMINATING" ) - sizeof( ("STATUS_PROCESS_IS_TERMINATING")[0] ), sizeof( "STATUS_PROCESS_IS_TERMINATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROCESS_IS_TERMINATING")), ("STATUS_PROCESS_IS_TERMINATING") }, (ULONG)((NTSTATUS)0xC000010AL) }, { { sizeof( "STATUS_INVALID_LOGON_TYPE" ) - sizeof( ("STATUS_INVALID_LOGON_TYPE")[0] ), sizeof( "STATUS_INVALID_LOGON_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LOGON_TYPE")), ("STATUS_INVALID_LOGON_TYPE") }, (ULONG)((NTSTATUS)0xC000010BL) }, { { sizeof( "STATUS_NO_GUID_TRANSLATION" ) - sizeof( ("STATUS_NO_GUID_TRANSLATION")[0] ), sizeof( "STATUS_NO_GUID_TRANSLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_GUID_TRANSLATION")), ("STATUS_NO_GUID_TRANSLATION") }, (ULONG)((NTSTATUS)0xC000010CL) }, { { sizeof( "STATUS_CANNOT_IMPERSONATE" ) - sizeof( ("STATUS_CANNOT_IMPERSONATE")[0] ), sizeof( "STATUS_CANNOT_IMPERSONATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_IMPERSONATE")), ("STATUS_CANNOT_IMPERSONATE") }, (ULONG)((NTSTATUS)0xC000010DL) }, { { sizeof( "STATUS_IMAGE_ALREADY_LOADED" ) - sizeof( ("STATUS_IMAGE_ALREADY_LOADED")[0] ), sizeof( "STATUS_IMAGE_ALREADY_LOADED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_ALREADY_LOADED")), ("STATUS_IMAGE_ALREADY_LOADED") }, (ULONG)((NTSTATUS)0xC000010EL) }, { { sizeof( "STATUS_ABIOS_NOT_PRESENT" ) - sizeof( ("STATUS_ABIOS_NOT_PRESENT")[0] ), sizeof( "STATUS_ABIOS_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_NOT_PRESENT")), ("STATUS_ABIOS_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC000010FL) }, { { sizeof( "STATUS_ABIOS_LID_NOT_EXIST" ) - sizeof( ("STATUS_ABIOS_LID_NOT_EXIST")[0] ), sizeof( "STATUS_ABIOS_LID_NOT_EXIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_LID_NOT_EXIST")), ("STATUS_ABIOS_LID_NOT_EXIST") }, (ULONG)((NTSTATUS)0xC0000110L) }, { { sizeof( "STATUS_ABIOS_LID_ALREADY_OWNED" ) - sizeof( ("STATUS_ABIOS_LID_ALREADY_OWNED")[0] ), sizeof( "STATUS_ABIOS_LID_ALREADY_OWNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_LID_ALREADY_OWNED")), ("STATUS_ABIOS_LID_ALREADY_OWNED") }, (ULONG)((NTSTATUS)0xC0000111L) }, { { sizeof( "STATUS_ABIOS_NOT_LID_OWNER" ) - sizeof( ("STATUS_ABIOS_NOT_LID_OWNER")[0] ), sizeof( "STATUS_ABIOS_NOT_LID_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_NOT_LID_OWNER")), ("STATUS_ABIOS_NOT_LID_OWNER") }, (ULONG)((NTSTATUS)0xC0000112L) }, { { sizeof( "STATUS_ABIOS_INVALID_COMMAND" ) - sizeof( ("STATUS_ABIOS_INVALID_COMMAND")[0] ), sizeof( "STATUS_ABIOS_INVALID_COMMAND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_INVALID_COMMAND")), ("STATUS_ABIOS_INVALID_COMMAND") }, (ULONG)((NTSTATUS)0xC0000113L) }, { { sizeof( "STATUS_ABIOS_INVALID_LID" ) - sizeof( ("STATUS_ABIOS_INVALID_LID")[0] ), sizeof( "STATUS_ABIOS_INVALID_LID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_INVALID_LID")), ("STATUS_ABIOS_INVALID_LID") }, (ULONG)((NTSTATUS)0xC0000114L) }, { { sizeof( "STATUS_ABIOS_SELECTOR_NOT_AVAILABLE" ) - sizeof( ("STATUS_ABIOS_SELECTOR_NOT_AVAILABLE")[0] ), sizeof( "STATUS_ABIOS_SELECTOR_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_SELECTOR_NOT_AVAILABLE")), ("STATUS_ABIOS_SELECTOR_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC0000115L) }, { { sizeof( "STATUS_ABIOS_INVALID_SELECTOR" ) - sizeof( ("STATUS_ABIOS_INVALID_SELECTOR")[0] ), sizeof( "STATUS_ABIOS_INVALID_SELECTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ABIOS_INVALID_SELECTOR")), ("STATUS_ABIOS_INVALID_SELECTOR") }, (ULONG)((NTSTATUS)0xC0000116L) }, { { sizeof( "STATUS_NO_LDT" ) - sizeof( ("STATUS_NO_LDT")[0] ), sizeof( "STATUS_NO_LDT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_LDT")), ("STATUS_NO_LDT") }, (ULONG)((NTSTATUS)0xC0000117L) }, { { sizeof( "STATUS_INVALID_LDT_SIZE" ) - sizeof( ("STATUS_INVALID_LDT_SIZE")[0] ), sizeof( "STATUS_INVALID_LDT_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LDT_SIZE")), ("STATUS_INVALID_LDT_SIZE") }, (ULONG)((NTSTATUS)0xC0000118L) }, { { sizeof( "STATUS_INVALID_LDT_OFFSET" ) - sizeof( ("STATUS_INVALID_LDT_OFFSET")[0] ), sizeof( "STATUS_INVALID_LDT_OFFSET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LDT_OFFSET")), ("STATUS_INVALID_LDT_OFFSET") }, (ULONG)((NTSTATUS)0xC0000119L) }, { { sizeof( "STATUS_INVALID_LDT_DESCRIPTOR" ) - sizeof( ("STATUS_INVALID_LDT_DESCRIPTOR")[0] ), sizeof( "STATUS_INVALID_LDT_DESCRIPTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LDT_DESCRIPTOR")), ("STATUS_INVALID_LDT_DESCRIPTOR") }, (ULONG)((NTSTATUS)0xC000011AL) }, { { sizeof( "STATUS_INVALID_IMAGE_NE_FORMAT" ) - sizeof( ("STATUS_INVALID_IMAGE_NE_FORMAT")[0] ), sizeof( "STATUS_INVALID_IMAGE_NE_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_NE_FORMAT")), ("STATUS_INVALID_IMAGE_NE_FORMAT") }, (ULONG)((NTSTATUS)0xC000011BL) }, { { sizeof( "STATUS_RXACT_INVALID_STATE" ) - sizeof( ("STATUS_RXACT_INVALID_STATE")[0] ), sizeof( "STATUS_RXACT_INVALID_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RXACT_INVALID_STATE")), ("STATUS_RXACT_INVALID_STATE") }, (ULONG)((NTSTATUS)0xC000011CL) }, { { sizeof( "STATUS_RXACT_COMMIT_FAILURE" ) - sizeof( ("STATUS_RXACT_COMMIT_FAILURE")[0] ), sizeof( "STATUS_RXACT_COMMIT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RXACT_COMMIT_FAILURE")), ("STATUS_RXACT_COMMIT_FAILURE") }, (ULONG)((NTSTATUS)0xC000011DL) }, { { sizeof( "STATUS_MAPPED_FILE_SIZE_ZERO" ) - sizeof( ("STATUS_MAPPED_FILE_SIZE_ZERO")[0] ), sizeof( "STATUS_MAPPED_FILE_SIZE_ZERO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MAPPED_FILE_SIZE_ZERO")), ("STATUS_MAPPED_FILE_SIZE_ZERO") }, (ULONG)((NTSTATUS)0xC000011EL) }, { { sizeof( "STATUS_TOO_MANY_OPENED_FILES" ) - sizeof( ("STATUS_TOO_MANY_OPENED_FILES")[0] ), sizeof( "STATUS_TOO_MANY_OPENED_FILES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_OPENED_FILES")), ("STATUS_TOO_MANY_OPENED_FILES") }, (ULONG)((NTSTATUS)0xC000011FL) }, { { sizeof( "STATUS_CANCELLED" ) - sizeof( ("STATUS_CANCELLED")[0] ), sizeof( "STATUS_CANCELLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANCELLED")), ("STATUS_CANCELLED") }, (ULONG)((NTSTATUS)0xC0000120L) }, { { sizeof( "STATUS_CANNOT_DELETE" ) - sizeof( ("STATUS_CANNOT_DELETE")[0] ), sizeof( "STATUS_CANNOT_DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_DELETE")), ("STATUS_CANNOT_DELETE") }, (ULONG)((NTSTATUS)0xC0000121L) }, { { sizeof( "STATUS_INVALID_COMPUTER_NAME" ) - sizeof( ("STATUS_INVALID_COMPUTER_NAME")[0] ), sizeof( "STATUS_INVALID_COMPUTER_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_COMPUTER_NAME")), ("STATUS_INVALID_COMPUTER_NAME") }, (ULONG)((NTSTATUS)0xC0000122L) }, { { sizeof( "STATUS_FILE_DELETED" ) - sizeof( ("STATUS_FILE_DELETED")[0] ), sizeof( "STATUS_FILE_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_DELETED")), ("STATUS_FILE_DELETED") }, (ULONG)((NTSTATUS)0xC0000123L) }, { { sizeof( "STATUS_SPECIAL_ACCOUNT" ) - sizeof( ("STATUS_SPECIAL_ACCOUNT")[0] ), sizeof( "STATUS_SPECIAL_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPECIAL_ACCOUNT")), ("STATUS_SPECIAL_ACCOUNT") }, (ULONG)((NTSTATUS)0xC0000124L) }, { { sizeof( "STATUS_SPECIAL_GROUP" ) - sizeof( ("STATUS_SPECIAL_GROUP")[0] ), sizeof( "STATUS_SPECIAL_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPECIAL_GROUP")), ("STATUS_SPECIAL_GROUP") }, (ULONG)((NTSTATUS)0xC0000125L) }, { { sizeof( "STATUS_SPECIAL_USER" ) - sizeof( ("STATUS_SPECIAL_USER")[0] ), sizeof( "STATUS_SPECIAL_USER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPECIAL_USER")), ("STATUS_SPECIAL_USER") }, (ULONG)((NTSTATUS)0xC0000126L) }, { { sizeof( "STATUS_MEMBERS_PRIMARY_GROUP" ) - sizeof( ("STATUS_MEMBERS_PRIMARY_GROUP")[0] ), sizeof( "STATUS_MEMBERS_PRIMARY_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEMBERS_PRIMARY_GROUP")), ("STATUS_MEMBERS_PRIMARY_GROUP") }, (ULONG)((NTSTATUS)0xC0000127L) }, { { sizeof( "STATUS_FILE_CLOSED" ) - sizeof( ("STATUS_FILE_CLOSED")[0] ), sizeof( "STATUS_FILE_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_CLOSED")), ("STATUS_FILE_CLOSED") }, (ULONG)((NTSTATUS)0xC0000128L) }, { { sizeof( "STATUS_TOO_MANY_THREADS" ) - sizeof( ("STATUS_TOO_MANY_THREADS")[0] ), sizeof( "STATUS_TOO_MANY_THREADS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_THREADS")), ("STATUS_TOO_MANY_THREADS") }, (ULONG)((NTSTATUS)0xC0000129L) }, { { sizeof( "STATUS_THREAD_NOT_IN_PROCESS" ) - sizeof( ("STATUS_THREAD_NOT_IN_PROCESS")[0] ), sizeof( "STATUS_THREAD_NOT_IN_PROCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREAD_NOT_IN_PROCESS")), ("STATUS_THREAD_NOT_IN_PROCESS") }, (ULONG)((NTSTATUS)0xC000012AL) }, { { sizeof( "STATUS_TOKEN_ALREADY_IN_USE" ) - sizeof( ("STATUS_TOKEN_ALREADY_IN_USE")[0] ), sizeof( "STATUS_TOKEN_ALREADY_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOKEN_ALREADY_IN_USE")), ("STATUS_TOKEN_ALREADY_IN_USE") }, (ULONG)((NTSTATUS)0xC000012BL) }, { { sizeof( "STATUS_PAGEFILE_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_PAGEFILE_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_PAGEFILE_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGEFILE_QUOTA_EXCEEDED")), ("STATUS_PAGEFILE_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC000012CL) }, { { sizeof( "STATUS_COMMITMENT_LIMIT" ) - sizeof( ("STATUS_COMMITMENT_LIMIT")[0] ), sizeof( "STATUS_COMMITMENT_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COMMITMENT_LIMIT")), ("STATUS_COMMITMENT_LIMIT") }, (ULONG)((NTSTATUS)0xC000012DL) }, { { sizeof( "STATUS_INVALID_IMAGE_LE_FORMAT" ) - sizeof( ("STATUS_INVALID_IMAGE_LE_FORMAT")[0] ), sizeof( "STATUS_INVALID_IMAGE_LE_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_LE_FORMAT")), ("STATUS_INVALID_IMAGE_LE_FORMAT") }, (ULONG)((NTSTATUS)0xC000012EL) }, { { sizeof( "STATUS_INVALID_IMAGE_NOT_MZ" ) - sizeof( ("STATUS_INVALID_IMAGE_NOT_MZ")[0] ), sizeof( "STATUS_INVALID_IMAGE_NOT_MZ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_NOT_MZ")), ("STATUS_INVALID_IMAGE_NOT_MZ") }, (ULONG)((NTSTATUS)0xC000012FL) }, { { sizeof( "STATUS_INVALID_IMAGE_PROTECT" ) - sizeof( ("STATUS_INVALID_IMAGE_PROTECT")[0] ), sizeof( "STATUS_INVALID_IMAGE_PROTECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_PROTECT")), ("STATUS_INVALID_IMAGE_PROTECT") }, (ULONG)((NTSTATUS)0xC0000130L) }, { { sizeof( "STATUS_INVALID_IMAGE_WIN_16" ) - sizeof( ("STATUS_INVALID_IMAGE_WIN_16")[0] ), sizeof( "STATUS_INVALID_IMAGE_WIN_16" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_WIN_16")), ("STATUS_INVALID_IMAGE_WIN_16") }, (ULONG)((NTSTATUS)0xC0000131L) }, { { sizeof( "STATUS_LOGON_SERVER_CONFLICT" ) - sizeof( ("STATUS_LOGON_SERVER_CONFLICT")[0] ), sizeof( "STATUS_LOGON_SERVER_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGON_SERVER_CONFLICT")), ("STATUS_LOGON_SERVER_CONFLICT") }, (ULONG)((NTSTATUS)0xC0000132L) }, { { sizeof( "STATUS_TIME_DIFFERENCE_AT_DC" ) - sizeof( ("STATUS_TIME_DIFFERENCE_AT_DC")[0] ), sizeof( "STATUS_TIME_DIFFERENCE_AT_DC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TIME_DIFFERENCE_AT_DC")), ("STATUS_TIME_DIFFERENCE_AT_DC") }, (ULONG)((NTSTATUS)0xC0000133L) }, { { sizeof( "STATUS_SYNCHRONIZATION_REQUIRED" ) - sizeof( ("STATUS_SYNCHRONIZATION_REQUIRED")[0] ), sizeof( "STATUS_SYNCHRONIZATION_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYNCHRONIZATION_REQUIRED")), ("STATUS_SYNCHRONIZATION_REQUIRED") }, (ULONG)((NTSTATUS)0xC0000134L) }, { { sizeof( "STATUS_DLL_NOT_FOUND" ) - sizeof( ("STATUS_DLL_NOT_FOUND")[0] ), sizeof( "STATUS_DLL_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DLL_NOT_FOUND")), ("STATUS_DLL_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000135L) }, { { sizeof( "STATUS_OPEN_FAILED" ) - sizeof( ("STATUS_OPEN_FAILED")[0] ), sizeof( "STATUS_OPEN_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPEN_FAILED")), ("STATUS_OPEN_FAILED") }, (ULONG)((NTSTATUS)0xC0000136L) }, { { sizeof( "STATUS_IO_PRIVILEGE_FAILED" ) - sizeof( ("STATUS_IO_PRIVILEGE_FAILED")[0] ), sizeof( "STATUS_IO_PRIVILEGE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_PRIVILEGE_FAILED")), ("STATUS_IO_PRIVILEGE_FAILED") }, (ULONG)((NTSTATUS)0xC0000137L) }, { { sizeof( "STATUS_ORDINAL_NOT_FOUND" ) - sizeof( ("STATUS_ORDINAL_NOT_FOUND")[0] ), sizeof( "STATUS_ORDINAL_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ORDINAL_NOT_FOUND")), ("STATUS_ORDINAL_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000138L) }, { { sizeof( "STATUS_ENTRYPOINT_NOT_FOUND" ) - sizeof( ("STATUS_ENTRYPOINT_NOT_FOUND")[0] ), sizeof( "STATUS_ENTRYPOINT_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENTRYPOINT_NOT_FOUND")), ("STATUS_ENTRYPOINT_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000139L) }, { { sizeof( "STATUS_CONTROL_C_EXIT" ) - sizeof( ("STATUS_CONTROL_C_EXIT")[0] ), sizeof( "STATUS_CONTROL_C_EXIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONTROL_C_EXIT")), ("STATUS_CONTROL_C_EXIT") }, (ULONG)((NTSTATUS)0xC000013AL) }, { { sizeof( "STATUS_LOCAL_DISCONNECT" ) - sizeof( ("STATUS_LOCAL_DISCONNECT")[0] ), sizeof( "STATUS_LOCAL_DISCONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOCAL_DISCONNECT")), ("STATUS_LOCAL_DISCONNECT") }, (ULONG)((NTSTATUS)0xC000013BL) }, { { sizeof( "STATUS_REMOTE_DISCONNECT" ) - sizeof( ("STATUS_REMOTE_DISCONNECT")[0] ), sizeof( "STATUS_REMOTE_DISCONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_DISCONNECT")), ("STATUS_REMOTE_DISCONNECT") }, (ULONG)((NTSTATUS)0xC000013CL) }, { { sizeof( "STATUS_REMOTE_RESOURCES" ) - sizeof( ("STATUS_REMOTE_RESOURCES")[0] ), sizeof( "STATUS_REMOTE_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_RESOURCES")), ("STATUS_REMOTE_RESOURCES") }, (ULONG)((NTSTATUS)0xC000013DL) }, { { sizeof( "STATUS_LINK_FAILED" ) - sizeof( ("STATUS_LINK_FAILED")[0] ), sizeof( "STATUS_LINK_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LINK_FAILED")), ("STATUS_LINK_FAILED") }, (ULONG)((NTSTATUS)0xC000013EL) }, { { sizeof( "STATUS_LINK_TIMEOUT" ) - sizeof( ("STATUS_LINK_TIMEOUT")[0] ), sizeof( "STATUS_LINK_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LINK_TIMEOUT")), ("STATUS_LINK_TIMEOUT") }, (ULONG)((NTSTATUS)0xC000013FL) }, { { sizeof( "STATUS_INVALID_CONNECTION" ) - sizeof( ("STATUS_INVALID_CONNECTION")[0] ), sizeof( "STATUS_INVALID_CONNECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_CONNECTION")), ("STATUS_INVALID_CONNECTION") }, (ULONG)((NTSTATUS)0xC0000140L) }, { { sizeof( "STATUS_INVALID_ADDRESS" ) - sizeof( ("STATUS_INVALID_ADDRESS")[0] ), sizeof( "STATUS_INVALID_ADDRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ADDRESS")), ("STATUS_INVALID_ADDRESS") }, (ULONG)((NTSTATUS)0xC0000141L) }, { { sizeof( "STATUS_DLL_INIT_FAILED" ) - sizeof( ("STATUS_DLL_INIT_FAILED")[0] ), sizeof( "STATUS_DLL_INIT_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DLL_INIT_FAILED")), ("STATUS_DLL_INIT_FAILED") }, (ULONG)((NTSTATUS)0xC0000142L) }, { { sizeof( "STATUS_MISSING_SYSTEMFILE" ) - sizeof( ("STATUS_MISSING_SYSTEMFILE")[0] ), sizeof( "STATUS_MISSING_SYSTEMFILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MISSING_SYSTEMFILE")), ("STATUS_MISSING_SYSTEMFILE") }, (ULONG)((NTSTATUS)0xC0000143L) }, { { sizeof( "STATUS_UNHANDLED_EXCEPTION" ) - sizeof( ("STATUS_UNHANDLED_EXCEPTION")[0] ), sizeof( "STATUS_UNHANDLED_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNHANDLED_EXCEPTION")), ("STATUS_UNHANDLED_EXCEPTION") }, (ULONG)((NTSTATUS)0xC0000144L) }, { { sizeof( "STATUS_APP_INIT_FAILURE" ) - sizeof( ("STATUS_APP_INIT_FAILURE")[0] ), sizeof( "STATUS_APP_INIT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APP_INIT_FAILURE")), ("STATUS_APP_INIT_FAILURE") }, (ULONG)((NTSTATUS)0xC0000145L) }, { { sizeof( "STATUS_PAGEFILE_CREATE_FAILED" ) - sizeof( ("STATUS_PAGEFILE_CREATE_FAILED")[0] ), sizeof( "STATUS_PAGEFILE_CREATE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PAGEFILE_CREATE_FAILED")), ("STATUS_PAGEFILE_CREATE_FAILED") }, (ULONG)((NTSTATUS)0xC0000146L) }, { { sizeof( "STATUS_NO_PAGEFILE" ) - sizeof( ("STATUS_NO_PAGEFILE")[0] ), sizeof( "STATUS_NO_PAGEFILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_PAGEFILE")), ("STATUS_NO_PAGEFILE") }, (ULONG)((NTSTATUS)0xC0000147L) }, { { sizeof( "STATUS_INVALID_LEVEL" ) - sizeof( ("STATUS_INVALID_LEVEL")[0] ), sizeof( "STATUS_INVALID_LEVEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LEVEL")), ("STATUS_INVALID_LEVEL") }, (ULONG)((NTSTATUS)0xC0000148L) }, { { sizeof( "STATUS_WRONG_PASSWORD_CORE" ) - sizeof( ("STATUS_WRONG_PASSWORD_CORE")[0] ), sizeof( "STATUS_WRONG_PASSWORD_CORE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WRONG_PASSWORD_CORE")), ("STATUS_WRONG_PASSWORD_CORE") }, (ULONG)((NTSTATUS)0xC0000149L) }, { { sizeof( "STATUS_ILLEGAL_FLOAT_CONTEXT" ) - sizeof( ("STATUS_ILLEGAL_FLOAT_CONTEXT")[0] ), sizeof( "STATUS_ILLEGAL_FLOAT_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILLEGAL_FLOAT_CONTEXT")), ("STATUS_ILLEGAL_FLOAT_CONTEXT") }, (ULONG)((NTSTATUS)0xC000014AL) }, { { sizeof( "STATUS_PIPE_BROKEN" ) - sizeof( ("STATUS_PIPE_BROKEN")[0] ), sizeof( "STATUS_PIPE_BROKEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PIPE_BROKEN")), ("STATUS_PIPE_BROKEN") }, (ULONG)((NTSTATUS)0xC000014BL) }, { { sizeof( "STATUS_REGISTRY_CORRUPT" ) - sizeof( ("STATUS_REGISTRY_CORRUPT")[0] ), sizeof( "STATUS_REGISTRY_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REGISTRY_CORRUPT")), ("STATUS_REGISTRY_CORRUPT") }, (ULONG)((NTSTATUS)0xC000014CL) }, { { sizeof( "STATUS_REGISTRY_IO_FAILED" ) - sizeof( ("STATUS_REGISTRY_IO_FAILED")[0] ), sizeof( "STATUS_REGISTRY_IO_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REGISTRY_IO_FAILED")), ("STATUS_REGISTRY_IO_FAILED") }, (ULONG)((NTSTATUS)0xC000014DL) }, { { sizeof( "STATUS_NO_EVENT_PAIR" ) - sizeof( ("STATUS_NO_EVENT_PAIR")[0] ), sizeof( "STATUS_NO_EVENT_PAIR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_EVENT_PAIR")), ("STATUS_NO_EVENT_PAIR") }, (ULONG)((NTSTATUS)0xC000014EL) }, { { sizeof( "STATUS_UNRECOGNIZED_VOLUME" ) - sizeof( ("STATUS_UNRECOGNIZED_VOLUME")[0] ), sizeof( "STATUS_UNRECOGNIZED_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNRECOGNIZED_VOLUME")), ("STATUS_UNRECOGNIZED_VOLUME") }, (ULONG)((NTSTATUS)0xC000014FL) }, { { sizeof( "STATUS_SERIAL_NO_DEVICE_INITED" ) - sizeof( ("STATUS_SERIAL_NO_DEVICE_INITED")[0] ), sizeof( "STATUS_SERIAL_NO_DEVICE_INITED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERIAL_NO_DEVICE_INITED")), ("STATUS_SERIAL_NO_DEVICE_INITED") }, (ULONG)((NTSTATUS)0xC0000150L) }, { { sizeof( "STATUS_NO_SUCH_ALIAS" ) - sizeof( ("STATUS_NO_SUCH_ALIAS")[0] ), sizeof( "STATUS_NO_SUCH_ALIAS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_ALIAS")), ("STATUS_NO_SUCH_ALIAS") }, (ULONG)((NTSTATUS)0xC0000151L) }, { { sizeof( "STATUS_MEMBER_NOT_IN_ALIAS" ) - sizeof( ("STATUS_MEMBER_NOT_IN_ALIAS")[0] ), sizeof( "STATUS_MEMBER_NOT_IN_ALIAS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEMBER_NOT_IN_ALIAS")), ("STATUS_MEMBER_NOT_IN_ALIAS") }, (ULONG)((NTSTATUS)0xC0000152L) }, { { sizeof( "STATUS_MEMBER_IN_ALIAS" ) - sizeof( ("STATUS_MEMBER_IN_ALIAS")[0] ), sizeof( "STATUS_MEMBER_IN_ALIAS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MEMBER_IN_ALIAS")), ("STATUS_MEMBER_IN_ALIAS") }, (ULONG)((NTSTATUS)0xC0000153L) }, { { sizeof( "STATUS_ALIAS_EXISTS" ) - sizeof( ("STATUS_ALIAS_EXISTS")[0] ), sizeof( "STATUS_ALIAS_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALIAS_EXISTS")), ("STATUS_ALIAS_EXISTS") }, (ULONG)((NTSTATUS)0xC0000154L) }, { { sizeof( "STATUS_LOGON_NOT_GRANTED" ) - sizeof( ("STATUS_LOGON_NOT_GRANTED")[0] ), sizeof( "STATUS_LOGON_NOT_GRANTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGON_NOT_GRANTED")), ("STATUS_LOGON_NOT_GRANTED") }, (ULONG)((NTSTATUS)0xC0000155L) }, { { sizeof( "STATUS_TOO_MANY_SECRETS" ) - sizeof( ("STATUS_TOO_MANY_SECRETS")[0] ), sizeof( "STATUS_TOO_MANY_SECRETS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_SECRETS")), ("STATUS_TOO_MANY_SECRETS") }, (ULONG)((NTSTATUS)0xC0000156L) }, { { sizeof( "STATUS_SECRET_TOO_LONG" ) - sizeof( ("STATUS_SECRET_TOO_LONG")[0] ), sizeof( "STATUS_SECRET_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECRET_TOO_LONG")), ("STATUS_SECRET_TOO_LONG") }, (ULONG)((NTSTATUS)0xC0000157L) }, { { sizeof( "STATUS_INTERNAL_DB_ERROR" ) - sizeof( ("STATUS_INTERNAL_DB_ERROR")[0] ), sizeof( "STATUS_INTERNAL_DB_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTERNAL_DB_ERROR")), ("STATUS_INTERNAL_DB_ERROR") }, (ULONG)((NTSTATUS)0xC0000158L) }, { { sizeof( "STATUS_FULLSCREEN_MODE" ) - sizeof( ("STATUS_FULLSCREEN_MODE")[0] ), sizeof( "STATUS_FULLSCREEN_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FULLSCREEN_MODE")), ("STATUS_FULLSCREEN_MODE") }, (ULONG)((NTSTATUS)0xC0000159L) }, { { sizeof( "STATUS_TOO_MANY_CONTEXT_IDS" ) - sizeof( ("STATUS_TOO_MANY_CONTEXT_IDS")[0] ), sizeof( "STATUS_TOO_MANY_CONTEXT_IDS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_CONTEXT_IDS")), ("STATUS_TOO_MANY_CONTEXT_IDS") }, (ULONG)((NTSTATUS)0xC000015AL) }, { { sizeof( "STATUS_LOGON_TYPE_NOT_GRANTED" ) - sizeof( ("STATUS_LOGON_TYPE_NOT_GRANTED")[0] ), sizeof( "STATUS_LOGON_TYPE_NOT_GRANTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGON_TYPE_NOT_GRANTED")), ("STATUS_LOGON_TYPE_NOT_GRANTED") }, (ULONG)((NTSTATUS)0xC000015BL) }, { { sizeof( "STATUS_NOT_REGISTRY_FILE" ) - sizeof( ("STATUS_NOT_REGISTRY_FILE")[0] ), sizeof( "STATUS_NOT_REGISTRY_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_REGISTRY_FILE")), ("STATUS_NOT_REGISTRY_FILE") }, (ULONG)((NTSTATUS)0xC000015CL) }, { { sizeof( "STATUS_NT_CROSS_ENCRYPTION_REQUIRED" ) - sizeof( ("STATUS_NT_CROSS_ENCRYPTION_REQUIRED")[0] ), sizeof( "STATUS_NT_CROSS_ENCRYPTION_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NT_CROSS_ENCRYPTION_REQUIRED")), ("STATUS_NT_CROSS_ENCRYPTION_REQUIRED") }, (ULONG)((NTSTATUS)0xC000015DL) }, { { sizeof( "STATUS_DOMAIN_CTRLR_CONFIG_ERROR" ) - sizeof( ("STATUS_DOMAIN_CTRLR_CONFIG_ERROR")[0] ), sizeof( "STATUS_DOMAIN_CTRLR_CONFIG_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DOMAIN_CTRLR_CONFIG_ERROR")), ("STATUS_DOMAIN_CTRLR_CONFIG_ERROR") }, (ULONG)((NTSTATUS)0xC000015EL) }, { { sizeof( "STATUS_FT_MISSING_MEMBER" ) - sizeof( ("STATUS_FT_MISSING_MEMBER")[0] ), sizeof( "STATUS_FT_MISSING_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_MISSING_MEMBER")), ("STATUS_FT_MISSING_MEMBER") }, (ULONG)((NTSTATUS)0xC000015FL) }, { { sizeof( "STATUS_ILL_FORMED_SERVICE_ENTRY" ) - sizeof( ("STATUS_ILL_FORMED_SERVICE_ENTRY")[0] ), sizeof( "STATUS_ILL_FORMED_SERVICE_ENTRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILL_FORMED_SERVICE_ENTRY")), ("STATUS_ILL_FORMED_SERVICE_ENTRY") }, (ULONG)((NTSTATUS)0xC0000160L) }, { { sizeof( "STATUS_ILLEGAL_CHARACTER" ) - sizeof( ("STATUS_ILLEGAL_CHARACTER")[0] ), sizeof( "STATUS_ILLEGAL_CHARACTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILLEGAL_CHARACTER")), ("STATUS_ILLEGAL_CHARACTER") }, (ULONG)((NTSTATUS)0xC0000161L) }, { { sizeof( "STATUS_UNMAPPABLE_CHARACTER" ) - sizeof( ("STATUS_UNMAPPABLE_CHARACTER")[0] ), sizeof( "STATUS_UNMAPPABLE_CHARACTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNMAPPABLE_CHARACTER")), ("STATUS_UNMAPPABLE_CHARACTER") }, (ULONG)((NTSTATUS)0xC0000162L) }, { { sizeof( "STATUS_UNDEFINED_CHARACTER" ) - sizeof( ("STATUS_UNDEFINED_CHARACTER")[0] ), sizeof( "STATUS_UNDEFINED_CHARACTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNDEFINED_CHARACTER")), ("STATUS_UNDEFINED_CHARACTER") }, (ULONG)((NTSTATUS)0xC0000163L) }, { { sizeof( "STATUS_FLOPPY_VOLUME" ) - sizeof( ("STATUS_FLOPPY_VOLUME")[0] ), sizeof( "STATUS_FLOPPY_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOPPY_VOLUME")), ("STATUS_FLOPPY_VOLUME") }, (ULONG)((NTSTATUS)0xC0000164L) }, { { sizeof( "STATUS_FLOPPY_ID_MARK_NOT_FOUND" ) - sizeof( ("STATUS_FLOPPY_ID_MARK_NOT_FOUND")[0] ), sizeof( "STATUS_FLOPPY_ID_MARK_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOPPY_ID_MARK_NOT_FOUND")), ("STATUS_FLOPPY_ID_MARK_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000165L) }, { { sizeof( "STATUS_FLOPPY_WRONG_CYLINDER" ) - sizeof( ("STATUS_FLOPPY_WRONG_CYLINDER")[0] ), sizeof( "STATUS_FLOPPY_WRONG_CYLINDER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOPPY_WRONG_CYLINDER")), ("STATUS_FLOPPY_WRONG_CYLINDER") }, (ULONG)((NTSTATUS)0xC0000166L) }, { { sizeof( "STATUS_FLOPPY_UNKNOWN_ERROR" ) - sizeof( ("STATUS_FLOPPY_UNKNOWN_ERROR")[0] ), sizeof( "STATUS_FLOPPY_UNKNOWN_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOPPY_UNKNOWN_ERROR")), ("STATUS_FLOPPY_UNKNOWN_ERROR") }, (ULONG)((NTSTATUS)0xC0000167L) }, { { sizeof( "STATUS_FLOPPY_BAD_REGISTERS" ) - sizeof( ("STATUS_FLOPPY_BAD_REGISTERS")[0] ), sizeof( "STATUS_FLOPPY_BAD_REGISTERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOPPY_BAD_REGISTERS")), ("STATUS_FLOPPY_BAD_REGISTERS") }, (ULONG)((NTSTATUS)0xC0000168L) }, { { sizeof( "STATUS_DISK_RECALIBRATE_FAILED" ) - sizeof( ("STATUS_DISK_RECALIBRATE_FAILED")[0] ), sizeof( "STATUS_DISK_RECALIBRATE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_RECALIBRATE_FAILED")), ("STATUS_DISK_RECALIBRATE_FAILED") }, (ULONG)((NTSTATUS)0xC0000169L) }, { { sizeof( "STATUS_DISK_OPERATION_FAILED" ) - sizeof( ("STATUS_DISK_OPERATION_FAILED")[0] ), sizeof( "STATUS_DISK_OPERATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_OPERATION_FAILED")), ("STATUS_DISK_OPERATION_FAILED") }, (ULONG)((NTSTATUS)0xC000016AL) }, { { sizeof( "STATUS_DISK_RESET_FAILED" ) - sizeof( ("STATUS_DISK_RESET_FAILED")[0] ), sizeof( "STATUS_DISK_RESET_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_RESET_FAILED")), ("STATUS_DISK_RESET_FAILED") }, (ULONG)((NTSTATUS)0xC000016BL) }, { { sizeof( "STATUS_SHARED_IRQ_BUSY" ) - sizeof( ("STATUS_SHARED_IRQ_BUSY")[0] ), sizeof( "STATUS_SHARED_IRQ_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHARED_IRQ_BUSY")), ("STATUS_SHARED_IRQ_BUSY") }, (ULONG)((NTSTATUS)0xC000016CL) }, { { sizeof( "STATUS_FT_ORPHANING" ) - sizeof( ("STATUS_FT_ORPHANING")[0] ), sizeof( "STATUS_FT_ORPHANING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_ORPHANING")), ("STATUS_FT_ORPHANING") }, (ULONG)((NTSTATUS)0xC000016DL) }, { { sizeof( "STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT" ) - sizeof( ("STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT")[0] ), sizeof( "STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT")), ("STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT") }, (ULONG)((NTSTATUS)0xC000016EL) }, { { sizeof( "STATUS_PARTITION_FAILURE" ) - sizeof( ("STATUS_PARTITION_FAILURE")[0] ), sizeof( "STATUS_PARTITION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PARTITION_FAILURE")), ("STATUS_PARTITION_FAILURE") }, (ULONG)((NTSTATUS)0xC0000172L) }, { { sizeof( "STATUS_INVALID_BLOCK_LENGTH" ) - sizeof( ("STATUS_INVALID_BLOCK_LENGTH")[0] ), sizeof( "STATUS_INVALID_BLOCK_LENGTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_BLOCK_LENGTH")), ("STATUS_INVALID_BLOCK_LENGTH") }, (ULONG)((NTSTATUS)0xC0000173L) }, { { sizeof( "STATUS_DEVICE_NOT_PARTITIONED" ) - sizeof( ("STATUS_DEVICE_NOT_PARTITIONED")[0] ), sizeof( "STATUS_DEVICE_NOT_PARTITIONED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_NOT_PARTITIONED")), ("STATUS_DEVICE_NOT_PARTITIONED") }, (ULONG)((NTSTATUS)0xC0000174L) }, { { sizeof( "STATUS_UNABLE_TO_LOCK_MEDIA" ) - sizeof( ("STATUS_UNABLE_TO_LOCK_MEDIA")[0] ), sizeof( "STATUS_UNABLE_TO_LOCK_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNABLE_TO_LOCK_MEDIA")), ("STATUS_UNABLE_TO_LOCK_MEDIA") }, (ULONG)((NTSTATUS)0xC0000175L) }, { { sizeof( "STATUS_UNABLE_TO_UNLOAD_MEDIA" ) - sizeof( ("STATUS_UNABLE_TO_UNLOAD_MEDIA")[0] ), sizeof( "STATUS_UNABLE_TO_UNLOAD_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNABLE_TO_UNLOAD_MEDIA")), ("STATUS_UNABLE_TO_UNLOAD_MEDIA") }, (ULONG)((NTSTATUS)0xC0000176L) }, { { sizeof( "STATUS_EOM_OVERFLOW" ) - sizeof( ("STATUS_EOM_OVERFLOW")[0] ), sizeof( "STATUS_EOM_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EOM_OVERFLOW")), ("STATUS_EOM_OVERFLOW") }, (ULONG)((NTSTATUS)0xC0000177L) }, { { sizeof( "STATUS_NO_MEDIA" ) - sizeof( ("STATUS_NO_MEDIA")[0] ), sizeof( "STATUS_NO_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MEDIA")), ("STATUS_NO_MEDIA") }, (ULONG)((NTSTATUS)0xC0000178L) }, { { sizeof( "STATUS_NO_SUCH_MEMBER" ) - sizeof( ("STATUS_NO_SUCH_MEMBER")[0] ), sizeof( "STATUS_NO_SUCH_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SUCH_MEMBER")), ("STATUS_NO_SUCH_MEMBER") }, (ULONG)((NTSTATUS)0xC000017AL) }, { { sizeof( "STATUS_INVALID_MEMBER" ) - sizeof( ("STATUS_INVALID_MEMBER")[0] ), sizeof( "STATUS_INVALID_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_MEMBER")), ("STATUS_INVALID_MEMBER") }, (ULONG)((NTSTATUS)0xC000017BL) }, { { sizeof( "STATUS_KEY_DELETED" ) - sizeof( ("STATUS_KEY_DELETED")[0] ), sizeof( "STATUS_KEY_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KEY_DELETED")), ("STATUS_KEY_DELETED") }, (ULONG)((NTSTATUS)0xC000017CL) }, { { sizeof( "STATUS_NO_LOG_SPACE" ) - sizeof( ("STATUS_NO_LOG_SPACE")[0] ), sizeof( "STATUS_NO_LOG_SPACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_LOG_SPACE")), ("STATUS_NO_LOG_SPACE") }, (ULONG)((NTSTATUS)0xC000017DL) }, { { sizeof( "STATUS_TOO_MANY_SIDS" ) - sizeof( ("STATUS_TOO_MANY_SIDS")[0] ), sizeof( "STATUS_TOO_MANY_SIDS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_SIDS")), ("STATUS_TOO_MANY_SIDS") }, (ULONG)((NTSTATUS)0xC000017EL) }, { { sizeof( "STATUS_LM_CROSS_ENCRYPTION_REQUIRED" ) - sizeof( ("STATUS_LM_CROSS_ENCRYPTION_REQUIRED")[0] ), sizeof( "STATUS_LM_CROSS_ENCRYPTION_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LM_CROSS_ENCRYPTION_REQUIRED")), ("STATUS_LM_CROSS_ENCRYPTION_REQUIRED") }, (ULONG)((NTSTATUS)0xC000017FL) }, { { sizeof( "STATUS_KEY_HAS_CHILDREN" ) - sizeof( ("STATUS_KEY_HAS_CHILDREN")[0] ), sizeof( "STATUS_KEY_HAS_CHILDREN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KEY_HAS_CHILDREN")), ("STATUS_KEY_HAS_CHILDREN") }, (ULONG)((NTSTATUS)0xC0000180L) }, { { sizeof( "STATUS_CHILD_MUST_BE_VOLATILE" ) - sizeof( ("STATUS_CHILD_MUST_BE_VOLATILE")[0] ), sizeof( "STATUS_CHILD_MUST_BE_VOLATILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CHILD_MUST_BE_VOLATILE")), ("STATUS_CHILD_MUST_BE_VOLATILE") }, (ULONG)((NTSTATUS)0xC0000181L) }, { { sizeof( "STATUS_DEVICE_CONFIGURATION_ERROR" ) - sizeof( ("STATUS_DEVICE_CONFIGURATION_ERROR")[0] ), sizeof( "STATUS_DEVICE_CONFIGURATION_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_CONFIGURATION_ERROR")), ("STATUS_DEVICE_CONFIGURATION_ERROR") }, (ULONG)((NTSTATUS)0xC0000182L) }, { { sizeof( "STATUS_DRIVER_INTERNAL_ERROR" ) - sizeof( ("STATUS_DRIVER_INTERNAL_ERROR")[0] ), sizeof( "STATUS_DRIVER_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_INTERNAL_ERROR")), ("STATUS_DRIVER_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC0000183L) }, { { sizeof( "STATUS_INVALID_DEVICE_STATE" ) - sizeof( ("STATUS_INVALID_DEVICE_STATE")[0] ), sizeof( "STATUS_INVALID_DEVICE_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_DEVICE_STATE")), ("STATUS_INVALID_DEVICE_STATE") }, (ULONG)((NTSTATUS)0xC0000184L) }, { { sizeof( "STATUS_IO_DEVICE_ERROR" ) - sizeof( ("STATUS_IO_DEVICE_ERROR")[0] ), sizeof( "STATUS_IO_DEVICE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_DEVICE_ERROR")), ("STATUS_IO_DEVICE_ERROR") }, (ULONG)((NTSTATUS)0xC0000185L) }, { { sizeof( "STATUS_DEVICE_PROTOCOL_ERROR" ) - sizeof( ("STATUS_DEVICE_PROTOCOL_ERROR")[0] ), sizeof( "STATUS_DEVICE_PROTOCOL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_PROTOCOL_ERROR")), ("STATUS_DEVICE_PROTOCOL_ERROR") }, (ULONG)((NTSTATUS)0xC0000186L) }, { { sizeof( "STATUS_BACKUP_CONTROLLER" ) - sizeof( ("STATUS_BACKUP_CONTROLLER")[0] ), sizeof( "STATUS_BACKUP_CONTROLLER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BACKUP_CONTROLLER")), ("STATUS_BACKUP_CONTROLLER") }, (ULONG)((NTSTATUS)0xC0000187L) }, { { sizeof( "STATUS_LOG_FILE_FULL" ) - sizeof( ("STATUS_LOG_FILE_FULL")[0] ), sizeof( "STATUS_LOG_FILE_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_FILE_FULL")), ("STATUS_LOG_FILE_FULL") }, (ULONG)((NTSTATUS)0xC0000188L) }, { { sizeof( "STATUS_TOO_LATE" ) - sizeof( ("STATUS_TOO_LATE")[0] ), sizeof( "STATUS_TOO_LATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_LATE")), ("STATUS_TOO_LATE") }, (ULONG)((NTSTATUS)0xC0000189L) }, { { sizeof( "STATUS_NO_TRUST_LSA_SECRET" ) - sizeof( ("STATUS_NO_TRUST_LSA_SECRET")[0] ), sizeof( "STATUS_NO_TRUST_LSA_SECRET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_TRUST_LSA_SECRET")), ("STATUS_NO_TRUST_LSA_SECRET") }, (ULONG)((NTSTATUS)0xC000018AL) }, { { sizeof( "STATUS_NO_TRUST_SAM_ACCOUNT" ) - sizeof( ("STATUS_NO_TRUST_SAM_ACCOUNT")[0] ), sizeof( "STATUS_NO_TRUST_SAM_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_TRUST_SAM_ACCOUNT")), ("STATUS_NO_TRUST_SAM_ACCOUNT") }, (ULONG)((NTSTATUS)0xC000018BL) }, { { sizeof( "STATUS_TRUSTED_DOMAIN_FAILURE" ) - sizeof( ("STATUS_TRUSTED_DOMAIN_FAILURE")[0] ), sizeof( "STATUS_TRUSTED_DOMAIN_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRUSTED_DOMAIN_FAILURE")), ("STATUS_TRUSTED_DOMAIN_FAILURE") }, (ULONG)((NTSTATUS)0xC000018CL) }, { { sizeof( "STATUS_TRUSTED_RELATIONSHIP_FAILURE" ) - sizeof( ("STATUS_TRUSTED_RELATIONSHIP_FAILURE")[0] ), sizeof( "STATUS_TRUSTED_RELATIONSHIP_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRUSTED_RELATIONSHIP_FAILURE")), ("STATUS_TRUSTED_RELATIONSHIP_FAILURE") }, (ULONG)((NTSTATUS)0xC000018DL) }, { { sizeof( "STATUS_EVENTLOG_FILE_CORRUPT" ) - sizeof( ("STATUS_EVENTLOG_FILE_CORRUPT")[0] ), sizeof( "STATUS_EVENTLOG_FILE_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EVENTLOG_FILE_CORRUPT")), ("STATUS_EVENTLOG_FILE_CORRUPT") }, (ULONG)((NTSTATUS)0xC000018EL) }, { { sizeof( "STATUS_EVENTLOG_CANT_START" ) - sizeof( ("STATUS_EVENTLOG_CANT_START")[0] ), sizeof( "STATUS_EVENTLOG_CANT_START" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EVENTLOG_CANT_START")), ("STATUS_EVENTLOG_CANT_START") }, (ULONG)((NTSTATUS)0xC000018FL) }, { { sizeof( "STATUS_TRUST_FAILURE" ) - sizeof( ("STATUS_TRUST_FAILURE")[0] ), sizeof( "STATUS_TRUST_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRUST_FAILURE")), ("STATUS_TRUST_FAILURE") }, (ULONG)((NTSTATUS)0xC0000190L) }, { { sizeof( "STATUS_MUTANT_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_MUTANT_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_MUTANT_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUTANT_LIMIT_EXCEEDED")), ("STATUS_MUTANT_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000191L) }, { { sizeof( "STATUS_NETLOGON_NOT_STARTED" ) - sizeof( ("STATUS_NETLOGON_NOT_STARTED")[0] ), sizeof( "STATUS_NETLOGON_NOT_STARTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETLOGON_NOT_STARTED")), ("STATUS_NETLOGON_NOT_STARTED") }, (ULONG)((NTSTATUS)0xC0000192L) }, { { sizeof( "STATUS_ACCOUNT_EXPIRED" ) - sizeof( ("STATUS_ACCOUNT_EXPIRED")[0] ), sizeof( "STATUS_ACCOUNT_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCOUNT_EXPIRED")), ("STATUS_ACCOUNT_EXPIRED") }, (ULONG)((NTSTATUS)0xC0000193L) }, { { sizeof( "STATUS_POSSIBLE_DEADLOCK" ) - sizeof( ("STATUS_POSSIBLE_DEADLOCK")[0] ), sizeof( "STATUS_POSSIBLE_DEADLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_POSSIBLE_DEADLOCK")), ("STATUS_POSSIBLE_DEADLOCK") }, (ULONG)((NTSTATUS)0xC0000194L) }, { { sizeof( "STATUS_NETWORK_CREDENTIAL_CONFLICT" ) - sizeof( ("STATUS_NETWORK_CREDENTIAL_CONFLICT")[0] ), sizeof( "STATUS_NETWORK_CREDENTIAL_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_CREDENTIAL_CONFLICT")), ("STATUS_NETWORK_CREDENTIAL_CONFLICT") }, (ULONG)((NTSTATUS)0xC0000195L) }, { { sizeof( "STATUS_REMOTE_SESSION_LIMIT" ) - sizeof( ("STATUS_REMOTE_SESSION_LIMIT")[0] ), sizeof( "STATUS_REMOTE_SESSION_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_SESSION_LIMIT")), ("STATUS_REMOTE_SESSION_LIMIT") }, (ULONG)((NTSTATUS)0xC0000196L) }, { { sizeof( "STATUS_EVENTLOG_FILE_CHANGED" ) - sizeof( ("STATUS_EVENTLOG_FILE_CHANGED")[0] ), sizeof( "STATUS_EVENTLOG_FILE_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EVENTLOG_FILE_CHANGED")), ("STATUS_EVENTLOG_FILE_CHANGED") }, (ULONG)((NTSTATUS)0xC0000197L) }, { { sizeof( "STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT" ) - sizeof( ("STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT")[0] ), sizeof( "STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT")), ("STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT") }, (ULONG)((NTSTATUS)0xC0000198L) }, { { sizeof( "STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT" ) - sizeof( ("STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT")[0] ), sizeof( "STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT")), ("STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT") }, (ULONG)((NTSTATUS)0xC0000199L) }, { { sizeof( "STATUS_NOLOGON_SERVER_TRUST_ACCOUNT" ) - sizeof( ("STATUS_NOLOGON_SERVER_TRUST_ACCOUNT")[0] ), sizeof( "STATUS_NOLOGON_SERVER_TRUST_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOLOGON_SERVER_TRUST_ACCOUNT")), ("STATUS_NOLOGON_SERVER_TRUST_ACCOUNT") }, (ULONG)((NTSTATUS)0xC000019AL) }, { { sizeof( "STATUS_DOMAIN_TRUST_INCONSISTENT" ) - sizeof( ("STATUS_DOMAIN_TRUST_INCONSISTENT")[0] ), sizeof( "STATUS_DOMAIN_TRUST_INCONSISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DOMAIN_TRUST_INCONSISTENT")), ("STATUS_DOMAIN_TRUST_INCONSISTENT") }, (ULONG)((NTSTATUS)0xC000019BL) }, { { sizeof( "STATUS_FS_DRIVER_REQUIRED" ) - sizeof( ("STATUS_FS_DRIVER_REQUIRED")[0] ), sizeof( "STATUS_FS_DRIVER_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FS_DRIVER_REQUIRED")), ("STATUS_FS_DRIVER_REQUIRED") }, (ULONG)((NTSTATUS)0xC000019CL) }, { { sizeof( "STATUS_IMAGE_ALREADY_LOADED_AS_DLL" ) - sizeof( ("STATUS_IMAGE_ALREADY_LOADED_AS_DLL")[0] ), sizeof( "STATUS_IMAGE_ALREADY_LOADED_AS_DLL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_ALREADY_LOADED_AS_DLL")), ("STATUS_IMAGE_ALREADY_LOADED_AS_DLL") }, (ULONG)((NTSTATUS)0xC000019DL) }, { { sizeof( "STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING" ) - sizeof( ("STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING")[0] ), sizeof( "STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING")), ("STATUS_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING") }, (ULONG)((NTSTATUS)0xC000019EL) }, { { sizeof( "STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME" ) - sizeof( ("STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME")[0] ), sizeof( "STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME")), ("STATUS_SHORT_NAMES_NOT_ENABLED_ON_VOLUME") }, (ULONG)((NTSTATUS)0xC000019FL) }, { { sizeof( "STATUS_SECURITY_STREAM_IS_INCONSISTENT" ) - sizeof( ("STATUS_SECURITY_STREAM_IS_INCONSISTENT")[0] ), sizeof( "STATUS_SECURITY_STREAM_IS_INCONSISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECURITY_STREAM_IS_INCONSISTENT")), ("STATUS_SECURITY_STREAM_IS_INCONSISTENT") }, (ULONG)((NTSTATUS)0xC00001A0L) }, { { sizeof( "STATUS_INVALID_LOCK_RANGE" ) - sizeof( ("STATUS_INVALID_LOCK_RANGE")[0] ), sizeof( "STATUS_INVALID_LOCK_RANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LOCK_RANGE")), ("STATUS_INVALID_LOCK_RANGE") }, (ULONG)((NTSTATUS)0xC00001A1L) }, { { sizeof( "STATUS_INVALID_ACE_CONDITION" ) - sizeof( ("STATUS_INVALID_ACE_CONDITION")[0] ), sizeof( "STATUS_INVALID_ACE_CONDITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ACE_CONDITION")), ("STATUS_INVALID_ACE_CONDITION") }, (ULONG)((NTSTATUS)0xC00001A2L) }, { { sizeof( "STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT" ) - sizeof( ("STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT")[0] ), sizeof( "STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT")), ("STATUS_IMAGE_SUBSYSTEM_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC00001A3L) }, { { sizeof( "STATUS_NOTIFICATION_GUID_ALREADY_DEFINED" ) - sizeof( ("STATUS_NOTIFICATION_GUID_ALREADY_DEFINED")[0] ), sizeof( "STATUS_NOTIFICATION_GUID_ALREADY_DEFINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOTIFICATION_GUID_ALREADY_DEFINED")), ("STATUS_NOTIFICATION_GUID_ALREADY_DEFINED") }, (ULONG)((NTSTATUS)0xC00001A4L) }, { { sizeof( "STATUS_INVALID_EXCEPTION_HANDLER" ) - sizeof( ("STATUS_INVALID_EXCEPTION_HANDLER")[0] ), sizeof( "STATUS_INVALID_EXCEPTION_HANDLER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_EXCEPTION_HANDLER")), ("STATUS_INVALID_EXCEPTION_HANDLER") }, (ULONG)((NTSTATUS)0xC00001A5L) }, { { sizeof( "STATUS_DUPLICATE_PRIVILEGES" ) - sizeof( ("STATUS_DUPLICATE_PRIVILEGES")[0] ), sizeof( "STATUS_DUPLICATE_PRIVILEGES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DUPLICATE_PRIVILEGES")), ("STATUS_DUPLICATE_PRIVILEGES") }, (ULONG)((NTSTATUS)0xC00001A6L) }, { { sizeof( "STATUS_NOT_ALLOWED_ON_SYSTEM_FILE" ) - sizeof( ("STATUS_NOT_ALLOWED_ON_SYSTEM_FILE")[0] ), sizeof( "STATUS_NOT_ALLOWED_ON_SYSTEM_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_ALLOWED_ON_SYSTEM_FILE")), ("STATUS_NOT_ALLOWED_ON_SYSTEM_FILE") }, (ULONG)((NTSTATUS)0xC00001A7L) }, { { sizeof( "STATUS_REPAIR_NEEDED" ) - sizeof( ("STATUS_REPAIR_NEEDED")[0] ), sizeof( "STATUS_REPAIR_NEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPAIR_NEEDED")), ("STATUS_REPAIR_NEEDED") }, (ULONG)((NTSTATUS)0xC00001A8L) }, { { sizeof( "STATUS_QUOTA_NOT_ENABLED" ) - sizeof( ("STATUS_QUOTA_NOT_ENABLED")[0] ), sizeof( "STATUS_QUOTA_NOT_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_QUOTA_NOT_ENABLED")), ("STATUS_QUOTA_NOT_ENABLED") }, (ULONG)((NTSTATUS)0xC00001A9L) }, { { sizeof( "STATUS_NO_APPLICATION_PACKAGE" ) - sizeof( ("STATUS_NO_APPLICATION_PACKAGE")[0] ), sizeof( "STATUS_NO_APPLICATION_PACKAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_APPLICATION_PACKAGE")), ("STATUS_NO_APPLICATION_PACKAGE") }, (ULONG)((NTSTATUS)0xC00001AAL) }, { { sizeof( "STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS" ) - sizeof( ("STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS")[0] ), sizeof( "STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS")), ("STATUS_FILE_METADATA_OPTIMIZATION_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC00001ABL) }, { { sizeof( "STATUS_NOT_SAME_OBJECT" ) - sizeof( ("STATUS_NOT_SAME_OBJECT")[0] ), sizeof( "STATUS_NOT_SAME_OBJECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SAME_OBJECT")), ("STATUS_NOT_SAME_OBJECT") }, (ULONG)((NTSTATUS)0xC00001ACL) }, { { sizeof( "STATUS_FATAL_MEMORY_EXHAUSTION" ) - sizeof( ("STATUS_FATAL_MEMORY_EXHAUSTION")[0] ), sizeof( "STATUS_FATAL_MEMORY_EXHAUSTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FATAL_MEMORY_EXHAUSTION")), ("STATUS_FATAL_MEMORY_EXHAUSTION") }, (ULONG)((NTSTATUS)0xC00001ADL) }, { { sizeof( "STATUS_ERROR_PROCESS_NOT_IN_JOB" ) - sizeof( ("STATUS_ERROR_PROCESS_NOT_IN_JOB")[0] ), sizeof( "STATUS_ERROR_PROCESS_NOT_IN_JOB" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ERROR_PROCESS_NOT_IN_JOB")), ("STATUS_ERROR_PROCESS_NOT_IN_JOB") }, (ULONG)((NTSTATUS)0xC00001AEL) }, { { sizeof( "STATUS_CPU_SET_INVALID" ) - sizeof( ("STATUS_CPU_SET_INVALID")[0] ), sizeof( "STATUS_CPU_SET_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CPU_SET_INVALID")), ("STATUS_CPU_SET_INVALID") }, (ULONG)((NTSTATUS)0xC00001AFL) }, { { sizeof( "STATUS_NETWORK_OPEN_RESTRICTION" ) - sizeof( ("STATUS_NETWORK_OPEN_RESTRICTION")[0] ), sizeof( "STATUS_NETWORK_OPEN_RESTRICTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_OPEN_RESTRICTION")), ("STATUS_NETWORK_OPEN_RESTRICTION") }, (ULONG)((NTSTATUS)0xC0000201L) }, { { sizeof( "STATUS_NO_USER_SESSION_KEY" ) - sizeof( ("STATUS_NO_USER_SESSION_KEY")[0] ), sizeof( "STATUS_NO_USER_SESSION_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_USER_SESSION_KEY")), ("STATUS_NO_USER_SESSION_KEY") }, (ULONG)((NTSTATUS)0xC0000202L) }, { { sizeof( "STATUS_USER_SESSION_DELETED" ) - sizeof( ("STATUS_USER_SESSION_DELETED")[0] ), sizeof( "STATUS_USER_SESSION_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_USER_SESSION_DELETED")), ("STATUS_USER_SESSION_DELETED") }, (ULONG)((NTSTATUS)0xC0000203L) }, { { sizeof( "STATUS_RESOURCE_LANG_NOT_FOUND" ) - sizeof( ("STATUS_RESOURCE_LANG_NOT_FOUND")[0] ), sizeof( "STATUS_RESOURCE_LANG_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_LANG_NOT_FOUND")), ("STATUS_RESOURCE_LANG_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000204L) }, { { sizeof( "STATUS_INSUFF_SERVER_RESOURCES" ) - sizeof( ("STATUS_INSUFF_SERVER_RESOURCES")[0] ), sizeof( "STATUS_INSUFF_SERVER_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSUFF_SERVER_RESOURCES")), ("STATUS_INSUFF_SERVER_RESOURCES") }, (ULONG)((NTSTATUS)0xC0000205L) }, { { sizeof( "STATUS_INVALID_BUFFER_SIZE" ) - sizeof( ("STATUS_INVALID_BUFFER_SIZE")[0] ), sizeof( "STATUS_INVALID_BUFFER_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_BUFFER_SIZE")), ("STATUS_INVALID_BUFFER_SIZE") }, (ULONG)((NTSTATUS)0xC0000206L) }, { { sizeof( "STATUS_INVALID_ADDRESS_COMPONENT" ) - sizeof( ("STATUS_INVALID_ADDRESS_COMPONENT")[0] ), sizeof( "STATUS_INVALID_ADDRESS_COMPONENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ADDRESS_COMPONENT")), ("STATUS_INVALID_ADDRESS_COMPONENT") }, (ULONG)((NTSTATUS)0xC0000207L) }, { { sizeof( "STATUS_INVALID_ADDRESS_WILDCARD" ) - sizeof( ("STATUS_INVALID_ADDRESS_WILDCARD")[0] ), sizeof( "STATUS_INVALID_ADDRESS_WILDCARD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_ADDRESS_WILDCARD")), ("STATUS_INVALID_ADDRESS_WILDCARD") }, (ULONG)((NTSTATUS)0xC0000208L) }, { { sizeof( "STATUS_TOO_MANY_ADDRESSES" ) - sizeof( ("STATUS_TOO_MANY_ADDRESSES")[0] ), sizeof( "STATUS_TOO_MANY_ADDRESSES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_ADDRESSES")), ("STATUS_TOO_MANY_ADDRESSES") }, (ULONG)((NTSTATUS)0xC0000209L) }, { { sizeof( "STATUS_ADDRESS_ALREADY_EXISTS" ) - sizeof( ("STATUS_ADDRESS_ALREADY_EXISTS")[0] ), sizeof( "STATUS_ADDRESS_ALREADY_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ADDRESS_ALREADY_EXISTS")), ("STATUS_ADDRESS_ALREADY_EXISTS") }, (ULONG)((NTSTATUS)0xC000020AL) }, { { sizeof( "STATUS_ADDRESS_CLOSED" ) - sizeof( ("STATUS_ADDRESS_CLOSED")[0] ), sizeof( "STATUS_ADDRESS_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ADDRESS_CLOSED")), ("STATUS_ADDRESS_CLOSED") }, (ULONG)((NTSTATUS)0xC000020BL) }, { { sizeof( "STATUS_CONNECTION_DISCONNECTED" ) - sizeof( ("STATUS_CONNECTION_DISCONNECTED")[0] ), sizeof( "STATUS_CONNECTION_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_DISCONNECTED")), ("STATUS_CONNECTION_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC000020CL) }, { { sizeof( "STATUS_CONNECTION_RESET" ) - sizeof( ("STATUS_CONNECTION_RESET")[0] ), sizeof( "STATUS_CONNECTION_RESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_RESET")), ("STATUS_CONNECTION_RESET") }, (ULONG)((NTSTATUS)0xC000020DL) }, { { sizeof( "STATUS_TOO_MANY_NODES" ) - sizeof( ("STATUS_TOO_MANY_NODES")[0] ), sizeof( "STATUS_TOO_MANY_NODES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_NODES")), ("STATUS_TOO_MANY_NODES") }, (ULONG)((NTSTATUS)0xC000020EL) }, { { sizeof( "STATUS_TRANSACTION_ABORTED" ) - sizeof( ("STATUS_TRANSACTION_ABORTED")[0] ), sizeof( "STATUS_TRANSACTION_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_ABORTED")), ("STATUS_TRANSACTION_ABORTED") }, (ULONG)((NTSTATUS)0xC000020FL) }, { { sizeof( "STATUS_TRANSACTION_TIMED_OUT" ) - sizeof( ("STATUS_TRANSACTION_TIMED_OUT")[0] ), sizeof( "STATUS_TRANSACTION_TIMED_OUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_TIMED_OUT")), ("STATUS_TRANSACTION_TIMED_OUT") }, (ULONG)((NTSTATUS)0xC0000210L) }, { { sizeof( "STATUS_TRANSACTION_NO_RELEASE" ) - sizeof( ("STATUS_TRANSACTION_NO_RELEASE")[0] ), sizeof( "STATUS_TRANSACTION_NO_RELEASE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NO_RELEASE")), ("STATUS_TRANSACTION_NO_RELEASE") }, (ULONG)((NTSTATUS)0xC0000211L) }, { { sizeof( "STATUS_TRANSACTION_NO_MATCH" ) - sizeof( ("STATUS_TRANSACTION_NO_MATCH")[0] ), sizeof( "STATUS_TRANSACTION_NO_MATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NO_MATCH")), ("STATUS_TRANSACTION_NO_MATCH") }, (ULONG)((NTSTATUS)0xC0000212L) }, { { sizeof( "STATUS_TRANSACTION_RESPONDED" ) - sizeof( ("STATUS_TRANSACTION_RESPONDED")[0] ), sizeof( "STATUS_TRANSACTION_RESPONDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_RESPONDED")), ("STATUS_TRANSACTION_RESPONDED") }, (ULONG)((NTSTATUS)0xC0000213L) }, { { sizeof( "STATUS_TRANSACTION_INVALID_ID" ) - sizeof( ("STATUS_TRANSACTION_INVALID_ID")[0] ), sizeof( "STATUS_TRANSACTION_INVALID_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_INVALID_ID")), ("STATUS_TRANSACTION_INVALID_ID") }, (ULONG)((NTSTATUS)0xC0000214L) }, { { sizeof( "STATUS_TRANSACTION_INVALID_TYPE" ) - sizeof( ("STATUS_TRANSACTION_INVALID_TYPE")[0] ), sizeof( "STATUS_TRANSACTION_INVALID_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_INVALID_TYPE")), ("STATUS_TRANSACTION_INVALID_TYPE") }, (ULONG)((NTSTATUS)0xC0000215L) }, { { sizeof( "STATUS_NOT_SERVER_SESSION" ) - sizeof( ("STATUS_NOT_SERVER_SESSION")[0] ), sizeof( "STATUS_NOT_SERVER_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SERVER_SESSION")), ("STATUS_NOT_SERVER_SESSION") }, (ULONG)((NTSTATUS)0xC0000216L) }, { { sizeof( "STATUS_NOT_CLIENT_SESSION" ) - sizeof( ("STATUS_NOT_CLIENT_SESSION")[0] ), sizeof( "STATUS_NOT_CLIENT_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_CLIENT_SESSION")), ("STATUS_NOT_CLIENT_SESSION") }, (ULONG)((NTSTATUS)0xC0000217L) }, { { sizeof( "STATUS_CANNOT_LOAD_REGISTRY_FILE" ) - sizeof( ("STATUS_CANNOT_LOAD_REGISTRY_FILE")[0] ), sizeof( "STATUS_CANNOT_LOAD_REGISTRY_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_LOAD_REGISTRY_FILE")), ("STATUS_CANNOT_LOAD_REGISTRY_FILE") }, (ULONG)((NTSTATUS)0xC0000218L) }, { { sizeof( "STATUS_DEBUG_ATTACH_FAILED" ) - sizeof( ("STATUS_DEBUG_ATTACH_FAILED")[0] ), sizeof( "STATUS_DEBUG_ATTACH_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEBUG_ATTACH_FAILED")), ("STATUS_DEBUG_ATTACH_FAILED") }, (ULONG)((NTSTATUS)0xC0000219L) }, { { sizeof( "STATUS_SYSTEM_PROCESS_TERMINATED" ) - sizeof( ("STATUS_SYSTEM_PROCESS_TERMINATED")[0] ), sizeof( "STATUS_SYSTEM_PROCESS_TERMINATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_PROCESS_TERMINATED")), ("STATUS_SYSTEM_PROCESS_TERMINATED") }, (ULONG)((NTSTATUS)0xC000021AL) }, { { sizeof( "STATUS_DATA_NOT_ACCEPTED" ) - sizeof( ("STATUS_DATA_NOT_ACCEPTED")[0] ), sizeof( "STATUS_DATA_NOT_ACCEPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATA_NOT_ACCEPTED")), ("STATUS_DATA_NOT_ACCEPTED") }, (ULONG)((NTSTATUS)0xC000021BL) }, { { sizeof( "STATUS_NO_BROWSER_SERVERS_FOUND" ) - sizeof( ("STATUS_NO_BROWSER_SERVERS_FOUND")[0] ), sizeof( "STATUS_NO_BROWSER_SERVERS_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_BROWSER_SERVERS_FOUND")), ("STATUS_NO_BROWSER_SERVERS_FOUND") }, (ULONG)((NTSTATUS)0xC000021CL) }, { { sizeof( "STATUS_VDM_HARD_ERROR" ) - sizeof( ("STATUS_VDM_HARD_ERROR")[0] ), sizeof( "STATUS_VDM_HARD_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VDM_HARD_ERROR")), ("STATUS_VDM_HARD_ERROR") }, (ULONG)((NTSTATUS)0xC000021DL) }, { { sizeof( "STATUS_DRIVER_CANCEL_TIMEOUT" ) - sizeof( ("STATUS_DRIVER_CANCEL_TIMEOUT")[0] ), sizeof( "STATUS_DRIVER_CANCEL_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_CANCEL_TIMEOUT")), ("STATUS_DRIVER_CANCEL_TIMEOUT") }, (ULONG)((NTSTATUS)0xC000021EL) }, { { sizeof( "STATUS_REPLY_MESSAGE_MISMATCH" ) - sizeof( ("STATUS_REPLY_MESSAGE_MISMATCH")[0] ), sizeof( "STATUS_REPLY_MESSAGE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPLY_MESSAGE_MISMATCH")), ("STATUS_REPLY_MESSAGE_MISMATCH") }, (ULONG)((NTSTATUS)0xC000021FL) }, { { sizeof( "STATUS_MAPPED_ALIGNMENT" ) - sizeof( ("STATUS_MAPPED_ALIGNMENT")[0] ), sizeof( "STATUS_MAPPED_ALIGNMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MAPPED_ALIGNMENT")), ("STATUS_MAPPED_ALIGNMENT") }, (ULONG)((NTSTATUS)0xC0000220L) }, { { sizeof( "STATUS_IMAGE_CHECKSUM_MISMATCH" ) - sizeof( ("STATUS_IMAGE_CHECKSUM_MISMATCH")[0] ), sizeof( "STATUS_IMAGE_CHECKSUM_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_CHECKSUM_MISMATCH")), ("STATUS_IMAGE_CHECKSUM_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000221L) }, { { sizeof( "STATUS_LOST_WRITEBEHIND_DATA" ) - sizeof( ("STATUS_LOST_WRITEBEHIND_DATA")[0] ), sizeof( "STATUS_LOST_WRITEBEHIND_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOST_WRITEBEHIND_DATA")), ("STATUS_LOST_WRITEBEHIND_DATA") }, (ULONG)((NTSTATUS)0xC0000222L) }, { { sizeof( "STATUS_CLIENT_SERVER_PARAMETERS_INVALID" ) - sizeof( ("STATUS_CLIENT_SERVER_PARAMETERS_INVALID")[0] ), sizeof( "STATUS_CLIENT_SERVER_PARAMETERS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIENT_SERVER_PARAMETERS_INVALID")), ("STATUS_CLIENT_SERVER_PARAMETERS_INVALID") }, (ULONG)((NTSTATUS)0xC0000223L) }, { { sizeof( "STATUS_PASSWORD_MUST_CHANGE" ) - sizeof( ("STATUS_PASSWORD_MUST_CHANGE")[0] ), sizeof( "STATUS_PASSWORD_MUST_CHANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PASSWORD_MUST_CHANGE")), ("STATUS_PASSWORD_MUST_CHANGE") }, (ULONG)((NTSTATUS)0xC0000224L) }, { { sizeof( "STATUS_NOT_FOUND" ) - sizeof( ("STATUS_NOT_FOUND")[0] ), sizeof( "STATUS_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_FOUND")), ("STATUS_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000225L) }, { { sizeof( "STATUS_NOT_TINY_STREAM" ) - sizeof( ("STATUS_NOT_TINY_STREAM")[0] ), sizeof( "STATUS_NOT_TINY_STREAM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_TINY_STREAM")), ("STATUS_NOT_TINY_STREAM") }, (ULONG)((NTSTATUS)0xC0000226L) }, { { sizeof( "STATUS_RECOVERY_FAILURE" ) - sizeof( ("STATUS_RECOVERY_FAILURE")[0] ), sizeof( "STATUS_RECOVERY_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RECOVERY_FAILURE")), ("STATUS_RECOVERY_FAILURE") }, (ULONG)((NTSTATUS)0xC0000227L) }, { { sizeof( "STATUS_STACK_OVERFLOW_READ" ) - sizeof( ("STATUS_STACK_OVERFLOW_READ")[0] ), sizeof( "STATUS_STACK_OVERFLOW_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STACK_OVERFLOW_READ")), ("STATUS_STACK_OVERFLOW_READ") }, (ULONG)((NTSTATUS)0xC0000228L) }, { { sizeof( "STATUS_FAIL_CHECK" ) - sizeof( ("STATUS_FAIL_CHECK")[0] ), sizeof( "STATUS_FAIL_CHECK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FAIL_CHECK")), ("STATUS_FAIL_CHECK") }, (ULONG)((NTSTATUS)0xC0000229L) }, { { sizeof( "STATUS_DUPLICATE_OBJECTID" ) - sizeof( ("STATUS_DUPLICATE_OBJECTID")[0] ), sizeof( "STATUS_DUPLICATE_OBJECTID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DUPLICATE_OBJECTID")), ("STATUS_DUPLICATE_OBJECTID") }, (ULONG)((NTSTATUS)0xC000022AL) }, { { sizeof( "STATUS_OBJECTID_EXISTS" ) - sizeof( ("STATUS_OBJECTID_EXISTS")[0] ), sizeof( "STATUS_OBJECTID_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECTID_EXISTS")), ("STATUS_OBJECTID_EXISTS") }, (ULONG)((NTSTATUS)0xC000022BL) }, { { sizeof( "STATUS_CONVERT_TO_LARGE" ) - sizeof( ("STATUS_CONVERT_TO_LARGE")[0] ), sizeof( "STATUS_CONVERT_TO_LARGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONVERT_TO_LARGE")), ("STATUS_CONVERT_TO_LARGE") }, (ULONG)((NTSTATUS)0xC000022CL) }, { { sizeof( "STATUS_RETRY" ) - sizeof( ("STATUS_RETRY")[0] ), sizeof( "STATUS_RETRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RETRY")), ("STATUS_RETRY") }, (ULONG)((NTSTATUS)0xC000022DL) }, { { sizeof( "STATUS_FOUND_OUT_OF_SCOPE" ) - sizeof( ("STATUS_FOUND_OUT_OF_SCOPE")[0] ), sizeof( "STATUS_FOUND_OUT_OF_SCOPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FOUND_OUT_OF_SCOPE")), ("STATUS_FOUND_OUT_OF_SCOPE") }, (ULONG)((NTSTATUS)0xC000022EL) }, { { sizeof( "STATUS_ALLOCATE_BUCKET" ) - sizeof( ("STATUS_ALLOCATE_BUCKET")[0] ), sizeof( "STATUS_ALLOCATE_BUCKET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALLOCATE_BUCKET")), ("STATUS_ALLOCATE_BUCKET") }, (ULONG)((NTSTATUS)0xC000022FL) }, { { sizeof( "STATUS_PROPSET_NOT_FOUND" ) - sizeof( ("STATUS_PROPSET_NOT_FOUND")[0] ), sizeof( "STATUS_PROPSET_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROPSET_NOT_FOUND")), ("STATUS_PROPSET_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000230L) }, { { sizeof( "STATUS_MARSHALL_OVERFLOW" ) - sizeof( ("STATUS_MARSHALL_OVERFLOW")[0] ), sizeof( "STATUS_MARSHALL_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MARSHALL_OVERFLOW")), ("STATUS_MARSHALL_OVERFLOW") }, (ULONG)((NTSTATUS)0xC0000231L) }, { { sizeof( "STATUS_INVALID_VARIANT" ) - sizeof( ("STATUS_INVALID_VARIANT")[0] ), sizeof( "STATUS_INVALID_VARIANT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_VARIANT")), ("STATUS_INVALID_VARIANT") }, (ULONG)((NTSTATUS)0xC0000232L) }, { { sizeof( "STATUS_DOMAIN_CONTROLLER_NOT_FOUND" ) - sizeof( ("STATUS_DOMAIN_CONTROLLER_NOT_FOUND")[0] ), sizeof( "STATUS_DOMAIN_CONTROLLER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DOMAIN_CONTROLLER_NOT_FOUND")), ("STATUS_DOMAIN_CONTROLLER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000233L) }, { { sizeof( "STATUS_ACCOUNT_LOCKED_OUT" ) - sizeof( ("STATUS_ACCOUNT_LOCKED_OUT")[0] ), sizeof( "STATUS_ACCOUNT_LOCKED_OUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCOUNT_LOCKED_OUT")), ("STATUS_ACCOUNT_LOCKED_OUT") }, (ULONG)((NTSTATUS)0xC0000234L) }, { { sizeof( "STATUS_HANDLE_NOT_CLOSABLE" ) - sizeof( ("STATUS_HANDLE_NOT_CLOSABLE")[0] ), sizeof( "STATUS_HANDLE_NOT_CLOSABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HANDLE_NOT_CLOSABLE")), ("STATUS_HANDLE_NOT_CLOSABLE") }, (ULONG)((NTSTATUS)0xC0000235L) }, { { sizeof( "STATUS_CONNECTION_REFUSED" ) - sizeof( ("STATUS_CONNECTION_REFUSED")[0] ), sizeof( "STATUS_CONNECTION_REFUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_REFUSED")), ("STATUS_CONNECTION_REFUSED") }, (ULONG)((NTSTATUS)0xC0000236L) }, { { sizeof( "STATUS_GRACEFUL_DISCONNECT" ) - sizeof( ("STATUS_GRACEFUL_DISCONNECT")[0] ), sizeof( "STATUS_GRACEFUL_DISCONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRACEFUL_DISCONNECT")), ("STATUS_GRACEFUL_DISCONNECT") }, (ULONG)((NTSTATUS)0xC0000237L) }, { { sizeof( "STATUS_ADDRESS_ALREADY_ASSOCIATED" ) - sizeof( ("STATUS_ADDRESS_ALREADY_ASSOCIATED")[0] ), sizeof( "STATUS_ADDRESS_ALREADY_ASSOCIATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ADDRESS_ALREADY_ASSOCIATED")), ("STATUS_ADDRESS_ALREADY_ASSOCIATED") }, (ULONG)((NTSTATUS)0xC0000238L) }, { { sizeof( "STATUS_ADDRESS_NOT_ASSOCIATED" ) - sizeof( ("STATUS_ADDRESS_NOT_ASSOCIATED")[0] ), sizeof( "STATUS_ADDRESS_NOT_ASSOCIATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ADDRESS_NOT_ASSOCIATED")), ("STATUS_ADDRESS_NOT_ASSOCIATED") }, (ULONG)((NTSTATUS)0xC0000239L) }, { { sizeof( "STATUS_CONNECTION_INVALID" ) - sizeof( ("STATUS_CONNECTION_INVALID")[0] ), sizeof( "STATUS_CONNECTION_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_INVALID")), ("STATUS_CONNECTION_INVALID") }, (ULONG)((NTSTATUS)0xC000023AL) }, { { sizeof( "STATUS_CONNECTION_ACTIVE" ) - sizeof( ("STATUS_CONNECTION_ACTIVE")[0] ), sizeof( "STATUS_CONNECTION_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_ACTIVE")), ("STATUS_CONNECTION_ACTIVE") }, (ULONG)((NTSTATUS)0xC000023BL) }, { { sizeof( "STATUS_NETWORK_UNREACHABLE" ) - sizeof( ("STATUS_NETWORK_UNREACHABLE")[0] ), sizeof( "STATUS_NETWORK_UNREACHABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_UNREACHABLE")), ("STATUS_NETWORK_UNREACHABLE") }, (ULONG)((NTSTATUS)0xC000023CL) }, { { sizeof( "STATUS_HOST_UNREACHABLE" ) - sizeof( ("STATUS_HOST_UNREACHABLE")[0] ), sizeof( "STATUS_HOST_UNREACHABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HOST_UNREACHABLE")), ("STATUS_HOST_UNREACHABLE") }, (ULONG)((NTSTATUS)0xC000023DL) }, { { sizeof( "STATUS_PROTOCOL_UNREACHABLE" ) - sizeof( ("STATUS_PROTOCOL_UNREACHABLE")[0] ), sizeof( "STATUS_PROTOCOL_UNREACHABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROTOCOL_UNREACHABLE")), ("STATUS_PROTOCOL_UNREACHABLE") }, (ULONG)((NTSTATUS)0xC000023EL) }, { { sizeof( "STATUS_PORT_UNREACHABLE" ) - sizeof( ("STATUS_PORT_UNREACHABLE")[0] ), sizeof( "STATUS_PORT_UNREACHABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_UNREACHABLE")), ("STATUS_PORT_UNREACHABLE") }, (ULONG)((NTSTATUS)0xC000023FL) }, { { sizeof( "STATUS_REQUEST_ABORTED" ) - sizeof( ("STATUS_REQUEST_ABORTED")[0] ), sizeof( "STATUS_REQUEST_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REQUEST_ABORTED")), ("STATUS_REQUEST_ABORTED") }, (ULONG)((NTSTATUS)0xC0000240L) }, { { sizeof( "STATUS_CONNECTION_ABORTED" ) - sizeof( ("STATUS_CONNECTION_ABORTED")[0] ), sizeof( "STATUS_CONNECTION_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_ABORTED")), ("STATUS_CONNECTION_ABORTED") }, (ULONG)((NTSTATUS)0xC0000241L) }, { { sizeof( "STATUS_BAD_COMPRESSION_BUFFER" ) - sizeof( ("STATUS_BAD_COMPRESSION_BUFFER")[0] ), sizeof( "STATUS_BAD_COMPRESSION_BUFFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_COMPRESSION_BUFFER")), ("STATUS_BAD_COMPRESSION_BUFFER") }, (ULONG)((NTSTATUS)0xC0000242L) }, { { sizeof( "STATUS_USER_MAPPED_FILE" ) - sizeof( ("STATUS_USER_MAPPED_FILE")[0] ), sizeof( "STATUS_USER_MAPPED_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_USER_MAPPED_FILE")), ("STATUS_USER_MAPPED_FILE") }, (ULONG)((NTSTATUS)0xC0000243L) }, { { sizeof( "STATUS_AUDIT_FAILED" ) - sizeof( ("STATUS_AUDIT_FAILED")[0] ), sizeof( "STATUS_AUDIT_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AUDIT_FAILED")), ("STATUS_AUDIT_FAILED") }, (ULONG)((NTSTATUS)0xC0000244L) }, { { sizeof( "STATUS_TIMER_RESOLUTION_NOT_SET" ) - sizeof( ("STATUS_TIMER_RESOLUTION_NOT_SET")[0] ), sizeof( "STATUS_TIMER_RESOLUTION_NOT_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TIMER_RESOLUTION_NOT_SET")), ("STATUS_TIMER_RESOLUTION_NOT_SET") }, (ULONG)((NTSTATUS)0xC0000245L) }, { { sizeof( "STATUS_CONNECTION_COUNT_LIMIT" ) - sizeof( ("STATUS_CONNECTION_COUNT_LIMIT")[0] ), sizeof( "STATUS_CONNECTION_COUNT_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONNECTION_COUNT_LIMIT")), ("STATUS_CONNECTION_COUNT_LIMIT") }, (ULONG)((NTSTATUS)0xC0000246L) }, { { sizeof( "STATUS_LOGIN_TIME_RESTRICTION" ) - sizeof( ("STATUS_LOGIN_TIME_RESTRICTION")[0] ), sizeof( "STATUS_LOGIN_TIME_RESTRICTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGIN_TIME_RESTRICTION")), ("STATUS_LOGIN_TIME_RESTRICTION") }, (ULONG)((NTSTATUS)0xC0000247L) }, { { sizeof( "STATUS_LOGIN_WKSTA_RESTRICTION" ) - sizeof( ("STATUS_LOGIN_WKSTA_RESTRICTION")[0] ), sizeof( "STATUS_LOGIN_WKSTA_RESTRICTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOGIN_WKSTA_RESTRICTION")), ("STATUS_LOGIN_WKSTA_RESTRICTION") }, (ULONG)((NTSTATUS)0xC0000248L) }, { { sizeof( "STATUS_IMAGE_MP_UP_MISMATCH" ) - sizeof( ("STATUS_IMAGE_MP_UP_MISMATCH")[0] ), sizeof( "STATUS_IMAGE_MP_UP_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_MP_UP_MISMATCH")), ("STATUS_IMAGE_MP_UP_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000249L) }, { { sizeof( "STATUS_INSUFFICIENT_LOGON_INFO" ) - sizeof( ("STATUS_INSUFFICIENT_LOGON_INFO")[0] ), sizeof( "STATUS_INSUFFICIENT_LOGON_INFO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSUFFICIENT_LOGON_INFO")), ("STATUS_INSUFFICIENT_LOGON_INFO") }, (ULONG)((NTSTATUS)0xC0000250L) }, { { sizeof( "STATUS_BAD_DLL_ENTRYPOINT" ) - sizeof( ("STATUS_BAD_DLL_ENTRYPOINT")[0] ), sizeof( "STATUS_BAD_DLL_ENTRYPOINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_DLL_ENTRYPOINT")), ("STATUS_BAD_DLL_ENTRYPOINT") }, (ULONG)((NTSTATUS)0xC0000251L) }, { { sizeof( "STATUS_BAD_SERVICE_ENTRYPOINT" ) - sizeof( ("STATUS_BAD_SERVICE_ENTRYPOINT")[0] ), sizeof( "STATUS_BAD_SERVICE_ENTRYPOINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_SERVICE_ENTRYPOINT")), ("STATUS_BAD_SERVICE_ENTRYPOINT") }, (ULONG)((NTSTATUS)0xC0000252L) }, { { sizeof( "STATUS_LPC_REPLY_LOST" ) - sizeof( ("STATUS_LPC_REPLY_LOST")[0] ), sizeof( "STATUS_LPC_REPLY_LOST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LPC_REPLY_LOST")), ("STATUS_LPC_REPLY_LOST") }, (ULONG)((NTSTATUS)0xC0000253L) }, { { sizeof( "STATUS_IP_ADDRESS_CONFLICT1" ) - sizeof( ("STATUS_IP_ADDRESS_CONFLICT1")[0] ), sizeof( "STATUS_IP_ADDRESS_CONFLICT1" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IP_ADDRESS_CONFLICT1")), ("STATUS_IP_ADDRESS_CONFLICT1") }, (ULONG)((NTSTATUS)0xC0000254L) }, { { sizeof( "STATUS_IP_ADDRESS_CONFLICT2" ) - sizeof( ("STATUS_IP_ADDRESS_CONFLICT2")[0] ), sizeof( "STATUS_IP_ADDRESS_CONFLICT2" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IP_ADDRESS_CONFLICT2")), ("STATUS_IP_ADDRESS_CONFLICT2") }, (ULONG)((NTSTATUS)0xC0000255L) }, { { sizeof( "STATUS_REGISTRY_QUOTA_LIMIT" ) - sizeof( ("STATUS_REGISTRY_QUOTA_LIMIT")[0] ), sizeof( "STATUS_REGISTRY_QUOTA_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REGISTRY_QUOTA_LIMIT")), ("STATUS_REGISTRY_QUOTA_LIMIT") }, (ULONG)((NTSTATUS)0xC0000256L) }, { { sizeof( "STATUS_PATH_NOT_COVERED" ) - sizeof( ("STATUS_PATH_NOT_COVERED")[0] ), sizeof( "STATUS_PATH_NOT_COVERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PATH_NOT_COVERED")), ("STATUS_PATH_NOT_COVERED") }, (ULONG)((NTSTATUS)0xC0000257L) }, { { sizeof( "STATUS_NO_CALLBACK_ACTIVE" ) - sizeof( ("STATUS_NO_CALLBACK_ACTIVE")[0] ), sizeof( "STATUS_NO_CALLBACK_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_CALLBACK_ACTIVE")), ("STATUS_NO_CALLBACK_ACTIVE") }, (ULONG)((NTSTATUS)0xC0000258L) }, { { sizeof( "STATUS_LICENSE_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_LICENSE_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_LICENSE_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LICENSE_QUOTA_EXCEEDED")), ("STATUS_LICENSE_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000259L) }, { { sizeof( "STATUS_PWD_TOO_SHORT" ) - sizeof( ("STATUS_PWD_TOO_SHORT")[0] ), sizeof( "STATUS_PWD_TOO_SHORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PWD_TOO_SHORT")), ("STATUS_PWD_TOO_SHORT") }, (ULONG)((NTSTATUS)0xC000025AL) }, { { sizeof( "STATUS_PWD_TOO_RECENT" ) - sizeof( ("STATUS_PWD_TOO_RECENT")[0] ), sizeof( "STATUS_PWD_TOO_RECENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PWD_TOO_RECENT")), ("STATUS_PWD_TOO_RECENT") }, (ULONG)((NTSTATUS)0xC000025BL) }, { { sizeof( "STATUS_PWD_HISTORY_CONFLICT" ) - sizeof( ("STATUS_PWD_HISTORY_CONFLICT")[0] ), sizeof( "STATUS_PWD_HISTORY_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PWD_HISTORY_CONFLICT")), ("STATUS_PWD_HISTORY_CONFLICT") }, (ULONG)((NTSTATUS)0xC000025CL) }, { { sizeof( "STATUS_PLUGPLAY_NO_DEVICE" ) - sizeof( ("STATUS_PLUGPLAY_NO_DEVICE")[0] ), sizeof( "STATUS_PLUGPLAY_NO_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLUGPLAY_NO_DEVICE")), ("STATUS_PLUGPLAY_NO_DEVICE") }, (ULONG)((NTSTATUS)0xC000025EL) }, { { sizeof( "STATUS_UNSUPPORTED_COMPRESSION" ) - sizeof( ("STATUS_UNSUPPORTED_COMPRESSION")[0] ), sizeof( "STATUS_UNSUPPORTED_COMPRESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNSUPPORTED_COMPRESSION")), ("STATUS_UNSUPPORTED_COMPRESSION") }, (ULONG)((NTSTATUS)0xC000025FL) }, { { sizeof( "STATUS_INVALID_HW_PROFILE" ) - sizeof( ("STATUS_INVALID_HW_PROFILE")[0] ), sizeof( "STATUS_INVALID_HW_PROFILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_HW_PROFILE")), ("STATUS_INVALID_HW_PROFILE") }, (ULONG)((NTSTATUS)0xC0000260L) }, { { sizeof( "STATUS_INVALID_PLUGPLAY_DEVICE_PATH" ) - sizeof( ("STATUS_INVALID_PLUGPLAY_DEVICE_PATH")[0] ), sizeof( "STATUS_INVALID_PLUGPLAY_DEVICE_PATH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PLUGPLAY_DEVICE_PATH")), ("STATUS_INVALID_PLUGPLAY_DEVICE_PATH") }, (ULONG)((NTSTATUS)0xC0000261L) }, { { sizeof( "STATUS_DRIVER_ORDINAL_NOT_FOUND" ) - sizeof( ("STATUS_DRIVER_ORDINAL_NOT_FOUND")[0] ), sizeof( "STATUS_DRIVER_ORDINAL_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_ORDINAL_NOT_FOUND")), ("STATUS_DRIVER_ORDINAL_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000262L) }, { { sizeof( "STATUS_DRIVER_ENTRYPOINT_NOT_FOUND" ) - sizeof( ("STATUS_DRIVER_ENTRYPOINT_NOT_FOUND")[0] ), sizeof( "STATUS_DRIVER_ENTRYPOINT_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_ENTRYPOINT_NOT_FOUND")), ("STATUS_DRIVER_ENTRYPOINT_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000263L) }, { { sizeof( "STATUS_RESOURCE_NOT_OWNED" ) - sizeof( ("STATUS_RESOURCE_NOT_OWNED")[0] ), sizeof( "STATUS_RESOURCE_NOT_OWNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_NOT_OWNED")), ("STATUS_RESOURCE_NOT_OWNED") }, (ULONG)((NTSTATUS)0xC0000264L) }, { { sizeof( "STATUS_TOO_MANY_LINKS" ) - sizeof( ("STATUS_TOO_MANY_LINKS")[0] ), sizeof( "STATUS_TOO_MANY_LINKS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_LINKS")), ("STATUS_TOO_MANY_LINKS") }, (ULONG)((NTSTATUS)0xC0000265L) }, { { sizeof( "STATUS_QUOTA_LIST_INCONSISTENT" ) - sizeof( ("STATUS_QUOTA_LIST_INCONSISTENT")[0] ), sizeof( "STATUS_QUOTA_LIST_INCONSISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_QUOTA_LIST_INCONSISTENT")), ("STATUS_QUOTA_LIST_INCONSISTENT") }, (ULONG)((NTSTATUS)0xC0000266L) }, { { sizeof( "STATUS_FILE_IS_OFFLINE" ) - sizeof( ("STATUS_FILE_IS_OFFLINE")[0] ), sizeof( "STATUS_FILE_IS_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_IS_OFFLINE")), ("STATUS_FILE_IS_OFFLINE") }, (ULONG)((NTSTATUS)0xC0000267L) }, { { sizeof( "STATUS_EVALUATION_EXPIRATION" ) - sizeof( ("STATUS_EVALUATION_EXPIRATION")[0] ), sizeof( "STATUS_EVALUATION_EXPIRATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EVALUATION_EXPIRATION")), ("STATUS_EVALUATION_EXPIRATION") }, (ULONG)((NTSTATUS)0xC0000268L) }, { { sizeof( "STATUS_ILLEGAL_DLL_RELOCATION" ) - sizeof( ("STATUS_ILLEGAL_DLL_RELOCATION")[0] ), sizeof( "STATUS_ILLEGAL_DLL_RELOCATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILLEGAL_DLL_RELOCATION")), ("STATUS_ILLEGAL_DLL_RELOCATION") }, (ULONG)((NTSTATUS)0xC0000269L) }, { { sizeof( "STATUS_LICENSE_VIOLATION" ) - sizeof( ("STATUS_LICENSE_VIOLATION")[0] ), sizeof( "STATUS_LICENSE_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LICENSE_VIOLATION")), ("STATUS_LICENSE_VIOLATION") }, (ULONG)((NTSTATUS)0xC000026AL) }, { { sizeof( "STATUS_DLL_INIT_FAILED_LOGOFF" ) - sizeof( ("STATUS_DLL_INIT_FAILED_LOGOFF")[0] ), sizeof( "STATUS_DLL_INIT_FAILED_LOGOFF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DLL_INIT_FAILED_LOGOFF")), ("STATUS_DLL_INIT_FAILED_LOGOFF") }, (ULONG)((NTSTATUS)0xC000026BL) }, { { sizeof( "STATUS_DRIVER_UNABLE_TO_LOAD" ) - sizeof( ("STATUS_DRIVER_UNABLE_TO_LOAD")[0] ), sizeof( "STATUS_DRIVER_UNABLE_TO_LOAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_UNABLE_TO_LOAD")), ("STATUS_DRIVER_UNABLE_TO_LOAD") }, (ULONG)((NTSTATUS)0xC000026CL) }, { { sizeof( "STATUS_DFS_UNAVAILABLE" ) - sizeof( ("STATUS_DFS_UNAVAILABLE")[0] ), sizeof( "STATUS_DFS_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DFS_UNAVAILABLE")), ("STATUS_DFS_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC000026DL) }, { { sizeof( "STATUS_VOLUME_DISMOUNTED" ) - sizeof( ("STATUS_VOLUME_DISMOUNTED")[0] ), sizeof( "STATUS_VOLUME_DISMOUNTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLUME_DISMOUNTED")), ("STATUS_VOLUME_DISMOUNTED") }, (ULONG)((NTSTATUS)0xC000026EL) }, { { sizeof( "STATUS_WX86_INTERNAL_ERROR" ) - sizeof( ("STATUS_WX86_INTERNAL_ERROR")[0] ), sizeof( "STATUS_WX86_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_INTERNAL_ERROR")), ("STATUS_WX86_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC000026FL) }, { { sizeof( "STATUS_WX86_FLOAT_STACK_CHECK" ) - sizeof( ("STATUS_WX86_FLOAT_STACK_CHECK")[0] ), sizeof( "STATUS_WX86_FLOAT_STACK_CHECK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WX86_FLOAT_STACK_CHECK")), ("STATUS_WX86_FLOAT_STACK_CHECK") }, (ULONG)((NTSTATUS)0xC0000270L) }, { { sizeof( "STATUS_VALIDATE_CONTINUE" ) - sizeof( ("STATUS_VALIDATE_CONTINUE")[0] ), sizeof( "STATUS_VALIDATE_CONTINUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VALIDATE_CONTINUE")), ("STATUS_VALIDATE_CONTINUE") }, (ULONG)((NTSTATUS)0xC0000271L) }, { { sizeof( "STATUS_NO_MATCH" ) - sizeof( ("STATUS_NO_MATCH")[0] ), sizeof( "STATUS_NO_MATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MATCH")), ("STATUS_NO_MATCH") }, (ULONG)((NTSTATUS)0xC0000272L) }, { { sizeof( "STATUS_NO_MORE_MATCHES" ) - sizeof( ("STATUS_NO_MORE_MATCHES")[0] ), sizeof( "STATUS_NO_MORE_MATCHES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_MORE_MATCHES")), ("STATUS_NO_MORE_MATCHES") }, (ULONG)((NTSTATUS)0xC0000273L) }, { { sizeof( "STATUS_NOT_A_REPARSE_POINT" ) - sizeof( ("STATUS_NOT_A_REPARSE_POINT")[0] ), sizeof( "STATUS_NOT_A_REPARSE_POINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_A_REPARSE_POINT")), ("STATUS_NOT_A_REPARSE_POINT") }, (ULONG)((NTSTATUS)0xC0000275L) }, { { sizeof( "STATUS_IO_REPARSE_TAG_INVALID" ) - sizeof( ("STATUS_IO_REPARSE_TAG_INVALID")[0] ), sizeof( "STATUS_IO_REPARSE_TAG_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_REPARSE_TAG_INVALID")), ("STATUS_IO_REPARSE_TAG_INVALID") }, (ULONG)((NTSTATUS)0xC0000276L) }, { { sizeof( "STATUS_IO_REPARSE_TAG_MISMATCH" ) - sizeof( ("STATUS_IO_REPARSE_TAG_MISMATCH")[0] ), sizeof( "STATUS_IO_REPARSE_TAG_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_REPARSE_TAG_MISMATCH")), ("STATUS_IO_REPARSE_TAG_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000277L) }, { { sizeof( "STATUS_IO_REPARSE_DATA_INVALID" ) - sizeof( ("STATUS_IO_REPARSE_DATA_INVALID")[0] ), sizeof( "STATUS_IO_REPARSE_DATA_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_REPARSE_DATA_INVALID")), ("STATUS_IO_REPARSE_DATA_INVALID") }, (ULONG)((NTSTATUS)0xC0000278L) }, { { sizeof( "STATUS_IO_REPARSE_TAG_NOT_HANDLED" ) - sizeof( ("STATUS_IO_REPARSE_TAG_NOT_HANDLED")[0] ), sizeof( "STATUS_IO_REPARSE_TAG_NOT_HANDLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_REPARSE_TAG_NOT_HANDLED")), ("STATUS_IO_REPARSE_TAG_NOT_HANDLED") }, (ULONG)((NTSTATUS)0xC0000279L) }, { { sizeof( "STATUS_PWD_TOO_LONG" ) - sizeof( ("STATUS_PWD_TOO_LONG")[0] ), sizeof( "STATUS_PWD_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PWD_TOO_LONG")), ("STATUS_PWD_TOO_LONG") }, (ULONG)((NTSTATUS)0xC000027AL) }, { { sizeof( "STATUS_STOWED_EXCEPTION" ) - sizeof( ("STATUS_STOWED_EXCEPTION")[0] ), sizeof( "STATUS_STOWED_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STOWED_EXCEPTION")), ("STATUS_STOWED_EXCEPTION") }, (ULONG)((NTSTATUS)0xC000027BL) }, { { sizeof( "STATUS_REPARSE_POINT_NOT_RESOLVED" ) - sizeof( ("STATUS_REPARSE_POINT_NOT_RESOLVED")[0] ), sizeof( "STATUS_REPARSE_POINT_NOT_RESOLVED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPARSE_POINT_NOT_RESOLVED")), ("STATUS_REPARSE_POINT_NOT_RESOLVED") }, (ULONG)((NTSTATUS)0xC0000280L) }, { { sizeof( "STATUS_DIRECTORY_IS_A_REPARSE_POINT" ) - sizeof( ("STATUS_DIRECTORY_IS_A_REPARSE_POINT")[0] ), sizeof( "STATUS_DIRECTORY_IS_A_REPARSE_POINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DIRECTORY_IS_A_REPARSE_POINT")), ("STATUS_DIRECTORY_IS_A_REPARSE_POINT") }, (ULONG)((NTSTATUS)0xC0000281L) }, { { sizeof( "STATUS_RANGE_LIST_CONFLICT" ) - sizeof( ("STATUS_RANGE_LIST_CONFLICT")[0] ), sizeof( "STATUS_RANGE_LIST_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RANGE_LIST_CONFLICT")), ("STATUS_RANGE_LIST_CONFLICT") }, (ULONG)((NTSTATUS)0xC0000282L) }, { { sizeof( "STATUS_SOURCE_ELEMENT_EMPTY" ) - sizeof( ("STATUS_SOURCE_ELEMENT_EMPTY")[0] ), sizeof( "STATUS_SOURCE_ELEMENT_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SOURCE_ELEMENT_EMPTY")), ("STATUS_SOURCE_ELEMENT_EMPTY") }, (ULONG)((NTSTATUS)0xC0000283L) }, { { sizeof( "STATUS_DESTINATION_ELEMENT_FULL" ) - sizeof( ("STATUS_DESTINATION_ELEMENT_FULL")[0] ), sizeof( "STATUS_DESTINATION_ELEMENT_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DESTINATION_ELEMENT_FULL")), ("STATUS_DESTINATION_ELEMENT_FULL") }, (ULONG)((NTSTATUS)0xC0000284L) }, { { sizeof( "STATUS_ILLEGAL_ELEMENT_ADDRESS" ) - sizeof( ("STATUS_ILLEGAL_ELEMENT_ADDRESS")[0] ), sizeof( "STATUS_ILLEGAL_ELEMENT_ADDRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ILLEGAL_ELEMENT_ADDRESS")), ("STATUS_ILLEGAL_ELEMENT_ADDRESS") }, (ULONG)((NTSTATUS)0xC0000285L) }, { { sizeof( "STATUS_MAGAZINE_NOT_PRESENT" ) - sizeof( ("STATUS_MAGAZINE_NOT_PRESENT")[0] ), sizeof( "STATUS_MAGAZINE_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MAGAZINE_NOT_PRESENT")), ("STATUS_MAGAZINE_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC0000286L) }, { { sizeof( "STATUS_REINITIALIZATION_NEEDED" ) - sizeof( ("STATUS_REINITIALIZATION_NEEDED")[0] ), sizeof( "STATUS_REINITIALIZATION_NEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REINITIALIZATION_NEEDED")), ("STATUS_REINITIALIZATION_NEEDED") }, (ULONG)((NTSTATUS)0xC0000287L) }, { { sizeof( "STATUS_DEVICE_REQUIRES_CLEANING" ) - sizeof( ("STATUS_DEVICE_REQUIRES_CLEANING")[0] ), sizeof( "STATUS_DEVICE_REQUIRES_CLEANING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_REQUIRES_CLEANING")), ("STATUS_DEVICE_REQUIRES_CLEANING") }, (ULONG)((NTSTATUS)0x80000288L) }, { { sizeof( "STATUS_DEVICE_DOOR_OPEN" ) - sizeof( ("STATUS_DEVICE_DOOR_OPEN")[0] ), sizeof( "STATUS_DEVICE_DOOR_OPEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_DOOR_OPEN")), ("STATUS_DEVICE_DOOR_OPEN") }, (ULONG)((NTSTATUS)0x80000289L) }, { { sizeof( "STATUS_ENCRYPTION_FAILED" ) - sizeof( ("STATUS_ENCRYPTION_FAILED")[0] ), sizeof( "STATUS_ENCRYPTION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENCRYPTION_FAILED")), ("STATUS_ENCRYPTION_FAILED") }, (ULONG)((NTSTATUS)0xC000028AL) }, { { sizeof( "STATUS_DECRYPTION_FAILED" ) - sizeof( ("STATUS_DECRYPTION_FAILED")[0] ), sizeof( "STATUS_DECRYPTION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DECRYPTION_FAILED")), ("STATUS_DECRYPTION_FAILED") }, (ULONG)((NTSTATUS)0xC000028BL) }, { { sizeof( "STATUS_RANGE_NOT_FOUND" ) - sizeof( ("STATUS_RANGE_NOT_FOUND")[0] ), sizeof( "STATUS_RANGE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RANGE_NOT_FOUND")), ("STATUS_RANGE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000028CL) }, { { sizeof( "STATUS_NO_RECOVERY_POLICY" ) - sizeof( ("STATUS_NO_RECOVERY_POLICY")[0] ), sizeof( "STATUS_NO_RECOVERY_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_RECOVERY_POLICY")), ("STATUS_NO_RECOVERY_POLICY") }, (ULONG)((NTSTATUS)0xC000028DL) }, { { sizeof( "STATUS_NO_EFS" ) - sizeof( ("STATUS_NO_EFS")[0] ), sizeof( "STATUS_NO_EFS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_EFS")), ("STATUS_NO_EFS") }, (ULONG)((NTSTATUS)0xC000028EL) }, { { sizeof( "STATUS_WRONG_EFS" ) - sizeof( ("STATUS_WRONG_EFS")[0] ), sizeof( "STATUS_WRONG_EFS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WRONG_EFS")), ("STATUS_WRONG_EFS") }, (ULONG)((NTSTATUS)0xC000028FL) }, { { sizeof( "STATUS_NO_USER_KEYS" ) - sizeof( ("STATUS_NO_USER_KEYS")[0] ), sizeof( "STATUS_NO_USER_KEYS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_USER_KEYS")), ("STATUS_NO_USER_KEYS") }, (ULONG)((NTSTATUS)0xC0000290L) }, { { sizeof( "STATUS_FILE_NOT_ENCRYPTED" ) - sizeof( ("STATUS_FILE_NOT_ENCRYPTED")[0] ), sizeof( "STATUS_FILE_NOT_ENCRYPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_NOT_ENCRYPTED")), ("STATUS_FILE_NOT_ENCRYPTED") }, (ULONG)((NTSTATUS)0xC0000291L) }, { { sizeof( "STATUS_NOT_EXPORT_FORMAT" ) - sizeof( ("STATUS_NOT_EXPORT_FORMAT")[0] ), sizeof( "STATUS_NOT_EXPORT_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_EXPORT_FORMAT")), ("STATUS_NOT_EXPORT_FORMAT") }, (ULONG)((NTSTATUS)0xC0000292L) }, { { sizeof( "STATUS_FILE_ENCRYPTED" ) - sizeof( ("STATUS_FILE_ENCRYPTED")[0] ), sizeof( "STATUS_FILE_ENCRYPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_ENCRYPTED")), ("STATUS_FILE_ENCRYPTED") }, (ULONG)((NTSTATUS)0xC0000293L) }, { { sizeof( "STATUS_WAKE_SYSTEM" ) - sizeof( ("STATUS_WAKE_SYSTEM")[0] ), sizeof( "STATUS_WAKE_SYSTEM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WAKE_SYSTEM")), ("STATUS_WAKE_SYSTEM") }, (ULONG)((NTSTATUS)0x40000294L) }, { { sizeof( "STATUS_WMI_GUID_NOT_FOUND" ) - sizeof( ("STATUS_WMI_GUID_NOT_FOUND")[0] ), sizeof( "STATUS_WMI_GUID_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_GUID_NOT_FOUND")), ("STATUS_WMI_GUID_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000295L) }, { { sizeof( "STATUS_WMI_INSTANCE_NOT_FOUND" ) - sizeof( ("STATUS_WMI_INSTANCE_NOT_FOUND")[0] ), sizeof( "STATUS_WMI_INSTANCE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_INSTANCE_NOT_FOUND")), ("STATUS_WMI_INSTANCE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000296L) }, { { sizeof( "STATUS_WMI_ITEMID_NOT_FOUND" ) - sizeof( ("STATUS_WMI_ITEMID_NOT_FOUND")[0] ), sizeof( "STATUS_WMI_ITEMID_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_ITEMID_NOT_FOUND")), ("STATUS_WMI_ITEMID_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000297L) }, { { sizeof( "STATUS_WMI_TRY_AGAIN" ) - sizeof( ("STATUS_WMI_TRY_AGAIN")[0] ), sizeof( "STATUS_WMI_TRY_AGAIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_TRY_AGAIN")), ("STATUS_WMI_TRY_AGAIN") }, (ULONG)((NTSTATUS)0xC0000298L) }, { { sizeof( "STATUS_SHARED_POLICY" ) - sizeof( ("STATUS_SHARED_POLICY")[0] ), sizeof( "STATUS_SHARED_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHARED_POLICY")), ("STATUS_SHARED_POLICY") }, (ULONG)((NTSTATUS)0xC0000299L) }, { { sizeof( "STATUS_POLICY_OBJECT_NOT_FOUND" ) - sizeof( ("STATUS_POLICY_OBJECT_NOT_FOUND")[0] ), sizeof( "STATUS_POLICY_OBJECT_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_POLICY_OBJECT_NOT_FOUND")), ("STATUS_POLICY_OBJECT_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000029AL) }, { { sizeof( "STATUS_POLICY_ONLY_IN_DS" ) - sizeof( ("STATUS_POLICY_ONLY_IN_DS")[0] ), sizeof( "STATUS_POLICY_ONLY_IN_DS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_POLICY_ONLY_IN_DS")), ("STATUS_POLICY_ONLY_IN_DS") }, (ULONG)((NTSTATUS)0xC000029BL) }, { { sizeof( "STATUS_VOLUME_NOT_UPGRADED" ) - sizeof( ("STATUS_VOLUME_NOT_UPGRADED")[0] ), sizeof( "STATUS_VOLUME_NOT_UPGRADED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLUME_NOT_UPGRADED")), ("STATUS_VOLUME_NOT_UPGRADED") }, (ULONG)((NTSTATUS)0xC000029CL) }, { { sizeof( "STATUS_REMOTE_STORAGE_NOT_ACTIVE" ) - sizeof( ("STATUS_REMOTE_STORAGE_NOT_ACTIVE")[0] ), sizeof( "STATUS_REMOTE_STORAGE_NOT_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_STORAGE_NOT_ACTIVE")), ("STATUS_REMOTE_STORAGE_NOT_ACTIVE") }, (ULONG)((NTSTATUS)0xC000029DL) }, { { sizeof( "STATUS_REMOTE_STORAGE_MEDIA_ERROR" ) - sizeof( ("STATUS_REMOTE_STORAGE_MEDIA_ERROR")[0] ), sizeof( "STATUS_REMOTE_STORAGE_MEDIA_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_STORAGE_MEDIA_ERROR")), ("STATUS_REMOTE_STORAGE_MEDIA_ERROR") }, (ULONG)((NTSTATUS)0xC000029EL) }, { { sizeof( "STATUS_NO_TRACKING_SERVICE" ) - sizeof( ("STATUS_NO_TRACKING_SERVICE")[0] ), sizeof( "STATUS_NO_TRACKING_SERVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_TRACKING_SERVICE")), ("STATUS_NO_TRACKING_SERVICE") }, (ULONG)((NTSTATUS)0xC000029FL) }, { { sizeof( "STATUS_SERVER_SID_MISMATCH" ) - sizeof( ("STATUS_SERVER_SID_MISMATCH")[0] ), sizeof( "STATUS_SERVER_SID_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVER_SID_MISMATCH")), ("STATUS_SERVER_SID_MISMATCH") }, (ULONG)((NTSTATUS)0xC00002A0L) }, { { sizeof( "STATUS_DS_NO_ATTRIBUTE_OR_VALUE" ) - sizeof( ("STATUS_DS_NO_ATTRIBUTE_OR_VALUE")[0] ), sizeof( "STATUS_DS_NO_ATTRIBUTE_OR_VALUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NO_ATTRIBUTE_OR_VALUE")), ("STATUS_DS_NO_ATTRIBUTE_OR_VALUE") }, (ULONG)((NTSTATUS)0xC00002A1L) }, { { sizeof( "STATUS_DS_INVALID_ATTRIBUTE_SYNTAX" ) - sizeof( ("STATUS_DS_INVALID_ATTRIBUTE_SYNTAX")[0] ), sizeof( "STATUS_DS_INVALID_ATTRIBUTE_SYNTAX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_INVALID_ATTRIBUTE_SYNTAX")), ("STATUS_DS_INVALID_ATTRIBUTE_SYNTAX") }, (ULONG)((NTSTATUS)0xC00002A2L) }, { { sizeof( "STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED" ) - sizeof( ("STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED")[0] ), sizeof( "STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED")), ("STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED") }, (ULONG)((NTSTATUS)0xC00002A3L) }, { { sizeof( "STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS" ) - sizeof( ("STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS")[0] ), sizeof( "STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS")), ("STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS") }, (ULONG)((NTSTATUS)0xC00002A4L) }, { { sizeof( "STATUS_DS_BUSY" ) - sizeof( ("STATUS_DS_BUSY")[0] ), sizeof( "STATUS_DS_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_BUSY")), ("STATUS_DS_BUSY") }, (ULONG)((NTSTATUS)0xC00002A5L) }, { { sizeof( "STATUS_DS_UNAVAILABLE" ) - sizeof( ("STATUS_DS_UNAVAILABLE")[0] ), sizeof( "STATUS_DS_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_UNAVAILABLE")), ("STATUS_DS_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC00002A6L) }, { { sizeof( "STATUS_DS_NO_RIDS_ALLOCATED" ) - sizeof( ("STATUS_DS_NO_RIDS_ALLOCATED")[0] ), sizeof( "STATUS_DS_NO_RIDS_ALLOCATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NO_RIDS_ALLOCATED")), ("STATUS_DS_NO_RIDS_ALLOCATED") }, (ULONG)((NTSTATUS)0xC00002A7L) }, { { sizeof( "STATUS_DS_NO_MORE_RIDS" ) - sizeof( ("STATUS_DS_NO_MORE_RIDS")[0] ), sizeof( "STATUS_DS_NO_MORE_RIDS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NO_MORE_RIDS")), ("STATUS_DS_NO_MORE_RIDS") }, (ULONG)((NTSTATUS)0xC00002A8L) }, { { sizeof( "STATUS_DS_INCORRECT_ROLE_OWNER" ) - sizeof( ("STATUS_DS_INCORRECT_ROLE_OWNER")[0] ), sizeof( "STATUS_DS_INCORRECT_ROLE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_INCORRECT_ROLE_OWNER")), ("STATUS_DS_INCORRECT_ROLE_OWNER") }, (ULONG)((NTSTATUS)0xC00002A9L) }, { { sizeof( "STATUS_DS_RIDMGR_INIT_ERROR" ) - sizeof( ("STATUS_DS_RIDMGR_INIT_ERROR")[0] ), sizeof( "STATUS_DS_RIDMGR_INIT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_RIDMGR_INIT_ERROR")), ("STATUS_DS_RIDMGR_INIT_ERROR") }, (ULONG)((NTSTATUS)0xC00002AAL) }, { { sizeof( "STATUS_DS_OBJ_CLASS_VIOLATION" ) - sizeof( ("STATUS_DS_OBJ_CLASS_VIOLATION")[0] ), sizeof( "STATUS_DS_OBJ_CLASS_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_OBJ_CLASS_VIOLATION")), ("STATUS_DS_OBJ_CLASS_VIOLATION") }, (ULONG)((NTSTATUS)0xC00002ABL) }, { { sizeof( "STATUS_DS_CANT_ON_NON_LEAF" ) - sizeof( ("STATUS_DS_CANT_ON_NON_LEAF")[0] ), sizeof( "STATUS_DS_CANT_ON_NON_LEAF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_CANT_ON_NON_LEAF")), ("STATUS_DS_CANT_ON_NON_LEAF") }, (ULONG)((NTSTATUS)0xC00002ACL) }, { { sizeof( "STATUS_DS_CANT_ON_RDN" ) - sizeof( ("STATUS_DS_CANT_ON_RDN")[0] ), sizeof( "STATUS_DS_CANT_ON_RDN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_CANT_ON_RDN")), ("STATUS_DS_CANT_ON_RDN") }, (ULONG)((NTSTATUS)0xC00002ADL) }, { { sizeof( "STATUS_DS_CANT_MOD_OBJ_CLASS" ) - sizeof( ("STATUS_DS_CANT_MOD_OBJ_CLASS")[0] ), sizeof( "STATUS_DS_CANT_MOD_OBJ_CLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_CANT_MOD_OBJ_CLASS")), ("STATUS_DS_CANT_MOD_OBJ_CLASS") }, (ULONG)((NTSTATUS)0xC00002AEL) }, { { sizeof( "STATUS_DS_CROSS_DOM_MOVE_FAILED" ) - sizeof( ("STATUS_DS_CROSS_DOM_MOVE_FAILED")[0] ), sizeof( "STATUS_DS_CROSS_DOM_MOVE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_CROSS_DOM_MOVE_FAILED")), ("STATUS_DS_CROSS_DOM_MOVE_FAILED") }, (ULONG)((NTSTATUS)0xC00002AFL) }, { { sizeof( "STATUS_DS_GC_NOT_AVAILABLE" ) - sizeof( ("STATUS_DS_GC_NOT_AVAILABLE")[0] ), sizeof( "STATUS_DS_GC_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_GC_NOT_AVAILABLE")), ("STATUS_DS_GC_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC00002B0L) }, { { sizeof( "STATUS_DIRECTORY_SERVICE_REQUIRED" ) - sizeof( ("STATUS_DIRECTORY_SERVICE_REQUIRED")[0] ), sizeof( "STATUS_DIRECTORY_SERVICE_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DIRECTORY_SERVICE_REQUIRED")), ("STATUS_DIRECTORY_SERVICE_REQUIRED") }, (ULONG)((NTSTATUS)0xC00002B1L) }, { { sizeof( "STATUS_REPARSE_ATTRIBUTE_CONFLICT" ) - sizeof( ("STATUS_REPARSE_ATTRIBUTE_CONFLICT")[0] ), sizeof( "STATUS_REPARSE_ATTRIBUTE_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPARSE_ATTRIBUTE_CONFLICT")), ("STATUS_REPARSE_ATTRIBUTE_CONFLICT") }, (ULONG)((NTSTATUS)0xC00002B2L) }, { { sizeof( "STATUS_CANT_ENABLE_DENY_ONLY" ) - sizeof( ("STATUS_CANT_ENABLE_DENY_ONLY")[0] ), sizeof( "STATUS_CANT_ENABLE_DENY_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_ENABLE_DENY_ONLY")), ("STATUS_CANT_ENABLE_DENY_ONLY") }, (ULONG)((NTSTATUS)0xC00002B3L) }, { { sizeof( "STATUS_FLOAT_MULTIPLE_FAULTS" ) - sizeof( ("STATUS_FLOAT_MULTIPLE_FAULTS")[0] ), sizeof( "STATUS_FLOAT_MULTIPLE_FAULTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_MULTIPLE_FAULTS")), ("STATUS_FLOAT_MULTIPLE_FAULTS") }, (ULONG)((NTSTATUS)0xC00002B4L) }, { { sizeof( "STATUS_FLOAT_MULTIPLE_TRAPS" ) - sizeof( ("STATUS_FLOAT_MULTIPLE_TRAPS")[0] ), sizeof( "STATUS_FLOAT_MULTIPLE_TRAPS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOAT_MULTIPLE_TRAPS")), ("STATUS_FLOAT_MULTIPLE_TRAPS") }, (ULONG)((NTSTATUS)0xC00002B5L) }, { { sizeof( "STATUS_DEVICE_REMOVED" ) - sizeof( ("STATUS_DEVICE_REMOVED")[0] ), sizeof( "STATUS_DEVICE_REMOVED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_REMOVED")), ("STATUS_DEVICE_REMOVED") }, (ULONG)((NTSTATUS)0xC00002B6L) }, { { sizeof( "STATUS_JOURNAL_DELETE_IN_PROGRESS" ) - sizeof( ("STATUS_JOURNAL_DELETE_IN_PROGRESS")[0] ), sizeof( "STATUS_JOURNAL_DELETE_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_JOURNAL_DELETE_IN_PROGRESS")), ("STATUS_JOURNAL_DELETE_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC00002B7L) }, { { sizeof( "STATUS_JOURNAL_NOT_ACTIVE" ) - sizeof( ("STATUS_JOURNAL_NOT_ACTIVE")[0] ), sizeof( "STATUS_JOURNAL_NOT_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_JOURNAL_NOT_ACTIVE")), ("STATUS_JOURNAL_NOT_ACTIVE") }, (ULONG)((NTSTATUS)0xC00002B8L) }, { { sizeof( "STATUS_NOINTERFACE" ) - sizeof( ("STATUS_NOINTERFACE")[0] ), sizeof( "STATUS_NOINTERFACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOINTERFACE")), ("STATUS_NOINTERFACE") }, (ULONG)((NTSTATUS)0xC00002B9L) }, { { sizeof( "STATUS_DS_RIDMGR_DISABLED" ) - sizeof( ("STATUS_DS_RIDMGR_DISABLED")[0] ), sizeof( "STATUS_DS_RIDMGR_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_RIDMGR_DISABLED")), ("STATUS_DS_RIDMGR_DISABLED") }, (ULONG)((NTSTATUS)0xC00002BAL) }, { { sizeof( "STATUS_DS_ADMIN_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_DS_ADMIN_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_DS_ADMIN_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_ADMIN_LIMIT_EXCEEDED")), ("STATUS_DS_ADMIN_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC00002C1L) }, { { sizeof( "STATUS_DRIVER_FAILED_SLEEP" ) - sizeof( ("STATUS_DRIVER_FAILED_SLEEP")[0] ), sizeof( "STATUS_DRIVER_FAILED_SLEEP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_FAILED_SLEEP")), ("STATUS_DRIVER_FAILED_SLEEP") }, (ULONG)((NTSTATUS)0xC00002C2L) }, { { sizeof( "STATUS_MUTUAL_AUTHENTICATION_FAILED" ) - sizeof( ("STATUS_MUTUAL_AUTHENTICATION_FAILED")[0] ), sizeof( "STATUS_MUTUAL_AUTHENTICATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUTUAL_AUTHENTICATION_FAILED")), ("STATUS_MUTUAL_AUTHENTICATION_FAILED") }, (ULONG)((NTSTATUS)0xC00002C3L) }, { { sizeof( "STATUS_CORRUPT_SYSTEM_FILE" ) - sizeof( ("STATUS_CORRUPT_SYSTEM_FILE")[0] ), sizeof( "STATUS_CORRUPT_SYSTEM_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_SYSTEM_FILE")), ("STATUS_CORRUPT_SYSTEM_FILE") }, (ULONG)((NTSTATUS)0xC00002C4L) }, { { sizeof( "STATUS_DATATYPE_MISALIGNMENT_ERROR" ) - sizeof( ("STATUS_DATATYPE_MISALIGNMENT_ERROR")[0] ), sizeof( "STATUS_DATATYPE_MISALIGNMENT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATATYPE_MISALIGNMENT_ERROR")), ("STATUS_DATATYPE_MISALIGNMENT_ERROR") }, (ULONG)((NTSTATUS)0xC00002C5L) }, { { sizeof( "STATUS_WMI_READ_ONLY" ) - sizeof( ("STATUS_WMI_READ_ONLY")[0] ), sizeof( "STATUS_WMI_READ_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_READ_ONLY")), ("STATUS_WMI_READ_ONLY") }, (ULONG)((NTSTATUS)0xC00002C6L) }, { { sizeof( "STATUS_WMI_SET_FAILURE" ) - sizeof( ("STATUS_WMI_SET_FAILURE")[0] ), sizeof( "STATUS_WMI_SET_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_SET_FAILURE")), ("STATUS_WMI_SET_FAILURE") }, (ULONG)((NTSTATUS)0xC00002C7L) }, { { sizeof( "STATUS_COMMITMENT_MINIMUM" ) - sizeof( ("STATUS_COMMITMENT_MINIMUM")[0] ), sizeof( "STATUS_COMMITMENT_MINIMUM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COMMITMENT_MINIMUM")), ("STATUS_COMMITMENT_MINIMUM") }, (ULONG)((NTSTATUS)0xC00002C8L) }, { { sizeof( "STATUS_REG_NAT_CONSUMPTION" ) - sizeof( ("STATUS_REG_NAT_CONSUMPTION")[0] ), sizeof( "STATUS_REG_NAT_CONSUMPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REG_NAT_CONSUMPTION")), ("STATUS_REG_NAT_CONSUMPTION") }, (ULONG)((NTSTATUS)0xC00002C9L) }, { { sizeof( "STATUS_TRANSPORT_FULL" ) - sizeof( ("STATUS_TRANSPORT_FULL")[0] ), sizeof( "STATUS_TRANSPORT_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSPORT_FULL")), ("STATUS_TRANSPORT_FULL") }, (ULONG)((NTSTATUS)0xC00002CAL) }, { { sizeof( "STATUS_DS_SAM_INIT_FAILURE" ) - sizeof( ("STATUS_DS_SAM_INIT_FAILURE")[0] ), sizeof( "STATUS_DS_SAM_INIT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_SAM_INIT_FAILURE")), ("STATUS_DS_SAM_INIT_FAILURE") }, (ULONG)((NTSTATUS)0xC00002CBL) }, { { sizeof( "STATUS_ONLY_IF_CONNECTED" ) - sizeof( ("STATUS_ONLY_IF_CONNECTED")[0] ), sizeof( "STATUS_ONLY_IF_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ONLY_IF_CONNECTED")), ("STATUS_ONLY_IF_CONNECTED") }, (ULONG)((NTSTATUS)0xC00002CCL) }, { { sizeof( "STATUS_DS_SENSITIVE_GROUP_VIOLATION" ) - sizeof( ("STATUS_DS_SENSITIVE_GROUP_VIOLATION")[0] ), sizeof( "STATUS_DS_SENSITIVE_GROUP_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_SENSITIVE_GROUP_VIOLATION")), ("STATUS_DS_SENSITIVE_GROUP_VIOLATION") }, (ULONG)((NTSTATUS)0xC00002CDL) }, { { sizeof( "STATUS_PNP_RESTART_ENUMERATION" ) - sizeof( ("STATUS_PNP_RESTART_ENUMERATION")[0] ), sizeof( "STATUS_PNP_RESTART_ENUMERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_RESTART_ENUMERATION")), ("STATUS_PNP_RESTART_ENUMERATION") }, (ULONG)((NTSTATUS)0xC00002CEL) }, { { sizeof( "STATUS_JOURNAL_ENTRY_DELETED" ) - sizeof( ("STATUS_JOURNAL_ENTRY_DELETED")[0] ), sizeof( "STATUS_JOURNAL_ENTRY_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_JOURNAL_ENTRY_DELETED")), ("STATUS_JOURNAL_ENTRY_DELETED") }, (ULONG)((NTSTATUS)0xC00002CFL) }, { { sizeof( "STATUS_DS_CANT_MOD_PRIMARYGROUPID" ) - sizeof( ("STATUS_DS_CANT_MOD_PRIMARYGROUPID")[0] ), sizeof( "STATUS_DS_CANT_MOD_PRIMARYGROUPID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_CANT_MOD_PRIMARYGROUPID")), ("STATUS_DS_CANT_MOD_PRIMARYGROUPID") }, (ULONG)((NTSTATUS)0xC00002D0L) }, { { sizeof( "STATUS_SYSTEM_IMAGE_BAD_SIGNATURE" ) - sizeof( ("STATUS_SYSTEM_IMAGE_BAD_SIGNATURE")[0] ), sizeof( "STATUS_SYSTEM_IMAGE_BAD_SIGNATURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_IMAGE_BAD_SIGNATURE")), ("STATUS_SYSTEM_IMAGE_BAD_SIGNATURE") }, (ULONG)((NTSTATUS)0xC00002D1L) }, { { sizeof( "STATUS_PNP_REBOOT_REQUIRED" ) - sizeof( ("STATUS_PNP_REBOOT_REQUIRED")[0] ), sizeof( "STATUS_PNP_REBOOT_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_REBOOT_REQUIRED")), ("STATUS_PNP_REBOOT_REQUIRED") }, (ULONG)((NTSTATUS)0xC00002D2L) }, { { sizeof( "STATUS_POWER_STATE_INVALID" ) - sizeof( ("STATUS_POWER_STATE_INVALID")[0] ), sizeof( "STATUS_POWER_STATE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_POWER_STATE_INVALID")), ("STATUS_POWER_STATE_INVALID") }, (ULONG)((NTSTATUS)0xC00002D3L) }, { { sizeof( "STATUS_DS_INVALID_GROUP_TYPE" ) - sizeof( ("STATUS_DS_INVALID_GROUP_TYPE")[0] ), sizeof( "STATUS_DS_INVALID_GROUP_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_INVALID_GROUP_TYPE")), ("STATUS_DS_INVALID_GROUP_TYPE") }, (ULONG)((NTSTATUS)0xC00002D4L) }, { { sizeof( "STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN" ) - sizeof( ("STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN")[0] ), sizeof( "STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN")), ("STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN") }, (ULONG)((NTSTATUS)0xC00002D5L) }, { { sizeof( "STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN" ) - sizeof( ("STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN")[0] ), sizeof( "STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN")), ("STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN") }, (ULONG)((NTSTATUS)0xC00002D6L) }, { { sizeof( "STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER" ) - sizeof( ("STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER")[0] ), sizeof( "STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER")), ("STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER") }, (ULONG)((NTSTATUS)0xC00002D7L) }, { { sizeof( "STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER" ) - sizeof( ("STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER")[0] ), sizeof( "STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER")), ("STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER") }, (ULONG)((NTSTATUS)0xC00002D8L) }, { { sizeof( "STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER" ) - sizeof( ("STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER")[0] ), sizeof( "STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER")), ("STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER") }, (ULONG)((NTSTATUS)0xC00002D9L) }, { { sizeof( "STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER" ) - sizeof( ("STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER")[0] ), sizeof( "STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER")), ("STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER") }, (ULONG)((NTSTATUS)0xC00002DAL) }, { { sizeof( "STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER" ) - sizeof( ("STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER")[0] ), sizeof( "STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER")), ("STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER") }, (ULONG)((NTSTATUS)0xC00002DBL) }, { { sizeof( "STATUS_DS_HAVE_PRIMARY_MEMBERS" ) - sizeof( ("STATUS_DS_HAVE_PRIMARY_MEMBERS")[0] ), sizeof( "STATUS_DS_HAVE_PRIMARY_MEMBERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_HAVE_PRIMARY_MEMBERS")), ("STATUS_DS_HAVE_PRIMARY_MEMBERS") }, (ULONG)((NTSTATUS)0xC00002DCL) }, { { sizeof( "STATUS_WMI_NOT_SUPPORTED" ) - sizeof( ("STATUS_WMI_NOT_SUPPORTED")[0] ), sizeof( "STATUS_WMI_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_NOT_SUPPORTED")), ("STATUS_WMI_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC00002DDL) }, { { sizeof( "STATUS_INSUFFICIENT_POWER" ) - sizeof( ("STATUS_INSUFFICIENT_POWER")[0] ), sizeof( "STATUS_INSUFFICIENT_POWER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSUFFICIENT_POWER")), ("STATUS_INSUFFICIENT_POWER") }, (ULONG)((NTSTATUS)0xC00002DEL) }, { { sizeof( "STATUS_SAM_NEED_BOOTKEY_PASSWORD" ) - sizeof( ("STATUS_SAM_NEED_BOOTKEY_PASSWORD")[0] ), sizeof( "STATUS_SAM_NEED_BOOTKEY_PASSWORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SAM_NEED_BOOTKEY_PASSWORD")), ("STATUS_SAM_NEED_BOOTKEY_PASSWORD") }, (ULONG)((NTSTATUS)0xC00002DFL) }, { { sizeof( "STATUS_SAM_NEED_BOOTKEY_FLOPPY" ) - sizeof( ("STATUS_SAM_NEED_BOOTKEY_FLOPPY")[0] ), sizeof( "STATUS_SAM_NEED_BOOTKEY_FLOPPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SAM_NEED_BOOTKEY_FLOPPY")), ("STATUS_SAM_NEED_BOOTKEY_FLOPPY") }, (ULONG)((NTSTATUS)0xC00002E0L) }, { { sizeof( "STATUS_DS_CANT_START" ) - sizeof( ("STATUS_DS_CANT_START")[0] ), sizeof( "STATUS_DS_CANT_START" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_CANT_START")), ("STATUS_DS_CANT_START") }, (ULONG)((NTSTATUS)0xC00002E1L) }, { { sizeof( "STATUS_DS_INIT_FAILURE" ) - sizeof( ("STATUS_DS_INIT_FAILURE")[0] ), sizeof( "STATUS_DS_INIT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_INIT_FAILURE")), ("STATUS_DS_INIT_FAILURE") }, (ULONG)((NTSTATUS)0xC00002E2L) }, { { sizeof( "STATUS_SAM_INIT_FAILURE" ) - sizeof( ("STATUS_SAM_INIT_FAILURE")[0] ), sizeof( "STATUS_SAM_INIT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SAM_INIT_FAILURE")), ("STATUS_SAM_INIT_FAILURE") }, (ULONG)((NTSTATUS)0xC00002E3L) }, { { sizeof( "STATUS_DS_GC_REQUIRED" ) - sizeof( ("STATUS_DS_GC_REQUIRED")[0] ), sizeof( "STATUS_DS_GC_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_GC_REQUIRED")), ("STATUS_DS_GC_REQUIRED") }, (ULONG)((NTSTATUS)0xC00002E4L) }, { { sizeof( "STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY" ) - sizeof( ("STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY")[0] ), sizeof( "STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY")), ("STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY") }, (ULONG)((NTSTATUS)0xC00002E5L) }, { { sizeof( "STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS" ) - sizeof( ("STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS")[0] ), sizeof( "STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS")), ("STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS") }, (ULONG)((NTSTATUS)0xC00002E6L) }, { { sizeof( "STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED")), ("STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC00002E7L) }, { { sizeof( "STATUS_MULTIPLE_FAULT_VIOLATION" ) - sizeof( ("STATUS_MULTIPLE_FAULT_VIOLATION")[0] ), sizeof( "STATUS_MULTIPLE_FAULT_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MULTIPLE_FAULT_VIOLATION")), ("STATUS_MULTIPLE_FAULT_VIOLATION") }, (ULONG)((NTSTATUS)0xC00002E8L) }, { { sizeof( "STATUS_CURRENT_DOMAIN_NOT_ALLOWED" ) - sizeof( ("STATUS_CURRENT_DOMAIN_NOT_ALLOWED")[0] ), sizeof( "STATUS_CURRENT_DOMAIN_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CURRENT_DOMAIN_NOT_ALLOWED")), ("STATUS_CURRENT_DOMAIN_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC00002E9L) }, { { sizeof( "STATUS_CANNOT_MAKE" ) - sizeof( ("STATUS_CANNOT_MAKE")[0] ), sizeof( "STATUS_CANNOT_MAKE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_MAKE")), ("STATUS_CANNOT_MAKE") }, (ULONG)((NTSTATUS)0xC00002EAL) }, { { sizeof( "STATUS_SYSTEM_SHUTDOWN" ) - sizeof( ("STATUS_SYSTEM_SHUTDOWN")[0] ), sizeof( "STATUS_SYSTEM_SHUTDOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_SHUTDOWN")), ("STATUS_SYSTEM_SHUTDOWN") }, (ULONG)((NTSTATUS)0xC00002EBL) }, { { sizeof( "STATUS_DS_INIT_FAILURE_CONSOLE" ) - sizeof( ("STATUS_DS_INIT_FAILURE_CONSOLE")[0] ), sizeof( "STATUS_DS_INIT_FAILURE_CONSOLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_INIT_FAILURE_CONSOLE")), ("STATUS_DS_INIT_FAILURE_CONSOLE") }, (ULONG)((NTSTATUS)0xC00002ECL) }, { { sizeof( "STATUS_DS_SAM_INIT_FAILURE_CONSOLE" ) - sizeof( ("STATUS_DS_SAM_INIT_FAILURE_CONSOLE")[0] ), sizeof( "STATUS_DS_SAM_INIT_FAILURE_CONSOLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_SAM_INIT_FAILURE_CONSOLE")), ("STATUS_DS_SAM_INIT_FAILURE_CONSOLE") }, (ULONG)((NTSTATUS)0xC00002EDL) }, { { sizeof( "STATUS_UNFINISHED_CONTEXT_DELETED" ) - sizeof( ("STATUS_UNFINISHED_CONTEXT_DELETED")[0] ), sizeof( "STATUS_UNFINISHED_CONTEXT_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNFINISHED_CONTEXT_DELETED")), ("STATUS_UNFINISHED_CONTEXT_DELETED") }, (ULONG)((NTSTATUS)0xC00002EEL) }, { { sizeof( "STATUS_NO_TGT_REPLY" ) - sizeof( ("STATUS_NO_TGT_REPLY")[0] ), sizeof( "STATUS_NO_TGT_REPLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_TGT_REPLY")), ("STATUS_NO_TGT_REPLY") }, (ULONG)((NTSTATUS)0xC00002EFL) }, { { sizeof( "STATUS_OBJECTID_NOT_FOUND" ) - sizeof( ("STATUS_OBJECTID_NOT_FOUND")[0] ), sizeof( "STATUS_OBJECTID_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECTID_NOT_FOUND")), ("STATUS_OBJECTID_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC00002F0L) }, { { sizeof( "STATUS_NO_IP_ADDRESSES" ) - sizeof( ("STATUS_NO_IP_ADDRESSES")[0] ), sizeof( "STATUS_NO_IP_ADDRESSES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_IP_ADDRESSES")), ("STATUS_NO_IP_ADDRESSES") }, (ULONG)((NTSTATUS)0xC00002F1L) }, { { sizeof( "STATUS_WRONG_CREDENTIAL_HANDLE" ) - sizeof( ("STATUS_WRONG_CREDENTIAL_HANDLE")[0] ), sizeof( "STATUS_WRONG_CREDENTIAL_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WRONG_CREDENTIAL_HANDLE")), ("STATUS_WRONG_CREDENTIAL_HANDLE") }, (ULONG)((NTSTATUS)0xC00002F2L) }, { { sizeof( "STATUS_CRYPTO_SYSTEM_INVALID" ) - sizeof( ("STATUS_CRYPTO_SYSTEM_INVALID")[0] ), sizeof( "STATUS_CRYPTO_SYSTEM_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CRYPTO_SYSTEM_INVALID")), ("STATUS_CRYPTO_SYSTEM_INVALID") }, (ULONG)((NTSTATUS)0xC00002F3L) }, { { sizeof( "STATUS_MAX_REFERRALS_EXCEEDED" ) - sizeof( ("STATUS_MAX_REFERRALS_EXCEEDED")[0] ), sizeof( "STATUS_MAX_REFERRALS_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MAX_REFERRALS_EXCEEDED")), ("STATUS_MAX_REFERRALS_EXCEEDED") }, (ULONG)((NTSTATUS)0xC00002F4L) }, { { sizeof( "STATUS_MUST_BE_KDC" ) - sizeof( ("STATUS_MUST_BE_KDC")[0] ), sizeof( "STATUS_MUST_BE_KDC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUST_BE_KDC")), ("STATUS_MUST_BE_KDC") }, (ULONG)((NTSTATUS)0xC00002F5L) }, { { sizeof( "STATUS_STRONG_CRYPTO_NOT_SUPPORTED" ) - sizeof( ("STATUS_STRONG_CRYPTO_NOT_SUPPORTED")[0] ), sizeof( "STATUS_STRONG_CRYPTO_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STRONG_CRYPTO_NOT_SUPPORTED")), ("STATUS_STRONG_CRYPTO_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC00002F6L) }, { { sizeof( "STATUS_TOO_MANY_PRINCIPALS" ) - sizeof( ("STATUS_TOO_MANY_PRINCIPALS")[0] ), sizeof( "STATUS_TOO_MANY_PRINCIPALS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_PRINCIPALS")), ("STATUS_TOO_MANY_PRINCIPALS") }, (ULONG)((NTSTATUS)0xC00002F7L) }, { { sizeof( "STATUS_NO_PA_DATA" ) - sizeof( ("STATUS_NO_PA_DATA")[0] ), sizeof( "STATUS_NO_PA_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_PA_DATA")), ("STATUS_NO_PA_DATA") }, (ULONG)((NTSTATUS)0xC00002F8L) }, { { sizeof( "STATUS_PKINIT_NAME_MISMATCH" ) - sizeof( ("STATUS_PKINIT_NAME_MISMATCH")[0] ), sizeof( "STATUS_PKINIT_NAME_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PKINIT_NAME_MISMATCH")), ("STATUS_PKINIT_NAME_MISMATCH") }, (ULONG)((NTSTATUS)0xC00002F9L) }, { { sizeof( "STATUS_SMARTCARD_LOGON_REQUIRED" ) - sizeof( ("STATUS_SMARTCARD_LOGON_REQUIRED")[0] ), sizeof( "STATUS_SMARTCARD_LOGON_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_LOGON_REQUIRED")), ("STATUS_SMARTCARD_LOGON_REQUIRED") }, (ULONG)((NTSTATUS)0xC00002FAL) }, { { sizeof( "STATUS_KDC_INVALID_REQUEST" ) - sizeof( ("STATUS_KDC_INVALID_REQUEST")[0] ), sizeof( "STATUS_KDC_INVALID_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KDC_INVALID_REQUEST")), ("STATUS_KDC_INVALID_REQUEST") }, (ULONG)((NTSTATUS)0xC00002FBL) }, { { sizeof( "STATUS_KDC_UNABLE_TO_REFER" ) - sizeof( ("STATUS_KDC_UNABLE_TO_REFER")[0] ), sizeof( "STATUS_KDC_UNABLE_TO_REFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KDC_UNABLE_TO_REFER")), ("STATUS_KDC_UNABLE_TO_REFER") }, (ULONG)((NTSTATUS)0xC00002FCL) }, { { sizeof( "STATUS_KDC_UNKNOWN_ETYPE" ) - sizeof( ("STATUS_KDC_UNKNOWN_ETYPE")[0] ), sizeof( "STATUS_KDC_UNKNOWN_ETYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KDC_UNKNOWN_ETYPE")), ("STATUS_KDC_UNKNOWN_ETYPE") }, (ULONG)((NTSTATUS)0xC00002FDL) }, { { sizeof( "STATUS_SHUTDOWN_IN_PROGRESS" ) - sizeof( ("STATUS_SHUTDOWN_IN_PROGRESS")[0] ), sizeof( "STATUS_SHUTDOWN_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHUTDOWN_IN_PROGRESS")), ("STATUS_SHUTDOWN_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC00002FEL) }, { { sizeof( "STATUS_SERVER_SHUTDOWN_IN_PROGRESS" ) - sizeof( ("STATUS_SERVER_SHUTDOWN_IN_PROGRESS")[0] ), sizeof( "STATUS_SERVER_SHUTDOWN_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVER_SHUTDOWN_IN_PROGRESS")), ("STATUS_SERVER_SHUTDOWN_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC00002FFL) }, { { sizeof( "STATUS_NOT_SUPPORTED_ON_SBS" ) - sizeof( ("STATUS_NOT_SUPPORTED_ON_SBS")[0] ), sizeof( "STATUS_NOT_SUPPORTED_ON_SBS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SUPPORTED_ON_SBS")), ("STATUS_NOT_SUPPORTED_ON_SBS") }, (ULONG)((NTSTATUS)0xC0000300L) }, { { sizeof( "STATUS_WMI_GUID_DISCONNECTED" ) - sizeof( ("STATUS_WMI_GUID_DISCONNECTED")[0] ), sizeof( "STATUS_WMI_GUID_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_GUID_DISCONNECTED")), ("STATUS_WMI_GUID_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC0000301L) }, { { sizeof( "STATUS_WMI_ALREADY_DISABLED" ) - sizeof( ("STATUS_WMI_ALREADY_DISABLED")[0] ), sizeof( "STATUS_WMI_ALREADY_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_ALREADY_DISABLED")), ("STATUS_WMI_ALREADY_DISABLED") }, (ULONG)((NTSTATUS)0xC0000302L) }, { { sizeof( "STATUS_WMI_ALREADY_ENABLED" ) - sizeof( ("STATUS_WMI_ALREADY_ENABLED")[0] ), sizeof( "STATUS_WMI_ALREADY_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WMI_ALREADY_ENABLED")), ("STATUS_WMI_ALREADY_ENABLED") }, (ULONG)((NTSTATUS)0xC0000303L) }, { { sizeof( "STATUS_MFT_TOO_FRAGMENTED" ) - sizeof( ("STATUS_MFT_TOO_FRAGMENTED")[0] ), sizeof( "STATUS_MFT_TOO_FRAGMENTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MFT_TOO_FRAGMENTED")), ("STATUS_MFT_TOO_FRAGMENTED") }, (ULONG)((NTSTATUS)0xC0000304L) }, { { sizeof( "STATUS_COPY_PROTECTION_FAILURE" ) - sizeof( ("STATUS_COPY_PROTECTION_FAILURE")[0] ), sizeof( "STATUS_COPY_PROTECTION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COPY_PROTECTION_FAILURE")), ("STATUS_COPY_PROTECTION_FAILURE") }, (ULONG)((NTSTATUS)0xC0000305L) }, { { sizeof( "STATUS_CSS_AUTHENTICATION_FAILURE" ) - sizeof( ("STATUS_CSS_AUTHENTICATION_FAILURE")[0] ), sizeof( "STATUS_CSS_AUTHENTICATION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSS_AUTHENTICATION_FAILURE")), ("STATUS_CSS_AUTHENTICATION_FAILURE") }, (ULONG)((NTSTATUS)0xC0000306L) }, { { sizeof( "STATUS_CSS_KEY_NOT_PRESENT" ) - sizeof( ("STATUS_CSS_KEY_NOT_PRESENT")[0] ), sizeof( "STATUS_CSS_KEY_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSS_KEY_NOT_PRESENT")), ("STATUS_CSS_KEY_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC0000307L) }, { { sizeof( "STATUS_CSS_KEY_NOT_ESTABLISHED" ) - sizeof( ("STATUS_CSS_KEY_NOT_ESTABLISHED")[0] ), sizeof( "STATUS_CSS_KEY_NOT_ESTABLISHED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSS_KEY_NOT_ESTABLISHED")), ("STATUS_CSS_KEY_NOT_ESTABLISHED") }, (ULONG)((NTSTATUS)0xC0000308L) }, { { sizeof( "STATUS_CSS_SCRAMBLED_SECTOR" ) - sizeof( ("STATUS_CSS_SCRAMBLED_SECTOR")[0] ), sizeof( "STATUS_CSS_SCRAMBLED_SECTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSS_SCRAMBLED_SECTOR")), ("STATUS_CSS_SCRAMBLED_SECTOR") }, (ULONG)((NTSTATUS)0xC0000309L) }, { { sizeof( "STATUS_CSS_REGION_MISMATCH" ) - sizeof( ("STATUS_CSS_REGION_MISMATCH")[0] ), sizeof( "STATUS_CSS_REGION_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSS_REGION_MISMATCH")), ("STATUS_CSS_REGION_MISMATCH") }, (ULONG)((NTSTATUS)0xC000030AL) }, { { sizeof( "STATUS_CSS_RESETS_EXHAUSTED" ) - sizeof( ("STATUS_CSS_RESETS_EXHAUSTED")[0] ), sizeof( "STATUS_CSS_RESETS_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSS_RESETS_EXHAUSTED")), ("STATUS_CSS_RESETS_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC000030BL) }, { { sizeof( "STATUS_PASSWORD_CHANGE_REQUIRED" ) - sizeof( ("STATUS_PASSWORD_CHANGE_REQUIRED")[0] ), sizeof( "STATUS_PASSWORD_CHANGE_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PASSWORD_CHANGE_REQUIRED")), ("STATUS_PASSWORD_CHANGE_REQUIRED") }, (ULONG)((NTSTATUS)0xC000030CL) }, { { sizeof( "STATUS_PKINIT_FAILURE" ) - sizeof( ("STATUS_PKINIT_FAILURE")[0] ), sizeof( "STATUS_PKINIT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PKINIT_FAILURE")), ("STATUS_PKINIT_FAILURE") }, (ULONG)((NTSTATUS)0xC0000320L) }, { { sizeof( "STATUS_SMARTCARD_SUBSYSTEM_FAILURE" ) - sizeof( ("STATUS_SMARTCARD_SUBSYSTEM_FAILURE")[0] ), sizeof( "STATUS_SMARTCARD_SUBSYSTEM_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_SUBSYSTEM_FAILURE")), ("STATUS_SMARTCARD_SUBSYSTEM_FAILURE") }, (ULONG)((NTSTATUS)0xC0000321L) }, { { sizeof( "STATUS_NO_KERB_KEY" ) - sizeof( ("STATUS_NO_KERB_KEY")[0] ), sizeof( "STATUS_NO_KERB_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_KERB_KEY")), ("STATUS_NO_KERB_KEY") }, (ULONG)((NTSTATUS)0xC0000322L) }, { { sizeof( "STATUS_HOST_DOWN" ) - sizeof( ("STATUS_HOST_DOWN")[0] ), sizeof( "STATUS_HOST_DOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HOST_DOWN")), ("STATUS_HOST_DOWN") }, (ULONG)((NTSTATUS)0xC0000350L) }, { { sizeof( "STATUS_UNSUPPORTED_PREAUTH" ) - sizeof( ("STATUS_UNSUPPORTED_PREAUTH")[0] ), sizeof( "STATUS_UNSUPPORTED_PREAUTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNSUPPORTED_PREAUTH")), ("STATUS_UNSUPPORTED_PREAUTH") }, (ULONG)((NTSTATUS)0xC0000351L) }, { { sizeof( "STATUS_EFS_ALG_BLOB_TOO_BIG" ) - sizeof( ("STATUS_EFS_ALG_BLOB_TOO_BIG")[0] ), sizeof( "STATUS_EFS_ALG_BLOB_TOO_BIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EFS_ALG_BLOB_TOO_BIG")), ("STATUS_EFS_ALG_BLOB_TOO_BIG") }, (ULONG)((NTSTATUS)0xC0000352L) }, { { sizeof( "STATUS_PORT_NOT_SET" ) - sizeof( ("STATUS_PORT_NOT_SET")[0] ), sizeof( "STATUS_PORT_NOT_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_NOT_SET")), ("STATUS_PORT_NOT_SET") }, (ULONG)((NTSTATUS)0xC0000353L) }, { { sizeof( "STATUS_DEBUGGER_INACTIVE" ) - sizeof( ("STATUS_DEBUGGER_INACTIVE")[0] ), sizeof( "STATUS_DEBUGGER_INACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEBUGGER_INACTIVE")), ("STATUS_DEBUGGER_INACTIVE") }, (ULONG)((NTSTATUS)0xC0000354L) }, { { sizeof( "STATUS_DS_VERSION_CHECK_FAILURE" ) - sizeof( ("STATUS_DS_VERSION_CHECK_FAILURE")[0] ), sizeof( "STATUS_DS_VERSION_CHECK_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_VERSION_CHECK_FAILURE")), ("STATUS_DS_VERSION_CHECK_FAILURE") }, (ULONG)((NTSTATUS)0xC0000355L) }, { { sizeof( "STATUS_AUDITING_DISABLED" ) - sizeof( ("STATUS_AUDITING_DISABLED")[0] ), sizeof( "STATUS_AUDITING_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AUDITING_DISABLED")), ("STATUS_AUDITING_DISABLED") }, (ULONG)((NTSTATUS)0xC0000356L) }, { { sizeof( "STATUS_PRENT4_MACHINE_ACCOUNT" ) - sizeof( ("STATUS_PRENT4_MACHINE_ACCOUNT")[0] ), sizeof( "STATUS_PRENT4_MACHINE_ACCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PRENT4_MACHINE_ACCOUNT")), ("STATUS_PRENT4_MACHINE_ACCOUNT") }, (ULONG)((NTSTATUS)0xC0000357L) }, { { sizeof( "STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER" ) - sizeof( ("STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER")[0] ), sizeof( "STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER")), ("STATUS_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER") }, (ULONG)((NTSTATUS)0xC0000358L) }, { { sizeof( "STATUS_INVALID_IMAGE_WIN_32" ) - sizeof( ("STATUS_INVALID_IMAGE_WIN_32")[0] ), sizeof( "STATUS_INVALID_IMAGE_WIN_32" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_WIN_32")), ("STATUS_INVALID_IMAGE_WIN_32") }, (ULONG)((NTSTATUS)0xC0000359L) }, { { sizeof( "STATUS_INVALID_IMAGE_WIN_64" ) - sizeof( ("STATUS_INVALID_IMAGE_WIN_64")[0] ), sizeof( "STATUS_INVALID_IMAGE_WIN_64" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_WIN_64")), ("STATUS_INVALID_IMAGE_WIN_64") }, (ULONG)((NTSTATUS)0xC000035AL) }, { { sizeof( "STATUS_BAD_BINDINGS" ) - sizeof( ("STATUS_BAD_BINDINGS")[0] ), sizeof( "STATUS_BAD_BINDINGS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_BINDINGS")), ("STATUS_BAD_BINDINGS") }, (ULONG)((NTSTATUS)0xC000035BL) }, { { sizeof( "STATUS_NETWORK_SESSION_EXPIRED" ) - sizeof( ("STATUS_NETWORK_SESSION_EXPIRED")[0] ), sizeof( "STATUS_NETWORK_SESSION_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_SESSION_EXPIRED")), ("STATUS_NETWORK_SESSION_EXPIRED") }, (ULONG)((NTSTATUS)0xC000035CL) }, { { sizeof( "STATUS_APPHELP_BLOCK" ) - sizeof( ("STATUS_APPHELP_BLOCK")[0] ), sizeof( "STATUS_APPHELP_BLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APPHELP_BLOCK")), ("STATUS_APPHELP_BLOCK") }, (ULONG)((NTSTATUS)0xC000035DL) }, { { sizeof( "STATUS_ALL_SIDS_FILTERED" ) - sizeof( ("STATUS_ALL_SIDS_FILTERED")[0] ), sizeof( "STATUS_ALL_SIDS_FILTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALL_SIDS_FILTERED")), ("STATUS_ALL_SIDS_FILTERED") }, (ULONG)((NTSTATUS)0xC000035EL) }, { { sizeof( "STATUS_NOT_SAFE_MODE_DRIVER" ) - sizeof( ("STATUS_NOT_SAFE_MODE_DRIVER")[0] ), sizeof( "STATUS_NOT_SAFE_MODE_DRIVER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SAFE_MODE_DRIVER")), ("STATUS_NOT_SAFE_MODE_DRIVER") }, (ULONG)((NTSTATUS)0xC000035FL) }, { { sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT" ) - sizeof( ("STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT")[0] ), sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT")), ("STATUS_ACCESS_DISABLED_BY_POLICY_DEFAULT") }, (ULONG)((NTSTATUS)0xC0000361L) }, { { sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_PATH" ) - sizeof( ("STATUS_ACCESS_DISABLED_BY_POLICY_PATH")[0] ), sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_PATH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_DISABLED_BY_POLICY_PATH")), ("STATUS_ACCESS_DISABLED_BY_POLICY_PATH") }, (ULONG)((NTSTATUS)0xC0000362L) }, { { sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER" ) - sizeof( ("STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER")[0] ), sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER")), ("STATUS_ACCESS_DISABLED_BY_POLICY_PUBLISHER") }, (ULONG)((NTSTATUS)0xC0000363L) }, { { sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_OTHER" ) - sizeof( ("STATUS_ACCESS_DISABLED_BY_POLICY_OTHER")[0] ), sizeof( "STATUS_ACCESS_DISABLED_BY_POLICY_OTHER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_DISABLED_BY_POLICY_OTHER")), ("STATUS_ACCESS_DISABLED_BY_POLICY_OTHER") }, (ULONG)((NTSTATUS)0xC0000364L) }, { { sizeof( "STATUS_FAILED_DRIVER_ENTRY" ) - sizeof( ("STATUS_FAILED_DRIVER_ENTRY")[0] ), sizeof( "STATUS_FAILED_DRIVER_ENTRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FAILED_DRIVER_ENTRY")), ("STATUS_FAILED_DRIVER_ENTRY") }, (ULONG)((NTSTATUS)0xC0000365L) }, { { sizeof( "STATUS_DEVICE_ENUMERATION_ERROR" ) - sizeof( ("STATUS_DEVICE_ENUMERATION_ERROR")[0] ), sizeof( "STATUS_DEVICE_ENUMERATION_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_ENUMERATION_ERROR")), ("STATUS_DEVICE_ENUMERATION_ERROR") }, (ULONG)((NTSTATUS)0xC0000366L) }, { { sizeof( "STATUS_MOUNT_POINT_NOT_RESOLVED" ) - sizeof( ("STATUS_MOUNT_POINT_NOT_RESOLVED")[0] ), sizeof( "STATUS_MOUNT_POINT_NOT_RESOLVED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MOUNT_POINT_NOT_RESOLVED")), ("STATUS_MOUNT_POINT_NOT_RESOLVED") }, (ULONG)((NTSTATUS)0xC0000368L) }, { { sizeof( "STATUS_INVALID_DEVICE_OBJECT_PARAMETER" ) - sizeof( ("STATUS_INVALID_DEVICE_OBJECT_PARAMETER")[0] ), sizeof( "STATUS_INVALID_DEVICE_OBJECT_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_DEVICE_OBJECT_PARAMETER")), ("STATUS_INVALID_DEVICE_OBJECT_PARAMETER") }, (ULONG)((NTSTATUS)0xC0000369L) }, { { sizeof( "STATUS_MCA_OCCURED" ) - sizeof( ("STATUS_MCA_OCCURED")[0] ), sizeof( "STATUS_MCA_OCCURED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MCA_OCCURED")), ("STATUS_MCA_OCCURED") }, (ULONG)((NTSTATUS)0xC000036AL) }, { { sizeof( "STATUS_DRIVER_BLOCKED_CRITICAL" ) - sizeof( ("STATUS_DRIVER_BLOCKED_CRITICAL")[0] ), sizeof( "STATUS_DRIVER_BLOCKED_CRITICAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_BLOCKED_CRITICAL")), ("STATUS_DRIVER_BLOCKED_CRITICAL") }, (ULONG)((NTSTATUS)0xC000036BL) }, { { sizeof( "STATUS_DRIVER_BLOCKED" ) - sizeof( ("STATUS_DRIVER_BLOCKED")[0] ), sizeof( "STATUS_DRIVER_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_BLOCKED")), ("STATUS_DRIVER_BLOCKED") }, (ULONG)((NTSTATUS)0xC000036CL) }, { { sizeof( "STATUS_DRIVER_DATABASE_ERROR" ) - sizeof( ("STATUS_DRIVER_DATABASE_ERROR")[0] ), sizeof( "STATUS_DRIVER_DATABASE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_DATABASE_ERROR")), ("STATUS_DRIVER_DATABASE_ERROR") }, (ULONG)((NTSTATUS)0xC000036DL) }, { { sizeof( "STATUS_SYSTEM_HIVE_TOO_LARGE" ) - sizeof( ("STATUS_SYSTEM_HIVE_TOO_LARGE")[0] ), sizeof( "STATUS_SYSTEM_HIVE_TOO_LARGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_HIVE_TOO_LARGE")), ("STATUS_SYSTEM_HIVE_TOO_LARGE") }, (ULONG)((NTSTATUS)0xC000036EL) }, { { sizeof( "STATUS_INVALID_IMPORT_OF_NON_DLL" ) - sizeof( ("STATUS_INVALID_IMPORT_OF_NON_DLL")[0] ), sizeof( "STATUS_INVALID_IMPORT_OF_NON_DLL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMPORT_OF_NON_DLL")), ("STATUS_INVALID_IMPORT_OF_NON_DLL") }, (ULONG)((NTSTATUS)0xC000036FL) }, { { sizeof( "STATUS_DS_SHUTTING_DOWN" ) - sizeof( ("STATUS_DS_SHUTTING_DOWN")[0] ), sizeof( "STATUS_DS_SHUTTING_DOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_SHUTTING_DOWN")), ("STATUS_DS_SHUTTING_DOWN") }, (ULONG)((NTSTATUS)0x40000370L) }, { { sizeof( "STATUS_NO_SECRETS" ) - sizeof( ("STATUS_NO_SECRETS")[0] ), sizeof( "STATUS_NO_SECRETS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SECRETS")), ("STATUS_NO_SECRETS") }, (ULONG)((NTSTATUS)0xC0000371L) }, { { sizeof( "STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY" ) - sizeof( ("STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY")[0] ), sizeof( "STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY")), ("STATUS_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY") }, (ULONG)((NTSTATUS)0xC0000372L) }, { { sizeof( "STATUS_FAILED_STACK_SWITCH" ) - sizeof( ("STATUS_FAILED_STACK_SWITCH")[0] ), sizeof( "STATUS_FAILED_STACK_SWITCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FAILED_STACK_SWITCH")), ("STATUS_FAILED_STACK_SWITCH") }, (ULONG)((NTSTATUS)0xC0000373L) }, { { sizeof( "STATUS_HEAP_CORRUPTION" ) - sizeof( ("STATUS_HEAP_CORRUPTION")[0] ), sizeof( "STATUS_HEAP_CORRUPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HEAP_CORRUPTION")), ("STATUS_HEAP_CORRUPTION") }, (ULONG)((NTSTATUS)0xC0000374L) }, { { sizeof( "STATUS_SMARTCARD_WRONG_PIN" ) - sizeof( ("STATUS_SMARTCARD_WRONG_PIN")[0] ), sizeof( "STATUS_SMARTCARD_WRONG_PIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_WRONG_PIN")), ("STATUS_SMARTCARD_WRONG_PIN") }, (ULONG)((NTSTATUS)0xC0000380L) }, { { sizeof( "STATUS_SMARTCARD_CARD_BLOCKED" ) - sizeof( ("STATUS_SMARTCARD_CARD_BLOCKED")[0] ), sizeof( "STATUS_SMARTCARD_CARD_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_CARD_BLOCKED")), ("STATUS_SMARTCARD_CARD_BLOCKED") }, (ULONG)((NTSTATUS)0xC0000381L) }, { { sizeof( "STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED" ) - sizeof( ("STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED")[0] ), sizeof( "STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED")), ("STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED") }, (ULONG)((NTSTATUS)0xC0000382L) }, { { sizeof( "STATUS_SMARTCARD_NO_CARD" ) - sizeof( ("STATUS_SMARTCARD_NO_CARD")[0] ), sizeof( "STATUS_SMARTCARD_NO_CARD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_NO_CARD")), ("STATUS_SMARTCARD_NO_CARD") }, (ULONG)((NTSTATUS)0xC0000383L) }, { { sizeof( "STATUS_SMARTCARD_NO_KEY_CONTAINER" ) - sizeof( ("STATUS_SMARTCARD_NO_KEY_CONTAINER")[0] ), sizeof( "STATUS_SMARTCARD_NO_KEY_CONTAINER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_NO_KEY_CONTAINER")), ("STATUS_SMARTCARD_NO_KEY_CONTAINER") }, (ULONG)((NTSTATUS)0xC0000384L) }, { { sizeof( "STATUS_SMARTCARD_NO_CERTIFICATE" ) - sizeof( ("STATUS_SMARTCARD_NO_CERTIFICATE")[0] ), sizeof( "STATUS_SMARTCARD_NO_CERTIFICATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_NO_CERTIFICATE")), ("STATUS_SMARTCARD_NO_CERTIFICATE") }, (ULONG)((NTSTATUS)0xC0000385L) }, { { sizeof( "STATUS_SMARTCARD_NO_KEYSET" ) - sizeof( ("STATUS_SMARTCARD_NO_KEYSET")[0] ), sizeof( "STATUS_SMARTCARD_NO_KEYSET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_NO_KEYSET")), ("STATUS_SMARTCARD_NO_KEYSET") }, (ULONG)((NTSTATUS)0xC0000386L) }, { { sizeof( "STATUS_SMARTCARD_IO_ERROR" ) - sizeof( ("STATUS_SMARTCARD_IO_ERROR")[0] ), sizeof( "STATUS_SMARTCARD_IO_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_IO_ERROR")), ("STATUS_SMARTCARD_IO_ERROR") }, (ULONG)((NTSTATUS)0xC0000387L) }, { { sizeof( "STATUS_DOWNGRADE_DETECTED" ) - sizeof( ("STATUS_DOWNGRADE_DETECTED")[0] ), sizeof( "STATUS_DOWNGRADE_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DOWNGRADE_DETECTED")), ("STATUS_DOWNGRADE_DETECTED") }, (ULONG)((NTSTATUS)0xC0000388L) }, { { sizeof( "STATUS_SMARTCARD_CERT_REVOKED" ) - sizeof( ("STATUS_SMARTCARD_CERT_REVOKED")[0] ), sizeof( "STATUS_SMARTCARD_CERT_REVOKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_CERT_REVOKED")), ("STATUS_SMARTCARD_CERT_REVOKED") }, (ULONG)((NTSTATUS)0xC0000389L) }, { { sizeof( "STATUS_ISSUING_CA_UNTRUSTED" ) - sizeof( ("STATUS_ISSUING_CA_UNTRUSTED")[0] ), sizeof( "STATUS_ISSUING_CA_UNTRUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ISSUING_CA_UNTRUSTED")), ("STATUS_ISSUING_CA_UNTRUSTED") }, (ULONG)((NTSTATUS)0xC000038AL) }, { { sizeof( "STATUS_REVOCATION_OFFLINE_C" ) - sizeof( ("STATUS_REVOCATION_OFFLINE_C")[0] ), sizeof( "STATUS_REVOCATION_OFFLINE_C" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REVOCATION_OFFLINE_C")), ("STATUS_REVOCATION_OFFLINE_C") }, (ULONG)((NTSTATUS)0xC000038BL) }, { { sizeof( "STATUS_PKINIT_CLIENT_FAILURE" ) - sizeof( ("STATUS_PKINIT_CLIENT_FAILURE")[0] ), sizeof( "STATUS_PKINIT_CLIENT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PKINIT_CLIENT_FAILURE")), ("STATUS_PKINIT_CLIENT_FAILURE") }, (ULONG)((NTSTATUS)0xC000038CL) }, { { sizeof( "STATUS_SMARTCARD_CERT_EXPIRED" ) - sizeof( ("STATUS_SMARTCARD_CERT_EXPIRED")[0] ), sizeof( "STATUS_SMARTCARD_CERT_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_CERT_EXPIRED")), ("STATUS_SMARTCARD_CERT_EXPIRED") }, (ULONG)((NTSTATUS)0xC000038DL) }, { { sizeof( "STATUS_DRIVER_FAILED_PRIOR_UNLOAD" ) - sizeof( ("STATUS_DRIVER_FAILED_PRIOR_UNLOAD")[0] ), sizeof( "STATUS_DRIVER_FAILED_PRIOR_UNLOAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_FAILED_PRIOR_UNLOAD")), ("STATUS_DRIVER_FAILED_PRIOR_UNLOAD") }, (ULONG)((NTSTATUS)0xC000038EL) }, { { sizeof( "STATUS_SMARTCARD_SILENT_CONTEXT" ) - sizeof( ("STATUS_SMARTCARD_SILENT_CONTEXT")[0] ), sizeof( "STATUS_SMARTCARD_SILENT_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMARTCARD_SILENT_CONTEXT")), ("STATUS_SMARTCARD_SILENT_CONTEXT") }, (ULONG)((NTSTATUS)0xC000038FL) }, { { sizeof( "STATUS_PER_USER_TRUST_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_PER_USER_TRUST_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_PER_USER_TRUST_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PER_USER_TRUST_QUOTA_EXCEEDED")), ("STATUS_PER_USER_TRUST_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000401L) }, { { sizeof( "STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED")), ("STATUS_ALL_USER_TRUST_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000402L) }, { { sizeof( "STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED")), ("STATUS_USER_DELETE_TRUST_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000403L) }, { { sizeof( "STATUS_DS_NAME_NOT_UNIQUE" ) - sizeof( ("STATUS_DS_NAME_NOT_UNIQUE")[0] ), sizeof( "STATUS_DS_NAME_NOT_UNIQUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_NAME_NOT_UNIQUE")), ("STATUS_DS_NAME_NOT_UNIQUE") }, (ULONG)((NTSTATUS)0xC0000404L) }, { { sizeof( "STATUS_DS_DUPLICATE_ID_FOUND" ) - sizeof( ("STATUS_DS_DUPLICATE_ID_FOUND")[0] ), sizeof( "STATUS_DS_DUPLICATE_ID_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_DUPLICATE_ID_FOUND")), ("STATUS_DS_DUPLICATE_ID_FOUND") }, (ULONG)((NTSTATUS)0xC0000405L) }, { { sizeof( "STATUS_DS_GROUP_CONVERSION_ERROR" ) - sizeof( ("STATUS_DS_GROUP_CONVERSION_ERROR")[0] ), sizeof( "STATUS_DS_GROUP_CONVERSION_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_GROUP_CONVERSION_ERROR")), ("STATUS_DS_GROUP_CONVERSION_ERROR") }, (ULONG)((NTSTATUS)0xC0000406L) }, { { sizeof( "STATUS_VOLSNAP_PREPARE_HIBERNATE" ) - sizeof( ("STATUS_VOLSNAP_PREPARE_HIBERNATE")[0] ), sizeof( "STATUS_VOLSNAP_PREPARE_HIBERNATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLSNAP_PREPARE_HIBERNATE")), ("STATUS_VOLSNAP_PREPARE_HIBERNATE") }, (ULONG)((NTSTATUS)0xC0000407L) }, { { sizeof( "STATUS_USER2USER_REQUIRED" ) - sizeof( ("STATUS_USER2USER_REQUIRED")[0] ), sizeof( "STATUS_USER2USER_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_USER2USER_REQUIRED")), ("STATUS_USER2USER_REQUIRED") }, (ULONG)((NTSTATUS)0xC0000408L) }, { { sizeof( "STATUS_STACK_BUFFER_OVERRUN" ) - sizeof( ("STATUS_STACK_BUFFER_OVERRUN")[0] ), sizeof( "STATUS_STACK_BUFFER_OVERRUN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STACK_BUFFER_OVERRUN")), ("STATUS_STACK_BUFFER_OVERRUN") }, (ULONG)((NTSTATUS)0xC0000409L) }, { { sizeof( "STATUS_NO_S4U_PROT_SUPPORT" ) - sizeof( ("STATUS_NO_S4U_PROT_SUPPORT")[0] ), sizeof( "STATUS_NO_S4U_PROT_SUPPORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_S4U_PROT_SUPPORT")), ("STATUS_NO_S4U_PROT_SUPPORT") }, (ULONG)((NTSTATUS)0xC000040AL) }, { { sizeof( "STATUS_CROSSREALM_DELEGATION_FAILURE" ) - sizeof( ("STATUS_CROSSREALM_DELEGATION_FAILURE")[0] ), sizeof( "STATUS_CROSSREALM_DELEGATION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CROSSREALM_DELEGATION_FAILURE")), ("STATUS_CROSSREALM_DELEGATION_FAILURE") }, (ULONG)((NTSTATUS)0xC000040BL) }, { { sizeof( "STATUS_REVOCATION_OFFLINE_KDC" ) - sizeof( ("STATUS_REVOCATION_OFFLINE_KDC")[0] ), sizeof( "STATUS_REVOCATION_OFFLINE_KDC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REVOCATION_OFFLINE_KDC")), ("STATUS_REVOCATION_OFFLINE_KDC") }, (ULONG)((NTSTATUS)0xC000040CL) }, { { sizeof( "STATUS_ISSUING_CA_UNTRUSTED_KDC" ) - sizeof( ("STATUS_ISSUING_CA_UNTRUSTED_KDC")[0] ), sizeof( "STATUS_ISSUING_CA_UNTRUSTED_KDC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ISSUING_CA_UNTRUSTED_KDC")), ("STATUS_ISSUING_CA_UNTRUSTED_KDC") }, (ULONG)((NTSTATUS)0xC000040DL) }, { { sizeof( "STATUS_KDC_CERT_EXPIRED" ) - sizeof( ("STATUS_KDC_CERT_EXPIRED")[0] ), sizeof( "STATUS_KDC_CERT_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KDC_CERT_EXPIRED")), ("STATUS_KDC_CERT_EXPIRED") }, (ULONG)((NTSTATUS)0xC000040EL) }, { { sizeof( "STATUS_KDC_CERT_REVOKED" ) - sizeof( ("STATUS_KDC_CERT_REVOKED")[0] ), sizeof( "STATUS_KDC_CERT_REVOKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_KDC_CERT_REVOKED")), ("STATUS_KDC_CERT_REVOKED") }, (ULONG)((NTSTATUS)0xC000040FL) }, { { sizeof( "STATUS_PARAMETER_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_PARAMETER_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_PARAMETER_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PARAMETER_QUOTA_EXCEEDED")), ("STATUS_PARAMETER_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000410L) }, { { sizeof( "STATUS_HIBERNATION_FAILURE" ) - sizeof( ("STATUS_HIBERNATION_FAILURE")[0] ), sizeof( "STATUS_HIBERNATION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HIBERNATION_FAILURE")), ("STATUS_HIBERNATION_FAILURE") }, (ULONG)((NTSTATUS)0xC0000411L) }, { { sizeof( "STATUS_DELAY_LOAD_FAILED" ) - sizeof( ("STATUS_DELAY_LOAD_FAILED")[0] ), sizeof( "STATUS_DELAY_LOAD_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DELAY_LOAD_FAILED")), ("STATUS_DELAY_LOAD_FAILED") }, (ULONG)((NTSTATUS)0xC0000412L) }, { { sizeof( "STATUS_AUTHENTICATION_FIREWALL_FAILED" ) - sizeof( ("STATUS_AUTHENTICATION_FIREWALL_FAILED")[0] ), sizeof( "STATUS_AUTHENTICATION_FIREWALL_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AUTHENTICATION_FIREWALL_FAILED")), ("STATUS_AUTHENTICATION_FIREWALL_FAILED") }, (ULONG)((NTSTATUS)0xC0000413L) }, { { sizeof( "STATUS_VDM_DISALLOWED" ) - sizeof( ("STATUS_VDM_DISALLOWED")[0] ), sizeof( "STATUS_VDM_DISALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VDM_DISALLOWED")), ("STATUS_VDM_DISALLOWED") }, (ULONG)((NTSTATUS)0xC0000414L) }, { { sizeof( "STATUS_HUNG_DISPLAY_DRIVER_THREAD" ) - sizeof( ("STATUS_HUNG_DISPLAY_DRIVER_THREAD")[0] ), sizeof( "STATUS_HUNG_DISPLAY_DRIVER_THREAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HUNG_DISPLAY_DRIVER_THREAD")), ("STATUS_HUNG_DISPLAY_DRIVER_THREAD") }, (ULONG)((NTSTATUS)0xC0000415L) }, { { sizeof( "STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE" ) - sizeof( ("STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE")[0] ), sizeof( "STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE")), ("STATUS_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE") }, (ULONG)((NTSTATUS)0xC0000416L) }, { { sizeof( "STATUS_INVALID_CRUNTIME_PARAMETER" ) - sizeof( ("STATUS_INVALID_CRUNTIME_PARAMETER")[0] ), sizeof( "STATUS_INVALID_CRUNTIME_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_CRUNTIME_PARAMETER")), ("STATUS_INVALID_CRUNTIME_PARAMETER") }, (ULONG)((NTSTATUS)0xC0000417L) }, { { sizeof( "STATUS_NTLM_BLOCKED" ) - sizeof( ("STATUS_NTLM_BLOCKED")[0] ), sizeof( "STATUS_NTLM_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NTLM_BLOCKED")), ("STATUS_NTLM_BLOCKED") }, (ULONG)((NTSTATUS)0xC0000418L) }, { { sizeof( "STATUS_DS_SRC_SID_EXISTS_IN_FOREST" ) - sizeof( ("STATUS_DS_SRC_SID_EXISTS_IN_FOREST")[0] ), sizeof( "STATUS_DS_SRC_SID_EXISTS_IN_FOREST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_SRC_SID_EXISTS_IN_FOREST")), ("STATUS_DS_SRC_SID_EXISTS_IN_FOREST") }, (ULONG)((NTSTATUS)0xC0000419L) }, { { sizeof( "STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST" ) - sizeof( ("STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST")[0] ), sizeof( "STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST")), ("STATUS_DS_DOMAIN_NAME_EXISTS_IN_FOREST") }, (ULONG)((NTSTATUS)0xC000041AL) }, { { sizeof( "STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST" ) - sizeof( ("STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST")[0] ), sizeof( "STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST")), ("STATUS_DS_FLAT_NAME_EXISTS_IN_FOREST") }, (ULONG)((NTSTATUS)0xC000041BL) }, { { sizeof( "STATUS_INVALID_USER_PRINCIPAL_NAME" ) - sizeof( ("STATUS_INVALID_USER_PRINCIPAL_NAME")[0] ), sizeof( "STATUS_INVALID_USER_PRINCIPAL_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_USER_PRINCIPAL_NAME")), ("STATUS_INVALID_USER_PRINCIPAL_NAME") }, (ULONG)((NTSTATUS)0xC000041CL) }, { { sizeof( "STATUS_FATAL_USER_CALLBACK_EXCEPTION" ) - sizeof( ("STATUS_FATAL_USER_CALLBACK_EXCEPTION")[0] ), sizeof( "STATUS_FATAL_USER_CALLBACK_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FATAL_USER_CALLBACK_EXCEPTION")), ("STATUS_FATAL_USER_CALLBACK_EXCEPTION") }, (ULONG)((NTSTATUS)0xC000041DL) }, { { sizeof( "STATUS_ASSERTION_FAILURE" ) - sizeof( ("STATUS_ASSERTION_FAILURE")[0] ), sizeof( "STATUS_ASSERTION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ASSERTION_FAILURE")), ("STATUS_ASSERTION_FAILURE") }, (ULONG)((NTSTATUS)0xC0000420L) }, { { sizeof( "STATUS_VERIFIER_STOP" ) - sizeof( ("STATUS_VERIFIER_STOP")[0] ), sizeof( "STATUS_VERIFIER_STOP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VERIFIER_STOP")), ("STATUS_VERIFIER_STOP") }, (ULONG)((NTSTATUS)0xC0000421L) }, { { sizeof( "STATUS_CALLBACK_POP_STACK" ) - sizeof( ("STATUS_CALLBACK_POP_STACK")[0] ), sizeof( "STATUS_CALLBACK_POP_STACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_POP_STACK")), ("STATUS_CALLBACK_POP_STACK") }, (ULONG)((NTSTATUS)0xC0000423L) }, { { sizeof( "STATUS_INCOMPATIBLE_DRIVER_BLOCKED" ) - sizeof( ("STATUS_INCOMPATIBLE_DRIVER_BLOCKED")[0] ), sizeof( "STATUS_INCOMPATIBLE_DRIVER_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INCOMPATIBLE_DRIVER_BLOCKED")), ("STATUS_INCOMPATIBLE_DRIVER_BLOCKED") }, (ULONG)((NTSTATUS)0xC0000424L) }, { { sizeof( "STATUS_HIVE_UNLOADED" ) - sizeof( ("STATUS_HIVE_UNLOADED")[0] ), sizeof( "STATUS_HIVE_UNLOADED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HIVE_UNLOADED")), ("STATUS_HIVE_UNLOADED") }, (ULONG)((NTSTATUS)0xC0000425L) }, { { sizeof( "STATUS_COMPRESSION_DISABLED" ) - sizeof( ("STATUS_COMPRESSION_DISABLED")[0] ), sizeof( "STATUS_COMPRESSION_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COMPRESSION_DISABLED")), ("STATUS_COMPRESSION_DISABLED") }, (ULONG)((NTSTATUS)0xC0000426L) }, { { sizeof( "STATUS_FILE_SYSTEM_LIMITATION" ) - sizeof( ("STATUS_FILE_SYSTEM_LIMITATION")[0] ), sizeof( "STATUS_FILE_SYSTEM_LIMITATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_SYSTEM_LIMITATION")), ("STATUS_FILE_SYSTEM_LIMITATION") }, (ULONG)((NTSTATUS)0xC0000427L) }, { { sizeof( "STATUS_INVALID_IMAGE_HASH" ) - sizeof( ("STATUS_INVALID_IMAGE_HASH")[0] ), sizeof( "STATUS_INVALID_IMAGE_HASH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IMAGE_HASH")), ("STATUS_INVALID_IMAGE_HASH") }, (ULONG)((NTSTATUS)0xC0000428L) }, { { sizeof( "STATUS_NOT_CAPABLE" ) - sizeof( ("STATUS_NOT_CAPABLE")[0] ), sizeof( "STATUS_NOT_CAPABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_CAPABLE")), ("STATUS_NOT_CAPABLE") }, (ULONG)((NTSTATUS)0xC0000429L) }, { { sizeof( "STATUS_REQUEST_OUT_OF_SEQUENCE" ) - sizeof( ("STATUS_REQUEST_OUT_OF_SEQUENCE")[0] ), sizeof( "STATUS_REQUEST_OUT_OF_SEQUENCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REQUEST_OUT_OF_SEQUENCE")), ("STATUS_REQUEST_OUT_OF_SEQUENCE") }, (ULONG)((NTSTATUS)0xC000042AL) }, { { sizeof( "STATUS_IMPLEMENTATION_LIMIT" ) - sizeof( ("STATUS_IMPLEMENTATION_LIMIT")[0] ), sizeof( "STATUS_IMPLEMENTATION_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMPLEMENTATION_LIMIT")), ("STATUS_IMPLEMENTATION_LIMIT") }, (ULONG)((NTSTATUS)0xC000042BL) }, { { sizeof( "STATUS_ELEVATION_REQUIRED" ) - sizeof( ("STATUS_ELEVATION_REQUIRED")[0] ), sizeof( "STATUS_ELEVATION_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ELEVATION_REQUIRED")), ("STATUS_ELEVATION_REQUIRED") }, (ULONG)((NTSTATUS)0xC000042CL) }, { { sizeof( "STATUS_NO_SECURITY_CONTEXT" ) - sizeof( ("STATUS_NO_SECURITY_CONTEXT")[0] ), sizeof( "STATUS_NO_SECURITY_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SECURITY_CONTEXT")), ("STATUS_NO_SECURITY_CONTEXT") }, (ULONG)((NTSTATUS)0xC000042DL) }, { { sizeof( "STATUS_PKU2U_CERT_FAILURE" ) - sizeof( ("STATUS_PKU2U_CERT_FAILURE")[0] ), sizeof( "STATUS_PKU2U_CERT_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PKU2U_CERT_FAILURE")), ("STATUS_PKU2U_CERT_FAILURE") }, (ULONG)((NTSTATUS)0xC000042FL) }, { { sizeof( "STATUS_BEYOND_VDL" ) - sizeof( ("STATUS_BEYOND_VDL")[0] ), sizeof( "STATUS_BEYOND_VDL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BEYOND_VDL")), ("STATUS_BEYOND_VDL") }, (ULONG)((NTSTATUS)0xC0000432L) }, { { sizeof( "STATUS_ENCOUNTERED_WRITE_IN_PROGRESS" ) - sizeof( ("STATUS_ENCOUNTERED_WRITE_IN_PROGRESS")[0] ), sizeof( "STATUS_ENCOUNTERED_WRITE_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENCOUNTERED_WRITE_IN_PROGRESS")), ("STATUS_ENCOUNTERED_WRITE_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0000433L) }, { { sizeof( "STATUS_PTE_CHANGED" ) - sizeof( ("STATUS_PTE_CHANGED")[0] ), sizeof( "STATUS_PTE_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PTE_CHANGED")), ("STATUS_PTE_CHANGED") }, (ULONG)((NTSTATUS)0xC0000434L) }, { { sizeof( "STATUS_PURGE_FAILED" ) - sizeof( ("STATUS_PURGE_FAILED")[0] ), sizeof( "STATUS_PURGE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PURGE_FAILED")), ("STATUS_PURGE_FAILED") }, (ULONG)((NTSTATUS)0xC0000435L) }, { { sizeof( "STATUS_CRED_REQUIRES_CONFIRMATION" ) - sizeof( ("STATUS_CRED_REQUIRES_CONFIRMATION")[0] ), sizeof( "STATUS_CRED_REQUIRES_CONFIRMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CRED_REQUIRES_CONFIRMATION")), ("STATUS_CRED_REQUIRES_CONFIRMATION") }, (ULONG)((NTSTATUS)0xC0000440L) }, { { sizeof( "STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE" ) - sizeof( ("STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE")[0] ), sizeof( "STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE")), ("STATUS_CS_ENCRYPTION_INVALID_SERVER_RESPONSE") }, (ULONG)((NTSTATUS)0xC0000441L) }, { { sizeof( "STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER" ) - sizeof( ("STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER")[0] ), sizeof( "STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER")), ("STATUS_CS_ENCRYPTION_UNSUPPORTED_SERVER") }, (ULONG)((NTSTATUS)0xC0000442L) }, { { sizeof( "STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE" ) - sizeof( ("STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE")[0] ), sizeof( "STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE")), ("STATUS_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE") }, (ULONG)((NTSTATUS)0xC0000443L) }, { { sizeof( "STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE" ) - sizeof( ("STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE")[0] ), sizeof( "STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE")), ("STATUS_CS_ENCRYPTION_NEW_ENCRYPTED_FILE") }, (ULONG)((NTSTATUS)0xC0000444L) }, { { sizeof( "STATUS_CS_ENCRYPTION_FILE_NOT_CSE" ) - sizeof( ("STATUS_CS_ENCRYPTION_FILE_NOT_CSE")[0] ), sizeof( "STATUS_CS_ENCRYPTION_FILE_NOT_CSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CS_ENCRYPTION_FILE_NOT_CSE")), ("STATUS_CS_ENCRYPTION_FILE_NOT_CSE") }, (ULONG)((NTSTATUS)0xC0000445L) }, { { sizeof( "STATUS_INVALID_LABEL" ) - sizeof( ("STATUS_INVALID_LABEL")[0] ), sizeof( "STATUS_INVALID_LABEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_LABEL")), ("STATUS_INVALID_LABEL") }, (ULONG)((NTSTATUS)0xC0000446L) }, { { sizeof( "STATUS_DRIVER_PROCESS_TERMINATED" ) - sizeof( ("STATUS_DRIVER_PROCESS_TERMINATED")[0] ), sizeof( "STATUS_DRIVER_PROCESS_TERMINATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DRIVER_PROCESS_TERMINATED")), ("STATUS_DRIVER_PROCESS_TERMINATED") }, (ULONG)((NTSTATUS)0xC0000450L) }, { { sizeof( "STATUS_AMBIGUOUS_SYSTEM_DEVICE" ) - sizeof( ("STATUS_AMBIGUOUS_SYSTEM_DEVICE")[0] ), sizeof( "STATUS_AMBIGUOUS_SYSTEM_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AMBIGUOUS_SYSTEM_DEVICE")), ("STATUS_AMBIGUOUS_SYSTEM_DEVICE") }, (ULONG)((NTSTATUS)0xC0000451L) }, { { sizeof( "STATUS_SYSTEM_DEVICE_NOT_FOUND" ) - sizeof( ("STATUS_SYSTEM_DEVICE_NOT_FOUND")[0] ), sizeof( "STATUS_SYSTEM_DEVICE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_DEVICE_NOT_FOUND")), ("STATUS_SYSTEM_DEVICE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000452L) }, { { sizeof( "STATUS_RESTART_BOOT_APPLICATION" ) - sizeof( ("STATUS_RESTART_BOOT_APPLICATION")[0] ), sizeof( "STATUS_RESTART_BOOT_APPLICATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESTART_BOOT_APPLICATION")), ("STATUS_RESTART_BOOT_APPLICATION") }, (ULONG)((NTSTATUS)0xC0000453L) }, { { sizeof( "STATUS_INSUFFICIENT_NVRAM_RESOURCES" ) - sizeof( ("STATUS_INSUFFICIENT_NVRAM_RESOURCES")[0] ), sizeof( "STATUS_INSUFFICIENT_NVRAM_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INSUFFICIENT_NVRAM_RESOURCES")), ("STATUS_INSUFFICIENT_NVRAM_RESOURCES") }, (ULONG)((NTSTATUS)0xC0000454L) }, { { sizeof( "STATUS_INVALID_SESSION" ) - sizeof( ("STATUS_INVALID_SESSION")[0] ), sizeof( "STATUS_INVALID_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SESSION")), ("STATUS_INVALID_SESSION") }, (ULONG)((NTSTATUS)0xC0000455L) }, { { sizeof( "STATUS_THREAD_ALREADY_IN_SESSION" ) - sizeof( ("STATUS_THREAD_ALREADY_IN_SESSION")[0] ), sizeof( "STATUS_THREAD_ALREADY_IN_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREAD_ALREADY_IN_SESSION")), ("STATUS_THREAD_ALREADY_IN_SESSION") }, (ULONG)((NTSTATUS)0xC0000456L) }, { { sizeof( "STATUS_THREAD_NOT_IN_SESSION" ) - sizeof( ("STATUS_THREAD_NOT_IN_SESSION")[0] ), sizeof( "STATUS_THREAD_NOT_IN_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREAD_NOT_IN_SESSION")), ("STATUS_THREAD_NOT_IN_SESSION") }, (ULONG)((NTSTATUS)0xC0000457L) }, { { sizeof( "STATUS_INVALID_WEIGHT" ) - sizeof( ("STATUS_INVALID_WEIGHT")[0] ), sizeof( "STATUS_INVALID_WEIGHT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_WEIGHT")), ("STATUS_INVALID_WEIGHT") }, (ULONG)((NTSTATUS)0xC0000458L) }, { { sizeof( "STATUS_REQUEST_PAUSED" ) - sizeof( ("STATUS_REQUEST_PAUSED")[0] ), sizeof( "STATUS_REQUEST_PAUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REQUEST_PAUSED")), ("STATUS_REQUEST_PAUSED") }, (ULONG)((NTSTATUS)0xC0000459L) }, { { sizeof( "STATUS_NO_RANGES_PROCESSED" ) - sizeof( ("STATUS_NO_RANGES_PROCESSED")[0] ), sizeof( "STATUS_NO_RANGES_PROCESSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_RANGES_PROCESSED")), ("STATUS_NO_RANGES_PROCESSED") }, (ULONG)((NTSTATUS)0xC0000460L) }, { { sizeof( "STATUS_DISK_RESOURCES_EXHAUSTED" ) - sizeof( ("STATUS_DISK_RESOURCES_EXHAUSTED")[0] ), sizeof( "STATUS_DISK_RESOURCES_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_RESOURCES_EXHAUSTED")), ("STATUS_DISK_RESOURCES_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC0000461L) }, { { sizeof( "STATUS_NEEDS_REMEDIATION" ) - sizeof( ("STATUS_NEEDS_REMEDIATION")[0] ), sizeof( "STATUS_NEEDS_REMEDIATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NEEDS_REMEDIATION")), ("STATUS_NEEDS_REMEDIATION") }, (ULONG)((NTSTATUS)0xC0000462L) }, { { sizeof( "STATUS_DEVICE_FEATURE_NOT_SUPPORTED" ) - sizeof( ("STATUS_DEVICE_FEATURE_NOT_SUPPORTED")[0] ), sizeof( "STATUS_DEVICE_FEATURE_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_FEATURE_NOT_SUPPORTED")), ("STATUS_DEVICE_FEATURE_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0000463L) }, { { sizeof( "STATUS_DEVICE_UNREACHABLE" ) - sizeof( ("STATUS_DEVICE_UNREACHABLE")[0] ), sizeof( "STATUS_DEVICE_UNREACHABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_UNREACHABLE")), ("STATUS_DEVICE_UNREACHABLE") }, (ULONG)((NTSTATUS)0xC0000464L) }, { { sizeof( "STATUS_INVALID_TOKEN" ) - sizeof( ("STATUS_INVALID_TOKEN")[0] ), sizeof( "STATUS_INVALID_TOKEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_TOKEN")), ("STATUS_INVALID_TOKEN") }, (ULONG)((NTSTATUS)0xC0000465L) }, { { sizeof( "STATUS_SERVER_UNAVAILABLE" ) - sizeof( ("STATUS_SERVER_UNAVAILABLE")[0] ), sizeof( "STATUS_SERVER_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVER_UNAVAILABLE")), ("STATUS_SERVER_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC0000466L) }, { { sizeof( "STATUS_FILE_NOT_AVAILABLE" ) - sizeof( ("STATUS_FILE_NOT_AVAILABLE")[0] ), sizeof( "STATUS_FILE_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_NOT_AVAILABLE")), ("STATUS_FILE_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC0000467L) }, { { sizeof( "STATUS_DEVICE_INSUFFICIENT_RESOURCES" ) - sizeof( ("STATUS_DEVICE_INSUFFICIENT_RESOURCES")[0] ), sizeof( "STATUS_DEVICE_INSUFFICIENT_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_INSUFFICIENT_RESOURCES")), ("STATUS_DEVICE_INSUFFICIENT_RESOURCES") }, (ULONG)((NTSTATUS)0xC0000468L) }, { { sizeof( "STATUS_PACKAGE_UPDATING" ) - sizeof( ("STATUS_PACKAGE_UPDATING")[0] ), sizeof( "STATUS_PACKAGE_UPDATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PACKAGE_UPDATING")), ("STATUS_PACKAGE_UPDATING") }, (ULONG)((NTSTATUS)0xC0000469L) }, { { sizeof( "STATUS_NOT_READ_FROM_COPY" ) - sizeof( ("STATUS_NOT_READ_FROM_COPY")[0] ), sizeof( "STATUS_NOT_READ_FROM_COPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_READ_FROM_COPY")), ("STATUS_NOT_READ_FROM_COPY") }, (ULONG)((NTSTATUS)0xC000046AL) }, { { sizeof( "STATUS_FT_WRITE_FAILURE" ) - sizeof( ("STATUS_FT_WRITE_FAILURE")[0] ), sizeof( "STATUS_FT_WRITE_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_WRITE_FAILURE")), ("STATUS_FT_WRITE_FAILURE") }, (ULONG)((NTSTATUS)0xC000046BL) }, { { sizeof( "STATUS_FT_DI_SCAN_REQUIRED" ) - sizeof( ("STATUS_FT_DI_SCAN_REQUIRED")[0] ), sizeof( "STATUS_FT_DI_SCAN_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FT_DI_SCAN_REQUIRED")), ("STATUS_FT_DI_SCAN_REQUIRED") }, (ULONG)((NTSTATUS)0xC000046CL) }, { { sizeof( "STATUS_OBJECT_NOT_EXTERNALLY_BACKED" ) - sizeof( ("STATUS_OBJECT_NOT_EXTERNALLY_BACKED")[0] ), sizeof( "STATUS_OBJECT_NOT_EXTERNALLY_BACKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_NOT_EXTERNALLY_BACKED")), ("STATUS_OBJECT_NOT_EXTERNALLY_BACKED") }, (ULONG)((NTSTATUS)0xC000046DL) }, { { sizeof( "STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN" ) - sizeof( ("STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN")[0] ), sizeof( "STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN")), ("STATUS_EXTERNAL_BACKING_PROVIDER_UNKNOWN") }, (ULONG)((NTSTATUS)0xC000046EL) }, { { sizeof( "STATUS_COMPRESSION_NOT_BENEFICIAL" ) - sizeof( ("STATUS_COMPRESSION_NOT_BENEFICIAL")[0] ), sizeof( "STATUS_COMPRESSION_NOT_BENEFICIAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COMPRESSION_NOT_BENEFICIAL")), ("STATUS_COMPRESSION_NOT_BENEFICIAL") }, (ULONG)((NTSTATUS)0xC000046FL) }, { { sizeof( "STATUS_DATA_CHECKSUM_ERROR" ) - sizeof( ("STATUS_DATA_CHECKSUM_ERROR")[0] ), sizeof( "STATUS_DATA_CHECKSUM_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATA_CHECKSUM_ERROR")), ("STATUS_DATA_CHECKSUM_ERROR") }, (ULONG)((NTSTATUS)0xC0000470L) }, { { sizeof( "STATUS_INTERMIXED_KERNEL_EA_OPERATION" ) - sizeof( ("STATUS_INTERMIXED_KERNEL_EA_OPERATION")[0] ), sizeof( "STATUS_INTERMIXED_KERNEL_EA_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INTERMIXED_KERNEL_EA_OPERATION")), ("STATUS_INTERMIXED_KERNEL_EA_OPERATION") }, (ULONG)((NTSTATUS)0xC0000471L) }, { { sizeof( "STATUS_TRIM_READ_ZERO_NOT_SUPPORTED" ) - sizeof( ("STATUS_TRIM_READ_ZERO_NOT_SUPPORTED")[0] ), sizeof( "STATUS_TRIM_READ_ZERO_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRIM_READ_ZERO_NOT_SUPPORTED")), ("STATUS_TRIM_READ_ZERO_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0000472L) }, { { sizeof( "STATUS_TOO_MANY_SEGMENT_DESCRIPTORS" ) - sizeof( ("STATUS_TOO_MANY_SEGMENT_DESCRIPTORS")[0] ), sizeof( "STATUS_TOO_MANY_SEGMENT_DESCRIPTORS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TOO_MANY_SEGMENT_DESCRIPTORS")), ("STATUS_TOO_MANY_SEGMENT_DESCRIPTORS") }, (ULONG)((NTSTATUS)0xC0000473L) }, { { sizeof( "STATUS_INVALID_OFFSET_ALIGNMENT" ) - sizeof( ("STATUS_INVALID_OFFSET_ALIGNMENT")[0] ), sizeof( "STATUS_INVALID_OFFSET_ALIGNMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_OFFSET_ALIGNMENT")), ("STATUS_INVALID_OFFSET_ALIGNMENT") }, (ULONG)((NTSTATUS)0xC0000474L) }, { { sizeof( "STATUS_INVALID_FIELD_IN_PARAMETER_LIST" ) - sizeof( ("STATUS_INVALID_FIELD_IN_PARAMETER_LIST")[0] ), sizeof( "STATUS_INVALID_FIELD_IN_PARAMETER_LIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_FIELD_IN_PARAMETER_LIST")), ("STATUS_INVALID_FIELD_IN_PARAMETER_LIST") }, (ULONG)((NTSTATUS)0xC0000475L) }, { { sizeof( "STATUS_OPERATION_IN_PROGRESS" ) - sizeof( ("STATUS_OPERATION_IN_PROGRESS")[0] ), sizeof( "STATUS_OPERATION_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPERATION_IN_PROGRESS")), ("STATUS_OPERATION_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0000476L) }, { { sizeof( "STATUS_INVALID_INITIATOR_TARGET_PATH" ) - sizeof( ("STATUS_INVALID_INITIATOR_TARGET_PATH")[0] ), sizeof( "STATUS_INVALID_INITIATOR_TARGET_PATH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_INITIATOR_TARGET_PATH")), ("STATUS_INVALID_INITIATOR_TARGET_PATH") }, (ULONG)((NTSTATUS)0xC0000477L) }, { { sizeof( "STATUS_SCRUB_DATA_DISABLED" ) - sizeof( ("STATUS_SCRUB_DATA_DISABLED")[0] ), sizeof( "STATUS_SCRUB_DATA_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SCRUB_DATA_DISABLED")), ("STATUS_SCRUB_DATA_DISABLED") }, (ULONG)((NTSTATUS)0xC0000478L) }, { { sizeof( "STATUS_NOT_REDUNDANT_STORAGE" ) - sizeof( ("STATUS_NOT_REDUNDANT_STORAGE")[0] ), sizeof( "STATUS_NOT_REDUNDANT_STORAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_REDUNDANT_STORAGE")), ("STATUS_NOT_REDUNDANT_STORAGE") }, (ULONG)((NTSTATUS)0xC0000479L) }, { { sizeof( "STATUS_RESIDENT_FILE_NOT_SUPPORTED" ) - sizeof( ("STATUS_RESIDENT_FILE_NOT_SUPPORTED")[0] ), sizeof( "STATUS_RESIDENT_FILE_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESIDENT_FILE_NOT_SUPPORTED")), ("STATUS_RESIDENT_FILE_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000047AL) }, { { sizeof( "STATUS_COMPRESSED_FILE_NOT_SUPPORTED" ) - sizeof( ("STATUS_COMPRESSED_FILE_NOT_SUPPORTED")[0] ), sizeof( "STATUS_COMPRESSED_FILE_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COMPRESSED_FILE_NOT_SUPPORTED")), ("STATUS_COMPRESSED_FILE_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000047BL) }, { { sizeof( "STATUS_DIRECTORY_NOT_SUPPORTED" ) - sizeof( ("STATUS_DIRECTORY_NOT_SUPPORTED")[0] ), sizeof( "STATUS_DIRECTORY_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DIRECTORY_NOT_SUPPORTED")), ("STATUS_DIRECTORY_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000047CL) }, { { sizeof( "STATUS_IO_OPERATION_TIMEOUT" ) - sizeof( ("STATUS_IO_OPERATION_TIMEOUT")[0] ), sizeof( "STATUS_IO_OPERATION_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_OPERATION_TIMEOUT")), ("STATUS_IO_OPERATION_TIMEOUT") }, (ULONG)((NTSTATUS)0xC000047DL) }, { { sizeof( "STATUS_SYSTEM_NEEDS_REMEDIATION" ) - sizeof( ("STATUS_SYSTEM_NEEDS_REMEDIATION")[0] ), sizeof( "STATUS_SYSTEM_NEEDS_REMEDIATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_NEEDS_REMEDIATION")), ("STATUS_SYSTEM_NEEDS_REMEDIATION") }, (ULONG)((NTSTATUS)0xC000047EL) }, { { sizeof( "STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN" ) - sizeof( ("STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN")[0] ), sizeof( "STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN")), ("STATUS_APPX_INTEGRITY_FAILURE_CLR_NGEN") }, (ULONG)((NTSTATUS)0xC000047FL) }, { { sizeof( "STATUS_SHARE_UNAVAILABLE" ) - sizeof( ("STATUS_SHARE_UNAVAILABLE")[0] ), sizeof( "STATUS_SHARE_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SHARE_UNAVAILABLE")), ("STATUS_SHARE_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC0000480L) }, { { sizeof( "STATUS_APISET_NOT_HOSTED" ) - sizeof( ("STATUS_APISET_NOT_HOSTED")[0] ), sizeof( "STATUS_APISET_NOT_HOSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APISET_NOT_HOSTED")), ("STATUS_APISET_NOT_HOSTED") }, (ULONG)((NTSTATUS)0xC0000481L) }, { { sizeof( "STATUS_APISET_NOT_PRESENT" ) - sizeof( ("STATUS_APISET_NOT_PRESENT")[0] ), sizeof( "STATUS_APISET_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APISET_NOT_PRESENT")), ("STATUS_APISET_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC0000482L) }, { { sizeof( "STATUS_DEVICE_HARDWARE_ERROR" ) - sizeof( ("STATUS_DEVICE_HARDWARE_ERROR")[0] ), sizeof( "STATUS_DEVICE_HARDWARE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_HARDWARE_ERROR")), ("STATUS_DEVICE_HARDWARE_ERROR") }, (ULONG)((NTSTATUS)0xC0000483L) }, { { sizeof( "STATUS_FIRMWARE_SLOT_INVALID" ) - sizeof( ("STATUS_FIRMWARE_SLOT_INVALID")[0] ), sizeof( "STATUS_FIRMWARE_SLOT_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FIRMWARE_SLOT_INVALID")), ("STATUS_FIRMWARE_SLOT_INVALID") }, (ULONG)((NTSTATUS)0xC0000484L) }, { { sizeof( "STATUS_FIRMWARE_IMAGE_INVALID" ) - sizeof( ("STATUS_FIRMWARE_IMAGE_INVALID")[0] ), sizeof( "STATUS_FIRMWARE_IMAGE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FIRMWARE_IMAGE_INVALID")), ("STATUS_FIRMWARE_IMAGE_INVALID") }, (ULONG)((NTSTATUS)0xC0000485L) }, { { sizeof( "STATUS_STORAGE_TOPOLOGY_ID_MISMATCH" ) - sizeof( ("STATUS_STORAGE_TOPOLOGY_ID_MISMATCH")[0] ), sizeof( "STATUS_STORAGE_TOPOLOGY_ID_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STORAGE_TOPOLOGY_ID_MISMATCH")), ("STATUS_STORAGE_TOPOLOGY_ID_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000486L) }, { { sizeof( "STATUS_WIM_NOT_BOOTABLE" ) - sizeof( ("STATUS_WIM_NOT_BOOTABLE")[0] ), sizeof( "STATUS_WIM_NOT_BOOTABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WIM_NOT_BOOTABLE")), ("STATUS_WIM_NOT_BOOTABLE") }, (ULONG)((NTSTATUS)0xC0000487L) }, { { sizeof( "STATUS_BLOCKED_BY_PARENTAL_CONTROLS" ) - sizeof( ("STATUS_BLOCKED_BY_PARENTAL_CONTROLS")[0] ), sizeof( "STATUS_BLOCKED_BY_PARENTAL_CONTROLS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BLOCKED_BY_PARENTAL_CONTROLS")), ("STATUS_BLOCKED_BY_PARENTAL_CONTROLS") }, (ULONG)((NTSTATUS)0xC0000488L) }, { { sizeof( "STATUS_NEEDS_REGISTRATION" ) - sizeof( ("STATUS_NEEDS_REGISTRATION")[0] ), sizeof( "STATUS_NEEDS_REGISTRATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NEEDS_REGISTRATION")), ("STATUS_NEEDS_REGISTRATION") }, (ULONG)((NTSTATUS)0xC0000489L) }, { { sizeof( "STATUS_QUOTA_ACTIVITY" ) - sizeof( ("STATUS_QUOTA_ACTIVITY")[0] ), sizeof( "STATUS_QUOTA_ACTIVITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_QUOTA_ACTIVITY")), ("STATUS_QUOTA_ACTIVITY") }, (ULONG)((NTSTATUS)0xC000048AL) }, { { sizeof( "STATUS_CALLBACK_INVOKE_INLINE" ) - sizeof( ("STATUS_CALLBACK_INVOKE_INLINE")[0] ), sizeof( "STATUS_CALLBACK_INVOKE_INLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_INVOKE_INLINE")), ("STATUS_CALLBACK_INVOKE_INLINE") }, (ULONG)((NTSTATUS)0xC000048BL) }, { { sizeof( "STATUS_BLOCK_TOO_MANY_REFERENCES" ) - sizeof( ("STATUS_BLOCK_TOO_MANY_REFERENCES")[0] ), sizeof( "STATUS_BLOCK_TOO_MANY_REFERENCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BLOCK_TOO_MANY_REFERENCES")), ("STATUS_BLOCK_TOO_MANY_REFERENCES") }, (ULONG)((NTSTATUS)0xC000048CL) }, { { sizeof( "STATUS_MARKED_TO_DISALLOW_WRITES" ) - sizeof( ("STATUS_MARKED_TO_DISALLOW_WRITES")[0] ), sizeof( "STATUS_MARKED_TO_DISALLOW_WRITES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MARKED_TO_DISALLOW_WRITES")), ("STATUS_MARKED_TO_DISALLOW_WRITES") }, (ULONG)((NTSTATUS)0xC000048DL) }, { { sizeof( "STATUS_NETWORK_ACCESS_DENIED_EDP" ) - sizeof( ("STATUS_NETWORK_ACCESS_DENIED_EDP")[0] ), sizeof( "STATUS_NETWORK_ACCESS_DENIED_EDP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NETWORK_ACCESS_DENIED_EDP")), ("STATUS_NETWORK_ACCESS_DENIED_EDP") }, (ULONG)((NTSTATUS)0xC000048EL) }, { { sizeof( "STATUS_ENCLAVE_FAILURE" ) - sizeof( ("STATUS_ENCLAVE_FAILURE")[0] ), sizeof( "STATUS_ENCLAVE_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENCLAVE_FAILURE")), ("STATUS_ENCLAVE_FAILURE") }, (ULONG)((NTSTATUS)0xC000048FL) }, { { sizeof( "STATUS_PNP_NO_COMPAT_DRIVERS" ) - sizeof( ("STATUS_PNP_NO_COMPAT_DRIVERS")[0] ), sizeof( "STATUS_PNP_NO_COMPAT_DRIVERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_NO_COMPAT_DRIVERS")), ("STATUS_PNP_NO_COMPAT_DRIVERS") }, (ULONG)((NTSTATUS)0xC0000490L) }, { { sizeof( "STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND" ) - sizeof( ("STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND")[0] ), sizeof( "STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND")), ("STATUS_PNP_DRIVER_PACKAGE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000491L) }, { { sizeof( "STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND" ) - sizeof( ("STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND")[0] ), sizeof( "STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND")), ("STATUS_PNP_DRIVER_CONFIGURATION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0000492L) }, { { sizeof( "STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE" ) - sizeof( ("STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE")[0] ), sizeof( "STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE")), ("STATUS_PNP_DRIVER_CONFIGURATION_INCOMPLETE") }, (ULONG)((NTSTATUS)0xC0000493L) }, { { sizeof( "STATUS_PNP_FUNCTION_DRIVER_REQUIRED" ) - sizeof( ("STATUS_PNP_FUNCTION_DRIVER_REQUIRED")[0] ), sizeof( "STATUS_PNP_FUNCTION_DRIVER_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_FUNCTION_DRIVER_REQUIRED")), ("STATUS_PNP_FUNCTION_DRIVER_REQUIRED") }, (ULONG)((NTSTATUS)0xC0000494L) }, { { sizeof( "STATUS_PNP_DEVICE_CONFIGURATION_PENDING" ) - sizeof( ("STATUS_PNP_DEVICE_CONFIGURATION_PENDING")[0] ), sizeof( "STATUS_PNP_DEVICE_CONFIGURATION_PENDING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_DEVICE_CONFIGURATION_PENDING")), ("STATUS_PNP_DEVICE_CONFIGURATION_PENDING") }, (ULONG)((NTSTATUS)0xC0000495L) }, { { sizeof( "STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL" ) - sizeof( ("STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL")[0] ), sizeof( "STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL")), ("STATUS_DEVICE_HINT_NAME_BUFFER_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC0000496L) }, { { sizeof( "STATUS_PACKAGE_NOT_AVAILABLE" ) - sizeof( ("STATUS_PACKAGE_NOT_AVAILABLE")[0] ), sizeof( "STATUS_PACKAGE_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PACKAGE_NOT_AVAILABLE")), ("STATUS_PACKAGE_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC0000497L) }, { { sizeof( "STATUS_DEVICE_IN_MAINTENANCE" ) - sizeof( ("STATUS_DEVICE_IN_MAINTENANCE")[0] ), sizeof( "STATUS_DEVICE_IN_MAINTENANCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_IN_MAINTENANCE")), ("STATUS_DEVICE_IN_MAINTENANCE") }, (ULONG)((NTSTATUS)0xC0000499L) }, { { sizeof( "STATUS_NOT_SUPPORTED_ON_DAX" ) - sizeof( ("STATUS_NOT_SUPPORTED_ON_DAX")[0] ), sizeof( "STATUS_NOT_SUPPORTED_ON_DAX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SUPPORTED_ON_DAX")), ("STATUS_NOT_SUPPORTED_ON_DAX") }, (ULONG)((NTSTATUS)0xC000049AL) }, { { sizeof( "STATUS_FREE_SPACE_TOO_FRAGMENTED" ) - sizeof( ("STATUS_FREE_SPACE_TOO_FRAGMENTED")[0] ), sizeof( "STATUS_FREE_SPACE_TOO_FRAGMENTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FREE_SPACE_TOO_FRAGMENTED")), ("STATUS_FREE_SPACE_TOO_FRAGMENTED") }, (ULONG)((NTSTATUS)0xC000049BL) }, { { sizeof( "STATUS_DAX_MAPPING_EXISTS" ) - sizeof( ("STATUS_DAX_MAPPING_EXISTS")[0] ), sizeof( "STATUS_DAX_MAPPING_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DAX_MAPPING_EXISTS")), ("STATUS_DAX_MAPPING_EXISTS") }, (ULONG)((NTSTATUS)0xC000049CL) }, { { sizeof( "STATUS_CHILD_PROCESS_BLOCKED" ) - sizeof( ("STATUS_CHILD_PROCESS_BLOCKED")[0] ), sizeof( "STATUS_CHILD_PROCESS_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CHILD_PROCESS_BLOCKED")), ("STATUS_CHILD_PROCESS_BLOCKED") }, (ULONG)((NTSTATUS)0xC000049DL) }, { { sizeof( "STATUS_STORAGE_LOST_DATA_PERSISTENCE" ) - sizeof( ("STATUS_STORAGE_LOST_DATA_PERSISTENCE")[0] ), sizeof( "STATUS_STORAGE_LOST_DATA_PERSISTENCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STORAGE_LOST_DATA_PERSISTENCE")), ("STATUS_STORAGE_LOST_DATA_PERSISTENCE") }, (ULONG)((NTSTATUS)0xC000049EL) }, { { sizeof( "STATUS_INVALID_TASK_NAME" ) - sizeof( ("STATUS_INVALID_TASK_NAME")[0] ), sizeof( "STATUS_INVALID_TASK_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_TASK_NAME")), ("STATUS_INVALID_TASK_NAME") }, (ULONG)((NTSTATUS)0xC0000500L) }, { { sizeof( "STATUS_INVALID_TASK_INDEX" ) - sizeof( ("STATUS_INVALID_TASK_INDEX")[0] ), sizeof( "STATUS_INVALID_TASK_INDEX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_TASK_INDEX")), ("STATUS_INVALID_TASK_INDEX") }, (ULONG)((NTSTATUS)0xC0000501L) }, { { sizeof( "STATUS_THREAD_ALREADY_IN_TASK" ) - sizeof( ("STATUS_THREAD_ALREADY_IN_TASK")[0] ), sizeof( "STATUS_THREAD_ALREADY_IN_TASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREAD_ALREADY_IN_TASK")), ("STATUS_THREAD_ALREADY_IN_TASK") }, (ULONG)((NTSTATUS)0xC0000502L) }, { { sizeof( "STATUS_CALLBACK_BYPASS" ) - sizeof( ("STATUS_CALLBACK_BYPASS")[0] ), sizeof( "STATUS_CALLBACK_BYPASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_BYPASS")), ("STATUS_CALLBACK_BYPASS") }, (ULONG)((NTSTATUS)0xC0000503L) }, { { sizeof( "STATUS_UNDEFINED_SCOPE" ) - sizeof( ("STATUS_UNDEFINED_SCOPE")[0] ), sizeof( "STATUS_UNDEFINED_SCOPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_UNDEFINED_SCOPE")), ("STATUS_UNDEFINED_SCOPE") }, (ULONG)((NTSTATUS)0xC0000504L) }, { { sizeof( "STATUS_INVALID_CAP" ) - sizeof( ("STATUS_INVALID_CAP")[0] ), sizeof( "STATUS_INVALID_CAP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_CAP")), ("STATUS_INVALID_CAP") }, (ULONG)((NTSTATUS)0xC0000505L) }, { { sizeof( "STATUS_NOT_GUI_PROCESS" ) - sizeof( ("STATUS_NOT_GUI_PROCESS")[0] ), sizeof( "STATUS_NOT_GUI_PROCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_GUI_PROCESS")), ("STATUS_NOT_GUI_PROCESS") }, (ULONG)((NTSTATUS)0xC0000506L) }, { { sizeof( "STATUS_DEVICE_HUNG" ) - sizeof( ("STATUS_DEVICE_HUNG")[0] ), sizeof( "STATUS_DEVICE_HUNG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_HUNG")), ("STATUS_DEVICE_HUNG") }, (ULONG)((NTSTATUS)0xC0000507L) }, { { sizeof( "STATUS_CONTAINER_ASSIGNED" ) - sizeof( ("STATUS_CONTAINER_ASSIGNED")[0] ), sizeof( "STATUS_CONTAINER_ASSIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONTAINER_ASSIGNED")), ("STATUS_CONTAINER_ASSIGNED") }, (ULONG)((NTSTATUS)0xC0000508L) }, { { sizeof( "STATUS_JOB_NO_CONTAINER" ) - sizeof( ("STATUS_JOB_NO_CONTAINER")[0] ), sizeof( "STATUS_JOB_NO_CONTAINER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_JOB_NO_CONTAINER")), ("STATUS_JOB_NO_CONTAINER") }, (ULONG)((NTSTATUS)0xC0000509L) }, { { sizeof( "STATUS_DEVICE_UNRESPONSIVE" ) - sizeof( ("STATUS_DEVICE_UNRESPONSIVE")[0] ), sizeof( "STATUS_DEVICE_UNRESPONSIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DEVICE_UNRESPONSIVE")), ("STATUS_DEVICE_UNRESPONSIVE") }, (ULONG)((NTSTATUS)0xC000050AL) }, { { sizeof( "STATUS_REPARSE_POINT_ENCOUNTERED" ) - sizeof( ("STATUS_REPARSE_POINT_ENCOUNTERED")[0] ), sizeof( "STATUS_REPARSE_POINT_ENCOUNTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REPARSE_POINT_ENCOUNTERED")), ("STATUS_REPARSE_POINT_ENCOUNTERED") }, (ULONG)((NTSTATUS)0xC000050BL) }, { { sizeof( "STATUS_FAIL_FAST_EXCEPTION" ) - sizeof( ("STATUS_FAIL_FAST_EXCEPTION")[0] ), sizeof( "STATUS_FAIL_FAST_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FAIL_FAST_EXCEPTION")), ("STATUS_FAIL_FAST_EXCEPTION") }, (ULONG)((NTSTATUS)0xC0000602L) }, { { sizeof( "STATUS_IMAGE_CERT_REVOKED" ) - sizeof( ("STATUS_IMAGE_CERT_REVOKED")[0] ), sizeof( "STATUS_IMAGE_CERT_REVOKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_CERT_REVOKED")), ("STATUS_IMAGE_CERT_REVOKED") }, (ULONG)((NTSTATUS)0xC0000603L) }, { { sizeof( "STATUS_DYNAMIC_CODE_BLOCKED" ) - sizeof( ("STATUS_DYNAMIC_CODE_BLOCKED")[0] ), sizeof( "STATUS_DYNAMIC_CODE_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DYNAMIC_CODE_BLOCKED")), ("STATUS_DYNAMIC_CODE_BLOCKED") }, (ULONG)((NTSTATUS)0xC0000604L) }, { { sizeof( "STATUS_IMAGE_CERT_EXPIRED" ) - sizeof( ("STATUS_IMAGE_CERT_EXPIRED")[0] ), sizeof( "STATUS_IMAGE_CERT_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IMAGE_CERT_EXPIRED")), ("STATUS_IMAGE_CERT_EXPIRED") }, (ULONG)((NTSTATUS)0xC0000605L) }, { { sizeof( "STATUS_PORT_CLOSED" ) - sizeof( ("STATUS_PORT_CLOSED")[0] ), sizeof( "STATUS_PORT_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_CLOSED")), ("STATUS_PORT_CLOSED") }, (ULONG)((NTSTATUS)0xC0000700L) }, { { sizeof( "STATUS_MESSAGE_LOST" ) - sizeof( ("STATUS_MESSAGE_LOST")[0] ), sizeof( "STATUS_MESSAGE_LOST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MESSAGE_LOST")), ("STATUS_MESSAGE_LOST") }, (ULONG)((NTSTATUS)0xC0000701L) }, { { sizeof( "STATUS_INVALID_MESSAGE" ) - sizeof( ("STATUS_INVALID_MESSAGE")[0] ), sizeof( "STATUS_INVALID_MESSAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_MESSAGE")), ("STATUS_INVALID_MESSAGE") }, (ULONG)((NTSTATUS)0xC0000702L) }, { { sizeof( "STATUS_REQUEST_CANCELED" ) - sizeof( ("STATUS_REQUEST_CANCELED")[0] ), sizeof( "STATUS_REQUEST_CANCELED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REQUEST_CANCELED")), ("STATUS_REQUEST_CANCELED") }, (ULONG)((NTSTATUS)0xC0000703L) }, { { sizeof( "STATUS_RECURSIVE_DISPATCH" ) - sizeof( ("STATUS_RECURSIVE_DISPATCH")[0] ), sizeof( "STATUS_RECURSIVE_DISPATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RECURSIVE_DISPATCH")), ("STATUS_RECURSIVE_DISPATCH") }, (ULONG)((NTSTATUS)0xC0000704L) }, { { sizeof( "STATUS_LPC_RECEIVE_BUFFER_EXPECTED" ) - sizeof( ("STATUS_LPC_RECEIVE_BUFFER_EXPECTED")[0] ), sizeof( "STATUS_LPC_RECEIVE_BUFFER_EXPECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LPC_RECEIVE_BUFFER_EXPECTED")), ("STATUS_LPC_RECEIVE_BUFFER_EXPECTED") }, (ULONG)((NTSTATUS)0xC0000705L) }, { { sizeof( "STATUS_LPC_INVALID_CONNECTION_USAGE" ) - sizeof( ("STATUS_LPC_INVALID_CONNECTION_USAGE")[0] ), sizeof( "STATUS_LPC_INVALID_CONNECTION_USAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LPC_INVALID_CONNECTION_USAGE")), ("STATUS_LPC_INVALID_CONNECTION_USAGE") }, (ULONG)((NTSTATUS)0xC0000706L) }, { { sizeof( "STATUS_LPC_REQUESTS_NOT_ALLOWED" ) - sizeof( ("STATUS_LPC_REQUESTS_NOT_ALLOWED")[0] ), sizeof( "STATUS_LPC_REQUESTS_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LPC_REQUESTS_NOT_ALLOWED")), ("STATUS_LPC_REQUESTS_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0000707L) }, { { sizeof( "STATUS_RESOURCE_IN_USE" ) - sizeof( ("STATUS_RESOURCE_IN_USE")[0] ), sizeof( "STATUS_RESOURCE_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_IN_USE")), ("STATUS_RESOURCE_IN_USE") }, (ULONG)((NTSTATUS)0xC0000708L) }, { { sizeof( "STATUS_HARDWARE_MEMORY_ERROR" ) - sizeof( ("STATUS_HARDWARE_MEMORY_ERROR")[0] ), sizeof( "STATUS_HARDWARE_MEMORY_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HARDWARE_MEMORY_ERROR")), ("STATUS_HARDWARE_MEMORY_ERROR") }, (ULONG)((NTSTATUS)0xC0000709L) }, { { sizeof( "STATUS_THREADPOOL_HANDLE_EXCEPTION" ) - sizeof( ("STATUS_THREADPOOL_HANDLE_EXCEPTION")[0] ), sizeof( "STATUS_THREADPOOL_HANDLE_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREADPOOL_HANDLE_EXCEPTION")), ("STATUS_THREADPOOL_HANDLE_EXCEPTION") }, (ULONG)((NTSTATUS)0xC000070AL) }, { { sizeof( "STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED" ) - sizeof( ("STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED")[0] ), sizeof( "STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED")), ("STATUS_THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED") }, (ULONG)((NTSTATUS)0xC000070BL) }, { { sizeof( "STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED" ) - sizeof( ("STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED")[0] ), sizeof( "STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED")), ("STATUS_THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED") }, (ULONG)((NTSTATUS)0xC000070CL) }, { { sizeof( "STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED" ) - sizeof( ("STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED")[0] ), sizeof( "STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED")), ("STATUS_THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED") }, (ULONG)((NTSTATUS)0xC000070DL) }, { { sizeof( "STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED" ) - sizeof( ("STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED")[0] ), sizeof( "STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED")), ("STATUS_THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED") }, (ULONG)((NTSTATUS)0xC000070EL) }, { { sizeof( "STATUS_THREADPOOL_RELEASED_DURING_OPERATION" ) - sizeof( ("STATUS_THREADPOOL_RELEASED_DURING_OPERATION")[0] ), sizeof( "STATUS_THREADPOOL_RELEASED_DURING_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_THREADPOOL_RELEASED_DURING_OPERATION")), ("STATUS_THREADPOOL_RELEASED_DURING_OPERATION") }, (ULONG)((NTSTATUS)0xC000070FL) }, { { sizeof( "STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING" ) - sizeof( ("STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING")), ("STATUS_CALLBACK_RETURNED_WHILE_IMPERSONATING") }, (ULONG)((NTSTATUS)0xC0000710L) }, { { sizeof( "STATUS_APC_RETURNED_WHILE_IMPERSONATING" ) - sizeof( ("STATUS_APC_RETURNED_WHILE_IMPERSONATING")[0] ), sizeof( "STATUS_APC_RETURNED_WHILE_IMPERSONATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APC_RETURNED_WHILE_IMPERSONATING")), ("STATUS_APC_RETURNED_WHILE_IMPERSONATING") }, (ULONG)((NTSTATUS)0xC0000711L) }, { { sizeof( "STATUS_PROCESS_IS_PROTECTED" ) - sizeof( ("STATUS_PROCESS_IS_PROTECTED")[0] ), sizeof( "STATUS_PROCESS_IS_PROTECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROCESS_IS_PROTECTED")), ("STATUS_PROCESS_IS_PROTECTED") }, (ULONG)((NTSTATUS)0xC0000712L) }, { { sizeof( "STATUS_MCA_EXCEPTION" ) - sizeof( ("STATUS_MCA_EXCEPTION")[0] ), sizeof( "STATUS_MCA_EXCEPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MCA_EXCEPTION")), ("STATUS_MCA_EXCEPTION") }, (ULONG)((NTSTATUS)0xC0000713L) }, { { sizeof( "STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE" ) - sizeof( ("STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE")[0] ), sizeof( "STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE")), ("STATUS_CERTIFICATE_MAPPING_NOT_UNIQUE") }, (ULONG)((NTSTATUS)0xC0000714L) }, { { sizeof( "STATUS_SYMLINK_CLASS_DISABLED" ) - sizeof( ("STATUS_SYMLINK_CLASS_DISABLED")[0] ), sizeof( "STATUS_SYMLINK_CLASS_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYMLINK_CLASS_DISABLED")), ("STATUS_SYMLINK_CLASS_DISABLED") }, (ULONG)((NTSTATUS)0xC0000715L) }, { { sizeof( "STATUS_INVALID_IDN_NORMALIZATION" ) - sizeof( ("STATUS_INVALID_IDN_NORMALIZATION")[0] ), sizeof( "STATUS_INVALID_IDN_NORMALIZATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_IDN_NORMALIZATION")), ("STATUS_INVALID_IDN_NORMALIZATION") }, (ULONG)((NTSTATUS)0xC0000716L) }, { { sizeof( "STATUS_NO_UNICODE_TRANSLATION" ) - sizeof( ("STATUS_NO_UNICODE_TRANSLATION")[0] ), sizeof( "STATUS_NO_UNICODE_TRANSLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_UNICODE_TRANSLATION")), ("STATUS_NO_UNICODE_TRANSLATION") }, (ULONG)((NTSTATUS)0xC0000717L) }, { { sizeof( "STATUS_ALREADY_REGISTERED" ) - sizeof( ("STATUS_ALREADY_REGISTERED")[0] ), sizeof( "STATUS_ALREADY_REGISTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ALREADY_REGISTERED")), ("STATUS_ALREADY_REGISTERED") }, (ULONG)((NTSTATUS)0xC0000718L) }, { { sizeof( "STATUS_CONTEXT_MISMATCH" ) - sizeof( ("STATUS_CONTEXT_MISMATCH")[0] ), sizeof( "STATUS_CONTEXT_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONTEXT_MISMATCH")), ("STATUS_CONTEXT_MISMATCH") }, (ULONG)((NTSTATUS)0xC0000719L) }, { { sizeof( "STATUS_PORT_ALREADY_HAS_COMPLETION_LIST" ) - sizeof( ("STATUS_PORT_ALREADY_HAS_COMPLETION_LIST")[0] ), sizeof( "STATUS_PORT_ALREADY_HAS_COMPLETION_LIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PORT_ALREADY_HAS_COMPLETION_LIST")), ("STATUS_PORT_ALREADY_HAS_COMPLETION_LIST") }, (ULONG)((NTSTATUS)0xC000071AL) }, { { sizeof( "STATUS_CALLBACK_RETURNED_THREAD_PRIORITY" ) - sizeof( ("STATUS_CALLBACK_RETURNED_THREAD_PRIORITY")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_THREAD_PRIORITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_THREAD_PRIORITY")), ("STATUS_CALLBACK_RETURNED_THREAD_PRIORITY") }, (ULONG)((NTSTATUS)0xC000071BL) }, { { sizeof( "STATUS_INVALID_THREAD" ) - sizeof( ("STATUS_INVALID_THREAD")[0] ), sizeof( "STATUS_INVALID_THREAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_THREAD")), ("STATUS_INVALID_THREAD") }, (ULONG)((NTSTATUS)0xC000071CL) }, { { sizeof( "STATUS_CALLBACK_RETURNED_TRANSACTION" ) - sizeof( ("STATUS_CALLBACK_RETURNED_TRANSACTION")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_TRANSACTION")), ("STATUS_CALLBACK_RETURNED_TRANSACTION") }, (ULONG)((NTSTATUS)0xC000071DL) }, { { sizeof( "STATUS_CALLBACK_RETURNED_LDR_LOCK" ) - sizeof( ("STATUS_CALLBACK_RETURNED_LDR_LOCK")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_LDR_LOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_LDR_LOCK")), ("STATUS_CALLBACK_RETURNED_LDR_LOCK") }, (ULONG)((NTSTATUS)0xC000071EL) }, { { sizeof( "STATUS_CALLBACK_RETURNED_LANG" ) - sizeof( ("STATUS_CALLBACK_RETURNED_LANG")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_LANG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_LANG")), ("STATUS_CALLBACK_RETURNED_LANG") }, (ULONG)((NTSTATUS)0xC000071FL) }, { { sizeof( "STATUS_CALLBACK_RETURNED_PRI_BACK" ) - sizeof( ("STATUS_CALLBACK_RETURNED_PRI_BACK")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_PRI_BACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_PRI_BACK")), ("STATUS_CALLBACK_RETURNED_PRI_BACK") }, (ULONG)((NTSTATUS)0xC0000720L) }, { { sizeof( "STATUS_CALLBACK_RETURNED_THREAD_AFFINITY" ) - sizeof( ("STATUS_CALLBACK_RETURNED_THREAD_AFFINITY")[0] ), sizeof( "STATUS_CALLBACK_RETURNED_THREAD_AFFINITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CALLBACK_RETURNED_THREAD_AFFINITY")), ("STATUS_CALLBACK_RETURNED_THREAD_AFFINITY") }, (ULONG)((NTSTATUS)0xC0000721L) }, { { sizeof( "STATUS_LPC_HANDLE_COUNT_EXCEEDED" ) - sizeof( ("STATUS_LPC_HANDLE_COUNT_EXCEEDED")[0] ), sizeof( "STATUS_LPC_HANDLE_COUNT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LPC_HANDLE_COUNT_EXCEEDED")), ("STATUS_LPC_HANDLE_COUNT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000722L) }, { { sizeof( "STATUS_DISK_REPAIR_DISABLED" ) - sizeof( ("STATUS_DISK_REPAIR_DISABLED")[0] ), sizeof( "STATUS_DISK_REPAIR_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_REPAIR_DISABLED")), ("STATUS_DISK_REPAIR_DISABLED") }, (ULONG)((NTSTATUS)0xC0000800L) }, { { sizeof( "STATUS_DS_DOMAIN_RENAME_IN_PROGRESS" ) - sizeof( ("STATUS_DS_DOMAIN_RENAME_IN_PROGRESS")[0] ), sizeof( "STATUS_DS_DOMAIN_RENAME_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_DOMAIN_RENAME_IN_PROGRESS")), ("STATUS_DS_DOMAIN_RENAME_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0000801L) }, { { sizeof( "STATUS_DISK_QUOTA_EXCEEDED" ) - sizeof( ("STATUS_DISK_QUOTA_EXCEEDED")[0] ), sizeof( "STATUS_DISK_QUOTA_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_QUOTA_EXCEEDED")), ("STATUS_DISK_QUOTA_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0000802L) }, { { sizeof( "STATUS_DATA_LOST_REPAIR" ) - sizeof( ("STATUS_DATA_LOST_REPAIR")[0] ), sizeof( "STATUS_DATA_LOST_REPAIR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DATA_LOST_REPAIR")), ("STATUS_DATA_LOST_REPAIR") }, (ULONG)((NTSTATUS)0x80000803L) }, { { sizeof( "STATUS_CONTENT_BLOCKED" ) - sizeof( ("STATUS_CONTENT_BLOCKED")[0] ), sizeof( "STATUS_CONTENT_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CONTENT_BLOCKED")), ("STATUS_CONTENT_BLOCKED") }, (ULONG)((NTSTATUS)0xC0000804L) }, { { sizeof( "STATUS_BAD_CLUSTERS" ) - sizeof( ("STATUS_BAD_CLUSTERS")[0] ), sizeof( "STATUS_BAD_CLUSTERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_CLUSTERS")), ("STATUS_BAD_CLUSTERS") }, (ULONG)((NTSTATUS)0xC0000805L) }, { { sizeof( "STATUS_VOLUME_DIRTY" ) - sizeof( ("STATUS_VOLUME_DIRTY")[0] ), sizeof( "STATUS_VOLUME_DIRTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLUME_DIRTY")), ("STATUS_VOLUME_DIRTY") }, (ULONG)((NTSTATUS)0xC0000806L) }, { { sizeof( "STATUS_DISK_REPAIR_REDIRECTED" ) - sizeof( ("STATUS_DISK_REPAIR_REDIRECTED")[0] ), sizeof( "STATUS_DISK_REPAIR_REDIRECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_REPAIR_REDIRECTED")), ("STATUS_DISK_REPAIR_REDIRECTED") }, (ULONG)((NTSTATUS)0x40000807L) }, { { sizeof( "STATUS_DISK_REPAIR_UNSUCCESSFUL" ) - sizeof( ("STATUS_DISK_REPAIR_UNSUCCESSFUL")[0] ), sizeof( "STATUS_DISK_REPAIR_UNSUCCESSFUL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DISK_REPAIR_UNSUCCESSFUL")), ("STATUS_DISK_REPAIR_UNSUCCESSFUL") }, (ULONG)((NTSTATUS)0xC0000808L) }, { { sizeof( "STATUS_CORRUPT_LOG_OVERFULL" ) - sizeof( ("STATUS_CORRUPT_LOG_OVERFULL")[0] ), sizeof( "STATUS_CORRUPT_LOG_OVERFULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_LOG_OVERFULL")), ("STATUS_CORRUPT_LOG_OVERFULL") }, (ULONG)((NTSTATUS)0xC0000809L) }, { { sizeof( "STATUS_CORRUPT_LOG_CORRUPTED" ) - sizeof( ("STATUS_CORRUPT_LOG_CORRUPTED")[0] ), sizeof( "STATUS_CORRUPT_LOG_CORRUPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_LOG_CORRUPTED")), ("STATUS_CORRUPT_LOG_CORRUPTED") }, (ULONG)((NTSTATUS)0xC000080AL) }, { { sizeof( "STATUS_CORRUPT_LOG_UNAVAILABLE" ) - sizeof( ("STATUS_CORRUPT_LOG_UNAVAILABLE")[0] ), sizeof( "STATUS_CORRUPT_LOG_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_LOG_UNAVAILABLE")), ("STATUS_CORRUPT_LOG_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC000080BL) }, { { sizeof( "STATUS_CORRUPT_LOG_DELETED_FULL" ) - sizeof( ("STATUS_CORRUPT_LOG_DELETED_FULL")[0] ), sizeof( "STATUS_CORRUPT_LOG_DELETED_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_LOG_DELETED_FULL")), ("STATUS_CORRUPT_LOG_DELETED_FULL") }, (ULONG)((NTSTATUS)0xC000080CL) }, { { sizeof( "STATUS_CORRUPT_LOG_CLEARED" ) - sizeof( ("STATUS_CORRUPT_LOG_CLEARED")[0] ), sizeof( "STATUS_CORRUPT_LOG_CLEARED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_LOG_CLEARED")), ("STATUS_CORRUPT_LOG_CLEARED") }, (ULONG)((NTSTATUS)0xC000080DL) }, { { sizeof( "STATUS_ORPHAN_NAME_EXHAUSTED" ) - sizeof( ("STATUS_ORPHAN_NAME_EXHAUSTED")[0] ), sizeof( "STATUS_ORPHAN_NAME_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ORPHAN_NAME_EXHAUSTED")), ("STATUS_ORPHAN_NAME_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC000080EL) }, { { sizeof( "STATUS_PROACTIVE_SCAN_IN_PROGRESS" ) - sizeof( ("STATUS_PROACTIVE_SCAN_IN_PROGRESS")[0] ), sizeof( "STATUS_PROACTIVE_SCAN_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROACTIVE_SCAN_IN_PROGRESS")), ("STATUS_PROACTIVE_SCAN_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC000080FL) }, { { sizeof( "STATUS_ENCRYPTED_IO_NOT_POSSIBLE" ) - sizeof( ("STATUS_ENCRYPTED_IO_NOT_POSSIBLE")[0] ), sizeof( "STATUS_ENCRYPTED_IO_NOT_POSSIBLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENCRYPTED_IO_NOT_POSSIBLE")), ("STATUS_ENCRYPTED_IO_NOT_POSSIBLE") }, (ULONG)((NTSTATUS)0xC0000810L) }, { { sizeof( "STATUS_CORRUPT_LOG_UPLEVEL_RECORDS" ) - sizeof( ("STATUS_CORRUPT_LOG_UPLEVEL_RECORDS")[0] ), sizeof( "STATUS_CORRUPT_LOG_UPLEVEL_RECORDS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CORRUPT_LOG_UPLEVEL_RECORDS")), ("STATUS_CORRUPT_LOG_UPLEVEL_RECORDS") }, (ULONG)((NTSTATUS)0xC0000811L) }, { { sizeof( "STATUS_FILE_CHECKED_OUT" ) - sizeof( ("STATUS_FILE_CHECKED_OUT")[0] ), sizeof( "STATUS_FILE_CHECKED_OUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_CHECKED_OUT")), ("STATUS_FILE_CHECKED_OUT") }, (ULONG)((NTSTATUS)0xC0000901L) }, { { sizeof( "STATUS_CHECKOUT_REQUIRED" ) - sizeof( ("STATUS_CHECKOUT_REQUIRED")[0] ), sizeof( "STATUS_CHECKOUT_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CHECKOUT_REQUIRED")), ("STATUS_CHECKOUT_REQUIRED") }, (ULONG)((NTSTATUS)0xC0000902L) }, { { sizeof( "STATUS_BAD_FILE_TYPE" ) - sizeof( ("STATUS_BAD_FILE_TYPE")[0] ), sizeof( "STATUS_BAD_FILE_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_FILE_TYPE")), ("STATUS_BAD_FILE_TYPE") }, (ULONG)((NTSTATUS)0xC0000903L) }, { { sizeof( "STATUS_FILE_TOO_LARGE" ) - sizeof( ("STATUS_FILE_TOO_LARGE")[0] ), sizeof( "STATUS_FILE_TOO_LARGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_TOO_LARGE")), ("STATUS_FILE_TOO_LARGE") }, (ULONG)((NTSTATUS)0xC0000904L) }, { { sizeof( "STATUS_FORMS_AUTH_REQUIRED" ) - sizeof( ("STATUS_FORMS_AUTH_REQUIRED")[0] ), sizeof( "STATUS_FORMS_AUTH_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FORMS_AUTH_REQUIRED")), ("STATUS_FORMS_AUTH_REQUIRED") }, (ULONG)((NTSTATUS)0xC0000905L) }, { { sizeof( "STATUS_VIRUS_INFECTED" ) - sizeof( ("STATUS_VIRUS_INFECTED")[0] ), sizeof( "STATUS_VIRUS_INFECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRUS_INFECTED")), ("STATUS_VIRUS_INFECTED") }, (ULONG)((NTSTATUS)0xC0000906L) }, { { sizeof( "STATUS_VIRUS_DELETED" ) - sizeof( ("STATUS_VIRUS_DELETED")[0] ), sizeof( "STATUS_VIRUS_DELETED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRUS_DELETED")), ("STATUS_VIRUS_DELETED") }, (ULONG)((NTSTATUS)0xC0000907L) }, { { sizeof( "STATUS_BAD_MCFG_TABLE" ) - sizeof( ("STATUS_BAD_MCFG_TABLE")[0] ), sizeof( "STATUS_BAD_MCFG_TABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_MCFG_TABLE")), ("STATUS_BAD_MCFG_TABLE") }, (ULONG)((NTSTATUS)0xC0000908L) }, { { sizeof( "STATUS_CANNOT_BREAK_OPLOCK" ) - sizeof( ("STATUS_CANNOT_BREAK_OPLOCK")[0] ), sizeof( "STATUS_CANNOT_BREAK_OPLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_BREAK_OPLOCK")), ("STATUS_CANNOT_BREAK_OPLOCK") }, (ULONG)((NTSTATUS)0xC0000909L) }, { { sizeof( "STATUS_BAD_KEY" ) - sizeof( ("STATUS_BAD_KEY")[0] ), sizeof( "STATUS_BAD_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_KEY")), ("STATUS_BAD_KEY") }, (ULONG)((NTSTATUS)0xC000090AL) }, { { sizeof( "STATUS_BAD_DATA" ) - sizeof( ("STATUS_BAD_DATA")[0] ), sizeof( "STATUS_BAD_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BAD_DATA")), ("STATUS_BAD_DATA") }, (ULONG)((NTSTATUS)0xC000090BL) }, { { sizeof( "STATUS_NO_KEY" ) - sizeof( ("STATUS_NO_KEY")[0] ), sizeof( "STATUS_NO_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_KEY")), ("STATUS_NO_KEY") }, (ULONG)((NTSTATUS)0xC000090CL) }, { { sizeof( "STATUS_FILE_HANDLE_REVOKED" ) - sizeof( ("STATUS_FILE_HANDLE_REVOKED")[0] ), sizeof( "STATUS_FILE_HANDLE_REVOKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_HANDLE_REVOKED")), ("STATUS_FILE_HANDLE_REVOKED") }, (ULONG)((NTSTATUS)0xC0000910L) }, { { sizeof( "STATUS_WOW_ASSERTION" ) - sizeof( ("STATUS_WOW_ASSERTION")[0] ), sizeof( "STATUS_WOW_ASSERTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WOW_ASSERTION")), ("STATUS_WOW_ASSERTION") }, (ULONG)((NTSTATUS)0xC0009898L) }, { { sizeof( "STATUS_INVALID_SIGNATURE" ) - sizeof( ("STATUS_INVALID_SIGNATURE")[0] ), sizeof( "STATUS_INVALID_SIGNATURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_SIGNATURE")), ("STATUS_INVALID_SIGNATURE") }, (ULONG)((NTSTATUS)0xC000A000L) }, { { sizeof( "STATUS_HMAC_NOT_SUPPORTED" ) - sizeof( ("STATUS_HMAC_NOT_SUPPORTED")[0] ), sizeof( "STATUS_HMAC_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HMAC_NOT_SUPPORTED")), ("STATUS_HMAC_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A001L) }, { { sizeof( "STATUS_AUTH_TAG_MISMATCH" ) - sizeof( ("STATUS_AUTH_TAG_MISMATCH")[0] ), sizeof( "STATUS_AUTH_TAG_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AUTH_TAG_MISMATCH")), ("STATUS_AUTH_TAG_MISMATCH") }, (ULONG)((NTSTATUS)0xC000A002L) }, { { sizeof( "STATUS_INVALID_STATE_TRANSITION" ) - sizeof( ("STATUS_INVALID_STATE_TRANSITION")[0] ), sizeof( "STATUS_INVALID_STATE_TRANSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_STATE_TRANSITION")), ("STATUS_INVALID_STATE_TRANSITION") }, (ULONG)((NTSTATUS)0xC000A003L) }, { { sizeof( "STATUS_INVALID_KERNEL_INFO_VERSION" ) - sizeof( ("STATUS_INVALID_KERNEL_INFO_VERSION")[0] ), sizeof( "STATUS_INVALID_KERNEL_INFO_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_KERNEL_INFO_VERSION")), ("STATUS_INVALID_KERNEL_INFO_VERSION") }, (ULONG)((NTSTATUS)0xC000A004L) }, { { sizeof( "STATUS_INVALID_PEP_INFO_VERSION" ) - sizeof( ("STATUS_INVALID_PEP_INFO_VERSION")[0] ), sizeof( "STATUS_INVALID_PEP_INFO_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PEP_INFO_VERSION")), ("STATUS_INVALID_PEP_INFO_VERSION") }, (ULONG)((NTSTATUS)0xC000A005L) }, { { sizeof( "STATUS_HANDLE_REVOKED" ) - sizeof( ("STATUS_HANDLE_REVOKED")[0] ), sizeof( "STATUS_HANDLE_REVOKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HANDLE_REVOKED")), ("STATUS_HANDLE_REVOKED") }, (ULONG)((NTSTATUS)0xC000A006L) }, { { sizeof( "STATUS_EOF_ON_GHOSTED_RANGE" ) - sizeof( ("STATUS_EOF_ON_GHOSTED_RANGE")[0] ), sizeof( "STATUS_EOF_ON_GHOSTED_RANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EOF_ON_GHOSTED_RANGE")), ("STATUS_EOF_ON_GHOSTED_RANGE") }, (ULONG)((NTSTATUS)0xC000A007L) }, { { sizeof( "STATUS_IPSEC_QUEUE_OVERFLOW" ) - sizeof( ("STATUS_IPSEC_QUEUE_OVERFLOW")[0] ), sizeof( "STATUS_IPSEC_QUEUE_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_QUEUE_OVERFLOW")), ("STATUS_IPSEC_QUEUE_OVERFLOW") }, (ULONG)((NTSTATUS)0xC000A010L) }, { { sizeof( "STATUS_ND_QUEUE_OVERFLOW" ) - sizeof( ("STATUS_ND_QUEUE_OVERFLOW")[0] ), sizeof( "STATUS_ND_QUEUE_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ND_QUEUE_OVERFLOW")), ("STATUS_ND_QUEUE_OVERFLOW") }, (ULONG)((NTSTATUS)0xC000A011L) }, { { sizeof( "STATUS_HOPLIMIT_EXCEEDED" ) - sizeof( ("STATUS_HOPLIMIT_EXCEEDED")[0] ), sizeof( "STATUS_HOPLIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HOPLIMIT_EXCEEDED")), ("STATUS_HOPLIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC000A012L) }, { { sizeof( "STATUS_PROTOCOL_NOT_SUPPORTED" ) - sizeof( ("STATUS_PROTOCOL_NOT_SUPPORTED")[0] ), sizeof( "STATUS_PROTOCOL_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PROTOCOL_NOT_SUPPORTED")), ("STATUS_PROTOCOL_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A013L) }, { { sizeof( "STATUS_FASTPATH_REJECTED" ) - sizeof( ("STATUS_FASTPATH_REJECTED")[0] ), sizeof( "STATUS_FASTPATH_REJECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FASTPATH_REJECTED")), ("STATUS_FASTPATH_REJECTED") }, (ULONG)((NTSTATUS)0xC000A014L) }, { { sizeof( "STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED" ) - sizeof( ("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED")[0] ), sizeof( "STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED")), ("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC000A080L) }, { { sizeof( "STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR" ) - sizeof( ("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR")[0] ), sizeof( "STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR")), ("STATUS_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR") }, (ULONG)((NTSTATUS)0xC000A081L) }, { { sizeof( "STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR" ) - sizeof( ("STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR")[0] ), sizeof( "STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR")), ("STATUS_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR") }, (ULONG)((NTSTATUS)0xC000A082L) }, { { sizeof( "STATUS_XML_PARSE_ERROR" ) - sizeof( ("STATUS_XML_PARSE_ERROR")[0] ), sizeof( "STATUS_XML_PARSE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_XML_PARSE_ERROR")), ("STATUS_XML_PARSE_ERROR") }, (ULONG)((NTSTATUS)0xC000A083L) }, { { sizeof( "STATUS_XMLDSIG_ERROR" ) - sizeof( ("STATUS_XMLDSIG_ERROR")[0] ), sizeof( "STATUS_XMLDSIG_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_XMLDSIG_ERROR")), ("STATUS_XMLDSIG_ERROR") }, (ULONG)((NTSTATUS)0xC000A084L) }, { { sizeof( "STATUS_WRONG_COMPARTMENT" ) - sizeof( ("STATUS_WRONG_COMPARTMENT")[0] ), sizeof( "STATUS_WRONG_COMPARTMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_WRONG_COMPARTMENT")), ("STATUS_WRONG_COMPARTMENT") }, (ULONG)((NTSTATUS)0xC000A085L) }, { { sizeof( "STATUS_AUTHIP_FAILURE" ) - sizeof( ("STATUS_AUTHIP_FAILURE")[0] ), sizeof( "STATUS_AUTHIP_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AUTHIP_FAILURE")), ("STATUS_AUTHIP_FAILURE") }, (ULONG)((NTSTATUS)0xC000A086L) }, { { sizeof( "STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS" ) - sizeof( ("STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS")[0] ), sizeof( "STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS")), ("STATUS_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS") }, (ULONG)((NTSTATUS)0xC000A087L) }, { { sizeof( "STATUS_DS_OID_NOT_FOUND" ) - sizeof( ("STATUS_DS_OID_NOT_FOUND")[0] ), sizeof( "STATUS_DS_OID_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DS_OID_NOT_FOUND")), ("STATUS_DS_OID_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000A088L) }, { { sizeof( "STATUS_INCORRECT_ACCOUNT_TYPE" ) - sizeof( ("STATUS_INCORRECT_ACCOUNT_TYPE")[0] ), sizeof( "STATUS_INCORRECT_ACCOUNT_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INCORRECT_ACCOUNT_TYPE")), ("STATUS_INCORRECT_ACCOUNT_TYPE") }, (ULONG)((NTSTATUS)0xC000A089L) }, { { sizeof( "STATUS_HASH_NOT_SUPPORTED" ) - sizeof( ("STATUS_HASH_NOT_SUPPORTED")[0] ), sizeof( "STATUS_HASH_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HASH_NOT_SUPPORTED")), ("STATUS_HASH_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A100L) }, { { sizeof( "STATUS_HASH_NOT_PRESENT" ) - sizeof( ("STATUS_HASH_NOT_PRESENT")[0] ), sizeof( "STATUS_HASH_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HASH_NOT_PRESENT")), ("STATUS_HASH_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC000A101L) }, { { sizeof( "STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED" ) - sizeof( ("STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED")[0] ), sizeof( "STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED")), ("STATUS_SECONDARY_IC_PROVIDER_NOT_REGISTERED") }, (ULONG)((NTSTATUS)0xC000A121L) }, { { sizeof( "STATUS_GPIO_CLIENT_INFORMATION_INVALID" ) - sizeof( ("STATUS_GPIO_CLIENT_INFORMATION_INVALID")[0] ), sizeof( "STATUS_GPIO_CLIENT_INFORMATION_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GPIO_CLIENT_INFORMATION_INVALID")), ("STATUS_GPIO_CLIENT_INFORMATION_INVALID") }, (ULONG)((NTSTATUS)0xC000A122L) }, { { sizeof( "STATUS_GPIO_VERSION_NOT_SUPPORTED" ) - sizeof( ("STATUS_GPIO_VERSION_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GPIO_VERSION_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GPIO_VERSION_NOT_SUPPORTED")), ("STATUS_GPIO_VERSION_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A123L) }, { { sizeof( "STATUS_GPIO_INVALID_REGISTRATION_PACKET" ) - sizeof( ("STATUS_GPIO_INVALID_REGISTRATION_PACKET")[0] ), sizeof( "STATUS_GPIO_INVALID_REGISTRATION_PACKET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GPIO_INVALID_REGISTRATION_PACKET")), ("STATUS_GPIO_INVALID_REGISTRATION_PACKET") }, (ULONG)((NTSTATUS)0xC000A124L) }, { { sizeof( "STATUS_GPIO_OPERATION_DENIED" ) - sizeof( ("STATUS_GPIO_OPERATION_DENIED")[0] ), sizeof( "STATUS_GPIO_OPERATION_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GPIO_OPERATION_DENIED")), ("STATUS_GPIO_OPERATION_DENIED") }, (ULONG)((NTSTATUS)0xC000A125L) }, { { sizeof( "STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE" ) - sizeof( ("STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE")[0] ), sizeof( "STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE")), ("STATUS_GPIO_INCOMPATIBLE_CONNECT_MODE") }, (ULONG)((NTSTATUS)0xC000A126L) }, { { sizeof( "STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED" ) - sizeof( ("STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED")[0] ), sizeof( "STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED")), ("STATUS_GPIO_INTERRUPT_ALREADY_UNMASKED") }, (ULONG)((NTSTATUS)0x8000A127L) }, { { sizeof( "STATUS_CANNOT_SWITCH_RUNLEVEL" ) - sizeof( ("STATUS_CANNOT_SWITCH_RUNLEVEL")[0] ), sizeof( "STATUS_CANNOT_SWITCH_RUNLEVEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_SWITCH_RUNLEVEL")), ("STATUS_CANNOT_SWITCH_RUNLEVEL") }, (ULONG)((NTSTATUS)0xC000A141L) }, { { sizeof( "STATUS_INVALID_RUNLEVEL_SETTING" ) - sizeof( ("STATUS_INVALID_RUNLEVEL_SETTING")[0] ), sizeof( "STATUS_INVALID_RUNLEVEL_SETTING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_RUNLEVEL_SETTING")), ("STATUS_INVALID_RUNLEVEL_SETTING") }, (ULONG)((NTSTATUS)0xC000A142L) }, { { sizeof( "STATUS_RUNLEVEL_SWITCH_TIMEOUT" ) - sizeof( ("STATUS_RUNLEVEL_SWITCH_TIMEOUT")[0] ), sizeof( "STATUS_RUNLEVEL_SWITCH_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RUNLEVEL_SWITCH_TIMEOUT")), ("STATUS_RUNLEVEL_SWITCH_TIMEOUT") }, (ULONG)((NTSTATUS)0xC000A143L) }, { { sizeof( "STATUS_SERVICES_FAILED_AUTOSTART" ) - sizeof( ("STATUS_SERVICES_FAILED_AUTOSTART")[0] ), sizeof( "STATUS_SERVICES_FAILED_AUTOSTART" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SERVICES_FAILED_AUTOSTART")), ("STATUS_SERVICES_FAILED_AUTOSTART") }, (ULONG)((NTSTATUS)0x4000A144L) }, { { sizeof( "STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT" ) - sizeof( ("STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT")[0] ), sizeof( "STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT")), ("STATUS_RUNLEVEL_SWITCH_AGENT_TIMEOUT") }, (ULONG)((NTSTATUS)0xC000A145L) }, { { sizeof( "STATUS_RUNLEVEL_SWITCH_IN_PROGRESS" ) - sizeof( ("STATUS_RUNLEVEL_SWITCH_IN_PROGRESS")[0] ), sizeof( "STATUS_RUNLEVEL_SWITCH_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RUNLEVEL_SWITCH_IN_PROGRESS")), ("STATUS_RUNLEVEL_SWITCH_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC000A146L) }, { { sizeof( "STATUS_NOT_APPCONTAINER" ) - sizeof( ("STATUS_NOT_APPCONTAINER")[0] ), sizeof( "STATUS_NOT_APPCONTAINER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_APPCONTAINER")), ("STATUS_NOT_APPCONTAINER") }, (ULONG)((NTSTATUS)0xC000A200L) }, { { sizeof( "STATUS_NOT_SUPPORTED_IN_APPCONTAINER" ) - sizeof( ("STATUS_NOT_SUPPORTED_IN_APPCONTAINER")[0] ), sizeof( "STATUS_NOT_SUPPORTED_IN_APPCONTAINER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SUPPORTED_IN_APPCONTAINER")), ("STATUS_NOT_SUPPORTED_IN_APPCONTAINER") }, (ULONG)((NTSTATUS)0xC000A201L) }, { { sizeof( "STATUS_INVALID_PACKAGE_SID_LENGTH" ) - sizeof( ("STATUS_INVALID_PACKAGE_SID_LENGTH")[0] ), sizeof( "STATUS_INVALID_PACKAGE_SID_LENGTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_PACKAGE_SID_LENGTH")), ("STATUS_INVALID_PACKAGE_SID_LENGTH") }, (ULONG)((NTSTATUS)0xC000A202L) }, { { sizeof( "STATUS_APP_DATA_NOT_FOUND" ) - sizeof( ("STATUS_APP_DATA_NOT_FOUND")[0] ), sizeof( "STATUS_APP_DATA_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APP_DATA_NOT_FOUND")), ("STATUS_APP_DATA_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC000A281L) }, { { sizeof( "STATUS_APP_DATA_EXPIRED" ) - sizeof( ("STATUS_APP_DATA_EXPIRED")[0] ), sizeof( "STATUS_APP_DATA_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APP_DATA_EXPIRED")), ("STATUS_APP_DATA_EXPIRED") }, (ULONG)((NTSTATUS)0xC000A282L) }, { { sizeof( "STATUS_APP_DATA_CORRUPT" ) - sizeof( ("STATUS_APP_DATA_CORRUPT")[0] ), sizeof( "STATUS_APP_DATA_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APP_DATA_CORRUPT")), ("STATUS_APP_DATA_CORRUPT") }, (ULONG)((NTSTATUS)0xC000A283L) }, { { sizeof( "STATUS_APP_DATA_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_APP_DATA_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_APP_DATA_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APP_DATA_LIMIT_EXCEEDED")), ("STATUS_APP_DATA_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC000A284L) }, { { sizeof( "STATUS_APP_DATA_REBOOT_REQUIRED" ) - sizeof( ("STATUS_APP_DATA_REBOOT_REQUIRED")[0] ), sizeof( "STATUS_APP_DATA_REBOOT_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_APP_DATA_REBOOT_REQUIRED")), ("STATUS_APP_DATA_REBOOT_REQUIRED") }, (ULONG)((NTSTATUS)0xC000A285L) }, { { sizeof( "STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED" ) - sizeof( ("STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED")[0] ), sizeof( "STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED")), ("STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A2A1L) }, { { sizeof( "STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED" ) - sizeof( ("STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED")[0] ), sizeof( "STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED")), ("STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A2A2L) }, { { sizeof( "STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED" ) - sizeof( ("STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED")[0] ), sizeof( "STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED")), ("STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A2A3L) }, { { sizeof( "STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED" ) - sizeof( ("STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED")[0] ), sizeof( "STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED")), ("STATUS_OFFLOAD_WRITE_FILE_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC000A2A4L) }, { { sizeof( "STATUS_CLOUD_FILE_PROVIDER_UNKNOWN" ) - sizeof( ("STATUS_CLOUD_FILE_PROVIDER_UNKNOWN")[0] ), sizeof( "STATUS_CLOUD_FILE_PROVIDER_UNKNOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLOUD_FILE_PROVIDER_UNKNOWN")), ("STATUS_CLOUD_FILE_PROVIDER_UNKNOWN") }, (ULONG)((NTSTATUS)0xC000CF00L) }, { { sizeof( "STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING" ) - sizeof( ("STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING")[0] ), sizeof( "STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING")), ("STATUS_CLOUD_FILE_PROVIDER_NOT_RUNNING") }, (ULONG)((NTSTATUS)0xC000CF01L) }, { { sizeof( "STATUS_CLOUD_FILE_METADATA_CORRUPT" ) - sizeof( ("STATUS_CLOUD_FILE_METADATA_CORRUPT")[0] ), sizeof( "STATUS_CLOUD_FILE_METADATA_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLOUD_FILE_METADATA_CORRUPT")), ("STATUS_CLOUD_FILE_METADATA_CORRUPT") }, (ULONG)((NTSTATUS)0xC000CF02L) }, { { sizeof( "STATUS_CLOUD_FILE_METADATA_TOO_LARGE" ) - sizeof( ("STATUS_CLOUD_FILE_METADATA_TOO_LARGE")[0] ), sizeof( "STATUS_CLOUD_FILE_METADATA_TOO_LARGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLOUD_FILE_METADATA_TOO_LARGE")), ("STATUS_CLOUD_FILE_METADATA_TOO_LARGE") }, (ULONG)((NTSTATUS)0xC000CF03L) }, { { sizeof( "STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE" ) - sizeof( ("STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE")[0] ), sizeof( "STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE")), ("STATUS_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE") }, (ULONG)((NTSTATUS)0x8000CF04L) }, { { sizeof( "STATUS_ACPI_INVALID_OPCODE" ) - sizeof( ("STATUS_ACPI_INVALID_OPCODE")[0] ), sizeof( "STATUS_ACPI_INVALID_OPCODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_OPCODE")), ("STATUS_ACPI_INVALID_OPCODE") }, (ULONG)((NTSTATUS)0xC0140001L) }, { { sizeof( "STATUS_ACPI_STACK_OVERFLOW" ) - sizeof( ("STATUS_ACPI_STACK_OVERFLOW")[0] ), sizeof( "STATUS_ACPI_STACK_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_STACK_OVERFLOW")), ("STATUS_ACPI_STACK_OVERFLOW") }, (ULONG)((NTSTATUS)0xC0140002L) }, { { sizeof( "STATUS_ACPI_ASSERT_FAILED" ) - sizeof( ("STATUS_ACPI_ASSERT_FAILED")[0] ), sizeof( "STATUS_ACPI_ASSERT_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_ASSERT_FAILED")), ("STATUS_ACPI_ASSERT_FAILED") }, (ULONG)((NTSTATUS)0xC0140003L) }, { { sizeof( "STATUS_ACPI_INVALID_INDEX" ) - sizeof( ("STATUS_ACPI_INVALID_INDEX")[0] ), sizeof( "STATUS_ACPI_INVALID_INDEX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_INDEX")), ("STATUS_ACPI_INVALID_INDEX") }, (ULONG)((NTSTATUS)0xC0140004L) }, { { sizeof( "STATUS_ACPI_INVALID_ARGUMENT" ) - sizeof( ("STATUS_ACPI_INVALID_ARGUMENT")[0] ), sizeof( "STATUS_ACPI_INVALID_ARGUMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_ARGUMENT")), ("STATUS_ACPI_INVALID_ARGUMENT") }, (ULONG)((NTSTATUS)0xC0140005L) }, { { sizeof( "STATUS_ACPI_FATAL" ) - sizeof( ("STATUS_ACPI_FATAL")[0] ), sizeof( "STATUS_ACPI_FATAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_FATAL")), ("STATUS_ACPI_FATAL") }, (ULONG)((NTSTATUS)0xC0140006L) }, { { sizeof( "STATUS_ACPI_INVALID_SUPERNAME" ) - sizeof( ("STATUS_ACPI_INVALID_SUPERNAME")[0] ), sizeof( "STATUS_ACPI_INVALID_SUPERNAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_SUPERNAME")), ("STATUS_ACPI_INVALID_SUPERNAME") }, (ULONG)((NTSTATUS)0xC0140007L) }, { { sizeof( "STATUS_ACPI_INVALID_ARGTYPE" ) - sizeof( ("STATUS_ACPI_INVALID_ARGTYPE")[0] ), sizeof( "STATUS_ACPI_INVALID_ARGTYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_ARGTYPE")), ("STATUS_ACPI_INVALID_ARGTYPE") }, (ULONG)((NTSTATUS)0xC0140008L) }, { { sizeof( "STATUS_ACPI_INVALID_OBJTYPE" ) - sizeof( ("STATUS_ACPI_INVALID_OBJTYPE")[0] ), sizeof( "STATUS_ACPI_INVALID_OBJTYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_OBJTYPE")), ("STATUS_ACPI_INVALID_OBJTYPE") }, (ULONG)((NTSTATUS)0xC0140009L) }, { { sizeof( "STATUS_ACPI_INVALID_TARGETTYPE" ) - sizeof( ("STATUS_ACPI_INVALID_TARGETTYPE")[0] ), sizeof( "STATUS_ACPI_INVALID_TARGETTYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_TARGETTYPE")), ("STATUS_ACPI_INVALID_TARGETTYPE") }, (ULONG)((NTSTATUS)0xC014000AL) }, { { sizeof( "STATUS_ACPI_INCORRECT_ARGUMENT_COUNT" ) - sizeof( ("STATUS_ACPI_INCORRECT_ARGUMENT_COUNT")[0] ), sizeof( "STATUS_ACPI_INCORRECT_ARGUMENT_COUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INCORRECT_ARGUMENT_COUNT")), ("STATUS_ACPI_INCORRECT_ARGUMENT_COUNT") }, (ULONG)((NTSTATUS)0xC014000BL) }, { { sizeof( "STATUS_ACPI_ADDRESS_NOT_MAPPED" ) - sizeof( ("STATUS_ACPI_ADDRESS_NOT_MAPPED")[0] ), sizeof( "STATUS_ACPI_ADDRESS_NOT_MAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_ADDRESS_NOT_MAPPED")), ("STATUS_ACPI_ADDRESS_NOT_MAPPED") }, (ULONG)((NTSTATUS)0xC014000CL) }, { { sizeof( "STATUS_ACPI_INVALID_EVENTTYPE" ) - sizeof( ("STATUS_ACPI_INVALID_EVENTTYPE")[0] ), sizeof( "STATUS_ACPI_INVALID_EVENTTYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_EVENTTYPE")), ("STATUS_ACPI_INVALID_EVENTTYPE") }, (ULONG)((NTSTATUS)0xC014000DL) }, { { sizeof( "STATUS_ACPI_HANDLER_COLLISION" ) - sizeof( ("STATUS_ACPI_HANDLER_COLLISION")[0] ), sizeof( "STATUS_ACPI_HANDLER_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_HANDLER_COLLISION")), ("STATUS_ACPI_HANDLER_COLLISION") }, (ULONG)((NTSTATUS)0xC014000EL) }, { { sizeof( "STATUS_ACPI_INVALID_DATA" ) - sizeof( ("STATUS_ACPI_INVALID_DATA")[0] ), sizeof( "STATUS_ACPI_INVALID_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_DATA")), ("STATUS_ACPI_INVALID_DATA") }, (ULONG)((NTSTATUS)0xC014000FL) }, { { sizeof( "STATUS_ACPI_INVALID_REGION" ) - sizeof( ("STATUS_ACPI_INVALID_REGION")[0] ), sizeof( "STATUS_ACPI_INVALID_REGION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_REGION")), ("STATUS_ACPI_INVALID_REGION") }, (ULONG)((NTSTATUS)0xC0140010L) }, { { sizeof( "STATUS_ACPI_INVALID_ACCESS_SIZE" ) - sizeof( ("STATUS_ACPI_INVALID_ACCESS_SIZE")[0] ), sizeof( "STATUS_ACPI_INVALID_ACCESS_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_ACCESS_SIZE")), ("STATUS_ACPI_INVALID_ACCESS_SIZE") }, (ULONG)((NTSTATUS)0xC0140011L) }, { { sizeof( "STATUS_ACPI_ACQUIRE_GLOBAL_LOCK" ) - sizeof( ("STATUS_ACPI_ACQUIRE_GLOBAL_LOCK")[0] ), sizeof( "STATUS_ACPI_ACQUIRE_GLOBAL_LOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_ACQUIRE_GLOBAL_LOCK")), ("STATUS_ACPI_ACQUIRE_GLOBAL_LOCK") }, (ULONG)((NTSTATUS)0xC0140012L) }, { { sizeof( "STATUS_ACPI_ALREADY_INITIALIZED" ) - sizeof( ("STATUS_ACPI_ALREADY_INITIALIZED")[0] ), sizeof( "STATUS_ACPI_ALREADY_INITIALIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_ALREADY_INITIALIZED")), ("STATUS_ACPI_ALREADY_INITIALIZED") }, (ULONG)((NTSTATUS)0xC0140013L) }, { { sizeof( "STATUS_ACPI_NOT_INITIALIZED" ) - sizeof( ("STATUS_ACPI_NOT_INITIALIZED")[0] ), sizeof( "STATUS_ACPI_NOT_INITIALIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_NOT_INITIALIZED")), ("STATUS_ACPI_NOT_INITIALIZED") }, (ULONG)((NTSTATUS)0xC0140014L) }, { { sizeof( "STATUS_ACPI_INVALID_MUTEX_LEVEL" ) - sizeof( ("STATUS_ACPI_INVALID_MUTEX_LEVEL")[0] ), sizeof( "STATUS_ACPI_INVALID_MUTEX_LEVEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_MUTEX_LEVEL")), ("STATUS_ACPI_INVALID_MUTEX_LEVEL") }, (ULONG)((NTSTATUS)0xC0140015L) }, { { sizeof( "STATUS_ACPI_MUTEX_NOT_OWNED" ) - sizeof( ("STATUS_ACPI_MUTEX_NOT_OWNED")[0] ), sizeof( "STATUS_ACPI_MUTEX_NOT_OWNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_MUTEX_NOT_OWNED")), ("STATUS_ACPI_MUTEX_NOT_OWNED") }, (ULONG)((NTSTATUS)0xC0140016L) }, { { sizeof( "STATUS_ACPI_MUTEX_NOT_OWNER" ) - sizeof( ("STATUS_ACPI_MUTEX_NOT_OWNER")[0] ), sizeof( "STATUS_ACPI_MUTEX_NOT_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_MUTEX_NOT_OWNER")), ("STATUS_ACPI_MUTEX_NOT_OWNER") }, (ULONG)((NTSTATUS)0xC0140017L) }, { { sizeof( "STATUS_ACPI_RS_ACCESS" ) - sizeof( ("STATUS_ACPI_RS_ACCESS")[0] ), sizeof( "STATUS_ACPI_RS_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_RS_ACCESS")), ("STATUS_ACPI_RS_ACCESS") }, (ULONG)((NTSTATUS)0xC0140018L) }, { { sizeof( "STATUS_ACPI_INVALID_TABLE" ) - sizeof( ("STATUS_ACPI_INVALID_TABLE")[0] ), sizeof( "STATUS_ACPI_INVALID_TABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_INVALID_TABLE")), ("STATUS_ACPI_INVALID_TABLE") }, (ULONG)((NTSTATUS)0xC0140019L) }, { { sizeof( "STATUS_ACPI_REG_HANDLER_FAILED" ) - sizeof( ("STATUS_ACPI_REG_HANDLER_FAILED")[0] ), sizeof( "STATUS_ACPI_REG_HANDLER_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_REG_HANDLER_FAILED")), ("STATUS_ACPI_REG_HANDLER_FAILED") }, (ULONG)((NTSTATUS)0xC0140020L) }, { { sizeof( "STATUS_ACPI_POWER_REQUEST_FAILED" ) - sizeof( ("STATUS_ACPI_POWER_REQUEST_FAILED")[0] ), sizeof( "STATUS_ACPI_POWER_REQUEST_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ACPI_POWER_REQUEST_FAILED")), ("STATUS_ACPI_POWER_REQUEST_FAILED") }, (ULONG)((NTSTATUS)0xC0140021L) }, { { sizeof( "STATUS_CTX_WINSTATION_NAME_INVALID" ) - sizeof( ("STATUS_CTX_WINSTATION_NAME_INVALID")[0] ), sizeof( "STATUS_CTX_WINSTATION_NAME_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_WINSTATION_NAME_INVALID")), ("STATUS_CTX_WINSTATION_NAME_INVALID") }, (ULONG)((NTSTATUS)0xC00A0001L) }, { { sizeof( "STATUS_CTX_INVALID_PD" ) - sizeof( ("STATUS_CTX_INVALID_PD")[0] ), sizeof( "STATUS_CTX_INVALID_PD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_INVALID_PD")), ("STATUS_CTX_INVALID_PD") }, (ULONG)((NTSTATUS)0xC00A0002L) }, { { sizeof( "STATUS_CTX_PD_NOT_FOUND" ) - sizeof( ("STATUS_CTX_PD_NOT_FOUND")[0] ), sizeof( "STATUS_CTX_PD_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_PD_NOT_FOUND")), ("STATUS_CTX_PD_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC00A0003L) }, { { sizeof( "STATUS_CTX_CDM_CONNECT" ) - sizeof( ("STATUS_CTX_CDM_CONNECT")[0] ), sizeof( "STATUS_CTX_CDM_CONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CDM_CONNECT")), ("STATUS_CTX_CDM_CONNECT") }, (ULONG)((NTSTATUS)0x400A0004L) }, { { sizeof( "STATUS_CTX_CDM_DISCONNECT" ) - sizeof( ("STATUS_CTX_CDM_DISCONNECT")[0] ), sizeof( "STATUS_CTX_CDM_DISCONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CDM_DISCONNECT")), ("STATUS_CTX_CDM_DISCONNECT") }, (ULONG)((NTSTATUS)0x400A0005L) }, { { sizeof( "STATUS_CTX_CLOSE_PENDING" ) - sizeof( ("STATUS_CTX_CLOSE_PENDING")[0] ), sizeof( "STATUS_CTX_CLOSE_PENDING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CLOSE_PENDING")), ("STATUS_CTX_CLOSE_PENDING") }, (ULONG)((NTSTATUS)0xC00A0006L) }, { { sizeof( "STATUS_CTX_NO_OUTBUF" ) - sizeof( ("STATUS_CTX_NO_OUTBUF")[0] ), sizeof( "STATUS_CTX_NO_OUTBUF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_NO_OUTBUF")), ("STATUS_CTX_NO_OUTBUF") }, (ULONG)((NTSTATUS)0xC00A0007L) }, { { sizeof( "STATUS_CTX_MODEM_INF_NOT_FOUND" ) - sizeof( ("STATUS_CTX_MODEM_INF_NOT_FOUND")[0] ), sizeof( "STATUS_CTX_MODEM_INF_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_MODEM_INF_NOT_FOUND")), ("STATUS_CTX_MODEM_INF_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC00A0008L) }, { { sizeof( "STATUS_CTX_INVALID_MODEMNAME" ) - sizeof( ("STATUS_CTX_INVALID_MODEMNAME")[0] ), sizeof( "STATUS_CTX_INVALID_MODEMNAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_INVALID_MODEMNAME")), ("STATUS_CTX_INVALID_MODEMNAME") }, (ULONG)((NTSTATUS)0xC00A0009L) }, { { sizeof( "STATUS_CTX_RESPONSE_ERROR" ) - sizeof( ("STATUS_CTX_RESPONSE_ERROR")[0] ), sizeof( "STATUS_CTX_RESPONSE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_RESPONSE_ERROR")), ("STATUS_CTX_RESPONSE_ERROR") }, (ULONG)((NTSTATUS)0xC00A000AL) }, { { sizeof( "STATUS_CTX_MODEM_RESPONSE_TIMEOUT" ) - sizeof( ("STATUS_CTX_MODEM_RESPONSE_TIMEOUT")[0] ), sizeof( "STATUS_CTX_MODEM_RESPONSE_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_MODEM_RESPONSE_TIMEOUT")), ("STATUS_CTX_MODEM_RESPONSE_TIMEOUT") }, (ULONG)((NTSTATUS)0xC00A000BL) }, { { sizeof( "STATUS_CTX_MODEM_RESPONSE_NO_CARRIER" ) - sizeof( ("STATUS_CTX_MODEM_RESPONSE_NO_CARRIER")[0] ), sizeof( "STATUS_CTX_MODEM_RESPONSE_NO_CARRIER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_MODEM_RESPONSE_NO_CARRIER")), ("STATUS_CTX_MODEM_RESPONSE_NO_CARRIER") }, (ULONG)((NTSTATUS)0xC00A000CL) }, { { sizeof( "STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE" ) - sizeof( ("STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE")[0] ), sizeof( "STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE")), ("STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE") }, (ULONG)((NTSTATUS)0xC00A000DL) }, { { sizeof( "STATUS_CTX_MODEM_RESPONSE_BUSY" ) - sizeof( ("STATUS_CTX_MODEM_RESPONSE_BUSY")[0] ), sizeof( "STATUS_CTX_MODEM_RESPONSE_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_MODEM_RESPONSE_BUSY")), ("STATUS_CTX_MODEM_RESPONSE_BUSY") }, (ULONG)((NTSTATUS)0xC00A000EL) }, { { sizeof( "STATUS_CTX_MODEM_RESPONSE_VOICE" ) - sizeof( ("STATUS_CTX_MODEM_RESPONSE_VOICE")[0] ), sizeof( "STATUS_CTX_MODEM_RESPONSE_VOICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_MODEM_RESPONSE_VOICE")), ("STATUS_CTX_MODEM_RESPONSE_VOICE") }, (ULONG)((NTSTATUS)0xC00A000FL) }, { { sizeof( "STATUS_CTX_TD_ERROR" ) - sizeof( ("STATUS_CTX_TD_ERROR")[0] ), sizeof( "STATUS_CTX_TD_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_TD_ERROR")), ("STATUS_CTX_TD_ERROR") }, (ULONG)((NTSTATUS)0xC00A0010L) }, { { sizeof( "STATUS_CTX_LICENSE_CLIENT_INVALID" ) - sizeof( ("STATUS_CTX_LICENSE_CLIENT_INVALID")[0] ), sizeof( "STATUS_CTX_LICENSE_CLIENT_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_LICENSE_CLIENT_INVALID")), ("STATUS_CTX_LICENSE_CLIENT_INVALID") }, (ULONG)((NTSTATUS)0xC00A0012L) }, { { sizeof( "STATUS_CTX_LICENSE_NOT_AVAILABLE" ) - sizeof( ("STATUS_CTX_LICENSE_NOT_AVAILABLE")[0] ), sizeof( "STATUS_CTX_LICENSE_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_LICENSE_NOT_AVAILABLE")), ("STATUS_CTX_LICENSE_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC00A0013L) }, { { sizeof( "STATUS_CTX_LICENSE_EXPIRED" ) - sizeof( ("STATUS_CTX_LICENSE_EXPIRED")[0] ), sizeof( "STATUS_CTX_LICENSE_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_LICENSE_EXPIRED")), ("STATUS_CTX_LICENSE_EXPIRED") }, (ULONG)((NTSTATUS)0xC00A0014L) }, { { sizeof( "STATUS_CTX_WINSTATION_NOT_FOUND" ) - sizeof( ("STATUS_CTX_WINSTATION_NOT_FOUND")[0] ), sizeof( "STATUS_CTX_WINSTATION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_WINSTATION_NOT_FOUND")), ("STATUS_CTX_WINSTATION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC00A0015L) }, { { sizeof( "STATUS_CTX_WINSTATION_NAME_COLLISION" ) - sizeof( ("STATUS_CTX_WINSTATION_NAME_COLLISION")[0] ), sizeof( "STATUS_CTX_WINSTATION_NAME_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_WINSTATION_NAME_COLLISION")), ("STATUS_CTX_WINSTATION_NAME_COLLISION") }, (ULONG)((NTSTATUS)0xC00A0016L) }, { { sizeof( "STATUS_CTX_WINSTATION_BUSY" ) - sizeof( ("STATUS_CTX_WINSTATION_BUSY")[0] ), sizeof( "STATUS_CTX_WINSTATION_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_WINSTATION_BUSY")), ("STATUS_CTX_WINSTATION_BUSY") }, (ULONG)((NTSTATUS)0xC00A0017L) }, { { sizeof( "STATUS_CTX_BAD_VIDEO_MODE" ) - sizeof( ("STATUS_CTX_BAD_VIDEO_MODE")[0] ), sizeof( "STATUS_CTX_BAD_VIDEO_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_BAD_VIDEO_MODE")), ("STATUS_CTX_BAD_VIDEO_MODE") }, (ULONG)((NTSTATUS)0xC00A0018L) }, { { sizeof( "STATUS_CTX_GRAPHICS_INVALID" ) - sizeof( ("STATUS_CTX_GRAPHICS_INVALID")[0] ), sizeof( "STATUS_CTX_GRAPHICS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_GRAPHICS_INVALID")), ("STATUS_CTX_GRAPHICS_INVALID") }, (ULONG)((NTSTATUS)0xC00A0022L) }, { { sizeof( "STATUS_CTX_NOT_CONSOLE" ) - sizeof( ("STATUS_CTX_NOT_CONSOLE")[0] ), sizeof( "STATUS_CTX_NOT_CONSOLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_NOT_CONSOLE")), ("STATUS_CTX_NOT_CONSOLE") }, (ULONG)((NTSTATUS)0xC00A0024L) }, { { sizeof( "STATUS_CTX_CLIENT_QUERY_TIMEOUT" ) - sizeof( ("STATUS_CTX_CLIENT_QUERY_TIMEOUT")[0] ), sizeof( "STATUS_CTX_CLIENT_QUERY_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CLIENT_QUERY_TIMEOUT")), ("STATUS_CTX_CLIENT_QUERY_TIMEOUT") }, (ULONG)((NTSTATUS)0xC00A0026L) }, { { sizeof( "STATUS_CTX_CONSOLE_DISCONNECT" ) - sizeof( ("STATUS_CTX_CONSOLE_DISCONNECT")[0] ), sizeof( "STATUS_CTX_CONSOLE_DISCONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CONSOLE_DISCONNECT")), ("STATUS_CTX_CONSOLE_DISCONNECT") }, (ULONG)((NTSTATUS)0xC00A0027L) }, { { sizeof( "STATUS_CTX_CONSOLE_CONNECT" ) - sizeof( ("STATUS_CTX_CONSOLE_CONNECT")[0] ), sizeof( "STATUS_CTX_CONSOLE_CONNECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CONSOLE_CONNECT")), ("STATUS_CTX_CONSOLE_CONNECT") }, (ULONG)((NTSTATUS)0xC00A0028L) }, { { sizeof( "STATUS_CTX_SHADOW_DENIED" ) - sizeof( ("STATUS_CTX_SHADOW_DENIED")[0] ), sizeof( "STATUS_CTX_SHADOW_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_SHADOW_DENIED")), ("STATUS_CTX_SHADOW_DENIED") }, (ULONG)((NTSTATUS)0xC00A002AL) }, { { sizeof( "STATUS_CTX_WINSTATION_ACCESS_DENIED" ) - sizeof( ("STATUS_CTX_WINSTATION_ACCESS_DENIED")[0] ), sizeof( "STATUS_CTX_WINSTATION_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_WINSTATION_ACCESS_DENIED")), ("STATUS_CTX_WINSTATION_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC00A002BL) }, { { sizeof( "STATUS_CTX_INVALID_WD" ) - sizeof( ("STATUS_CTX_INVALID_WD")[0] ), sizeof( "STATUS_CTX_INVALID_WD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_INVALID_WD")), ("STATUS_CTX_INVALID_WD") }, (ULONG)((NTSTATUS)0xC00A002EL) }, { { sizeof( "STATUS_CTX_WD_NOT_FOUND" ) - sizeof( ("STATUS_CTX_WD_NOT_FOUND")[0] ), sizeof( "STATUS_CTX_WD_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_WD_NOT_FOUND")), ("STATUS_CTX_WD_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC00A002FL) }, { { sizeof( "STATUS_CTX_SHADOW_INVALID" ) - sizeof( ("STATUS_CTX_SHADOW_INVALID")[0] ), sizeof( "STATUS_CTX_SHADOW_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_SHADOW_INVALID")), ("STATUS_CTX_SHADOW_INVALID") }, (ULONG)((NTSTATUS)0xC00A0030L) }, { { sizeof( "STATUS_CTX_SHADOW_DISABLED" ) - sizeof( ("STATUS_CTX_SHADOW_DISABLED")[0] ), sizeof( "STATUS_CTX_SHADOW_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_SHADOW_DISABLED")), ("STATUS_CTX_SHADOW_DISABLED") }, (ULONG)((NTSTATUS)0xC00A0031L) }, { { sizeof( "STATUS_RDP_PROTOCOL_ERROR" ) - sizeof( ("STATUS_RDP_PROTOCOL_ERROR")[0] ), sizeof( "STATUS_RDP_PROTOCOL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RDP_PROTOCOL_ERROR")), ("STATUS_RDP_PROTOCOL_ERROR") }, (ULONG)((NTSTATUS)0xC00A0032L) }, { { sizeof( "STATUS_CTX_CLIENT_LICENSE_NOT_SET" ) - sizeof( ("STATUS_CTX_CLIENT_LICENSE_NOT_SET")[0] ), sizeof( "STATUS_CTX_CLIENT_LICENSE_NOT_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CLIENT_LICENSE_NOT_SET")), ("STATUS_CTX_CLIENT_LICENSE_NOT_SET") }, (ULONG)((NTSTATUS)0xC00A0033L) }, { { sizeof( "STATUS_CTX_CLIENT_LICENSE_IN_USE" ) - sizeof( ("STATUS_CTX_CLIENT_LICENSE_IN_USE")[0] ), sizeof( "STATUS_CTX_CLIENT_LICENSE_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_CLIENT_LICENSE_IN_USE")), ("STATUS_CTX_CLIENT_LICENSE_IN_USE") }, (ULONG)((NTSTATUS)0xC00A0034L) }, { { sizeof( "STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE" ) - sizeof( ("STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE")[0] ), sizeof( "STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE")), ("STATUS_CTX_SHADOW_ENDED_BY_MODE_CHANGE") }, (ULONG)((NTSTATUS)0xC00A0035L) }, { { sizeof( "STATUS_CTX_SHADOW_NOT_RUNNING" ) - sizeof( ("STATUS_CTX_SHADOW_NOT_RUNNING")[0] ), sizeof( "STATUS_CTX_SHADOW_NOT_RUNNING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_SHADOW_NOT_RUNNING")), ("STATUS_CTX_SHADOW_NOT_RUNNING") }, (ULONG)((NTSTATUS)0xC00A0036L) }, { { sizeof( "STATUS_CTX_LOGON_DISABLED" ) - sizeof( ("STATUS_CTX_LOGON_DISABLED")[0] ), sizeof( "STATUS_CTX_LOGON_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_LOGON_DISABLED")), ("STATUS_CTX_LOGON_DISABLED") }, (ULONG)((NTSTATUS)0xC00A0037L) }, { { sizeof( "STATUS_CTX_SECURITY_LAYER_ERROR" ) - sizeof( ("STATUS_CTX_SECURITY_LAYER_ERROR")[0] ), sizeof( "STATUS_CTX_SECURITY_LAYER_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTX_SECURITY_LAYER_ERROR")), ("STATUS_CTX_SECURITY_LAYER_ERROR") }, (ULONG)((NTSTATUS)0xC00A0038L) }, { { sizeof( "STATUS_TS_INCOMPATIBLE_SESSIONS" ) - sizeof( ("STATUS_TS_INCOMPATIBLE_SESSIONS")[0] ), sizeof( "STATUS_TS_INCOMPATIBLE_SESSIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TS_INCOMPATIBLE_SESSIONS")), ("STATUS_TS_INCOMPATIBLE_SESSIONS") }, (ULONG)((NTSTATUS)0xC00A0039L) }, { { sizeof( "STATUS_TS_VIDEO_SUBSYSTEM_ERROR" ) - sizeof( ("STATUS_TS_VIDEO_SUBSYSTEM_ERROR")[0] ), sizeof( "STATUS_TS_VIDEO_SUBSYSTEM_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TS_VIDEO_SUBSYSTEM_ERROR")), ("STATUS_TS_VIDEO_SUBSYSTEM_ERROR") }, (ULONG)((NTSTATUS)0xC00A003AL) }, { { sizeof( "STATUS_PNP_BAD_MPS_TABLE" ) - sizeof( ("STATUS_PNP_BAD_MPS_TABLE")[0] ), sizeof( "STATUS_PNP_BAD_MPS_TABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_BAD_MPS_TABLE")), ("STATUS_PNP_BAD_MPS_TABLE") }, (ULONG)((NTSTATUS)0xC0040035L) }, { { sizeof( "STATUS_PNP_TRANSLATION_FAILED" ) - sizeof( ("STATUS_PNP_TRANSLATION_FAILED")[0] ), sizeof( "STATUS_PNP_TRANSLATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_TRANSLATION_FAILED")), ("STATUS_PNP_TRANSLATION_FAILED") }, (ULONG)((NTSTATUS)0xC0040036L) }, { { sizeof( "STATUS_PNP_IRQ_TRANSLATION_FAILED" ) - sizeof( ("STATUS_PNP_IRQ_TRANSLATION_FAILED")[0] ), sizeof( "STATUS_PNP_IRQ_TRANSLATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_IRQ_TRANSLATION_FAILED")), ("STATUS_PNP_IRQ_TRANSLATION_FAILED") }, (ULONG)((NTSTATUS)0xC0040037L) }, { { sizeof( "STATUS_PNP_INVALID_ID" ) - sizeof( ("STATUS_PNP_INVALID_ID")[0] ), sizeof( "STATUS_PNP_INVALID_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PNP_INVALID_ID")), ("STATUS_PNP_INVALID_ID") }, (ULONG)((NTSTATUS)0xC0040038L) }, { { sizeof( "STATUS_IO_REISSUE_AS_CACHED" ) - sizeof( ("STATUS_IO_REISSUE_AS_CACHED")[0] ), sizeof( "STATUS_IO_REISSUE_AS_CACHED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_REISSUE_AS_CACHED")), ("STATUS_IO_REISSUE_AS_CACHED") }, (ULONG)((NTSTATUS)0xC0040039L) }, { { sizeof( "STATUS_MUI_FILE_NOT_FOUND" ) - sizeof( ("STATUS_MUI_FILE_NOT_FOUND")[0] ), sizeof( "STATUS_MUI_FILE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUI_FILE_NOT_FOUND")), ("STATUS_MUI_FILE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC00B0001L) }, { { sizeof( "STATUS_MUI_INVALID_FILE" ) - sizeof( ("STATUS_MUI_INVALID_FILE")[0] ), sizeof( "STATUS_MUI_INVALID_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUI_INVALID_FILE")), ("STATUS_MUI_INVALID_FILE") }, (ULONG)((NTSTATUS)0xC00B0002L) }, { { sizeof( "STATUS_MUI_INVALID_RC_CONFIG" ) - sizeof( ("STATUS_MUI_INVALID_RC_CONFIG")[0] ), sizeof( "STATUS_MUI_INVALID_RC_CONFIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUI_INVALID_RC_CONFIG")), ("STATUS_MUI_INVALID_RC_CONFIG") }, (ULONG)((NTSTATUS)0xC00B0003L) }, { { sizeof( "STATUS_MUI_INVALID_LOCALE_NAME" ) - sizeof( ("STATUS_MUI_INVALID_LOCALE_NAME")[0] ), sizeof( "STATUS_MUI_INVALID_LOCALE_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUI_INVALID_LOCALE_NAME")), ("STATUS_MUI_INVALID_LOCALE_NAME") }, (ULONG)((NTSTATUS)0xC00B0004L) }, { { sizeof( "STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME" ) - sizeof( ("STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME")[0] ), sizeof( "STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME")), ("STATUS_MUI_INVALID_ULTIMATEFALLBACK_NAME") }, (ULONG)((NTSTATUS)0xC00B0005L) }, { { sizeof( "STATUS_MUI_FILE_NOT_LOADED" ) - sizeof( ("STATUS_MUI_FILE_NOT_LOADED")[0] ), sizeof( "STATUS_MUI_FILE_NOT_LOADED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MUI_FILE_NOT_LOADED")), ("STATUS_MUI_FILE_NOT_LOADED") }, (ULONG)((NTSTATUS)0xC00B0006L) }, { { sizeof( "STATUS_RESOURCE_ENUM_USER_STOP" ) - sizeof( ("STATUS_RESOURCE_ENUM_USER_STOP")[0] ), sizeof( "STATUS_RESOURCE_ENUM_USER_STOP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCE_ENUM_USER_STOP")), ("STATUS_RESOURCE_ENUM_USER_STOP") }, (ULONG)((NTSTATUS)0xC00B0007L) }, { { sizeof( "STATUS_FLT_NO_HANDLER_DEFINED" ) - sizeof( ("STATUS_FLT_NO_HANDLER_DEFINED")[0] ), sizeof( "STATUS_FLT_NO_HANDLER_DEFINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_NO_HANDLER_DEFINED")), ("STATUS_FLT_NO_HANDLER_DEFINED") }, (ULONG)((NTSTATUS)0xC01C0001L) }, { { sizeof( "STATUS_FLT_CONTEXT_ALREADY_DEFINED" ) - sizeof( ("STATUS_FLT_CONTEXT_ALREADY_DEFINED")[0] ), sizeof( "STATUS_FLT_CONTEXT_ALREADY_DEFINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_CONTEXT_ALREADY_DEFINED")), ("STATUS_FLT_CONTEXT_ALREADY_DEFINED") }, (ULONG)((NTSTATUS)0xC01C0002L) }, { { sizeof( "STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST" ) - sizeof( ("STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST")[0] ), sizeof( "STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST")), ("STATUS_FLT_INVALID_ASYNCHRONOUS_REQUEST") }, (ULONG)((NTSTATUS)0xC01C0003L) }, { { sizeof( "STATUS_FLT_DISALLOW_FAST_IO" ) - sizeof( ("STATUS_FLT_DISALLOW_FAST_IO")[0] ), sizeof( "STATUS_FLT_DISALLOW_FAST_IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_DISALLOW_FAST_IO")), ("STATUS_FLT_DISALLOW_FAST_IO") }, (ULONG)((NTSTATUS)0xC01C0004L) }, { { sizeof( "STATUS_FLT_INVALID_NAME_REQUEST" ) - sizeof( ("STATUS_FLT_INVALID_NAME_REQUEST")[0] ), sizeof( "STATUS_FLT_INVALID_NAME_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INVALID_NAME_REQUEST")), ("STATUS_FLT_INVALID_NAME_REQUEST") }, (ULONG)((NTSTATUS)0xC01C0005L) }, { { sizeof( "STATUS_FLT_NOT_SAFE_TO_POST_OPERATION" ) - sizeof( ("STATUS_FLT_NOT_SAFE_TO_POST_OPERATION")[0] ), sizeof( "STATUS_FLT_NOT_SAFE_TO_POST_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_NOT_SAFE_TO_POST_OPERATION")), ("STATUS_FLT_NOT_SAFE_TO_POST_OPERATION") }, (ULONG)((NTSTATUS)0xC01C0006L) }, { { sizeof( "STATUS_FLT_NOT_INITIALIZED" ) - sizeof( ("STATUS_FLT_NOT_INITIALIZED")[0] ), sizeof( "STATUS_FLT_NOT_INITIALIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_NOT_INITIALIZED")), ("STATUS_FLT_NOT_INITIALIZED") }, (ULONG)((NTSTATUS)0xC01C0007L) }, { { sizeof( "STATUS_FLT_FILTER_NOT_READY" ) - sizeof( ("STATUS_FLT_FILTER_NOT_READY")[0] ), sizeof( "STATUS_FLT_FILTER_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_FILTER_NOT_READY")), ("STATUS_FLT_FILTER_NOT_READY") }, (ULONG)((NTSTATUS)0xC01C0008L) }, { { sizeof( "STATUS_FLT_POST_OPERATION_CLEANUP" ) - sizeof( ("STATUS_FLT_POST_OPERATION_CLEANUP")[0] ), sizeof( "STATUS_FLT_POST_OPERATION_CLEANUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_POST_OPERATION_CLEANUP")), ("STATUS_FLT_POST_OPERATION_CLEANUP") }, (ULONG)((NTSTATUS)0xC01C0009L) }, { { sizeof( "STATUS_FLT_INTERNAL_ERROR" ) - sizeof( ("STATUS_FLT_INTERNAL_ERROR")[0] ), sizeof( "STATUS_FLT_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INTERNAL_ERROR")), ("STATUS_FLT_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC01C000AL) }, { { sizeof( "STATUS_FLT_DELETING_OBJECT" ) - sizeof( ("STATUS_FLT_DELETING_OBJECT")[0] ), sizeof( "STATUS_FLT_DELETING_OBJECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_DELETING_OBJECT")), ("STATUS_FLT_DELETING_OBJECT") }, (ULONG)((NTSTATUS)0xC01C000BL) }, { { sizeof( "STATUS_FLT_MUST_BE_NONPAGED_POOL" ) - sizeof( ("STATUS_FLT_MUST_BE_NONPAGED_POOL")[0] ), sizeof( "STATUS_FLT_MUST_BE_NONPAGED_POOL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_MUST_BE_NONPAGED_POOL")), ("STATUS_FLT_MUST_BE_NONPAGED_POOL") }, (ULONG)((NTSTATUS)0xC01C000CL) }, { { sizeof( "STATUS_FLT_DUPLICATE_ENTRY" ) - sizeof( ("STATUS_FLT_DUPLICATE_ENTRY")[0] ), sizeof( "STATUS_FLT_DUPLICATE_ENTRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_DUPLICATE_ENTRY")), ("STATUS_FLT_DUPLICATE_ENTRY") }, (ULONG)((NTSTATUS)0xC01C000DL) }, { { sizeof( "STATUS_FLT_CBDQ_DISABLED" ) - sizeof( ("STATUS_FLT_CBDQ_DISABLED")[0] ), sizeof( "STATUS_FLT_CBDQ_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_CBDQ_DISABLED")), ("STATUS_FLT_CBDQ_DISABLED") }, (ULONG)((NTSTATUS)0xC01C000EL) }, { { sizeof( "STATUS_FLT_DO_NOT_ATTACH" ) - sizeof( ("STATUS_FLT_DO_NOT_ATTACH")[0] ), sizeof( "STATUS_FLT_DO_NOT_ATTACH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_DO_NOT_ATTACH")), ("STATUS_FLT_DO_NOT_ATTACH") }, (ULONG)((NTSTATUS)0xC01C000FL) }, { { sizeof( "STATUS_FLT_DO_NOT_DETACH" ) - sizeof( ("STATUS_FLT_DO_NOT_DETACH")[0] ), sizeof( "STATUS_FLT_DO_NOT_DETACH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_DO_NOT_DETACH")), ("STATUS_FLT_DO_NOT_DETACH") }, (ULONG)((NTSTATUS)0xC01C0010L) }, { { sizeof( "STATUS_FLT_INSTANCE_ALTITUDE_COLLISION" ) - sizeof( ("STATUS_FLT_INSTANCE_ALTITUDE_COLLISION")[0] ), sizeof( "STATUS_FLT_INSTANCE_ALTITUDE_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INSTANCE_ALTITUDE_COLLISION")), ("STATUS_FLT_INSTANCE_ALTITUDE_COLLISION") }, (ULONG)((NTSTATUS)0xC01C0011L) }, { { sizeof( "STATUS_FLT_INSTANCE_NAME_COLLISION" ) - sizeof( ("STATUS_FLT_INSTANCE_NAME_COLLISION")[0] ), sizeof( "STATUS_FLT_INSTANCE_NAME_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INSTANCE_NAME_COLLISION")), ("STATUS_FLT_INSTANCE_NAME_COLLISION") }, (ULONG)((NTSTATUS)0xC01C0012L) }, { { sizeof( "STATUS_FLT_FILTER_NOT_FOUND" ) - sizeof( ("STATUS_FLT_FILTER_NOT_FOUND")[0] ), sizeof( "STATUS_FLT_FILTER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_FILTER_NOT_FOUND")), ("STATUS_FLT_FILTER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC01C0013L) }, { { sizeof( "STATUS_FLT_VOLUME_NOT_FOUND" ) - sizeof( ("STATUS_FLT_VOLUME_NOT_FOUND")[0] ), sizeof( "STATUS_FLT_VOLUME_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_VOLUME_NOT_FOUND")), ("STATUS_FLT_VOLUME_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC01C0014L) }, { { sizeof( "STATUS_FLT_INSTANCE_NOT_FOUND" ) - sizeof( ("STATUS_FLT_INSTANCE_NOT_FOUND")[0] ), sizeof( "STATUS_FLT_INSTANCE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INSTANCE_NOT_FOUND")), ("STATUS_FLT_INSTANCE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC01C0015L) }, { { sizeof( "STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND" ) - sizeof( ("STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND")[0] ), sizeof( "STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND")), ("STATUS_FLT_CONTEXT_ALLOCATION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC01C0016L) }, { { sizeof( "STATUS_FLT_INVALID_CONTEXT_REGISTRATION" ) - sizeof( ("STATUS_FLT_INVALID_CONTEXT_REGISTRATION")[0] ), sizeof( "STATUS_FLT_INVALID_CONTEXT_REGISTRATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_INVALID_CONTEXT_REGISTRATION")), ("STATUS_FLT_INVALID_CONTEXT_REGISTRATION") }, (ULONG)((NTSTATUS)0xC01C0017L) }, { { sizeof( "STATUS_FLT_NAME_CACHE_MISS" ) - sizeof( ("STATUS_FLT_NAME_CACHE_MISS")[0] ), sizeof( "STATUS_FLT_NAME_CACHE_MISS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_NAME_CACHE_MISS")), ("STATUS_FLT_NAME_CACHE_MISS") }, (ULONG)((NTSTATUS)0xC01C0018L) }, { { sizeof( "STATUS_FLT_NO_DEVICE_OBJECT" ) - sizeof( ("STATUS_FLT_NO_DEVICE_OBJECT")[0] ), sizeof( "STATUS_FLT_NO_DEVICE_OBJECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_NO_DEVICE_OBJECT")), ("STATUS_FLT_NO_DEVICE_OBJECT") }, (ULONG)((NTSTATUS)0xC01C0019L) }, { { sizeof( "STATUS_FLT_VOLUME_ALREADY_MOUNTED" ) - sizeof( ("STATUS_FLT_VOLUME_ALREADY_MOUNTED")[0] ), sizeof( "STATUS_FLT_VOLUME_ALREADY_MOUNTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_VOLUME_ALREADY_MOUNTED")), ("STATUS_FLT_VOLUME_ALREADY_MOUNTED") }, (ULONG)((NTSTATUS)0xC01C001AL) }, { { sizeof( "STATUS_FLT_ALREADY_ENLISTED" ) - sizeof( ("STATUS_FLT_ALREADY_ENLISTED")[0] ), sizeof( "STATUS_FLT_ALREADY_ENLISTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_ALREADY_ENLISTED")), ("STATUS_FLT_ALREADY_ENLISTED") }, (ULONG)((NTSTATUS)0xC01C001BL) }, { { sizeof( "STATUS_FLT_CONTEXT_ALREADY_LINKED" ) - sizeof( ("STATUS_FLT_CONTEXT_ALREADY_LINKED")[0] ), sizeof( "STATUS_FLT_CONTEXT_ALREADY_LINKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_CONTEXT_ALREADY_LINKED")), ("STATUS_FLT_CONTEXT_ALREADY_LINKED") }, (ULONG)((NTSTATUS)0xC01C001CL) }, { { sizeof( "STATUS_FLT_NO_WAITER_FOR_REPLY" ) - sizeof( ("STATUS_FLT_NO_WAITER_FOR_REPLY")[0] ), sizeof( "STATUS_FLT_NO_WAITER_FOR_REPLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_NO_WAITER_FOR_REPLY")), ("STATUS_FLT_NO_WAITER_FOR_REPLY") }, (ULONG)((NTSTATUS)0xC01C0020L) }, { { sizeof( "STATUS_FLT_REGISTRATION_BUSY" ) - sizeof( ("STATUS_FLT_REGISTRATION_BUSY")[0] ), sizeof( "STATUS_FLT_REGISTRATION_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLT_REGISTRATION_BUSY")), ("STATUS_FLT_REGISTRATION_BUSY") }, (ULONG)((NTSTATUS)0xC01C0023L) }, { { sizeof( "STATUS_SXS_SECTION_NOT_FOUND" ) - sizeof( ("STATUS_SXS_SECTION_NOT_FOUND")[0] ), sizeof( "STATUS_SXS_SECTION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_SECTION_NOT_FOUND")), ("STATUS_SXS_SECTION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0150001L) }, { { sizeof( "STATUS_SXS_CANT_GEN_ACTCTX" ) - sizeof( ("STATUS_SXS_CANT_GEN_ACTCTX")[0] ), sizeof( "STATUS_SXS_CANT_GEN_ACTCTX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_CANT_GEN_ACTCTX")), ("STATUS_SXS_CANT_GEN_ACTCTX") }, (ULONG)((NTSTATUS)0xC0150002L) }, { { sizeof( "STATUS_SXS_INVALID_ACTCTXDATA_FORMAT" ) - sizeof( ("STATUS_SXS_INVALID_ACTCTXDATA_FORMAT")[0] ), sizeof( "STATUS_SXS_INVALID_ACTCTXDATA_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_INVALID_ACTCTXDATA_FORMAT")), ("STATUS_SXS_INVALID_ACTCTXDATA_FORMAT") }, (ULONG)((NTSTATUS)0xC0150003L) }, { { sizeof( "STATUS_SXS_ASSEMBLY_NOT_FOUND" ) - sizeof( ("STATUS_SXS_ASSEMBLY_NOT_FOUND")[0] ), sizeof( "STATUS_SXS_ASSEMBLY_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_ASSEMBLY_NOT_FOUND")), ("STATUS_SXS_ASSEMBLY_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0150004L) }, { { sizeof( "STATUS_SXS_MANIFEST_FORMAT_ERROR" ) - sizeof( ("STATUS_SXS_MANIFEST_FORMAT_ERROR")[0] ), sizeof( "STATUS_SXS_MANIFEST_FORMAT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_MANIFEST_FORMAT_ERROR")), ("STATUS_SXS_MANIFEST_FORMAT_ERROR") }, (ULONG)((NTSTATUS)0xC0150005L) }, { { sizeof( "STATUS_SXS_MANIFEST_PARSE_ERROR" ) - sizeof( ("STATUS_SXS_MANIFEST_PARSE_ERROR")[0] ), sizeof( "STATUS_SXS_MANIFEST_PARSE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_MANIFEST_PARSE_ERROR")), ("STATUS_SXS_MANIFEST_PARSE_ERROR") }, (ULONG)((NTSTATUS)0xC0150006L) }, { { sizeof( "STATUS_SXS_ACTIVATION_CONTEXT_DISABLED" ) - sizeof( ("STATUS_SXS_ACTIVATION_CONTEXT_DISABLED")[0] ), sizeof( "STATUS_SXS_ACTIVATION_CONTEXT_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_ACTIVATION_CONTEXT_DISABLED")), ("STATUS_SXS_ACTIVATION_CONTEXT_DISABLED") }, (ULONG)((NTSTATUS)0xC0150007L) }, { { sizeof( "STATUS_SXS_KEY_NOT_FOUND" ) - sizeof( ("STATUS_SXS_KEY_NOT_FOUND")[0] ), sizeof( "STATUS_SXS_KEY_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_KEY_NOT_FOUND")), ("STATUS_SXS_KEY_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0150008L) }, { { sizeof( "STATUS_SXS_VERSION_CONFLICT" ) - sizeof( ("STATUS_SXS_VERSION_CONFLICT")[0] ), sizeof( "STATUS_SXS_VERSION_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_VERSION_CONFLICT")), ("STATUS_SXS_VERSION_CONFLICT") }, (ULONG)((NTSTATUS)0xC0150009L) }, { { sizeof( "STATUS_SXS_WRONG_SECTION_TYPE" ) - sizeof( ("STATUS_SXS_WRONG_SECTION_TYPE")[0] ), sizeof( "STATUS_SXS_WRONG_SECTION_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_WRONG_SECTION_TYPE")), ("STATUS_SXS_WRONG_SECTION_TYPE") }, (ULONG)((NTSTATUS)0xC015000AL) }, { { sizeof( "STATUS_SXS_THREAD_QUERIES_DISABLED" ) - sizeof( ("STATUS_SXS_THREAD_QUERIES_DISABLED")[0] ), sizeof( "STATUS_SXS_THREAD_QUERIES_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_THREAD_QUERIES_DISABLED")), ("STATUS_SXS_THREAD_QUERIES_DISABLED") }, (ULONG)((NTSTATUS)0xC015000BL) }, { { sizeof( "STATUS_SXS_ASSEMBLY_MISSING" ) - sizeof( ("STATUS_SXS_ASSEMBLY_MISSING")[0] ), sizeof( "STATUS_SXS_ASSEMBLY_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_ASSEMBLY_MISSING")), ("STATUS_SXS_ASSEMBLY_MISSING") }, (ULONG)((NTSTATUS)0xC015000CL) }, { { sizeof( "STATUS_SXS_RELEASE_ACTIVATION_CONTEXT" ) - sizeof( ("STATUS_SXS_RELEASE_ACTIVATION_CONTEXT")[0] ), sizeof( "STATUS_SXS_RELEASE_ACTIVATION_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_RELEASE_ACTIVATION_CONTEXT")), ("STATUS_SXS_RELEASE_ACTIVATION_CONTEXT") }, (ULONG)((NTSTATUS)0x4015000DL) }, { { sizeof( "STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET" ) - sizeof( ("STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET")[0] ), sizeof( "STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET")), ("STATUS_SXS_PROCESS_DEFAULT_ALREADY_SET") }, (ULONG)((NTSTATUS)0xC015000EL) }, { { sizeof( "STATUS_SXS_EARLY_DEACTIVATION" ) - sizeof( ("STATUS_SXS_EARLY_DEACTIVATION")[0] ), sizeof( "STATUS_SXS_EARLY_DEACTIVATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_EARLY_DEACTIVATION")), ("STATUS_SXS_EARLY_DEACTIVATION") }, (ULONG)((NTSTATUS)0xC015000FL) }, { { sizeof( "STATUS_SXS_INVALID_DEACTIVATION" ) - sizeof( ("STATUS_SXS_INVALID_DEACTIVATION")[0] ), sizeof( "STATUS_SXS_INVALID_DEACTIVATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_INVALID_DEACTIVATION")), ("STATUS_SXS_INVALID_DEACTIVATION") }, (ULONG)((NTSTATUS)0xC0150010L) }, { { sizeof( "STATUS_SXS_MULTIPLE_DEACTIVATION" ) - sizeof( ("STATUS_SXS_MULTIPLE_DEACTIVATION")[0] ), sizeof( "STATUS_SXS_MULTIPLE_DEACTIVATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_MULTIPLE_DEACTIVATION")), ("STATUS_SXS_MULTIPLE_DEACTIVATION") }, (ULONG)((NTSTATUS)0xC0150011L) }, { { sizeof( "STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY" ) - sizeof( ("STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY")[0] ), sizeof( "STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY")), ("STATUS_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY") }, (ULONG)((NTSTATUS)0xC0150012L) }, { { sizeof( "STATUS_SXS_PROCESS_TERMINATION_REQUESTED" ) - sizeof( ("STATUS_SXS_PROCESS_TERMINATION_REQUESTED")[0] ), sizeof( "STATUS_SXS_PROCESS_TERMINATION_REQUESTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_PROCESS_TERMINATION_REQUESTED")), ("STATUS_SXS_PROCESS_TERMINATION_REQUESTED") }, (ULONG)((NTSTATUS)0xC0150013L) }, { { sizeof( "STATUS_SXS_CORRUPT_ACTIVATION_STACK" ) - sizeof( ("STATUS_SXS_CORRUPT_ACTIVATION_STACK")[0] ), sizeof( "STATUS_SXS_CORRUPT_ACTIVATION_STACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_CORRUPT_ACTIVATION_STACK")), ("STATUS_SXS_CORRUPT_ACTIVATION_STACK") }, (ULONG)((NTSTATUS)0xC0150014L) }, { { sizeof( "STATUS_SXS_CORRUPTION" ) - sizeof( ("STATUS_SXS_CORRUPTION")[0] ), sizeof( "STATUS_SXS_CORRUPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_CORRUPTION")), ("STATUS_SXS_CORRUPTION") }, (ULONG)((NTSTATUS)0xC0150015L) }, { { sizeof( "STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE" ) - sizeof( ("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE")[0] ), sizeof( "STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE")), ("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE") }, (ULONG)((NTSTATUS)0xC0150016L) }, { { sizeof( "STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME" ) - sizeof( ("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME")[0] ), sizeof( "STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME")), ("STATUS_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME") }, (ULONG)((NTSTATUS)0xC0150017L) }, { { sizeof( "STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE" ) - sizeof( ("STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE")[0] ), sizeof( "STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE")), ("STATUS_SXS_IDENTITY_DUPLICATE_ATTRIBUTE") }, (ULONG)((NTSTATUS)0xC0150018L) }, { { sizeof( "STATUS_SXS_IDENTITY_PARSE_ERROR" ) - sizeof( ("STATUS_SXS_IDENTITY_PARSE_ERROR")[0] ), sizeof( "STATUS_SXS_IDENTITY_PARSE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_IDENTITY_PARSE_ERROR")), ("STATUS_SXS_IDENTITY_PARSE_ERROR") }, (ULONG)((NTSTATUS)0xC0150019L) }, { { sizeof( "STATUS_SXS_COMPONENT_STORE_CORRUPT" ) - sizeof( ("STATUS_SXS_COMPONENT_STORE_CORRUPT")[0] ), sizeof( "STATUS_SXS_COMPONENT_STORE_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_COMPONENT_STORE_CORRUPT")), ("STATUS_SXS_COMPONENT_STORE_CORRUPT") }, (ULONG)((NTSTATUS)0xC015001AL) }, { { sizeof( "STATUS_SXS_FILE_HASH_MISMATCH" ) - sizeof( ("STATUS_SXS_FILE_HASH_MISMATCH")[0] ), sizeof( "STATUS_SXS_FILE_HASH_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_FILE_HASH_MISMATCH")), ("STATUS_SXS_FILE_HASH_MISMATCH") }, (ULONG)((NTSTATUS)0xC015001BL) }, { { sizeof( "STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT" ) - sizeof( ("STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT")[0] ), sizeof( "STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT")), ("STATUS_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT") }, (ULONG)((NTSTATUS)0xC015001CL) }, { { sizeof( "STATUS_SXS_IDENTITIES_DIFFERENT" ) - sizeof( ("STATUS_SXS_IDENTITIES_DIFFERENT")[0] ), sizeof( "STATUS_SXS_IDENTITIES_DIFFERENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_IDENTITIES_DIFFERENT")), ("STATUS_SXS_IDENTITIES_DIFFERENT") }, (ULONG)((NTSTATUS)0xC015001DL) }, { { sizeof( "STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT" ) - sizeof( ("STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT")[0] ), sizeof( "STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT")), ("STATUS_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT") }, (ULONG)((NTSTATUS)0xC015001EL) }, { { sizeof( "STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY" ) - sizeof( ("STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY")[0] ), sizeof( "STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY")), ("STATUS_SXS_FILE_NOT_PART_OF_ASSEMBLY") }, (ULONG)((NTSTATUS)0xC015001FL) }, { { sizeof( "STATUS_ADVANCED_INSTALLER_FAILED" ) - sizeof( ("STATUS_ADVANCED_INSTALLER_FAILED")[0] ), sizeof( "STATUS_ADVANCED_INSTALLER_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ADVANCED_INSTALLER_FAILED")), ("STATUS_ADVANCED_INSTALLER_FAILED") }, (ULONG)((NTSTATUS)0xC0150020L) }, { { sizeof( "STATUS_XML_ENCODING_MISMATCH" ) - sizeof( ("STATUS_XML_ENCODING_MISMATCH")[0] ), sizeof( "STATUS_XML_ENCODING_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_XML_ENCODING_MISMATCH")), ("STATUS_XML_ENCODING_MISMATCH") }, (ULONG)((NTSTATUS)0xC0150021L) }, { { sizeof( "STATUS_SXS_MANIFEST_TOO_BIG" ) - sizeof( ("STATUS_SXS_MANIFEST_TOO_BIG")[0] ), sizeof( "STATUS_SXS_MANIFEST_TOO_BIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_MANIFEST_TOO_BIG")), ("STATUS_SXS_MANIFEST_TOO_BIG") }, (ULONG)((NTSTATUS)0xC0150022L) }, { { sizeof( "STATUS_SXS_SETTING_NOT_REGISTERED" ) - sizeof( ("STATUS_SXS_SETTING_NOT_REGISTERED")[0] ), sizeof( "STATUS_SXS_SETTING_NOT_REGISTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_SETTING_NOT_REGISTERED")), ("STATUS_SXS_SETTING_NOT_REGISTERED") }, (ULONG)((NTSTATUS)0xC0150023L) }, { { sizeof( "STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE" ) - sizeof( ("STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE")[0] ), sizeof( "STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE")), ("STATUS_SXS_TRANSACTION_CLOSURE_INCOMPLETE") }, (ULONG)((NTSTATUS)0xC0150024L) }, { { sizeof( "STATUS_SMI_PRIMITIVE_INSTALLER_FAILED" ) - sizeof( ("STATUS_SMI_PRIMITIVE_INSTALLER_FAILED")[0] ), sizeof( "STATUS_SMI_PRIMITIVE_INSTALLER_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMI_PRIMITIVE_INSTALLER_FAILED")), ("STATUS_SMI_PRIMITIVE_INSTALLER_FAILED") }, (ULONG)((NTSTATUS)0xC0150025L) }, { { sizeof( "STATUS_GENERIC_COMMAND_FAILED" ) - sizeof( ("STATUS_GENERIC_COMMAND_FAILED")[0] ), sizeof( "STATUS_GENERIC_COMMAND_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GENERIC_COMMAND_FAILED")), ("STATUS_GENERIC_COMMAND_FAILED") }, (ULONG)((NTSTATUS)0xC0150026L) }, { { sizeof( "STATUS_SXS_FILE_HASH_MISSING" ) - sizeof( ("STATUS_SXS_FILE_HASH_MISSING")[0] ), sizeof( "STATUS_SXS_FILE_HASH_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SXS_FILE_HASH_MISSING")), ("STATUS_SXS_FILE_HASH_MISSING") }, (ULONG)((NTSTATUS)0xC0150027L) }, { { sizeof( "STATUS_CLUSTER_INVALID_NODE" ) - sizeof( ("STATUS_CLUSTER_INVALID_NODE")[0] ), sizeof( "STATUS_CLUSTER_INVALID_NODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_INVALID_NODE")), ("STATUS_CLUSTER_INVALID_NODE") }, (ULONG)((NTSTATUS)0xC0130001L) }, { { sizeof( "STATUS_CLUSTER_NODE_EXISTS" ) - sizeof( ("STATUS_CLUSTER_NODE_EXISTS")[0] ), sizeof( "STATUS_CLUSTER_NODE_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_EXISTS")), ("STATUS_CLUSTER_NODE_EXISTS") }, (ULONG)((NTSTATUS)0xC0130002L) }, { { sizeof( "STATUS_CLUSTER_JOIN_IN_PROGRESS" ) - sizeof( ("STATUS_CLUSTER_JOIN_IN_PROGRESS")[0] ), sizeof( "STATUS_CLUSTER_JOIN_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_JOIN_IN_PROGRESS")), ("STATUS_CLUSTER_JOIN_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0130003L) }, { { sizeof( "STATUS_CLUSTER_NODE_NOT_FOUND" ) - sizeof( ("STATUS_CLUSTER_NODE_NOT_FOUND")[0] ), sizeof( "STATUS_CLUSTER_NODE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_NOT_FOUND")), ("STATUS_CLUSTER_NODE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0130004L) }, { { sizeof( "STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND" ) - sizeof( ("STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND")[0] ), sizeof( "STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND")), ("STATUS_CLUSTER_LOCAL_NODE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0130005L) }, { { sizeof( "STATUS_CLUSTER_NETWORK_EXISTS" ) - sizeof( ("STATUS_CLUSTER_NETWORK_EXISTS")[0] ), sizeof( "STATUS_CLUSTER_NETWORK_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETWORK_EXISTS")), ("STATUS_CLUSTER_NETWORK_EXISTS") }, (ULONG)((NTSTATUS)0xC0130006L) }, { { sizeof( "STATUS_CLUSTER_NETWORK_NOT_FOUND" ) - sizeof( ("STATUS_CLUSTER_NETWORK_NOT_FOUND")[0] ), sizeof( "STATUS_CLUSTER_NETWORK_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETWORK_NOT_FOUND")), ("STATUS_CLUSTER_NETWORK_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0130007L) }, { { sizeof( "STATUS_CLUSTER_NETINTERFACE_EXISTS" ) - sizeof( ("STATUS_CLUSTER_NETINTERFACE_EXISTS")[0] ), sizeof( "STATUS_CLUSTER_NETINTERFACE_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETINTERFACE_EXISTS")), ("STATUS_CLUSTER_NETINTERFACE_EXISTS") }, (ULONG)((NTSTATUS)0xC0130008L) }, { { sizeof( "STATUS_CLUSTER_NETINTERFACE_NOT_FOUND" ) - sizeof( ("STATUS_CLUSTER_NETINTERFACE_NOT_FOUND")[0] ), sizeof( "STATUS_CLUSTER_NETINTERFACE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETINTERFACE_NOT_FOUND")), ("STATUS_CLUSTER_NETINTERFACE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0130009L) }, { { sizeof( "STATUS_CLUSTER_INVALID_REQUEST" ) - sizeof( ("STATUS_CLUSTER_INVALID_REQUEST")[0] ), sizeof( "STATUS_CLUSTER_INVALID_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_INVALID_REQUEST")), ("STATUS_CLUSTER_INVALID_REQUEST") }, (ULONG)((NTSTATUS)0xC013000AL) }, { { sizeof( "STATUS_CLUSTER_INVALID_NETWORK_PROVIDER" ) - sizeof( ("STATUS_CLUSTER_INVALID_NETWORK_PROVIDER")[0] ), sizeof( "STATUS_CLUSTER_INVALID_NETWORK_PROVIDER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_INVALID_NETWORK_PROVIDER")), ("STATUS_CLUSTER_INVALID_NETWORK_PROVIDER") }, (ULONG)((NTSTATUS)0xC013000BL) }, { { sizeof( "STATUS_CLUSTER_NODE_DOWN" ) - sizeof( ("STATUS_CLUSTER_NODE_DOWN")[0] ), sizeof( "STATUS_CLUSTER_NODE_DOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_DOWN")), ("STATUS_CLUSTER_NODE_DOWN") }, (ULONG)((NTSTATUS)0xC013000CL) }, { { sizeof( "STATUS_CLUSTER_NODE_UNREACHABLE" ) - sizeof( ("STATUS_CLUSTER_NODE_UNREACHABLE")[0] ), sizeof( "STATUS_CLUSTER_NODE_UNREACHABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_UNREACHABLE")), ("STATUS_CLUSTER_NODE_UNREACHABLE") }, (ULONG)((NTSTATUS)0xC013000DL) }, { { sizeof( "STATUS_CLUSTER_NODE_NOT_MEMBER" ) - sizeof( ("STATUS_CLUSTER_NODE_NOT_MEMBER")[0] ), sizeof( "STATUS_CLUSTER_NODE_NOT_MEMBER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_NOT_MEMBER")), ("STATUS_CLUSTER_NODE_NOT_MEMBER") }, (ULONG)((NTSTATUS)0xC013000EL) }, { { sizeof( "STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS" ) - sizeof( ("STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS")[0] ), sizeof( "STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS")), ("STATUS_CLUSTER_JOIN_NOT_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC013000FL) }, { { sizeof( "STATUS_CLUSTER_INVALID_NETWORK" ) - sizeof( ("STATUS_CLUSTER_INVALID_NETWORK")[0] ), sizeof( "STATUS_CLUSTER_INVALID_NETWORK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_INVALID_NETWORK")), ("STATUS_CLUSTER_INVALID_NETWORK") }, (ULONG)((NTSTATUS)0xC0130010L) }, { { sizeof( "STATUS_CLUSTER_NO_NET_ADAPTERS" ) - sizeof( ("STATUS_CLUSTER_NO_NET_ADAPTERS")[0] ), sizeof( "STATUS_CLUSTER_NO_NET_ADAPTERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NO_NET_ADAPTERS")), ("STATUS_CLUSTER_NO_NET_ADAPTERS") }, (ULONG)((NTSTATUS)0xC0130011L) }, { { sizeof( "STATUS_CLUSTER_NODE_UP" ) - sizeof( ("STATUS_CLUSTER_NODE_UP")[0] ), sizeof( "STATUS_CLUSTER_NODE_UP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_UP")), ("STATUS_CLUSTER_NODE_UP") }, (ULONG)((NTSTATUS)0xC0130012L) }, { { sizeof( "STATUS_CLUSTER_NODE_PAUSED" ) - sizeof( ("STATUS_CLUSTER_NODE_PAUSED")[0] ), sizeof( "STATUS_CLUSTER_NODE_PAUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_PAUSED")), ("STATUS_CLUSTER_NODE_PAUSED") }, (ULONG)((NTSTATUS)0xC0130013L) }, { { sizeof( "STATUS_CLUSTER_NODE_NOT_PAUSED" ) - sizeof( ("STATUS_CLUSTER_NODE_NOT_PAUSED")[0] ), sizeof( "STATUS_CLUSTER_NODE_NOT_PAUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NODE_NOT_PAUSED")), ("STATUS_CLUSTER_NODE_NOT_PAUSED") }, (ULONG)((NTSTATUS)0xC0130014L) }, { { sizeof( "STATUS_CLUSTER_NO_SECURITY_CONTEXT" ) - sizeof( ("STATUS_CLUSTER_NO_SECURITY_CONTEXT")[0] ), sizeof( "STATUS_CLUSTER_NO_SECURITY_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NO_SECURITY_CONTEXT")), ("STATUS_CLUSTER_NO_SECURITY_CONTEXT") }, (ULONG)((NTSTATUS)0xC0130015L) }, { { sizeof( "STATUS_CLUSTER_NETWORK_NOT_INTERNAL" ) - sizeof( ("STATUS_CLUSTER_NETWORK_NOT_INTERNAL")[0] ), sizeof( "STATUS_CLUSTER_NETWORK_NOT_INTERNAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NETWORK_NOT_INTERNAL")), ("STATUS_CLUSTER_NETWORK_NOT_INTERNAL") }, (ULONG)((NTSTATUS)0xC0130016L) }, { { sizeof( "STATUS_CLUSTER_POISONED" ) - sizeof( ("STATUS_CLUSTER_POISONED")[0] ), sizeof( "STATUS_CLUSTER_POISONED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_POISONED")), ("STATUS_CLUSTER_POISONED") }, (ULONG)((NTSTATUS)0xC0130017L) }, { { sizeof( "STATUS_CLUSTER_NON_CSV_PATH" ) - sizeof( ("STATUS_CLUSTER_NON_CSV_PATH")[0] ), sizeof( "STATUS_CLUSTER_NON_CSV_PATH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_NON_CSV_PATH")), ("STATUS_CLUSTER_NON_CSV_PATH") }, (ULONG)((NTSTATUS)0xC0130018L) }, { { sizeof( "STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL" ) - sizeof( ("STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL")[0] ), sizeof( "STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL")), ("STATUS_CLUSTER_CSV_VOLUME_NOT_LOCAL") }, (ULONG)((NTSTATUS)0xC0130019L) }, { { sizeof( "STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS" ) - sizeof( ("STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS")[0] ), sizeof( "STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS")), ("STATUS_CLUSTER_CSV_READ_OPLOCK_BREAK_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0130020L) }, { { sizeof( "STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR" ) - sizeof( ("STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR")[0] ), sizeof( "STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR")), ("STATUS_CLUSTER_CSV_AUTO_PAUSE_ERROR") }, (ULONG)((NTSTATUS)0xC0130021L) }, { { sizeof( "STATUS_CLUSTER_CSV_REDIRECTED" ) - sizeof( ("STATUS_CLUSTER_CSV_REDIRECTED")[0] ), sizeof( "STATUS_CLUSTER_CSV_REDIRECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_REDIRECTED")), ("STATUS_CLUSTER_CSV_REDIRECTED") }, (ULONG)((NTSTATUS)0xC0130022L) }, { { sizeof( "STATUS_CLUSTER_CSV_NOT_REDIRECTED" ) - sizeof( ("STATUS_CLUSTER_CSV_NOT_REDIRECTED")[0] ), sizeof( "STATUS_CLUSTER_CSV_NOT_REDIRECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_NOT_REDIRECTED")), ("STATUS_CLUSTER_CSV_NOT_REDIRECTED") }, (ULONG)((NTSTATUS)0xC0130023L) }, { { sizeof( "STATUS_CLUSTER_CSV_VOLUME_DRAINING" ) - sizeof( ("STATUS_CLUSTER_CSV_VOLUME_DRAINING")[0] ), sizeof( "STATUS_CLUSTER_CSV_VOLUME_DRAINING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_VOLUME_DRAINING")), ("STATUS_CLUSTER_CSV_VOLUME_DRAINING") }, (ULONG)((NTSTATUS)0xC0130024L) }, { { sizeof( "STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS" ) - sizeof( ("STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS")[0] ), sizeof( "STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS")), ("STATUS_CLUSTER_CSV_SNAPSHOT_CREATION_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0130025L) }, { { sizeof( "STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL" ) - sizeof( ("STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL")[0] ), sizeof( "STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL")), ("STATUS_CLUSTER_CSV_VOLUME_DRAINING_SUCCEEDED_DOWNLEVEL") }, (ULONG)((NTSTATUS)0xC0130026L) }, { { sizeof( "STATUS_CLUSTER_CSV_NO_SNAPSHOTS" ) - sizeof( ("STATUS_CLUSTER_CSV_NO_SNAPSHOTS")[0] ), sizeof( "STATUS_CLUSTER_CSV_NO_SNAPSHOTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_NO_SNAPSHOTS")), ("STATUS_CLUSTER_CSV_NO_SNAPSHOTS") }, (ULONG)((NTSTATUS)0xC0130027L) }, { { sizeof( "STATUS_CSV_IO_PAUSE_TIMEOUT" ) - sizeof( ("STATUS_CSV_IO_PAUSE_TIMEOUT")[0] ), sizeof( "STATUS_CSV_IO_PAUSE_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CSV_IO_PAUSE_TIMEOUT")), ("STATUS_CSV_IO_PAUSE_TIMEOUT") }, (ULONG)((NTSTATUS)0xC0130028L) }, { { sizeof( "STATUS_CLUSTER_CSV_INVALID_HANDLE" ) - sizeof( ("STATUS_CLUSTER_CSV_INVALID_HANDLE")[0] ), sizeof( "STATUS_CLUSTER_CSV_INVALID_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_INVALID_HANDLE")), ("STATUS_CLUSTER_CSV_INVALID_HANDLE") }, (ULONG)((NTSTATUS)0xC0130029L) }, { { sizeof( "STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR" ) - sizeof( ("STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR")[0] ), sizeof( "STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR")), ("STATUS_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR") }, (ULONG)((NTSTATUS)0xC0130030L) }, { { sizeof( "STATUS_TRANSACTIONAL_CONFLICT" ) - sizeof( ("STATUS_TRANSACTIONAL_CONFLICT")[0] ), sizeof( "STATUS_TRANSACTIONAL_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONAL_CONFLICT")), ("STATUS_TRANSACTIONAL_CONFLICT") }, (ULONG)((NTSTATUS)0xC0190001L) }, { { sizeof( "STATUS_INVALID_TRANSACTION" ) - sizeof( ("STATUS_INVALID_TRANSACTION")[0] ), sizeof( "STATUS_INVALID_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INVALID_TRANSACTION")), ("STATUS_INVALID_TRANSACTION") }, (ULONG)((NTSTATUS)0xC0190002L) }, { { sizeof( "STATUS_TRANSACTION_NOT_ACTIVE" ) - sizeof( ("STATUS_TRANSACTION_NOT_ACTIVE")[0] ), sizeof( "STATUS_TRANSACTION_NOT_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NOT_ACTIVE")), ("STATUS_TRANSACTION_NOT_ACTIVE") }, (ULONG)((NTSTATUS)0xC0190003L) }, { { sizeof( "STATUS_TM_INITIALIZATION_FAILED" ) - sizeof( ("STATUS_TM_INITIALIZATION_FAILED")[0] ), sizeof( "STATUS_TM_INITIALIZATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TM_INITIALIZATION_FAILED")), ("STATUS_TM_INITIALIZATION_FAILED") }, (ULONG)((NTSTATUS)0xC0190004L) }, { { sizeof( "STATUS_RM_NOT_ACTIVE" ) - sizeof( ("STATUS_RM_NOT_ACTIVE")[0] ), sizeof( "STATUS_RM_NOT_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RM_NOT_ACTIVE")), ("STATUS_RM_NOT_ACTIVE") }, (ULONG)((NTSTATUS)0xC0190005L) }, { { sizeof( "STATUS_RM_METADATA_CORRUPT" ) - sizeof( ("STATUS_RM_METADATA_CORRUPT")[0] ), sizeof( "STATUS_RM_METADATA_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RM_METADATA_CORRUPT")), ("STATUS_RM_METADATA_CORRUPT") }, (ULONG)((NTSTATUS)0xC0190006L) }, { { sizeof( "STATUS_TRANSACTION_NOT_JOINED" ) - sizeof( ("STATUS_TRANSACTION_NOT_JOINED")[0] ), sizeof( "STATUS_TRANSACTION_NOT_JOINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NOT_JOINED")), ("STATUS_TRANSACTION_NOT_JOINED") }, (ULONG)((NTSTATUS)0xC0190007L) }, { { sizeof( "STATUS_DIRECTORY_NOT_RM" ) - sizeof( ("STATUS_DIRECTORY_NOT_RM")[0] ), sizeof( "STATUS_DIRECTORY_NOT_RM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_DIRECTORY_NOT_RM")), ("STATUS_DIRECTORY_NOT_RM") }, (ULONG)((NTSTATUS)0xC0190008L) }, { { sizeof( "STATUS_COULD_NOT_RESIZE_LOG" ) - sizeof( ("STATUS_COULD_NOT_RESIZE_LOG")[0] ), sizeof( "STATUS_COULD_NOT_RESIZE_LOG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COULD_NOT_RESIZE_LOG")), ("STATUS_COULD_NOT_RESIZE_LOG") }, (ULONG)((NTSTATUS)0x80190009L) }, { { sizeof( "STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE" ) - sizeof( ("STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE")[0] ), sizeof( "STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE")), ("STATUS_TRANSACTIONS_UNSUPPORTED_REMOTE") }, (ULONG)((NTSTATUS)0xC019000AL) }, { { sizeof( "STATUS_LOG_RESIZE_INVALID_SIZE" ) - sizeof( ("STATUS_LOG_RESIZE_INVALID_SIZE")[0] ), sizeof( "STATUS_LOG_RESIZE_INVALID_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_RESIZE_INVALID_SIZE")), ("STATUS_LOG_RESIZE_INVALID_SIZE") }, (ULONG)((NTSTATUS)0xC019000BL) }, { { sizeof( "STATUS_REMOTE_FILE_VERSION_MISMATCH" ) - sizeof( ("STATUS_REMOTE_FILE_VERSION_MISMATCH")[0] ), sizeof( "STATUS_REMOTE_FILE_VERSION_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_REMOTE_FILE_VERSION_MISMATCH")), ("STATUS_REMOTE_FILE_VERSION_MISMATCH") }, (ULONG)((NTSTATUS)0xC019000CL) }, { { sizeof( "STATUS_CRM_PROTOCOL_ALREADY_EXISTS" ) - sizeof( ("STATUS_CRM_PROTOCOL_ALREADY_EXISTS")[0] ), sizeof( "STATUS_CRM_PROTOCOL_ALREADY_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CRM_PROTOCOL_ALREADY_EXISTS")), ("STATUS_CRM_PROTOCOL_ALREADY_EXISTS") }, (ULONG)((NTSTATUS)0xC019000FL) }, { { sizeof( "STATUS_TRANSACTION_PROPAGATION_FAILED" ) - sizeof( ("STATUS_TRANSACTION_PROPAGATION_FAILED")[0] ), sizeof( "STATUS_TRANSACTION_PROPAGATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_PROPAGATION_FAILED")), ("STATUS_TRANSACTION_PROPAGATION_FAILED") }, (ULONG)((NTSTATUS)0xC0190010L) }, { { sizeof( "STATUS_CRM_PROTOCOL_NOT_FOUND" ) - sizeof( ("STATUS_CRM_PROTOCOL_NOT_FOUND")[0] ), sizeof( "STATUS_CRM_PROTOCOL_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CRM_PROTOCOL_NOT_FOUND")), ("STATUS_CRM_PROTOCOL_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0190011L) }, { { sizeof( "STATUS_TRANSACTION_SUPERIOR_EXISTS" ) - sizeof( ("STATUS_TRANSACTION_SUPERIOR_EXISTS")[0] ), sizeof( "STATUS_TRANSACTION_SUPERIOR_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_SUPERIOR_EXISTS")), ("STATUS_TRANSACTION_SUPERIOR_EXISTS") }, (ULONG)((NTSTATUS)0xC0190012L) }, { { sizeof( "STATUS_TRANSACTION_REQUEST_NOT_VALID" ) - sizeof( ("STATUS_TRANSACTION_REQUEST_NOT_VALID")[0] ), sizeof( "STATUS_TRANSACTION_REQUEST_NOT_VALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_REQUEST_NOT_VALID")), ("STATUS_TRANSACTION_REQUEST_NOT_VALID") }, (ULONG)((NTSTATUS)0xC0190013L) }, { { sizeof( "STATUS_TRANSACTION_NOT_REQUESTED" ) - sizeof( ("STATUS_TRANSACTION_NOT_REQUESTED")[0] ), sizeof( "STATUS_TRANSACTION_NOT_REQUESTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NOT_REQUESTED")), ("STATUS_TRANSACTION_NOT_REQUESTED") }, (ULONG)((NTSTATUS)0xC0190014L) }, { { sizeof( "STATUS_TRANSACTION_ALREADY_ABORTED" ) - sizeof( ("STATUS_TRANSACTION_ALREADY_ABORTED")[0] ), sizeof( "STATUS_TRANSACTION_ALREADY_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_ALREADY_ABORTED")), ("STATUS_TRANSACTION_ALREADY_ABORTED") }, (ULONG)((NTSTATUS)0xC0190015L) }, { { sizeof( "STATUS_TRANSACTION_ALREADY_COMMITTED" ) - sizeof( ("STATUS_TRANSACTION_ALREADY_COMMITTED")[0] ), sizeof( "STATUS_TRANSACTION_ALREADY_COMMITTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_ALREADY_COMMITTED")), ("STATUS_TRANSACTION_ALREADY_COMMITTED") }, (ULONG)((NTSTATUS)0xC0190016L) }, { { sizeof( "STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER" ) - sizeof( ("STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER")[0] ), sizeof( "STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER")), ("STATUS_TRANSACTION_INVALID_MARSHALL_BUFFER") }, (ULONG)((NTSTATUS)0xC0190017L) }, { { sizeof( "STATUS_CURRENT_TRANSACTION_NOT_VALID" ) - sizeof( ("STATUS_CURRENT_TRANSACTION_NOT_VALID")[0] ), sizeof( "STATUS_CURRENT_TRANSACTION_NOT_VALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CURRENT_TRANSACTION_NOT_VALID")), ("STATUS_CURRENT_TRANSACTION_NOT_VALID") }, (ULONG)((NTSTATUS)0xC0190018L) }, { { sizeof( "STATUS_LOG_GROWTH_FAILED" ) - sizeof( ("STATUS_LOG_GROWTH_FAILED")[0] ), sizeof( "STATUS_LOG_GROWTH_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_GROWTH_FAILED")), ("STATUS_LOG_GROWTH_FAILED") }, (ULONG)((NTSTATUS)0xC0190019L) }, { { sizeof( "STATUS_OBJECT_NO_LONGER_EXISTS" ) - sizeof( ("STATUS_OBJECT_NO_LONGER_EXISTS")[0] ), sizeof( "STATUS_OBJECT_NO_LONGER_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OBJECT_NO_LONGER_EXISTS")), ("STATUS_OBJECT_NO_LONGER_EXISTS") }, (ULONG)((NTSTATUS)0xC0190021L) }, { { sizeof( "STATUS_STREAM_MINIVERSION_NOT_FOUND" ) - sizeof( ("STATUS_STREAM_MINIVERSION_NOT_FOUND")[0] ), sizeof( "STATUS_STREAM_MINIVERSION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STREAM_MINIVERSION_NOT_FOUND")), ("STATUS_STREAM_MINIVERSION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0190022L) }, { { sizeof( "STATUS_STREAM_MINIVERSION_NOT_VALID" ) - sizeof( ("STATUS_STREAM_MINIVERSION_NOT_VALID")[0] ), sizeof( "STATUS_STREAM_MINIVERSION_NOT_VALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_STREAM_MINIVERSION_NOT_VALID")), ("STATUS_STREAM_MINIVERSION_NOT_VALID") }, (ULONG)((NTSTATUS)0xC0190023L) }, { { sizeof( "STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION" ) - sizeof( ("STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION")[0] ), sizeof( "STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION")), ("STATUS_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION") }, (ULONG)((NTSTATUS)0xC0190024L) }, { { sizeof( "STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT" ) - sizeof( ("STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT")[0] ), sizeof( "STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT")), ("STATUS_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT") }, (ULONG)((NTSTATUS)0xC0190025L) }, { { sizeof( "STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS" ) - sizeof( ("STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS")[0] ), sizeof( "STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS")), ("STATUS_CANT_CREATE_MORE_STREAM_MINIVERSIONS") }, (ULONG)((NTSTATUS)0xC0190026L) }, { { sizeof( "STATUS_HANDLE_NO_LONGER_VALID" ) - sizeof( ("STATUS_HANDLE_NO_LONGER_VALID")[0] ), sizeof( "STATUS_HANDLE_NO_LONGER_VALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HANDLE_NO_LONGER_VALID")), ("STATUS_HANDLE_NO_LONGER_VALID") }, (ULONG)((NTSTATUS)0xC0190028L) }, { { sizeof( "STATUS_NO_TXF_METADATA" ) - sizeof( ("STATUS_NO_TXF_METADATA")[0] ), sizeof( "STATUS_NO_TXF_METADATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_TXF_METADATA")), ("STATUS_NO_TXF_METADATA") }, (ULONG)((NTSTATUS)0x80190029L) }, { { sizeof( "STATUS_LOG_CORRUPTION_DETECTED" ) - sizeof( ("STATUS_LOG_CORRUPTION_DETECTED")[0] ), sizeof( "STATUS_LOG_CORRUPTION_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CORRUPTION_DETECTED")), ("STATUS_LOG_CORRUPTION_DETECTED") }, (ULONG)((NTSTATUS)0xC0190030L) }, { { sizeof( "STATUS_CANT_RECOVER_WITH_HANDLE_OPEN" ) - sizeof( ("STATUS_CANT_RECOVER_WITH_HANDLE_OPEN")[0] ), sizeof( "STATUS_CANT_RECOVER_WITH_HANDLE_OPEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_RECOVER_WITH_HANDLE_OPEN")), ("STATUS_CANT_RECOVER_WITH_HANDLE_OPEN") }, (ULONG)((NTSTATUS)0x80190031L) }, { { sizeof( "STATUS_RM_DISCONNECTED" ) - sizeof( ("STATUS_RM_DISCONNECTED")[0] ), sizeof( "STATUS_RM_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RM_DISCONNECTED")), ("STATUS_RM_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC0190032L) }, { { sizeof( "STATUS_ENLISTMENT_NOT_SUPERIOR" ) - sizeof( ("STATUS_ENLISTMENT_NOT_SUPERIOR")[0] ), sizeof( "STATUS_ENLISTMENT_NOT_SUPERIOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENLISTMENT_NOT_SUPERIOR")), ("STATUS_ENLISTMENT_NOT_SUPERIOR") }, (ULONG)((NTSTATUS)0xC0190033L) }, { { sizeof( "STATUS_RECOVERY_NOT_NEEDED" ) - sizeof( ("STATUS_RECOVERY_NOT_NEEDED")[0] ), sizeof( "STATUS_RECOVERY_NOT_NEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RECOVERY_NOT_NEEDED")), ("STATUS_RECOVERY_NOT_NEEDED") }, (ULONG)((NTSTATUS)0x40190034L) }, { { sizeof( "STATUS_RM_ALREADY_STARTED" ) - sizeof( ("STATUS_RM_ALREADY_STARTED")[0] ), sizeof( "STATUS_RM_ALREADY_STARTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RM_ALREADY_STARTED")), ("STATUS_RM_ALREADY_STARTED") }, (ULONG)((NTSTATUS)0x40190035L) }, { { sizeof( "STATUS_FILE_IDENTITY_NOT_PERSISTENT" ) - sizeof( ("STATUS_FILE_IDENTITY_NOT_PERSISTENT")[0] ), sizeof( "STATUS_FILE_IDENTITY_NOT_PERSISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FILE_IDENTITY_NOT_PERSISTENT")), ("STATUS_FILE_IDENTITY_NOT_PERSISTENT") }, (ULONG)((NTSTATUS)0xC0190036L) }, { { sizeof( "STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY" ) - sizeof( ("STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY")[0] ), sizeof( "STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY")), ("STATUS_CANT_BREAK_TRANSACTIONAL_DEPENDENCY") }, (ULONG)((NTSTATUS)0xC0190037L) }, { { sizeof( "STATUS_CANT_CROSS_RM_BOUNDARY" ) - sizeof( ("STATUS_CANT_CROSS_RM_BOUNDARY")[0] ), sizeof( "STATUS_CANT_CROSS_RM_BOUNDARY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANT_CROSS_RM_BOUNDARY")), ("STATUS_CANT_CROSS_RM_BOUNDARY") }, (ULONG)((NTSTATUS)0xC0190038L) }, { { sizeof( "STATUS_TXF_DIR_NOT_EMPTY" ) - sizeof( ("STATUS_TXF_DIR_NOT_EMPTY")[0] ), sizeof( "STATUS_TXF_DIR_NOT_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TXF_DIR_NOT_EMPTY")), ("STATUS_TXF_DIR_NOT_EMPTY") }, (ULONG)((NTSTATUS)0xC0190039L) }, { { sizeof( "STATUS_INDOUBT_TRANSACTIONS_EXIST" ) - sizeof( ("STATUS_INDOUBT_TRANSACTIONS_EXIST")[0] ), sizeof( "STATUS_INDOUBT_TRANSACTIONS_EXIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_INDOUBT_TRANSACTIONS_EXIST")), ("STATUS_INDOUBT_TRANSACTIONS_EXIST") }, (ULONG)((NTSTATUS)0xC019003AL) }, { { sizeof( "STATUS_TM_VOLATILE" ) - sizeof( ("STATUS_TM_VOLATILE")[0] ), sizeof( "STATUS_TM_VOLATILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TM_VOLATILE")), ("STATUS_TM_VOLATILE") }, (ULONG)((NTSTATUS)0xC019003BL) }, { { sizeof( "STATUS_ROLLBACK_TIMER_EXPIRED" ) - sizeof( ("STATUS_ROLLBACK_TIMER_EXPIRED")[0] ), sizeof( "STATUS_ROLLBACK_TIMER_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ROLLBACK_TIMER_EXPIRED")), ("STATUS_ROLLBACK_TIMER_EXPIRED") }, (ULONG)((NTSTATUS)0xC019003CL) }, { { sizeof( "STATUS_TXF_ATTRIBUTE_CORRUPT" ) - sizeof( ("STATUS_TXF_ATTRIBUTE_CORRUPT")[0] ), sizeof( "STATUS_TXF_ATTRIBUTE_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TXF_ATTRIBUTE_CORRUPT")), ("STATUS_TXF_ATTRIBUTE_CORRUPT") }, (ULONG)((NTSTATUS)0xC019003DL) }, { { sizeof( "STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION" ) - sizeof( ("STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION")[0] ), sizeof( "STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION")), ("STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION") }, (ULONG)((NTSTATUS)0xC019003EL) }, { { sizeof( "STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED" ) - sizeof( ("STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED")[0] ), sizeof( "STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED")), ("STATUS_TRANSACTIONAL_OPEN_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC019003FL) }, { { sizeof( "STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE" ) - sizeof( ("STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE")[0] ), sizeof( "STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE")), ("STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE") }, (ULONG)((NTSTATUS)0xC0190040L) }, { { sizeof( "STATUS_TXF_METADATA_ALREADY_PRESENT" ) - sizeof( ("STATUS_TXF_METADATA_ALREADY_PRESENT")[0] ), sizeof( "STATUS_TXF_METADATA_ALREADY_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TXF_METADATA_ALREADY_PRESENT")), ("STATUS_TXF_METADATA_ALREADY_PRESENT") }, (ULONG)((NTSTATUS)0x80190041L) }, { { sizeof( "STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET" ) - sizeof( ("STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET")[0] ), sizeof( "STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET")), ("STATUS_TRANSACTION_SCOPE_CALLBACKS_NOT_SET") }, (ULONG)((NTSTATUS)0x80190042L) }, { { sizeof( "STATUS_TRANSACTION_REQUIRED_PROMOTION" ) - sizeof( ("STATUS_TRANSACTION_REQUIRED_PROMOTION")[0] ), sizeof( "STATUS_TRANSACTION_REQUIRED_PROMOTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_REQUIRED_PROMOTION")), ("STATUS_TRANSACTION_REQUIRED_PROMOTION") }, (ULONG)((NTSTATUS)0xC0190043L) }, { { sizeof( "STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION" ) - sizeof( ("STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION")[0] ), sizeof( "STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION")), ("STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION") }, (ULONG)((NTSTATUS)0xC0190044L) }, { { sizeof( "STATUS_TRANSACTIONS_NOT_FROZEN" ) - sizeof( ("STATUS_TRANSACTIONS_NOT_FROZEN")[0] ), sizeof( "STATUS_TRANSACTIONS_NOT_FROZEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONS_NOT_FROZEN")), ("STATUS_TRANSACTIONS_NOT_FROZEN") }, (ULONG)((NTSTATUS)0xC0190045L) }, { { sizeof( "STATUS_TRANSACTION_FREEZE_IN_PROGRESS" ) - sizeof( ("STATUS_TRANSACTION_FREEZE_IN_PROGRESS")[0] ), sizeof( "STATUS_TRANSACTION_FREEZE_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_FREEZE_IN_PROGRESS")), ("STATUS_TRANSACTION_FREEZE_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0190046L) }, { { sizeof( "STATUS_NOT_SNAPSHOT_VOLUME" ) - sizeof( ("STATUS_NOT_SNAPSHOT_VOLUME")[0] ), sizeof( "STATUS_NOT_SNAPSHOT_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NOT_SNAPSHOT_VOLUME")), ("STATUS_NOT_SNAPSHOT_VOLUME") }, (ULONG)((NTSTATUS)0xC0190047L) }, { { sizeof( "STATUS_NO_SAVEPOINT_WITH_OPEN_FILES" ) - sizeof( ("STATUS_NO_SAVEPOINT_WITH_OPEN_FILES")[0] ), sizeof( "STATUS_NO_SAVEPOINT_WITH_OPEN_FILES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_SAVEPOINT_WITH_OPEN_FILES")), ("STATUS_NO_SAVEPOINT_WITH_OPEN_FILES") }, (ULONG)((NTSTATUS)0xC0190048L) }, { { sizeof( "STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION" ) - sizeof( ("STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION")[0] ), sizeof( "STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION")), ("STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION") }, (ULONG)((NTSTATUS)0xC0190049L) }, { { sizeof( "STATUS_TM_IDENTITY_MISMATCH" ) - sizeof( ("STATUS_TM_IDENTITY_MISMATCH")[0] ), sizeof( "STATUS_TM_IDENTITY_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TM_IDENTITY_MISMATCH")), ("STATUS_TM_IDENTITY_MISMATCH") }, (ULONG)((NTSTATUS)0xC019004AL) }, { { sizeof( "STATUS_FLOATED_SECTION" ) - sizeof( ("STATUS_FLOATED_SECTION")[0] ), sizeof( "STATUS_FLOATED_SECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FLOATED_SECTION")), ("STATUS_FLOATED_SECTION") }, (ULONG)((NTSTATUS)0xC019004BL) }, { { sizeof( "STATUS_CANNOT_ACCEPT_TRANSACTED_WORK" ) - sizeof( ("STATUS_CANNOT_ACCEPT_TRANSACTED_WORK")[0] ), sizeof( "STATUS_CANNOT_ACCEPT_TRANSACTED_WORK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_ACCEPT_TRANSACTED_WORK")), ("STATUS_CANNOT_ACCEPT_TRANSACTED_WORK") }, (ULONG)((NTSTATUS)0xC019004CL) }, { { sizeof( "STATUS_CANNOT_ABORT_TRANSACTIONS" ) - sizeof( ("STATUS_CANNOT_ABORT_TRANSACTIONS")[0] ), sizeof( "STATUS_CANNOT_ABORT_TRANSACTIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CANNOT_ABORT_TRANSACTIONS")), ("STATUS_CANNOT_ABORT_TRANSACTIONS") }, (ULONG)((NTSTATUS)0xC019004DL) }, { { sizeof( "STATUS_TRANSACTION_NOT_FOUND" ) - sizeof( ("STATUS_TRANSACTION_NOT_FOUND")[0] ), sizeof( "STATUS_TRANSACTION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NOT_FOUND")), ("STATUS_TRANSACTION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC019004EL) }, { { sizeof( "STATUS_RESOURCEMANAGER_NOT_FOUND" ) - sizeof( ("STATUS_RESOURCEMANAGER_NOT_FOUND")[0] ), sizeof( "STATUS_RESOURCEMANAGER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RESOURCEMANAGER_NOT_FOUND")), ("STATUS_RESOURCEMANAGER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC019004FL) }, { { sizeof( "STATUS_ENLISTMENT_NOT_FOUND" ) - sizeof( ("STATUS_ENLISTMENT_NOT_FOUND")[0] ), sizeof( "STATUS_ENLISTMENT_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_ENLISTMENT_NOT_FOUND")), ("STATUS_ENLISTMENT_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0190050L) }, { { sizeof( "STATUS_TRANSACTIONMANAGER_NOT_FOUND" ) - sizeof( ("STATUS_TRANSACTIONMANAGER_NOT_FOUND")[0] ), sizeof( "STATUS_TRANSACTIONMANAGER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONMANAGER_NOT_FOUND")), ("STATUS_TRANSACTIONMANAGER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0190051L) }, { { sizeof( "STATUS_TRANSACTIONMANAGER_NOT_ONLINE" ) - sizeof( ("STATUS_TRANSACTIONMANAGER_NOT_ONLINE")[0] ), sizeof( "STATUS_TRANSACTIONMANAGER_NOT_ONLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONMANAGER_NOT_ONLINE")), ("STATUS_TRANSACTIONMANAGER_NOT_ONLINE") }, (ULONG)((NTSTATUS)0xC0190052L) }, { { sizeof( "STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION" ) - sizeof( ("STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION")[0] ), sizeof( "STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION")), ("STATUS_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION") }, (ULONG)((NTSTATUS)0xC0190053L) }, { { sizeof( "STATUS_TRANSACTION_NOT_ROOT" ) - sizeof( ("STATUS_TRANSACTION_NOT_ROOT")[0] ), sizeof( "STATUS_TRANSACTION_NOT_ROOT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NOT_ROOT")), ("STATUS_TRANSACTION_NOT_ROOT") }, (ULONG)((NTSTATUS)0xC0190054L) }, { { sizeof( "STATUS_TRANSACTION_OBJECT_EXPIRED" ) - sizeof( ("STATUS_TRANSACTION_OBJECT_EXPIRED")[0] ), sizeof( "STATUS_TRANSACTION_OBJECT_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_OBJECT_EXPIRED")), ("STATUS_TRANSACTION_OBJECT_EXPIRED") }, (ULONG)((NTSTATUS)0xC0190055L) }, { { sizeof( "STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION" ) - sizeof( ("STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION")[0] ), sizeof( "STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION")), ("STATUS_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION") }, (ULONG)((NTSTATUS)0xC0190056L) }, { { sizeof( "STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED" ) - sizeof( ("STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED")[0] ), sizeof( "STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED")), ("STATUS_TRANSACTION_RESPONSE_NOT_ENLISTED") }, (ULONG)((NTSTATUS)0xC0190057L) }, { { sizeof( "STATUS_TRANSACTION_RECORD_TOO_LONG" ) - sizeof( ("STATUS_TRANSACTION_RECORD_TOO_LONG")[0] ), sizeof( "STATUS_TRANSACTION_RECORD_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_RECORD_TOO_LONG")), ("STATUS_TRANSACTION_RECORD_TOO_LONG") }, (ULONG)((NTSTATUS)0xC0190058L) }, { { sizeof( "STATUS_NO_LINK_TRACKING_IN_TRANSACTION" ) - sizeof( ("STATUS_NO_LINK_TRACKING_IN_TRANSACTION")[0] ), sizeof( "STATUS_NO_LINK_TRACKING_IN_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_LINK_TRACKING_IN_TRANSACTION")), ("STATUS_NO_LINK_TRACKING_IN_TRANSACTION") }, (ULONG)((NTSTATUS)0xC0190059L) }, { { sizeof( "STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION" ) - sizeof( ("STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION")[0] ), sizeof( "STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION")), ("STATUS_OPERATION_NOT_SUPPORTED_IN_TRANSACTION") }, (ULONG)((NTSTATUS)0xC019005AL) }, { { sizeof( "STATUS_TRANSACTION_INTEGRITY_VIOLATED" ) - sizeof( ("STATUS_TRANSACTION_INTEGRITY_VIOLATED")[0] ), sizeof( "STATUS_TRANSACTION_INTEGRITY_VIOLATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_INTEGRITY_VIOLATED")), ("STATUS_TRANSACTION_INTEGRITY_VIOLATED") }, (ULONG)((NTSTATUS)0xC019005BL) }, { { sizeof( "STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH" ) - sizeof( ("STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH")[0] ), sizeof( "STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH")), ("STATUS_TRANSACTIONMANAGER_IDENTITY_MISMATCH") }, (ULONG)((NTSTATUS)0xC019005CL) }, { { sizeof( "STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT" ) - sizeof( ("STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT")[0] ), sizeof( "STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT")), ("STATUS_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT") }, (ULONG)((NTSTATUS)0xC019005DL) }, { { sizeof( "STATUS_TRANSACTION_MUST_WRITETHROUGH" ) - sizeof( ("STATUS_TRANSACTION_MUST_WRITETHROUGH")[0] ), sizeof( "STATUS_TRANSACTION_MUST_WRITETHROUGH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_MUST_WRITETHROUGH")), ("STATUS_TRANSACTION_MUST_WRITETHROUGH") }, (ULONG)((NTSTATUS)0xC019005EL) }, { { sizeof( "STATUS_TRANSACTION_NO_SUPERIOR" ) - sizeof( ("STATUS_TRANSACTION_NO_SUPERIOR")[0] ), sizeof( "STATUS_TRANSACTION_NO_SUPERIOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NO_SUPERIOR")), ("STATUS_TRANSACTION_NO_SUPERIOR") }, (ULONG)((NTSTATUS)0xC019005FL) }, { { sizeof( "STATUS_EXPIRED_HANDLE" ) - sizeof( ("STATUS_EXPIRED_HANDLE")[0] ), sizeof( "STATUS_EXPIRED_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_EXPIRED_HANDLE")), ("STATUS_EXPIRED_HANDLE") }, (ULONG)((NTSTATUS)0xC0190060L) }, { { sizeof( "STATUS_TRANSACTION_NOT_ENLISTED" ) - sizeof( ("STATUS_TRANSACTION_NOT_ENLISTED")[0] ), sizeof( "STATUS_TRANSACTION_NOT_ENLISTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TRANSACTION_NOT_ENLISTED")), ("STATUS_TRANSACTION_NOT_ENLISTED") }, (ULONG)((NTSTATUS)0xC0190061L) }, { { sizeof( "STATUS_LOG_SECTOR_INVALID" ) - sizeof( ("STATUS_LOG_SECTOR_INVALID")[0] ), sizeof( "STATUS_LOG_SECTOR_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_SECTOR_INVALID")), ("STATUS_LOG_SECTOR_INVALID") }, (ULONG)((NTSTATUS)0xC01A0001L) }, { { sizeof( "STATUS_LOG_SECTOR_PARITY_INVALID" ) - sizeof( ("STATUS_LOG_SECTOR_PARITY_INVALID")[0] ), sizeof( "STATUS_LOG_SECTOR_PARITY_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_SECTOR_PARITY_INVALID")), ("STATUS_LOG_SECTOR_PARITY_INVALID") }, (ULONG)((NTSTATUS)0xC01A0002L) }, { { sizeof( "STATUS_LOG_SECTOR_REMAPPED" ) - sizeof( ("STATUS_LOG_SECTOR_REMAPPED")[0] ), sizeof( "STATUS_LOG_SECTOR_REMAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_SECTOR_REMAPPED")), ("STATUS_LOG_SECTOR_REMAPPED") }, (ULONG)((NTSTATUS)0xC01A0003L) }, { { sizeof( "STATUS_LOG_BLOCK_INCOMPLETE" ) - sizeof( ("STATUS_LOG_BLOCK_INCOMPLETE")[0] ), sizeof( "STATUS_LOG_BLOCK_INCOMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_BLOCK_INCOMPLETE")), ("STATUS_LOG_BLOCK_INCOMPLETE") }, (ULONG)((NTSTATUS)0xC01A0004L) }, { { sizeof( "STATUS_LOG_INVALID_RANGE" ) - sizeof( ("STATUS_LOG_INVALID_RANGE")[0] ), sizeof( "STATUS_LOG_INVALID_RANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_INVALID_RANGE")), ("STATUS_LOG_INVALID_RANGE") }, (ULONG)((NTSTATUS)0xC01A0005L) }, { { sizeof( "STATUS_LOG_BLOCKS_EXHAUSTED" ) - sizeof( ("STATUS_LOG_BLOCKS_EXHAUSTED")[0] ), sizeof( "STATUS_LOG_BLOCKS_EXHAUSTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_BLOCKS_EXHAUSTED")), ("STATUS_LOG_BLOCKS_EXHAUSTED") }, (ULONG)((NTSTATUS)0xC01A0006L) }, { { sizeof( "STATUS_LOG_READ_CONTEXT_INVALID" ) - sizeof( ("STATUS_LOG_READ_CONTEXT_INVALID")[0] ), sizeof( "STATUS_LOG_READ_CONTEXT_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_READ_CONTEXT_INVALID")), ("STATUS_LOG_READ_CONTEXT_INVALID") }, (ULONG)((NTSTATUS)0xC01A0007L) }, { { sizeof( "STATUS_LOG_RESTART_INVALID" ) - sizeof( ("STATUS_LOG_RESTART_INVALID")[0] ), sizeof( "STATUS_LOG_RESTART_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_RESTART_INVALID")), ("STATUS_LOG_RESTART_INVALID") }, (ULONG)((NTSTATUS)0xC01A0008L) }, { { sizeof( "STATUS_LOG_BLOCK_VERSION" ) - sizeof( ("STATUS_LOG_BLOCK_VERSION")[0] ), sizeof( "STATUS_LOG_BLOCK_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_BLOCK_VERSION")), ("STATUS_LOG_BLOCK_VERSION") }, (ULONG)((NTSTATUS)0xC01A0009L) }, { { sizeof( "STATUS_LOG_BLOCK_INVALID" ) - sizeof( ("STATUS_LOG_BLOCK_INVALID")[0] ), sizeof( "STATUS_LOG_BLOCK_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_BLOCK_INVALID")), ("STATUS_LOG_BLOCK_INVALID") }, (ULONG)((NTSTATUS)0xC01A000AL) }, { { sizeof( "STATUS_LOG_READ_MODE_INVALID" ) - sizeof( ("STATUS_LOG_READ_MODE_INVALID")[0] ), sizeof( "STATUS_LOG_READ_MODE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_READ_MODE_INVALID")), ("STATUS_LOG_READ_MODE_INVALID") }, (ULONG)((NTSTATUS)0xC01A000BL) }, { { sizeof( "STATUS_LOG_NO_RESTART" ) - sizeof( ("STATUS_LOG_NO_RESTART")[0] ), sizeof( "STATUS_LOG_NO_RESTART" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_NO_RESTART")), ("STATUS_LOG_NO_RESTART") }, (ULONG)((NTSTATUS)0x401A000CL) }, { { sizeof( "STATUS_LOG_METADATA_CORRUPT" ) - sizeof( ("STATUS_LOG_METADATA_CORRUPT")[0] ), sizeof( "STATUS_LOG_METADATA_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_METADATA_CORRUPT")), ("STATUS_LOG_METADATA_CORRUPT") }, (ULONG)((NTSTATUS)0xC01A000DL) }, { { sizeof( "STATUS_LOG_METADATA_INVALID" ) - sizeof( ("STATUS_LOG_METADATA_INVALID")[0] ), sizeof( "STATUS_LOG_METADATA_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_METADATA_INVALID")), ("STATUS_LOG_METADATA_INVALID") }, (ULONG)((NTSTATUS)0xC01A000EL) }, { { sizeof( "STATUS_LOG_METADATA_INCONSISTENT" ) - sizeof( ("STATUS_LOG_METADATA_INCONSISTENT")[0] ), sizeof( "STATUS_LOG_METADATA_INCONSISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_METADATA_INCONSISTENT")), ("STATUS_LOG_METADATA_INCONSISTENT") }, (ULONG)((NTSTATUS)0xC01A000FL) }, { { sizeof( "STATUS_LOG_RESERVATION_INVALID" ) - sizeof( ("STATUS_LOG_RESERVATION_INVALID")[0] ), sizeof( "STATUS_LOG_RESERVATION_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_RESERVATION_INVALID")), ("STATUS_LOG_RESERVATION_INVALID") }, (ULONG)((NTSTATUS)0xC01A0010L) }, { { sizeof( "STATUS_LOG_CANT_DELETE" ) - sizeof( ("STATUS_LOG_CANT_DELETE")[0] ), sizeof( "STATUS_LOG_CANT_DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CANT_DELETE")), ("STATUS_LOG_CANT_DELETE") }, (ULONG)((NTSTATUS)0xC01A0011L) }, { { sizeof( "STATUS_LOG_CONTAINER_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_LOG_CONTAINER_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_LOG_CONTAINER_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CONTAINER_LIMIT_EXCEEDED")), ("STATUS_LOG_CONTAINER_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC01A0012L) }, { { sizeof( "STATUS_LOG_START_OF_LOG" ) - sizeof( ("STATUS_LOG_START_OF_LOG")[0] ), sizeof( "STATUS_LOG_START_OF_LOG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_START_OF_LOG")), ("STATUS_LOG_START_OF_LOG") }, (ULONG)((NTSTATUS)0xC01A0013L) }, { { sizeof( "STATUS_LOG_POLICY_ALREADY_INSTALLED" ) - sizeof( ("STATUS_LOG_POLICY_ALREADY_INSTALLED")[0] ), sizeof( "STATUS_LOG_POLICY_ALREADY_INSTALLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_POLICY_ALREADY_INSTALLED")), ("STATUS_LOG_POLICY_ALREADY_INSTALLED") }, (ULONG)((NTSTATUS)0xC01A0014L) }, { { sizeof( "STATUS_LOG_POLICY_NOT_INSTALLED" ) - sizeof( ("STATUS_LOG_POLICY_NOT_INSTALLED")[0] ), sizeof( "STATUS_LOG_POLICY_NOT_INSTALLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_POLICY_NOT_INSTALLED")), ("STATUS_LOG_POLICY_NOT_INSTALLED") }, (ULONG)((NTSTATUS)0xC01A0015L) }, { { sizeof( "STATUS_LOG_POLICY_INVALID" ) - sizeof( ("STATUS_LOG_POLICY_INVALID")[0] ), sizeof( "STATUS_LOG_POLICY_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_POLICY_INVALID")), ("STATUS_LOG_POLICY_INVALID") }, (ULONG)((NTSTATUS)0xC01A0016L) }, { { sizeof( "STATUS_LOG_POLICY_CONFLICT" ) - sizeof( ("STATUS_LOG_POLICY_CONFLICT")[0] ), sizeof( "STATUS_LOG_POLICY_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_POLICY_CONFLICT")), ("STATUS_LOG_POLICY_CONFLICT") }, (ULONG)((NTSTATUS)0xC01A0017L) }, { { sizeof( "STATUS_LOG_PINNED_ARCHIVE_TAIL" ) - sizeof( ("STATUS_LOG_PINNED_ARCHIVE_TAIL")[0] ), sizeof( "STATUS_LOG_PINNED_ARCHIVE_TAIL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_PINNED_ARCHIVE_TAIL")), ("STATUS_LOG_PINNED_ARCHIVE_TAIL") }, (ULONG)((NTSTATUS)0xC01A0018L) }, { { sizeof( "STATUS_LOG_RECORD_NONEXISTENT" ) - sizeof( ("STATUS_LOG_RECORD_NONEXISTENT")[0] ), sizeof( "STATUS_LOG_RECORD_NONEXISTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_RECORD_NONEXISTENT")), ("STATUS_LOG_RECORD_NONEXISTENT") }, (ULONG)((NTSTATUS)0xC01A0019L) }, { { sizeof( "STATUS_LOG_RECORDS_RESERVED_INVALID" ) - sizeof( ("STATUS_LOG_RECORDS_RESERVED_INVALID")[0] ), sizeof( "STATUS_LOG_RECORDS_RESERVED_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_RECORDS_RESERVED_INVALID")), ("STATUS_LOG_RECORDS_RESERVED_INVALID") }, (ULONG)((NTSTATUS)0xC01A001AL) }, { { sizeof( "STATUS_LOG_SPACE_RESERVED_INVALID" ) - sizeof( ("STATUS_LOG_SPACE_RESERVED_INVALID")[0] ), sizeof( "STATUS_LOG_SPACE_RESERVED_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_SPACE_RESERVED_INVALID")), ("STATUS_LOG_SPACE_RESERVED_INVALID") }, (ULONG)((NTSTATUS)0xC01A001BL) }, { { sizeof( "STATUS_LOG_TAIL_INVALID" ) - sizeof( ("STATUS_LOG_TAIL_INVALID")[0] ), sizeof( "STATUS_LOG_TAIL_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_TAIL_INVALID")), ("STATUS_LOG_TAIL_INVALID") }, (ULONG)((NTSTATUS)0xC01A001CL) }, { { sizeof( "STATUS_LOG_FULL" ) - sizeof( ("STATUS_LOG_FULL")[0] ), sizeof( "STATUS_LOG_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_FULL")), ("STATUS_LOG_FULL") }, (ULONG)((NTSTATUS)0xC01A001DL) }, { { sizeof( "STATUS_LOG_MULTIPLEXED" ) - sizeof( ("STATUS_LOG_MULTIPLEXED")[0] ), sizeof( "STATUS_LOG_MULTIPLEXED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_MULTIPLEXED")), ("STATUS_LOG_MULTIPLEXED") }, (ULONG)((NTSTATUS)0xC01A001EL) }, { { sizeof( "STATUS_LOG_DEDICATED" ) - sizeof( ("STATUS_LOG_DEDICATED")[0] ), sizeof( "STATUS_LOG_DEDICATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_DEDICATED")), ("STATUS_LOG_DEDICATED") }, (ULONG)((NTSTATUS)0xC01A001FL) }, { { sizeof( "STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS" ) - sizeof( ("STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS")[0] ), sizeof( "STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS")), ("STATUS_LOG_ARCHIVE_NOT_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC01A0020L) }, { { sizeof( "STATUS_LOG_ARCHIVE_IN_PROGRESS" ) - sizeof( ("STATUS_LOG_ARCHIVE_IN_PROGRESS")[0] ), sizeof( "STATUS_LOG_ARCHIVE_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_ARCHIVE_IN_PROGRESS")), ("STATUS_LOG_ARCHIVE_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC01A0021L) }, { { sizeof( "STATUS_LOG_EPHEMERAL" ) - sizeof( ("STATUS_LOG_EPHEMERAL")[0] ), sizeof( "STATUS_LOG_EPHEMERAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_EPHEMERAL")), ("STATUS_LOG_EPHEMERAL") }, (ULONG)((NTSTATUS)0xC01A0022L) }, { { sizeof( "STATUS_LOG_NOT_ENOUGH_CONTAINERS" ) - sizeof( ("STATUS_LOG_NOT_ENOUGH_CONTAINERS")[0] ), sizeof( "STATUS_LOG_NOT_ENOUGH_CONTAINERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_NOT_ENOUGH_CONTAINERS")), ("STATUS_LOG_NOT_ENOUGH_CONTAINERS") }, (ULONG)((NTSTATUS)0xC01A0023L) }, { { sizeof( "STATUS_LOG_CLIENT_ALREADY_REGISTERED" ) - sizeof( ("STATUS_LOG_CLIENT_ALREADY_REGISTERED")[0] ), sizeof( "STATUS_LOG_CLIENT_ALREADY_REGISTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CLIENT_ALREADY_REGISTERED")), ("STATUS_LOG_CLIENT_ALREADY_REGISTERED") }, (ULONG)((NTSTATUS)0xC01A0024L) }, { { sizeof( "STATUS_LOG_CLIENT_NOT_REGISTERED" ) - sizeof( ("STATUS_LOG_CLIENT_NOT_REGISTERED")[0] ), sizeof( "STATUS_LOG_CLIENT_NOT_REGISTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CLIENT_NOT_REGISTERED")), ("STATUS_LOG_CLIENT_NOT_REGISTERED") }, (ULONG)((NTSTATUS)0xC01A0025L) }, { { sizeof( "STATUS_LOG_FULL_HANDLER_IN_PROGRESS" ) - sizeof( ("STATUS_LOG_FULL_HANDLER_IN_PROGRESS")[0] ), sizeof( "STATUS_LOG_FULL_HANDLER_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_FULL_HANDLER_IN_PROGRESS")), ("STATUS_LOG_FULL_HANDLER_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC01A0026L) }, { { sizeof( "STATUS_LOG_CONTAINER_READ_FAILED" ) - sizeof( ("STATUS_LOG_CONTAINER_READ_FAILED")[0] ), sizeof( "STATUS_LOG_CONTAINER_READ_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CONTAINER_READ_FAILED")), ("STATUS_LOG_CONTAINER_READ_FAILED") }, (ULONG)((NTSTATUS)0xC01A0027L) }, { { sizeof( "STATUS_LOG_CONTAINER_WRITE_FAILED" ) - sizeof( ("STATUS_LOG_CONTAINER_WRITE_FAILED")[0] ), sizeof( "STATUS_LOG_CONTAINER_WRITE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CONTAINER_WRITE_FAILED")), ("STATUS_LOG_CONTAINER_WRITE_FAILED") }, (ULONG)((NTSTATUS)0xC01A0028L) }, { { sizeof( "STATUS_LOG_CONTAINER_OPEN_FAILED" ) - sizeof( ("STATUS_LOG_CONTAINER_OPEN_FAILED")[0] ), sizeof( "STATUS_LOG_CONTAINER_OPEN_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CONTAINER_OPEN_FAILED")), ("STATUS_LOG_CONTAINER_OPEN_FAILED") }, (ULONG)((NTSTATUS)0xC01A0029L) }, { { sizeof( "STATUS_LOG_CONTAINER_STATE_INVALID" ) - sizeof( ("STATUS_LOG_CONTAINER_STATE_INVALID")[0] ), sizeof( "STATUS_LOG_CONTAINER_STATE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_CONTAINER_STATE_INVALID")), ("STATUS_LOG_CONTAINER_STATE_INVALID") }, (ULONG)((NTSTATUS)0xC01A002AL) }, { { sizeof( "STATUS_LOG_STATE_INVALID" ) - sizeof( ("STATUS_LOG_STATE_INVALID")[0] ), sizeof( "STATUS_LOG_STATE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_STATE_INVALID")), ("STATUS_LOG_STATE_INVALID") }, (ULONG)((NTSTATUS)0xC01A002BL) }, { { sizeof( "STATUS_LOG_PINNED" ) - sizeof( ("STATUS_LOG_PINNED")[0] ), sizeof( "STATUS_LOG_PINNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_PINNED")), ("STATUS_LOG_PINNED") }, (ULONG)((NTSTATUS)0xC01A002CL) }, { { sizeof( "STATUS_LOG_METADATA_FLUSH_FAILED" ) - sizeof( ("STATUS_LOG_METADATA_FLUSH_FAILED")[0] ), sizeof( "STATUS_LOG_METADATA_FLUSH_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_METADATA_FLUSH_FAILED")), ("STATUS_LOG_METADATA_FLUSH_FAILED") }, (ULONG)((NTSTATUS)0xC01A002DL) }, { { sizeof( "STATUS_LOG_INCONSISTENT_SECURITY" ) - sizeof( ("STATUS_LOG_INCONSISTENT_SECURITY")[0] ), sizeof( "STATUS_LOG_INCONSISTENT_SECURITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_INCONSISTENT_SECURITY")), ("STATUS_LOG_INCONSISTENT_SECURITY") }, (ULONG)((NTSTATUS)0xC01A002EL) }, { { sizeof( "STATUS_LOG_APPENDED_FLUSH_FAILED" ) - sizeof( ("STATUS_LOG_APPENDED_FLUSH_FAILED")[0] ), sizeof( "STATUS_LOG_APPENDED_FLUSH_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_APPENDED_FLUSH_FAILED")), ("STATUS_LOG_APPENDED_FLUSH_FAILED") }, (ULONG)((NTSTATUS)0xC01A002FL) }, { { sizeof( "STATUS_LOG_PINNED_RESERVATION" ) - sizeof( ("STATUS_LOG_PINNED_RESERVATION")[0] ), sizeof( "STATUS_LOG_PINNED_RESERVATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_LOG_PINNED_RESERVATION")), ("STATUS_LOG_PINNED_RESERVATION") }, (ULONG)((NTSTATUS)0xC01A0030L) }, { { sizeof( "STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD" ) - sizeof( ("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD")[0] ), sizeof( "STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD")), ("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD") }, (ULONG)((NTSTATUS)0xC01B00EAL) }, { { sizeof( "STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED" ) - sizeof( ("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED")[0] ), sizeof( "STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED")), ("STATUS_VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED") }, (ULONG)((NTSTATUS)0x801B00EBL) }, { { sizeof( "STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST" ) - sizeof( ("STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST")[0] ), sizeof( "STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST")), ("STATUS_VIDEO_DRIVER_DEBUG_REPORT_REQUEST") }, (ULONG)((NTSTATUS)0x401B00ECL) }, { { sizeof( "STATUS_MONITOR_NO_DESCRIPTOR" ) - sizeof( ("STATUS_MONITOR_NO_DESCRIPTOR")[0] ), sizeof( "STATUS_MONITOR_NO_DESCRIPTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_NO_DESCRIPTOR")), ("STATUS_MONITOR_NO_DESCRIPTOR") }, (ULONG)((NTSTATUS)0xC01D0001L) }, { { sizeof( "STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT" ) - sizeof( ("STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT")[0] ), sizeof( "STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT")), ("STATUS_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT") }, (ULONG)((NTSTATUS)0xC01D0002L) }, { { sizeof( "STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM" ) - sizeof( ("STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM")[0] ), sizeof( "STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM")), ("STATUS_MONITOR_INVALID_DESCRIPTOR_CHECKSUM") }, (ULONG)((NTSTATUS)0xC01D0003L) }, { { sizeof( "STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK" ) - sizeof( ("STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK")[0] ), sizeof( "STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK")), ("STATUS_MONITOR_INVALID_STANDARD_TIMING_BLOCK") }, (ULONG)((NTSTATUS)0xC01D0004L) }, { { sizeof( "STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED" ) - sizeof( ("STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED")[0] ), sizeof( "STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED")), ("STATUS_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED") }, (ULONG)((NTSTATUS)0xC01D0005L) }, { { sizeof( "STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK" ) - sizeof( ("STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK")[0] ), sizeof( "STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK")), ("STATUS_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK") }, (ULONG)((NTSTATUS)0xC01D0006L) }, { { sizeof( "STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK" ) - sizeof( ("STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK")[0] ), sizeof( "STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK")), ("STATUS_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK") }, (ULONG)((NTSTATUS)0xC01D0007L) }, { { sizeof( "STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA" ) - sizeof( ("STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA")[0] ), sizeof( "STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA")), ("STATUS_MONITOR_NO_MORE_DESCRIPTOR_DATA") }, (ULONG)((NTSTATUS)0xC01D0008L) }, { { sizeof( "STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK" ) - sizeof( ("STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK")[0] ), sizeof( "STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK")), ("STATUS_MONITOR_INVALID_DETAILED_TIMING_BLOCK") }, (ULONG)((NTSTATUS)0xC01D0009L) }, { { sizeof( "STATUS_MONITOR_INVALID_MANUFACTURE_DATE" ) - sizeof( ("STATUS_MONITOR_INVALID_MANUFACTURE_DATE")[0] ), sizeof( "STATUS_MONITOR_INVALID_MANUFACTURE_DATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_MONITOR_INVALID_MANUFACTURE_DATE")), ("STATUS_MONITOR_INVALID_MANUFACTURE_DATE") }, (ULONG)((NTSTATUS)0xC01D000AL) }, { { sizeof( "STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER" ) - sizeof( ("STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER")[0] ), sizeof( "STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER")), ("STATUS_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER") }, (ULONG)((NTSTATUS)0xC01E0000L) }, { { sizeof( "STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER" ) - sizeof( ("STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER")[0] ), sizeof( "STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER")), ("STATUS_GRAPHICS_INSUFFICIENT_DMA_BUFFER") }, (ULONG)((NTSTATUS)0xC01E0001L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER" ) - sizeof( ("STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER")), ("STATUS_GRAPHICS_INVALID_DISPLAY_ADAPTER") }, (ULONG)((NTSTATUS)0xC01E0002L) }, { { sizeof( "STATUS_GRAPHICS_ADAPTER_WAS_RESET" ) - sizeof( ("STATUS_GRAPHICS_ADAPTER_WAS_RESET")[0] ), sizeof( "STATUS_GRAPHICS_ADAPTER_WAS_RESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ADAPTER_WAS_RESET")), ("STATUS_GRAPHICS_ADAPTER_WAS_RESET") }, (ULONG)((NTSTATUS)0xC01E0003L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_DRIVER_MODEL" ) - sizeof( ("STATUS_GRAPHICS_INVALID_DRIVER_MODEL")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_DRIVER_MODEL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_DRIVER_MODEL")), ("STATUS_GRAPHICS_INVALID_DRIVER_MODEL") }, (ULONG)((NTSTATUS)0xC01E0004L) }, { { sizeof( "STATUS_GRAPHICS_PRESENT_MODE_CHANGED" ) - sizeof( ("STATUS_GRAPHICS_PRESENT_MODE_CHANGED")[0] ), sizeof( "STATUS_GRAPHICS_PRESENT_MODE_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PRESENT_MODE_CHANGED")), ("STATUS_GRAPHICS_PRESENT_MODE_CHANGED") }, (ULONG)((NTSTATUS)0xC01E0005L) }, { { sizeof( "STATUS_GRAPHICS_PRESENT_OCCLUDED" ) - sizeof( ("STATUS_GRAPHICS_PRESENT_OCCLUDED")[0] ), sizeof( "STATUS_GRAPHICS_PRESENT_OCCLUDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PRESENT_OCCLUDED")), ("STATUS_GRAPHICS_PRESENT_OCCLUDED") }, (ULONG)((NTSTATUS)0xC01E0006L) }, { { sizeof( "STATUS_GRAPHICS_PRESENT_DENIED" ) - sizeof( ("STATUS_GRAPHICS_PRESENT_DENIED")[0] ), sizeof( "STATUS_GRAPHICS_PRESENT_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PRESENT_DENIED")), ("STATUS_GRAPHICS_PRESENT_DENIED") }, (ULONG)((NTSTATUS)0xC01E0007L) }, { { sizeof( "STATUS_GRAPHICS_CANNOTCOLORCONVERT" ) - sizeof( ("STATUS_GRAPHICS_CANNOTCOLORCONVERT")[0] ), sizeof( "STATUS_GRAPHICS_CANNOTCOLORCONVERT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CANNOTCOLORCONVERT")), ("STATUS_GRAPHICS_CANNOTCOLORCONVERT") }, (ULONG)((NTSTATUS)0xC01E0008L) }, { { sizeof( "STATUS_GRAPHICS_DRIVER_MISMATCH" ) - sizeof( ("STATUS_GRAPHICS_DRIVER_MISMATCH")[0] ), sizeof( "STATUS_GRAPHICS_DRIVER_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DRIVER_MISMATCH")), ("STATUS_GRAPHICS_DRIVER_MISMATCH") }, (ULONG)((NTSTATUS)0xC01E0009L) }, { { sizeof( "STATUS_GRAPHICS_PARTIAL_DATA_POPULATED" ) - sizeof( ("STATUS_GRAPHICS_PARTIAL_DATA_POPULATED")[0] ), sizeof( "STATUS_GRAPHICS_PARTIAL_DATA_POPULATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PARTIAL_DATA_POPULATED")), ("STATUS_GRAPHICS_PARTIAL_DATA_POPULATED") }, (ULONG)((NTSTATUS)0x401E000AL) }, { { sizeof( "STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED" ) - sizeof( ("STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED")[0] ), sizeof( "STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED")), ("STATUS_GRAPHICS_PRESENT_REDIRECTION_DISABLED") }, (ULONG)((NTSTATUS)0xC01E000BL) }, { { sizeof( "STATUS_GRAPHICS_PRESENT_UNOCCLUDED" ) - sizeof( ("STATUS_GRAPHICS_PRESENT_UNOCCLUDED")[0] ), sizeof( "STATUS_GRAPHICS_PRESENT_UNOCCLUDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PRESENT_UNOCCLUDED")), ("STATUS_GRAPHICS_PRESENT_UNOCCLUDED") }, (ULONG)((NTSTATUS)0xC01E000CL) }, { { sizeof( "STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE" ) - sizeof( ("STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE")[0] ), sizeof( "STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE")), ("STATUS_GRAPHICS_WINDOWDC_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC01E000DL) }, { { sizeof( "STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED" ) - sizeof( ("STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED")[0] ), sizeof( "STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED")), ("STATUS_GRAPHICS_WINDOWLESS_PRESENT_DISABLED") }, (ULONG)((NTSTATUS)0xC01E000EL) }, { { sizeof( "STATUS_GRAPHICS_NO_VIDEO_MEMORY" ) - sizeof( ("STATUS_GRAPHICS_NO_VIDEO_MEMORY")[0] ), sizeof( "STATUS_GRAPHICS_NO_VIDEO_MEMORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_VIDEO_MEMORY")), ("STATUS_GRAPHICS_NO_VIDEO_MEMORY") }, (ULONG)((NTSTATUS)0xC01E0100L) }, { { sizeof( "STATUS_GRAPHICS_CANT_LOCK_MEMORY" ) - sizeof( ("STATUS_GRAPHICS_CANT_LOCK_MEMORY")[0] ), sizeof( "STATUS_GRAPHICS_CANT_LOCK_MEMORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CANT_LOCK_MEMORY")), ("STATUS_GRAPHICS_CANT_LOCK_MEMORY") }, (ULONG)((NTSTATUS)0xC01E0101L) }, { { sizeof( "STATUS_GRAPHICS_ALLOCATION_BUSY" ) - sizeof( ("STATUS_GRAPHICS_ALLOCATION_BUSY")[0] ), sizeof( "STATUS_GRAPHICS_ALLOCATION_BUSY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ALLOCATION_BUSY")), ("STATUS_GRAPHICS_ALLOCATION_BUSY") }, (ULONG)((NTSTATUS)0xC01E0102L) }, { { sizeof( "STATUS_GRAPHICS_TOO_MANY_REFERENCES" ) - sizeof( ("STATUS_GRAPHICS_TOO_MANY_REFERENCES")[0] ), sizeof( "STATUS_GRAPHICS_TOO_MANY_REFERENCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TOO_MANY_REFERENCES")), ("STATUS_GRAPHICS_TOO_MANY_REFERENCES") }, (ULONG)((NTSTATUS)0xC01E0103L) }, { { sizeof( "STATUS_GRAPHICS_TRY_AGAIN_LATER" ) - sizeof( ("STATUS_GRAPHICS_TRY_AGAIN_LATER")[0] ), sizeof( "STATUS_GRAPHICS_TRY_AGAIN_LATER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TRY_AGAIN_LATER")), ("STATUS_GRAPHICS_TRY_AGAIN_LATER") }, (ULONG)((NTSTATUS)0xC01E0104L) }, { { sizeof( "STATUS_GRAPHICS_TRY_AGAIN_NOW" ) - sizeof( ("STATUS_GRAPHICS_TRY_AGAIN_NOW")[0] ), sizeof( "STATUS_GRAPHICS_TRY_AGAIN_NOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TRY_AGAIN_NOW")), ("STATUS_GRAPHICS_TRY_AGAIN_NOW") }, (ULONG)((NTSTATUS)0xC01E0105L) }, { { sizeof( "STATUS_GRAPHICS_ALLOCATION_INVALID" ) - sizeof( ("STATUS_GRAPHICS_ALLOCATION_INVALID")[0] ), sizeof( "STATUS_GRAPHICS_ALLOCATION_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ALLOCATION_INVALID")), ("STATUS_GRAPHICS_ALLOCATION_INVALID") }, (ULONG)((NTSTATUS)0xC01E0106L) }, { { sizeof( "STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE" ) - sizeof( ("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE")[0] ), sizeof( "STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE")), ("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC01E0107L) }, { { sizeof( "STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED")), ("STATUS_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0108L) }, { { sizeof( "STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION" ) - sizeof( ("STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION")[0] ), sizeof( "STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION")), ("STATUS_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION") }, (ULONG)((NTSTATUS)0xC01E0109L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE")), ("STATUS_GRAPHICS_INVALID_ALLOCATION_USAGE") }, (ULONG)((NTSTATUS)0xC01E0110L) }, { { sizeof( "STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION" ) - sizeof( ("STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION")[0] ), sizeof( "STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION")), ("STATUS_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION") }, (ULONG)((NTSTATUS)0xC01E0111L) }, { { sizeof( "STATUS_GRAPHICS_ALLOCATION_CLOSED" ) - sizeof( ("STATUS_GRAPHICS_ALLOCATION_CLOSED")[0] ), sizeof( "STATUS_GRAPHICS_ALLOCATION_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ALLOCATION_CLOSED")), ("STATUS_GRAPHICS_ALLOCATION_CLOSED") }, (ULONG)((NTSTATUS)0xC01E0112L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE")), ("STATUS_GRAPHICS_INVALID_ALLOCATION_INSTANCE") }, (ULONG)((NTSTATUS)0xC01E0113L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE")), ("STATUS_GRAPHICS_INVALID_ALLOCATION_HANDLE") }, (ULONG)((NTSTATUS)0xC01E0114L) }, { { sizeof( "STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE" ) - sizeof( ("STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE")[0] ), sizeof( "STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE")), ("STATUS_GRAPHICS_WRONG_ALLOCATION_DEVICE") }, (ULONG)((NTSTATUS)0xC01E0115L) }, { { sizeof( "STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST" ) - sizeof( ("STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST")[0] ), sizeof( "STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST")), ("STATUS_GRAPHICS_ALLOCATION_CONTENT_LOST") }, (ULONG)((NTSTATUS)0xC01E0116L) }, { { sizeof( "STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE" ) - sizeof( ("STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE")[0] ), sizeof( "STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE")), ("STATUS_GRAPHICS_GPU_EXCEPTION_ON_DEVICE") }, (ULONG)((NTSTATUS)0xC01E0200L) }, { { sizeof( "STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION" ) - sizeof( ("STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION")[0] ), sizeof( "STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION")), ("STATUS_GRAPHICS_SKIP_ALLOCATION_PREPARATION") }, (ULONG)((NTSTATUS)0x401E0201L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY")), ("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E0300L) }, { { sizeof( "STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED")), ("STATUS_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0301L) }, { { sizeof( "STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED")), ("STATUS_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0302L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN")), ("STATUS_GRAPHICS_INVALID_VIDPN") }, (ULONG)((NTSTATUS)0xC01E0303L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE")), ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE") }, (ULONG)((NTSTATUS)0xC01E0304L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET")), ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET") }, (ULONG)((NTSTATUS)0xC01E0305L) }, { { sizeof( "STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED")), ("STATUS_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0306L) }, { { sizeof( "STATUS_GRAPHICS_MODE_NOT_PINNED" ) - sizeof( ("STATUS_GRAPHICS_MODE_NOT_PINNED")[0] ), sizeof( "STATUS_GRAPHICS_MODE_NOT_PINNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MODE_NOT_PINNED")), ("STATUS_GRAPHICS_MODE_NOT_PINNED") }, (ULONG)((NTSTATUS)0x401E0307L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET")), ("STATUS_GRAPHICS_INVALID_VIDPN_SOURCEMODESET") }, (ULONG)((NTSTATUS)0xC01E0308L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET")), ("STATUS_GRAPHICS_INVALID_VIDPN_TARGETMODESET") }, (ULONG)((NTSTATUS)0xC01E0309L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_FREQUENCY" ) - sizeof( ("STATUS_GRAPHICS_INVALID_FREQUENCY")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_FREQUENCY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_FREQUENCY")), ("STATUS_GRAPHICS_INVALID_FREQUENCY") }, (ULONG)((NTSTATUS)0xC01E030AL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_ACTIVE_REGION" ) - sizeof( ("STATUS_GRAPHICS_INVALID_ACTIVE_REGION")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_ACTIVE_REGION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_ACTIVE_REGION")), ("STATUS_GRAPHICS_INVALID_ACTIVE_REGION") }, (ULONG)((NTSTATUS)0xC01E030BL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_TOTAL_REGION" ) - sizeof( ("STATUS_GRAPHICS_INVALID_TOTAL_REGION")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_TOTAL_REGION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_TOTAL_REGION")), ("STATUS_GRAPHICS_INVALID_TOTAL_REGION") }, (ULONG)((NTSTATUS)0xC01E030CL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE")), ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE") }, (ULONG)((NTSTATUS)0xC01E0310L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE")), ("STATUS_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE") }, (ULONG)((NTSTATUS)0xC01E0311L) }, { { sizeof( "STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET")), ("STATUS_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET") }, (ULONG)((NTSTATUS)0xC01E0312L) }, { { sizeof( "STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY")), ("STATUS_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E0313L) }, { { sizeof( "STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET" ) - sizeof( ("STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET")[0] ), sizeof( "STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET")), ("STATUS_GRAPHICS_MODE_ALREADY_IN_MODESET") }, (ULONG)((NTSTATUS)0xC01E0314L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET")), ("STATUS_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET") }, (ULONG)((NTSTATUS)0xC01E0315L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET")), ("STATUS_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET") }, (ULONG)((NTSTATUS)0xC01E0316L) }, { { sizeof( "STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET")), ("STATUS_GRAPHICS_SOURCE_ALREADY_IN_SET") }, (ULONG)((NTSTATUS)0xC01E0317L) }, { { sizeof( "STATUS_GRAPHICS_TARGET_ALREADY_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_TARGET_ALREADY_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_TARGET_ALREADY_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TARGET_ALREADY_IN_SET")), ("STATUS_GRAPHICS_TARGET_ALREADY_IN_SET") }, (ULONG)((NTSTATUS)0xC01E0318L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH")), ("STATUS_GRAPHICS_INVALID_VIDPN_PRESENT_PATH") }, (ULONG)((NTSTATUS)0xC01E0319L) }, { { sizeof( "STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY")), ("STATUS_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E031AL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET")), ("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET") }, (ULONG)((NTSTATUS)0xC01E031BL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE")), ("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE") }, (ULONG)((NTSTATUS)0xC01E031CL) }, { { sizeof( "STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET")), ("STATUS_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET") }, (ULONG)((NTSTATUS)0xC01E031DL) }, { { sizeof( "STATUS_GRAPHICS_NO_PREFERRED_MODE" ) - sizeof( ("STATUS_GRAPHICS_NO_PREFERRED_MODE")[0] ), sizeof( "STATUS_GRAPHICS_NO_PREFERRED_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_PREFERRED_MODE")), ("STATUS_GRAPHICS_NO_PREFERRED_MODE") }, (ULONG)((NTSTATUS)0x401E031EL) }, { { sizeof( "STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET")), ("STATUS_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET") }, (ULONG)((NTSTATUS)0xC01E031FL) }, { { sizeof( "STATUS_GRAPHICS_STALE_MODESET" ) - sizeof( ("STATUS_GRAPHICS_STALE_MODESET")[0] ), sizeof( "STATUS_GRAPHICS_STALE_MODESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_STALE_MODESET")), ("STATUS_GRAPHICS_STALE_MODESET") }, (ULONG)((NTSTATUS)0xC01E0320L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET")), ("STATUS_GRAPHICS_INVALID_MONITOR_SOURCEMODESET") }, (ULONG)((NTSTATUS)0xC01E0321L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE")), ("STATUS_GRAPHICS_INVALID_MONITOR_SOURCE_MODE") }, (ULONG)((NTSTATUS)0xC01E0322L) }, { { sizeof( "STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN" ) - sizeof( ("STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN")[0] ), sizeof( "STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN")), ("STATUS_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN") }, (ULONG)((NTSTATUS)0xC01E0323L) }, { { sizeof( "STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE" ) - sizeof( ("STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE")[0] ), sizeof( "STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE")), ("STATUS_GRAPHICS_MODE_ID_MUST_BE_UNIQUE") }, (ULONG)((NTSTATUS)0xC01E0324L) }, { { sizeof( "STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION" ) - sizeof( ("STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION")[0] ), sizeof( "STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION")), ("STATUS_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION") }, (ULONG)((NTSTATUS)0xC01E0325L) }, { { sizeof( "STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES" ) - sizeof( ("STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES")[0] ), sizeof( "STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES")), ("STATUS_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES") }, (ULONG)((NTSTATUS)0xC01E0326L) }, { { sizeof( "STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY")), ("STATUS_GRAPHICS_PATH_NOT_IN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E0327L) }, { { sizeof( "STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE" ) - sizeof( ("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE")[0] ), sizeof( "STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE")), ("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE") }, (ULONG)((NTSTATUS)0xC01E0328L) }, { { sizeof( "STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET" ) - sizeof( ("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET")[0] ), sizeof( "STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET")), ("STATUS_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET") }, (ULONG)((NTSTATUS)0xC01E0329L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET")), ("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTORSET") }, (ULONG)((NTSTATUS)0xC01E032AL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR")), ("STATUS_GRAPHICS_INVALID_MONITORDESCRIPTOR") }, (ULONG)((NTSTATUS)0xC01E032BL) }, { { sizeof( "STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET")), ("STATUS_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET") }, (ULONG)((NTSTATUS)0xC01E032CL) }, { { sizeof( "STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET" ) - sizeof( ("STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET")[0] ), sizeof( "STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET")), ("STATUS_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET") }, (ULONG)((NTSTATUS)0xC01E032DL) }, { { sizeof( "STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE" ) - sizeof( ("STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE")[0] ), sizeof( "STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE")), ("STATUS_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE") }, (ULONG)((NTSTATUS)0xC01E032EL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE")), ("STATUS_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE") }, (ULONG)((NTSTATUS)0xC01E032FL) }, { { sizeof( "STATUS_GRAPHICS_RESOURCES_NOT_RELATED" ) - sizeof( ("STATUS_GRAPHICS_RESOURCES_NOT_RELATED")[0] ), sizeof( "STATUS_GRAPHICS_RESOURCES_NOT_RELATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_RESOURCES_NOT_RELATED")), ("STATUS_GRAPHICS_RESOURCES_NOT_RELATED") }, (ULONG)((NTSTATUS)0xC01E0330L) }, { { sizeof( "STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE" ) - sizeof( ("STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE")[0] ), sizeof( "STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE")), ("STATUS_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE") }, (ULONG)((NTSTATUS)0xC01E0331L) }, { { sizeof( "STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE" ) - sizeof( ("STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE")[0] ), sizeof( "STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE")), ("STATUS_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE") }, (ULONG)((NTSTATUS)0xC01E0332L) }, { { sizeof( "STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET" ) - sizeof( ("STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET")[0] ), sizeof( "STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET")), ("STATUS_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET") }, (ULONG)((NTSTATUS)0xC01E0333L) }, { { sizeof( "STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER" ) - sizeof( ("STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER")[0] ), sizeof( "STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER")), ("STATUS_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER") }, (ULONG)((NTSTATUS)0xC01E0334L) }, { { sizeof( "STATUS_GRAPHICS_NO_VIDPNMGR" ) - sizeof( ("STATUS_GRAPHICS_NO_VIDPNMGR")[0] ), sizeof( "STATUS_GRAPHICS_NO_VIDPNMGR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_VIDPNMGR")), ("STATUS_GRAPHICS_NO_VIDPNMGR") }, (ULONG)((NTSTATUS)0xC01E0335L) }, { { sizeof( "STATUS_GRAPHICS_NO_ACTIVE_VIDPN" ) - sizeof( ("STATUS_GRAPHICS_NO_ACTIVE_VIDPN")[0] ), sizeof( "STATUS_GRAPHICS_NO_ACTIVE_VIDPN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_ACTIVE_VIDPN")), ("STATUS_GRAPHICS_NO_ACTIVE_VIDPN") }, (ULONG)((NTSTATUS)0xC01E0336L) }, { { sizeof( "STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY")), ("STATUS_GRAPHICS_STALE_VIDPN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E0337L) }, { { sizeof( "STATUS_GRAPHICS_MONITOR_NOT_CONNECTED" ) - sizeof( ("STATUS_GRAPHICS_MONITOR_NOT_CONNECTED")[0] ), sizeof( "STATUS_GRAPHICS_MONITOR_NOT_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MONITOR_NOT_CONNECTED")), ("STATUS_GRAPHICS_MONITOR_NOT_CONNECTED") }, (ULONG)((NTSTATUS)0xC01E0338L) }, { { sizeof( "STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY")), ("STATUS_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E0339L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE")), ("STATUS_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE") }, (ULONG)((NTSTATUS)0xC01E033AL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE")), ("STATUS_GRAPHICS_INVALID_VISIBLEREGION_SIZE") }, (ULONG)((NTSTATUS)0xC01E033BL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_STRIDE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_STRIDE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_STRIDE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_STRIDE")), ("STATUS_GRAPHICS_INVALID_STRIDE") }, (ULONG)((NTSTATUS)0xC01E033CL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PIXELFORMAT" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PIXELFORMAT")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PIXELFORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PIXELFORMAT")), ("STATUS_GRAPHICS_INVALID_PIXELFORMAT") }, (ULONG)((NTSTATUS)0xC01E033DL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_COLORBASIS" ) - sizeof( ("STATUS_GRAPHICS_INVALID_COLORBASIS")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_COLORBASIS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_COLORBASIS")), ("STATUS_GRAPHICS_INVALID_COLORBASIS") }, (ULONG)((NTSTATUS)0xC01E033EL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE")), ("STATUS_GRAPHICS_INVALID_PIXELVALUEACCESSMODE") }, (ULONG)((NTSTATUS)0xC01E033FL) }, { { sizeof( "STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY" ) - sizeof( ("STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY")[0] ), sizeof( "STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY")), ("STATUS_GRAPHICS_TARGET_NOT_IN_TOPOLOGY") }, (ULONG)((NTSTATUS)0xC01E0340L) }, { { sizeof( "STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT" ) - sizeof( ("STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT")[0] ), sizeof( "STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT")), ("STATUS_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT") }, (ULONG)((NTSTATUS)0xC01E0341L) }, { { sizeof( "STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE" ) - sizeof( ("STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE")[0] ), sizeof( "STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE")), ("STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE") }, (ULONG)((NTSTATUS)0xC01E0342L) }, { { sizeof( "STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN" ) - sizeof( ("STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN")[0] ), sizeof( "STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN")), ("STATUS_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN") }, (ULONG)((NTSTATUS)0xC01E0343L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL")), ("STATUS_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL") }, (ULONG)((NTSTATUS)0xC01E0344L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION")), ("STATUS_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION") }, (ULONG)((NTSTATUS)0xC01E0345L) }, { { sizeof( "STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED")), ("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0346L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_GAMMA_RAMP" ) - sizeof( ("STATUS_GRAPHICS_INVALID_GAMMA_RAMP")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_GAMMA_RAMP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_GAMMA_RAMP")), ("STATUS_GRAPHICS_INVALID_GAMMA_RAMP") }, (ULONG)((NTSTATUS)0xC01E0347L) }, { { sizeof( "STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED")), ("STATUS_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0348L) }, { { sizeof( "STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED")), ("STATUS_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0349L) }, { { sizeof( "STATUS_GRAPHICS_MODE_NOT_IN_MODESET" ) - sizeof( ("STATUS_GRAPHICS_MODE_NOT_IN_MODESET")[0] ), sizeof( "STATUS_GRAPHICS_MODE_NOT_IN_MODESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MODE_NOT_IN_MODESET")), ("STATUS_GRAPHICS_MODE_NOT_IN_MODESET") }, (ULONG)((NTSTATUS)0xC01E034AL) }, { { sizeof( "STATUS_GRAPHICS_DATASET_IS_EMPTY" ) - sizeof( ("STATUS_GRAPHICS_DATASET_IS_EMPTY")[0] ), sizeof( "STATUS_GRAPHICS_DATASET_IS_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DATASET_IS_EMPTY")), ("STATUS_GRAPHICS_DATASET_IS_EMPTY") }, (ULONG)((NTSTATUS)0x401E034BL) }, { { sizeof( "STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET" ) - sizeof( ("STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET")[0] ), sizeof( "STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET")), ("STATUS_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET") }, (ULONG)((NTSTATUS)0x401E034CL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON" ) - sizeof( ("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON")), ("STATUS_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON") }, (ULONG)((NTSTATUS)0xC01E034DL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE")), ("STATUS_GRAPHICS_INVALID_PATH_CONTENT_TYPE") }, (ULONG)((NTSTATUS)0xC01E034EL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE")), ("STATUS_GRAPHICS_INVALID_COPYPROTECTION_TYPE") }, (ULONG)((NTSTATUS)0xC01E034FL) }, { { sizeof( "STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS" ) - sizeof( ("STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS")[0] ), sizeof( "STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS")), ("STATUS_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS") }, (ULONG)((NTSTATUS)0xC01E0350L) }, { { sizeof( "STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED" ) - sizeof( ("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED")[0] ), sizeof( "STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED")), ("STATUS_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED") }, (ULONG)((NTSTATUS)0x401E0351L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING" ) - sizeof( ("STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING")), ("STATUS_GRAPHICS_INVALID_SCANLINE_ORDERING") }, (ULONG)((NTSTATUS)0xC01E0352L) }, { { sizeof( "STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED" ) - sizeof( ("STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED")[0] ), sizeof( "STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED")), ("STATUS_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC01E0353L) }, { { sizeof( "STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS" ) - sizeof( ("STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS")[0] ), sizeof( "STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS")), ("STATUS_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS") }, (ULONG)((NTSTATUS)0xC01E0354L) }, { { sizeof( "STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT" ) - sizeof( ("STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT")[0] ), sizeof( "STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT")), ("STATUS_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT") }, (ULONG)((NTSTATUS)0xC01E0355L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM")), ("STATUS_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM") }, (ULONG)((NTSTATUS)0xC01E0356L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN")), ("STATUS_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN") }, (ULONG)((NTSTATUS)0xC01E0357L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT" ) - sizeof( ("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT")), ("STATUS_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT") }, (ULONG)((NTSTATUS)0xC01E0358L) }, { { sizeof( "STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED" ) - sizeof( ("STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED")[0] ), sizeof( "STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED")), ("STATUS_GRAPHICS_MAX_NUM_PATHS_REACHED") }, (ULONG)((NTSTATUS)0xC01E0359L) }, { { sizeof( "STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION" ) - sizeof( ("STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION")[0] ), sizeof( "STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION")), ("STATUS_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION") }, (ULONG)((NTSTATUS)0xC01E035AL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_CLIENT_TYPE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_CLIENT_TYPE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_CLIENT_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_CLIENT_TYPE")), ("STATUS_GRAPHICS_INVALID_CLIENT_TYPE") }, (ULONG)((NTSTATUS)0xC01E035BL) }, { { sizeof( "STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET" ) - sizeof( ("STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET")[0] ), sizeof( "STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET")), ("STATUS_GRAPHICS_CLIENTVIDPN_NOT_SET") }, (ULONG)((NTSTATUS)0xC01E035CL) }, { { sizeof( "STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED" ) - sizeof( ("STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED")[0] ), sizeof( "STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED")), ("STATUS_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED") }, (ULONG)((NTSTATUS)0xC01E0400L) }, { { sizeof( "STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED")), ("STATUS_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0401L) }, { { sizeof( "STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS" ) - sizeof( ("STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS")[0] ), sizeof( "STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS")), ("STATUS_GRAPHICS_UNKNOWN_CHILD_STATUS") }, (ULONG)((NTSTATUS)0x401E042FL) }, { { sizeof( "STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER" ) - sizeof( ("STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER")[0] ), sizeof( "STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER")), ("STATUS_GRAPHICS_NOT_A_LINKED_ADAPTER") }, (ULONG)((NTSTATUS)0xC01E0430L) }, { { sizeof( "STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED" ) - sizeof( ("STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED")[0] ), sizeof( "STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED")), ("STATUS_GRAPHICS_LEADLINK_NOT_ENUMERATED") }, (ULONG)((NTSTATUS)0xC01E0431L) }, { { sizeof( "STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED" ) - sizeof( ("STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED")[0] ), sizeof( "STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED")), ("STATUS_GRAPHICS_CHAINLINKS_NOT_ENUMERATED") }, (ULONG)((NTSTATUS)0xC01E0432L) }, { { sizeof( "STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY" ) - sizeof( ("STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY")[0] ), sizeof( "STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY")), ("STATUS_GRAPHICS_ADAPTER_CHAIN_NOT_READY") }, (ULONG)((NTSTATUS)0xC01E0433L) }, { { sizeof( "STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED" ) - sizeof( ("STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED")[0] ), sizeof( "STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED")), ("STATUS_GRAPHICS_CHAINLINKS_NOT_STARTED") }, (ULONG)((NTSTATUS)0xC01E0434L) }, { { sizeof( "STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON" ) - sizeof( ("STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON")[0] ), sizeof( "STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON")), ("STATUS_GRAPHICS_CHAINLINKS_NOT_POWERED_ON") }, (ULONG)((NTSTATUS)0xC01E0435L) }, { { sizeof( "STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE" ) - sizeof( ("STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE")[0] ), sizeof( "STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE")), ("STATUS_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE") }, (ULONG)((NTSTATUS)0xC01E0436L) }, { { sizeof( "STATUS_GRAPHICS_LEADLINK_START_DEFERRED" ) - sizeof( ("STATUS_GRAPHICS_LEADLINK_START_DEFERRED")[0] ), sizeof( "STATUS_GRAPHICS_LEADLINK_START_DEFERRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_LEADLINK_START_DEFERRED")), ("STATUS_GRAPHICS_LEADLINK_START_DEFERRED") }, (ULONG)((NTSTATUS)0x401E0437L) }, { { sizeof( "STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER" ) - sizeof( ("STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER")[0] ), sizeof( "STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER")), ("STATUS_GRAPHICS_NOT_POST_DEVICE_DRIVER") }, (ULONG)((NTSTATUS)0xC01E0438L) }, { { sizeof( "STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY" ) - sizeof( ("STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY")[0] ), sizeof( "STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY")), ("STATUS_GRAPHICS_POLLING_TOO_FREQUENTLY") }, (ULONG)((NTSTATUS)0x401E0439L) }, { { sizeof( "STATUS_GRAPHICS_START_DEFERRED" ) - sizeof( ("STATUS_GRAPHICS_START_DEFERRED")[0] ), sizeof( "STATUS_GRAPHICS_START_DEFERRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_START_DEFERRED")), ("STATUS_GRAPHICS_START_DEFERRED") }, (ULONG)((NTSTATUS)0x401E043AL) }, { { sizeof( "STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED" ) - sizeof( ("STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED")[0] ), sizeof( "STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED")), ("STATUS_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED") }, (ULONG)((NTSTATUS)0xC01E043BL) }, { { sizeof( "STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS" ) - sizeof( ("STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS")[0] ), sizeof( "STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS")), ("STATUS_GRAPHICS_DEPENDABLE_CHILD_STATUS") }, (ULONG)((NTSTATUS)0x401E043CL) }, { { sizeof( "STATUS_GRAPHICS_OPM_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_OPM_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_OPM_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_NOT_SUPPORTED")), ("STATUS_GRAPHICS_OPM_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0500L) }, { { sizeof( "STATUS_GRAPHICS_COPP_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_COPP_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_COPP_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_COPP_NOT_SUPPORTED")), ("STATUS_GRAPHICS_COPP_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0501L) }, { { sizeof( "STATUS_GRAPHICS_UAB_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_UAB_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_UAB_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_UAB_NOT_SUPPORTED")), ("STATUS_GRAPHICS_UAB_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0502L) }, { { sizeof( "STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS" ) - sizeof( ("STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS")[0] ), sizeof( "STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS")), ("STATUS_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS") }, (ULONG)((NTSTATUS)0xC01E0503L) }, { { sizeof( "STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST" ) - sizeof( ("STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST")[0] ), sizeof( "STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST")), ("STATUS_GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST") }, (ULONG)((NTSTATUS)0xC01E0505L) }, { { sizeof( "STATUS_GRAPHICS_OPM_INTERNAL_ERROR" ) - sizeof( ("STATUS_GRAPHICS_OPM_INTERNAL_ERROR")[0] ), sizeof( "STATUS_GRAPHICS_OPM_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_INTERNAL_ERROR")), ("STATUS_GRAPHICS_OPM_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC01E050BL) }, { { sizeof( "STATUS_GRAPHICS_OPM_INVALID_HANDLE" ) - sizeof( ("STATUS_GRAPHICS_OPM_INVALID_HANDLE")[0] ), sizeof( "STATUS_GRAPHICS_OPM_INVALID_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_INVALID_HANDLE")), ("STATUS_GRAPHICS_OPM_INVALID_HANDLE") }, (ULONG)((NTSTATUS)0xC01E050CL) }, { { sizeof( "STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH" ) - sizeof( ("STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH")[0] ), sizeof( "STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH")), ("STATUS_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH") }, (ULONG)((NTSTATUS)0xC01E050EL) }, { { sizeof( "STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED" ) - sizeof( ("STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED")[0] ), sizeof( "STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED")), ("STATUS_GRAPHICS_OPM_SPANNING_MODE_ENABLED") }, (ULONG)((NTSTATUS)0xC01E050FL) }, { { sizeof( "STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED" ) - sizeof( ("STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED")[0] ), sizeof( "STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED")), ("STATUS_GRAPHICS_OPM_THEATER_MODE_ENABLED") }, (ULONG)((NTSTATUS)0xC01E0510L) }, { { sizeof( "STATUS_GRAPHICS_PVP_HFS_FAILED" ) - sizeof( ("STATUS_GRAPHICS_PVP_HFS_FAILED")[0] ), sizeof( "STATUS_GRAPHICS_PVP_HFS_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PVP_HFS_FAILED")), ("STATUS_GRAPHICS_PVP_HFS_FAILED") }, (ULONG)((NTSTATUS)0xC01E0511L) }, { { sizeof( "STATUS_GRAPHICS_OPM_INVALID_SRM" ) - sizeof( ("STATUS_GRAPHICS_OPM_INVALID_SRM")[0] ), sizeof( "STATUS_GRAPHICS_OPM_INVALID_SRM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_INVALID_SRM")), ("STATUS_GRAPHICS_OPM_INVALID_SRM") }, (ULONG)((NTSTATUS)0xC01E0512L) }, { { sizeof( "STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP" ) - sizeof( ("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP")[0] ), sizeof( "STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP")), ("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP") }, (ULONG)((NTSTATUS)0xC01E0513L) }, { { sizeof( "STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP" ) - sizeof( ("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP")[0] ), sizeof( "STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP")), ("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP") }, (ULONG)((NTSTATUS)0xC01E0514L) }, { { sizeof( "STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA" ) - sizeof( ("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA")[0] ), sizeof( "STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA")), ("STATUS_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA") }, (ULONG)((NTSTATUS)0xC01E0515L) }, { { sizeof( "STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET" ) - sizeof( ("STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET")[0] ), sizeof( "STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET")), ("STATUS_GRAPHICS_OPM_HDCP_SRM_NEVER_SET") }, (ULONG)((NTSTATUS)0xC01E0516L) }, { { sizeof( "STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH" ) - sizeof( ("STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH")[0] ), sizeof( "STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH")), ("STATUS_GRAPHICS_OPM_RESOLUTION_TOO_HIGH") }, (ULONG)((NTSTATUS)0xC01E0517L) }, { { sizeof( "STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE" ) - sizeof( ("STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE")[0] ), sizeof( "STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE")), ("STATUS_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE") }, (ULONG)((NTSTATUS)0xC01E0518L) }, { { sizeof( "STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS" ) - sizeof( ("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS")[0] ), sizeof( "STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS")), ("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS") }, (ULONG)((NTSTATUS)0xC01E051AL) }, { { sizeof( "STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS" ) - sizeof( ("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS")[0] ), sizeof( "STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS")), ("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS") }, (ULONG)((NTSTATUS)0xC01E051CL) }, { { sizeof( "STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST" ) - sizeof( ("STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST")[0] ), sizeof( "STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST")), ("STATUS_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST") }, (ULONG)((NTSTATUS)0xC01E051DL) }, { { sizeof( "STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR" ) - sizeof( ("STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR")[0] ), sizeof( "STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR")), ("STATUS_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC01E051EL) }, { { sizeof( "STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS" ) - sizeof( ("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS")[0] ), sizeof( "STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS")), ("STATUS_GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS") }, (ULONG)((NTSTATUS)0xC01E051FL) }, { { sizeof( "STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED")), ("STATUS_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0520L) }, { { sizeof( "STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST" ) - sizeof( ("STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST")[0] ), sizeof( "STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST")), ("STATUS_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST") }, (ULONG)((NTSTATUS)0xC01E0521L) }, { { sizeof( "STATUS_GRAPHICS_I2C_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_I2C_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_I2C_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_I2C_NOT_SUPPORTED")), ("STATUS_GRAPHICS_I2C_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0580L) }, { { sizeof( "STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST" ) - sizeof( ("STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST")[0] ), sizeof( "STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST")), ("STATUS_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST") }, (ULONG)((NTSTATUS)0xC01E0581L) }, { { sizeof( "STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA" ) - sizeof( ("STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA")[0] ), sizeof( "STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA")), ("STATUS_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA") }, (ULONG)((NTSTATUS)0xC01E0582L) }, { { sizeof( "STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA" ) - sizeof( ("STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA")[0] ), sizeof( "STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA")), ("STATUS_GRAPHICS_I2C_ERROR_RECEIVING_DATA") }, (ULONG)((NTSTATUS)0xC01E0583L) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED")), ("STATUS_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E0584L) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_DATA" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_INVALID_DATA")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_INVALID_DATA")), ("STATUS_GRAPHICS_DDCCI_INVALID_DATA") }, (ULONG)((NTSTATUS)0xC01E0585L) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE")), ("STATUS_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE") }, (ULONG)((NTSTATUS)0xC01E0586L) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING")), ("STATUS_GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING") }, (ULONG)((NTSTATUS)0xC01E0587L) }, { { sizeof( "STATUS_GRAPHICS_MCA_INTERNAL_ERROR" ) - sizeof( ("STATUS_GRAPHICS_MCA_INTERNAL_ERROR")[0] ), sizeof( "STATUS_GRAPHICS_MCA_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MCA_INTERNAL_ERROR")), ("STATUS_GRAPHICS_MCA_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC01E0588L) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND")), ("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND") }, (ULONG)((NTSTATUS)0xC01E0589L) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH")), ("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH") }, (ULONG)((NTSTATUS)0xC01E058AL) }, { { sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM" ) - sizeof( ("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM")[0] ), sizeof( "STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM")), ("STATUS_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM") }, (ULONG)((NTSTATUS)0xC01E058BL) }, { { sizeof( "STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE" ) - sizeof( ("STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE")), ("STATUS_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE") }, (ULONG)((NTSTATUS)0xC01E058CL) }, { { sizeof( "STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS" ) - sizeof( ("STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS")[0] ), sizeof( "STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS")), ("STATUS_GRAPHICS_MONITOR_NO_LONGER_EXISTS") }, (ULONG)((NTSTATUS)0xC01E058DL) }, { { sizeof( "STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED")), ("STATUS_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E05E0L) }, { { sizeof( "STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME" ) - sizeof( ("STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME")[0] ), sizeof( "STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME")), ("STATUS_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME") }, (ULONG)((NTSTATUS)0xC01E05E1L) }, { { sizeof( "STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP" ) - sizeof( ("STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP")[0] ), sizeof( "STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP")), ("STATUS_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP") }, (ULONG)((NTSTATUS)0xC01E05E2L) }, { { sizeof( "STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED" ) - sizeof( ("STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED")[0] ), sizeof( "STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED")), ("STATUS_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC01E05E3L) }, { { sizeof( "STATUS_GRAPHICS_INVALID_POINTER" ) - sizeof( ("STATUS_GRAPHICS_INVALID_POINTER")[0] ), sizeof( "STATUS_GRAPHICS_INVALID_POINTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INVALID_POINTER")), ("STATUS_GRAPHICS_INVALID_POINTER") }, (ULONG)((NTSTATUS)0xC01E05E4L) }, { { sizeof( "STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE" ) - sizeof( ("STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE")[0] ), sizeof( "STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE")), ("STATUS_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE") }, (ULONG)((NTSTATUS)0xC01E05E5L) }, { { sizeof( "STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL" ) - sizeof( ("STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL")[0] ), sizeof( "STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL")), ("STATUS_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC01E05E6L) }, { { sizeof( "STATUS_GRAPHICS_INTERNAL_ERROR" ) - sizeof( ("STATUS_GRAPHICS_INTERNAL_ERROR")[0] ), sizeof( "STATUS_GRAPHICS_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_INTERNAL_ERROR")), ("STATUS_GRAPHICS_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC01E05E7L) }, { { sizeof( "STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS" ) - sizeof( ("STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS")[0] ), sizeof( "STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS")), ("STATUS_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC01E05E8L) }, { { sizeof( "STATUS_FVE_LOCKED_VOLUME" ) - sizeof( ("STATUS_FVE_LOCKED_VOLUME")[0] ), sizeof( "STATUS_FVE_LOCKED_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_LOCKED_VOLUME")), ("STATUS_FVE_LOCKED_VOLUME") }, (ULONG)((NTSTATUS)0xC0210000L) }, { { sizeof( "STATUS_FVE_NOT_ENCRYPTED" ) - sizeof( ("STATUS_FVE_NOT_ENCRYPTED")[0] ), sizeof( "STATUS_FVE_NOT_ENCRYPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_ENCRYPTED")), ("STATUS_FVE_NOT_ENCRYPTED") }, (ULONG)((NTSTATUS)0xC0210001L) }, { { sizeof( "STATUS_FVE_BAD_INFORMATION" ) - sizeof( ("STATUS_FVE_BAD_INFORMATION")[0] ), sizeof( "STATUS_FVE_BAD_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_BAD_INFORMATION")), ("STATUS_FVE_BAD_INFORMATION") }, (ULONG)((NTSTATUS)0xC0210002L) }, { { sizeof( "STATUS_FVE_TOO_SMALL" ) - sizeof( ("STATUS_FVE_TOO_SMALL")[0] ), sizeof( "STATUS_FVE_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_TOO_SMALL")), ("STATUS_FVE_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC0210003L) }, { { sizeof( "STATUS_FVE_FAILED_WRONG_FS" ) - sizeof( ("STATUS_FVE_FAILED_WRONG_FS")[0] ), sizeof( "STATUS_FVE_FAILED_WRONG_FS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_FAILED_WRONG_FS")), ("STATUS_FVE_FAILED_WRONG_FS") }, (ULONG)((NTSTATUS)0xC0210004L) }, { { sizeof( "STATUS_FVE_BAD_PARTITION_SIZE" ) - sizeof( ("STATUS_FVE_BAD_PARTITION_SIZE")[0] ), sizeof( "STATUS_FVE_BAD_PARTITION_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_BAD_PARTITION_SIZE")), ("STATUS_FVE_BAD_PARTITION_SIZE") }, (ULONG)((NTSTATUS)0xC0210005L) }, { { sizeof( "STATUS_FVE_FS_NOT_EXTENDED" ) - sizeof( ("STATUS_FVE_FS_NOT_EXTENDED")[0] ), sizeof( "STATUS_FVE_FS_NOT_EXTENDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_FS_NOT_EXTENDED")), ("STATUS_FVE_FS_NOT_EXTENDED") }, (ULONG)((NTSTATUS)0xC0210006L) }, { { sizeof( "STATUS_FVE_FS_MOUNTED" ) - sizeof( ("STATUS_FVE_FS_MOUNTED")[0] ), sizeof( "STATUS_FVE_FS_MOUNTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_FS_MOUNTED")), ("STATUS_FVE_FS_MOUNTED") }, (ULONG)((NTSTATUS)0xC0210007L) }, { { sizeof( "STATUS_FVE_NO_LICENSE" ) - sizeof( ("STATUS_FVE_NO_LICENSE")[0] ), sizeof( "STATUS_FVE_NO_LICENSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NO_LICENSE")), ("STATUS_FVE_NO_LICENSE") }, (ULONG)((NTSTATUS)0xC0210008L) }, { { sizeof( "STATUS_FVE_ACTION_NOT_ALLOWED" ) - sizeof( ("STATUS_FVE_ACTION_NOT_ALLOWED")[0] ), sizeof( "STATUS_FVE_ACTION_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_ACTION_NOT_ALLOWED")), ("STATUS_FVE_ACTION_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0210009L) }, { { sizeof( "STATUS_FVE_BAD_DATA" ) - sizeof( ("STATUS_FVE_BAD_DATA")[0] ), sizeof( "STATUS_FVE_BAD_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_BAD_DATA")), ("STATUS_FVE_BAD_DATA") }, (ULONG)((NTSTATUS)0xC021000AL) }, { { sizeof( "STATUS_FVE_VOLUME_NOT_BOUND" ) - sizeof( ("STATUS_FVE_VOLUME_NOT_BOUND")[0] ), sizeof( "STATUS_FVE_VOLUME_NOT_BOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_VOLUME_NOT_BOUND")), ("STATUS_FVE_VOLUME_NOT_BOUND") }, (ULONG)((NTSTATUS)0xC021000BL) }, { { sizeof( "STATUS_FVE_NOT_DATA_VOLUME" ) - sizeof( ("STATUS_FVE_NOT_DATA_VOLUME")[0] ), sizeof( "STATUS_FVE_NOT_DATA_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_DATA_VOLUME")), ("STATUS_FVE_NOT_DATA_VOLUME") }, (ULONG)((NTSTATUS)0xC021000CL) }, { { sizeof( "STATUS_FVE_CONV_READ_ERROR" ) - sizeof( ("STATUS_FVE_CONV_READ_ERROR")[0] ), sizeof( "STATUS_FVE_CONV_READ_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_CONV_READ_ERROR")), ("STATUS_FVE_CONV_READ_ERROR") }, (ULONG)((NTSTATUS)0xC021000DL) }, { { sizeof( "STATUS_FVE_CONV_WRITE_ERROR" ) - sizeof( ("STATUS_FVE_CONV_WRITE_ERROR")[0] ), sizeof( "STATUS_FVE_CONV_WRITE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_CONV_WRITE_ERROR")), ("STATUS_FVE_CONV_WRITE_ERROR") }, (ULONG)((NTSTATUS)0xC021000EL) }, { { sizeof( "STATUS_FVE_OVERLAPPED_UPDATE" ) - sizeof( ("STATUS_FVE_OVERLAPPED_UPDATE")[0] ), sizeof( "STATUS_FVE_OVERLAPPED_UPDATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_OVERLAPPED_UPDATE")), ("STATUS_FVE_OVERLAPPED_UPDATE") }, (ULONG)((NTSTATUS)0xC021000FL) }, { { sizeof( "STATUS_FVE_FAILED_SECTOR_SIZE" ) - sizeof( ("STATUS_FVE_FAILED_SECTOR_SIZE")[0] ), sizeof( "STATUS_FVE_FAILED_SECTOR_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_FAILED_SECTOR_SIZE")), ("STATUS_FVE_FAILED_SECTOR_SIZE") }, (ULONG)((NTSTATUS)0xC0210010L) }, { { sizeof( "STATUS_FVE_FAILED_AUTHENTICATION" ) - sizeof( ("STATUS_FVE_FAILED_AUTHENTICATION")[0] ), sizeof( "STATUS_FVE_FAILED_AUTHENTICATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_FAILED_AUTHENTICATION")), ("STATUS_FVE_FAILED_AUTHENTICATION") }, (ULONG)((NTSTATUS)0xC0210011L) }, { { sizeof( "STATUS_FVE_NOT_OS_VOLUME" ) - sizeof( ("STATUS_FVE_NOT_OS_VOLUME")[0] ), sizeof( "STATUS_FVE_NOT_OS_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_OS_VOLUME")), ("STATUS_FVE_NOT_OS_VOLUME") }, (ULONG)((NTSTATUS)0xC0210012L) }, { { sizeof( "STATUS_FVE_KEYFILE_NOT_FOUND" ) - sizeof( ("STATUS_FVE_KEYFILE_NOT_FOUND")[0] ), sizeof( "STATUS_FVE_KEYFILE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_KEYFILE_NOT_FOUND")), ("STATUS_FVE_KEYFILE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0210013L) }, { { sizeof( "STATUS_FVE_KEYFILE_INVALID" ) - sizeof( ("STATUS_FVE_KEYFILE_INVALID")[0] ), sizeof( "STATUS_FVE_KEYFILE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_KEYFILE_INVALID")), ("STATUS_FVE_KEYFILE_INVALID") }, (ULONG)((NTSTATUS)0xC0210014L) }, { { sizeof( "STATUS_FVE_KEYFILE_NO_VMK" ) - sizeof( ("STATUS_FVE_KEYFILE_NO_VMK")[0] ), sizeof( "STATUS_FVE_KEYFILE_NO_VMK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_KEYFILE_NO_VMK")), ("STATUS_FVE_KEYFILE_NO_VMK") }, (ULONG)((NTSTATUS)0xC0210015L) }, { { sizeof( "STATUS_FVE_TPM_DISABLED" ) - sizeof( ("STATUS_FVE_TPM_DISABLED")[0] ), sizeof( "STATUS_FVE_TPM_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_TPM_DISABLED")), ("STATUS_FVE_TPM_DISABLED") }, (ULONG)((NTSTATUS)0xC0210016L) }, { { sizeof( "STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO" ) - sizeof( ("STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO")[0] ), sizeof( "STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO")), ("STATUS_FVE_TPM_SRK_AUTH_NOT_ZERO") }, (ULONG)((NTSTATUS)0xC0210017L) }, { { sizeof( "STATUS_FVE_TPM_INVALID_PCR" ) - sizeof( ("STATUS_FVE_TPM_INVALID_PCR")[0] ), sizeof( "STATUS_FVE_TPM_INVALID_PCR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_TPM_INVALID_PCR")), ("STATUS_FVE_TPM_INVALID_PCR") }, (ULONG)((NTSTATUS)0xC0210018L) }, { { sizeof( "STATUS_FVE_TPM_NO_VMK" ) - sizeof( ("STATUS_FVE_TPM_NO_VMK")[0] ), sizeof( "STATUS_FVE_TPM_NO_VMK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_TPM_NO_VMK")), ("STATUS_FVE_TPM_NO_VMK") }, (ULONG)((NTSTATUS)0xC0210019L) }, { { sizeof( "STATUS_FVE_PIN_INVALID" ) - sizeof( ("STATUS_FVE_PIN_INVALID")[0] ), sizeof( "STATUS_FVE_PIN_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_PIN_INVALID")), ("STATUS_FVE_PIN_INVALID") }, (ULONG)((NTSTATUS)0xC021001AL) }, { { sizeof( "STATUS_FVE_AUTH_INVALID_APPLICATION" ) - sizeof( ("STATUS_FVE_AUTH_INVALID_APPLICATION")[0] ), sizeof( "STATUS_FVE_AUTH_INVALID_APPLICATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_AUTH_INVALID_APPLICATION")), ("STATUS_FVE_AUTH_INVALID_APPLICATION") }, (ULONG)((NTSTATUS)0xC021001BL) }, { { sizeof( "STATUS_FVE_AUTH_INVALID_CONFIG" ) - sizeof( ("STATUS_FVE_AUTH_INVALID_CONFIG")[0] ), sizeof( "STATUS_FVE_AUTH_INVALID_CONFIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_AUTH_INVALID_CONFIG")), ("STATUS_FVE_AUTH_INVALID_CONFIG") }, (ULONG)((NTSTATUS)0xC021001CL) }, { { sizeof( "STATUS_FVE_DEBUGGER_ENABLED" ) - sizeof( ("STATUS_FVE_DEBUGGER_ENABLED")[0] ), sizeof( "STATUS_FVE_DEBUGGER_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_DEBUGGER_ENABLED")), ("STATUS_FVE_DEBUGGER_ENABLED") }, (ULONG)((NTSTATUS)0xC021001DL) }, { { sizeof( "STATUS_FVE_DRY_RUN_FAILED" ) - sizeof( ("STATUS_FVE_DRY_RUN_FAILED")[0] ), sizeof( "STATUS_FVE_DRY_RUN_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_DRY_RUN_FAILED")), ("STATUS_FVE_DRY_RUN_FAILED") }, (ULONG)((NTSTATUS)0xC021001EL) }, { { sizeof( "STATUS_FVE_BAD_METADATA_POINTER" ) - sizeof( ("STATUS_FVE_BAD_METADATA_POINTER")[0] ), sizeof( "STATUS_FVE_BAD_METADATA_POINTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_BAD_METADATA_POINTER")), ("STATUS_FVE_BAD_METADATA_POINTER") }, (ULONG)((NTSTATUS)0xC021001FL) }, { { sizeof( "STATUS_FVE_OLD_METADATA_COPY" ) - sizeof( ("STATUS_FVE_OLD_METADATA_COPY")[0] ), sizeof( "STATUS_FVE_OLD_METADATA_COPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_OLD_METADATA_COPY")), ("STATUS_FVE_OLD_METADATA_COPY") }, (ULONG)((NTSTATUS)0xC0210020L) }, { { sizeof( "STATUS_FVE_REBOOT_REQUIRED" ) - sizeof( ("STATUS_FVE_REBOOT_REQUIRED")[0] ), sizeof( "STATUS_FVE_REBOOT_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_REBOOT_REQUIRED")), ("STATUS_FVE_REBOOT_REQUIRED") }, (ULONG)((NTSTATUS)0xC0210021L) }, { { sizeof( "STATUS_FVE_RAW_ACCESS" ) - sizeof( ("STATUS_FVE_RAW_ACCESS")[0] ), sizeof( "STATUS_FVE_RAW_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_RAW_ACCESS")), ("STATUS_FVE_RAW_ACCESS") }, (ULONG)((NTSTATUS)0xC0210022L) }, { { sizeof( "STATUS_FVE_RAW_BLOCKED" ) - sizeof( ("STATUS_FVE_RAW_BLOCKED")[0] ), sizeof( "STATUS_FVE_RAW_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_RAW_BLOCKED")), ("STATUS_FVE_RAW_BLOCKED") }, (ULONG)((NTSTATUS)0xC0210023L) }, { { sizeof( "STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY" ) - sizeof( ("STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY")[0] ), sizeof( "STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY")), ("STATUS_FVE_NO_AUTOUNLOCK_MASTER_KEY") }, (ULONG)((NTSTATUS)0xC0210024L) }, { { sizeof( "STATUS_FVE_MOR_FAILED" ) - sizeof( ("STATUS_FVE_MOR_FAILED")[0] ), sizeof( "STATUS_FVE_MOR_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_MOR_FAILED")), ("STATUS_FVE_MOR_FAILED") }, (ULONG)((NTSTATUS)0xC0210025L) }, { { sizeof( "STATUS_FVE_NO_FEATURE_LICENSE" ) - sizeof( ("STATUS_FVE_NO_FEATURE_LICENSE")[0] ), sizeof( "STATUS_FVE_NO_FEATURE_LICENSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NO_FEATURE_LICENSE")), ("STATUS_FVE_NO_FEATURE_LICENSE") }, (ULONG)((NTSTATUS)0xC0210026L) }, { { sizeof( "STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED" ) - sizeof( ("STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED")[0] ), sizeof( "STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED")), ("STATUS_FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0210027L) }, { { sizeof( "STATUS_FVE_CONV_RECOVERY_FAILED" ) - sizeof( ("STATUS_FVE_CONV_RECOVERY_FAILED")[0] ), sizeof( "STATUS_FVE_CONV_RECOVERY_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_CONV_RECOVERY_FAILED")), ("STATUS_FVE_CONV_RECOVERY_FAILED") }, (ULONG)((NTSTATUS)0xC0210028L) }, { { sizeof( "STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG" ) - sizeof( ("STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG")[0] ), sizeof( "STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG")), ("STATUS_FVE_VIRTUALIZED_SPACE_TOO_BIG") }, (ULONG)((NTSTATUS)0xC0210029L) }, { { sizeof( "STATUS_FVE_INVALID_DATUM_TYPE" ) - sizeof( ("STATUS_FVE_INVALID_DATUM_TYPE")[0] ), sizeof( "STATUS_FVE_INVALID_DATUM_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_INVALID_DATUM_TYPE")), ("STATUS_FVE_INVALID_DATUM_TYPE") }, (ULONG)((NTSTATUS)0xC021002AL) }, { { sizeof( "STATUS_FVE_VOLUME_TOO_SMALL" ) - sizeof( ("STATUS_FVE_VOLUME_TOO_SMALL")[0] ), sizeof( "STATUS_FVE_VOLUME_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_VOLUME_TOO_SMALL")), ("STATUS_FVE_VOLUME_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC0210030L) }, { { sizeof( "STATUS_FVE_ENH_PIN_INVALID" ) - sizeof( ("STATUS_FVE_ENH_PIN_INVALID")[0] ), sizeof( "STATUS_FVE_ENH_PIN_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_ENH_PIN_INVALID")), ("STATUS_FVE_ENH_PIN_INVALID") }, (ULONG)((NTSTATUS)0xC0210031L) }, { { sizeof( "STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE" ) - sizeof( ("STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE")[0] ), sizeof( "STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE")), ("STATUS_FVE_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE") }, (ULONG)((NTSTATUS)0xC0210032L) }, { { sizeof( "STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE" ) - sizeof( ("STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE")[0] ), sizeof( "STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE")), ("STATUS_FVE_WIPE_NOT_ALLOWED_ON_TP_STORAGE") }, (ULONG)((NTSTATUS)0xC0210033L) }, { { sizeof( "STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK" ) - sizeof( ("STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK")[0] ), sizeof( "STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK")), ("STATUS_FVE_NOT_ALLOWED_ON_CSV_STACK") }, (ULONG)((NTSTATUS)0xC0210034L) }, { { sizeof( "STATUS_FVE_NOT_ALLOWED_ON_CLUSTER" ) - sizeof( ("STATUS_FVE_NOT_ALLOWED_ON_CLUSTER")[0] ), sizeof( "STATUS_FVE_NOT_ALLOWED_ON_CLUSTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_ALLOWED_ON_CLUSTER")), ("STATUS_FVE_NOT_ALLOWED_ON_CLUSTER") }, (ULONG)((NTSTATUS)0xC0210035L) }, { { sizeof( "STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING" ) - sizeof( ("STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING")[0] ), sizeof( "STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING")), ("STATUS_FVE_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING") }, (ULONG)((NTSTATUS)0xC0210036L) }, { { sizeof( "STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE" ) - sizeof( ("STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE")[0] ), sizeof( "STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE")), ("STATUS_FVE_WIPE_CANCEL_NOT_APPLICABLE") }, (ULONG)((NTSTATUS)0xC0210037L) }, { { sizeof( "STATUS_FVE_EDRIVE_DRY_RUN_FAILED" ) - sizeof( ("STATUS_FVE_EDRIVE_DRY_RUN_FAILED")[0] ), sizeof( "STATUS_FVE_EDRIVE_DRY_RUN_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_EDRIVE_DRY_RUN_FAILED")), ("STATUS_FVE_EDRIVE_DRY_RUN_FAILED") }, (ULONG)((NTSTATUS)0xC0210038L) }, { { sizeof( "STATUS_FVE_SECUREBOOT_DISABLED" ) - sizeof( ("STATUS_FVE_SECUREBOOT_DISABLED")[0] ), sizeof( "STATUS_FVE_SECUREBOOT_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_SECUREBOOT_DISABLED")), ("STATUS_FVE_SECUREBOOT_DISABLED") }, (ULONG)((NTSTATUS)0xC0210039L) }, { { sizeof( "STATUS_FVE_SECUREBOOT_CONFIG_CHANGE" ) - sizeof( ("STATUS_FVE_SECUREBOOT_CONFIG_CHANGE")[0] ), sizeof( "STATUS_FVE_SECUREBOOT_CONFIG_CHANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_SECUREBOOT_CONFIG_CHANGE")), ("STATUS_FVE_SECUREBOOT_CONFIG_CHANGE") }, (ULONG)((NTSTATUS)0xC021003AL) }, { { sizeof( "STATUS_FVE_DEVICE_LOCKEDOUT" ) - sizeof( ("STATUS_FVE_DEVICE_LOCKEDOUT")[0] ), sizeof( "STATUS_FVE_DEVICE_LOCKEDOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_DEVICE_LOCKEDOUT")), ("STATUS_FVE_DEVICE_LOCKEDOUT") }, (ULONG)((NTSTATUS)0xC021003BL) }, { { sizeof( "STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT" ) - sizeof( ("STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT")[0] ), sizeof( "STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT")), ("STATUS_FVE_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT") }, (ULONG)((NTSTATUS)0xC021003CL) }, { { sizeof( "STATUS_FVE_NOT_DE_VOLUME" ) - sizeof( ("STATUS_FVE_NOT_DE_VOLUME")[0] ), sizeof( "STATUS_FVE_NOT_DE_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_NOT_DE_VOLUME")), ("STATUS_FVE_NOT_DE_VOLUME") }, (ULONG)((NTSTATUS)0xC021003DL) }, { { sizeof( "STATUS_FVE_PROTECTION_DISABLED" ) - sizeof( ("STATUS_FVE_PROTECTION_DISABLED")[0] ), sizeof( "STATUS_FVE_PROTECTION_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_PROTECTION_DISABLED")), ("STATUS_FVE_PROTECTION_DISABLED") }, (ULONG)((NTSTATUS)0xC021003EL) }, { { sizeof( "STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED" ) - sizeof( ("STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED")[0] ), sizeof( "STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED")), ("STATUS_FVE_PROTECTION_CANNOT_BE_DISABLED") }, (ULONG)((NTSTATUS)0xC021003FL) }, { { sizeof( "STATUS_FVE_OSV_KSR_NOT_ALLOWED" ) - sizeof( ("STATUS_FVE_OSV_KSR_NOT_ALLOWED")[0] ), sizeof( "STATUS_FVE_OSV_KSR_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FVE_OSV_KSR_NOT_ALLOWED")), ("STATUS_FVE_OSV_KSR_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0210040L) }, { { sizeof( "STATUS_FWP_CALLOUT_NOT_FOUND" ) - sizeof( ("STATUS_FWP_CALLOUT_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_CALLOUT_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CALLOUT_NOT_FOUND")), ("STATUS_FWP_CALLOUT_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220001L) }, { { sizeof( "STATUS_FWP_CONDITION_NOT_FOUND" ) - sizeof( ("STATUS_FWP_CONDITION_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_CONDITION_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CONDITION_NOT_FOUND")), ("STATUS_FWP_CONDITION_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220002L) }, { { sizeof( "STATUS_FWP_FILTER_NOT_FOUND" ) - sizeof( ("STATUS_FWP_FILTER_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_FILTER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_FILTER_NOT_FOUND")), ("STATUS_FWP_FILTER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220003L) }, { { sizeof( "STATUS_FWP_LAYER_NOT_FOUND" ) - sizeof( ("STATUS_FWP_LAYER_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_LAYER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_LAYER_NOT_FOUND")), ("STATUS_FWP_LAYER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220004L) }, { { sizeof( "STATUS_FWP_PROVIDER_NOT_FOUND" ) - sizeof( ("STATUS_FWP_PROVIDER_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_PROVIDER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_PROVIDER_NOT_FOUND")), ("STATUS_FWP_PROVIDER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220005L) }, { { sizeof( "STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND" ) - sizeof( ("STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND")), ("STATUS_FWP_PROVIDER_CONTEXT_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220006L) }, { { sizeof( "STATUS_FWP_SUBLAYER_NOT_FOUND" ) - sizeof( ("STATUS_FWP_SUBLAYER_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_SUBLAYER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_SUBLAYER_NOT_FOUND")), ("STATUS_FWP_SUBLAYER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220007L) }, { { sizeof( "STATUS_FWP_NOT_FOUND" ) - sizeof( ("STATUS_FWP_NOT_FOUND")[0] ), sizeof( "STATUS_FWP_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NOT_FOUND")), ("STATUS_FWP_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0220008L) }, { { sizeof( "STATUS_FWP_ALREADY_EXISTS" ) - sizeof( ("STATUS_FWP_ALREADY_EXISTS")[0] ), sizeof( "STATUS_FWP_ALREADY_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_ALREADY_EXISTS")), ("STATUS_FWP_ALREADY_EXISTS") }, (ULONG)((NTSTATUS)0xC0220009L) }, { { sizeof( "STATUS_FWP_IN_USE" ) - sizeof( ("STATUS_FWP_IN_USE")[0] ), sizeof( "STATUS_FWP_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_IN_USE")), ("STATUS_FWP_IN_USE") }, (ULONG)((NTSTATUS)0xC022000AL) }, { { sizeof( "STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS" ) - sizeof( ("STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS")[0] ), sizeof( "STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS")), ("STATUS_FWP_DYNAMIC_SESSION_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC022000BL) }, { { sizeof( "STATUS_FWP_WRONG_SESSION" ) - sizeof( ("STATUS_FWP_WRONG_SESSION")[0] ), sizeof( "STATUS_FWP_WRONG_SESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_WRONG_SESSION")), ("STATUS_FWP_WRONG_SESSION") }, (ULONG)((NTSTATUS)0xC022000CL) }, { { sizeof( "STATUS_FWP_NO_TXN_IN_PROGRESS" ) - sizeof( ("STATUS_FWP_NO_TXN_IN_PROGRESS")[0] ), sizeof( "STATUS_FWP_NO_TXN_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NO_TXN_IN_PROGRESS")), ("STATUS_FWP_NO_TXN_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC022000DL) }, { { sizeof( "STATUS_FWP_TXN_IN_PROGRESS" ) - sizeof( ("STATUS_FWP_TXN_IN_PROGRESS")[0] ), sizeof( "STATUS_FWP_TXN_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TXN_IN_PROGRESS")), ("STATUS_FWP_TXN_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC022000EL) }, { { sizeof( "STATUS_FWP_TXN_ABORTED" ) - sizeof( ("STATUS_FWP_TXN_ABORTED")[0] ), sizeof( "STATUS_FWP_TXN_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TXN_ABORTED")), ("STATUS_FWP_TXN_ABORTED") }, (ULONG)((NTSTATUS)0xC022000FL) }, { { sizeof( "STATUS_FWP_SESSION_ABORTED" ) - sizeof( ("STATUS_FWP_SESSION_ABORTED")[0] ), sizeof( "STATUS_FWP_SESSION_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_SESSION_ABORTED")), ("STATUS_FWP_SESSION_ABORTED") }, (ULONG)((NTSTATUS)0xC0220010L) }, { { sizeof( "STATUS_FWP_INCOMPATIBLE_TXN" ) - sizeof( ("STATUS_FWP_INCOMPATIBLE_TXN")[0] ), sizeof( "STATUS_FWP_INCOMPATIBLE_TXN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INCOMPATIBLE_TXN")), ("STATUS_FWP_INCOMPATIBLE_TXN") }, (ULONG)((NTSTATUS)0xC0220011L) }, { { sizeof( "STATUS_FWP_TIMEOUT" ) - sizeof( ("STATUS_FWP_TIMEOUT")[0] ), sizeof( "STATUS_FWP_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TIMEOUT")), ("STATUS_FWP_TIMEOUT") }, (ULONG)((NTSTATUS)0xC0220012L) }, { { sizeof( "STATUS_FWP_NET_EVENTS_DISABLED" ) - sizeof( ("STATUS_FWP_NET_EVENTS_DISABLED")[0] ), sizeof( "STATUS_FWP_NET_EVENTS_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NET_EVENTS_DISABLED")), ("STATUS_FWP_NET_EVENTS_DISABLED") }, (ULONG)((NTSTATUS)0xC0220013L) }, { { sizeof( "STATUS_FWP_INCOMPATIBLE_LAYER" ) - sizeof( ("STATUS_FWP_INCOMPATIBLE_LAYER")[0] ), sizeof( "STATUS_FWP_INCOMPATIBLE_LAYER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INCOMPATIBLE_LAYER")), ("STATUS_FWP_INCOMPATIBLE_LAYER") }, (ULONG)((NTSTATUS)0xC0220014L) }, { { sizeof( "STATUS_FWP_KM_CLIENTS_ONLY" ) - sizeof( ("STATUS_FWP_KM_CLIENTS_ONLY")[0] ), sizeof( "STATUS_FWP_KM_CLIENTS_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_KM_CLIENTS_ONLY")), ("STATUS_FWP_KM_CLIENTS_ONLY") }, (ULONG)((NTSTATUS)0xC0220015L) }, { { sizeof( "STATUS_FWP_LIFETIME_MISMATCH" ) - sizeof( ("STATUS_FWP_LIFETIME_MISMATCH")[0] ), sizeof( "STATUS_FWP_LIFETIME_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_LIFETIME_MISMATCH")), ("STATUS_FWP_LIFETIME_MISMATCH") }, (ULONG)((NTSTATUS)0xC0220016L) }, { { sizeof( "STATUS_FWP_BUILTIN_OBJECT" ) - sizeof( ("STATUS_FWP_BUILTIN_OBJECT")[0] ), sizeof( "STATUS_FWP_BUILTIN_OBJECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_BUILTIN_OBJECT")), ("STATUS_FWP_BUILTIN_OBJECT") }, (ULONG)((NTSTATUS)0xC0220017L) }, { { sizeof( "STATUS_FWP_TOO_MANY_CALLOUTS" ) - sizeof( ("STATUS_FWP_TOO_MANY_CALLOUTS")[0] ), sizeof( "STATUS_FWP_TOO_MANY_CALLOUTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TOO_MANY_CALLOUTS")), ("STATUS_FWP_TOO_MANY_CALLOUTS") }, (ULONG)((NTSTATUS)0xC0220018L) }, { { sizeof( "STATUS_FWP_NOTIFICATION_DROPPED" ) - sizeof( ("STATUS_FWP_NOTIFICATION_DROPPED")[0] ), sizeof( "STATUS_FWP_NOTIFICATION_DROPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NOTIFICATION_DROPPED")), ("STATUS_FWP_NOTIFICATION_DROPPED") }, (ULONG)((NTSTATUS)0xC0220019L) }, { { sizeof( "STATUS_FWP_TRAFFIC_MISMATCH" ) - sizeof( ("STATUS_FWP_TRAFFIC_MISMATCH")[0] ), sizeof( "STATUS_FWP_TRAFFIC_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TRAFFIC_MISMATCH")), ("STATUS_FWP_TRAFFIC_MISMATCH") }, (ULONG)((NTSTATUS)0xC022001AL) }, { { sizeof( "STATUS_FWP_INCOMPATIBLE_SA_STATE" ) - sizeof( ("STATUS_FWP_INCOMPATIBLE_SA_STATE")[0] ), sizeof( "STATUS_FWP_INCOMPATIBLE_SA_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INCOMPATIBLE_SA_STATE")), ("STATUS_FWP_INCOMPATIBLE_SA_STATE") }, (ULONG)((NTSTATUS)0xC022001BL) }, { { sizeof( "STATUS_FWP_NULL_POINTER" ) - sizeof( ("STATUS_FWP_NULL_POINTER")[0] ), sizeof( "STATUS_FWP_NULL_POINTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NULL_POINTER")), ("STATUS_FWP_NULL_POINTER") }, (ULONG)((NTSTATUS)0xC022001CL) }, { { sizeof( "STATUS_FWP_INVALID_ENUMERATOR" ) - sizeof( ("STATUS_FWP_INVALID_ENUMERATOR")[0] ), sizeof( "STATUS_FWP_INVALID_ENUMERATOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_ENUMERATOR")), ("STATUS_FWP_INVALID_ENUMERATOR") }, (ULONG)((NTSTATUS)0xC022001DL) }, { { sizeof( "STATUS_FWP_INVALID_FLAGS" ) - sizeof( ("STATUS_FWP_INVALID_FLAGS")[0] ), sizeof( "STATUS_FWP_INVALID_FLAGS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_FLAGS")), ("STATUS_FWP_INVALID_FLAGS") }, (ULONG)((NTSTATUS)0xC022001EL) }, { { sizeof( "STATUS_FWP_INVALID_NET_MASK" ) - sizeof( ("STATUS_FWP_INVALID_NET_MASK")[0] ), sizeof( "STATUS_FWP_INVALID_NET_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_NET_MASK")), ("STATUS_FWP_INVALID_NET_MASK") }, (ULONG)((NTSTATUS)0xC022001FL) }, { { sizeof( "STATUS_FWP_INVALID_RANGE" ) - sizeof( ("STATUS_FWP_INVALID_RANGE")[0] ), sizeof( "STATUS_FWP_INVALID_RANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_RANGE")), ("STATUS_FWP_INVALID_RANGE") }, (ULONG)((NTSTATUS)0xC0220020L) }, { { sizeof( "STATUS_FWP_INVALID_INTERVAL" ) - sizeof( ("STATUS_FWP_INVALID_INTERVAL")[0] ), sizeof( "STATUS_FWP_INVALID_INTERVAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_INTERVAL")), ("STATUS_FWP_INVALID_INTERVAL") }, (ULONG)((NTSTATUS)0xC0220021L) }, { { sizeof( "STATUS_FWP_ZERO_LENGTH_ARRAY" ) - sizeof( ("STATUS_FWP_ZERO_LENGTH_ARRAY")[0] ), sizeof( "STATUS_FWP_ZERO_LENGTH_ARRAY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_ZERO_LENGTH_ARRAY")), ("STATUS_FWP_ZERO_LENGTH_ARRAY") }, (ULONG)((NTSTATUS)0xC0220022L) }, { { sizeof( "STATUS_FWP_NULL_DISPLAY_NAME" ) - sizeof( ("STATUS_FWP_NULL_DISPLAY_NAME")[0] ), sizeof( "STATUS_FWP_NULL_DISPLAY_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NULL_DISPLAY_NAME")), ("STATUS_FWP_NULL_DISPLAY_NAME") }, (ULONG)((NTSTATUS)0xC0220023L) }, { { sizeof( "STATUS_FWP_INVALID_ACTION_TYPE" ) - sizeof( ("STATUS_FWP_INVALID_ACTION_TYPE")[0] ), sizeof( "STATUS_FWP_INVALID_ACTION_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_ACTION_TYPE")), ("STATUS_FWP_INVALID_ACTION_TYPE") }, (ULONG)((NTSTATUS)0xC0220024L) }, { { sizeof( "STATUS_FWP_INVALID_WEIGHT" ) - sizeof( ("STATUS_FWP_INVALID_WEIGHT")[0] ), sizeof( "STATUS_FWP_INVALID_WEIGHT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_WEIGHT")), ("STATUS_FWP_INVALID_WEIGHT") }, (ULONG)((NTSTATUS)0xC0220025L) }, { { sizeof( "STATUS_FWP_MATCH_TYPE_MISMATCH" ) - sizeof( ("STATUS_FWP_MATCH_TYPE_MISMATCH")[0] ), sizeof( "STATUS_FWP_MATCH_TYPE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_MATCH_TYPE_MISMATCH")), ("STATUS_FWP_MATCH_TYPE_MISMATCH") }, (ULONG)((NTSTATUS)0xC0220026L) }, { { sizeof( "STATUS_FWP_TYPE_MISMATCH" ) - sizeof( ("STATUS_FWP_TYPE_MISMATCH")[0] ), sizeof( "STATUS_FWP_TYPE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TYPE_MISMATCH")), ("STATUS_FWP_TYPE_MISMATCH") }, (ULONG)((NTSTATUS)0xC0220027L) }, { { sizeof( "STATUS_FWP_OUT_OF_BOUNDS" ) - sizeof( ("STATUS_FWP_OUT_OF_BOUNDS")[0] ), sizeof( "STATUS_FWP_OUT_OF_BOUNDS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_OUT_OF_BOUNDS")), ("STATUS_FWP_OUT_OF_BOUNDS") }, (ULONG)((NTSTATUS)0xC0220028L) }, { { sizeof( "STATUS_FWP_RESERVED" ) - sizeof( ("STATUS_FWP_RESERVED")[0] ), sizeof( "STATUS_FWP_RESERVED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_RESERVED")), ("STATUS_FWP_RESERVED") }, (ULONG)((NTSTATUS)0xC0220029L) }, { { sizeof( "STATUS_FWP_DUPLICATE_CONDITION" ) - sizeof( ("STATUS_FWP_DUPLICATE_CONDITION")[0] ), sizeof( "STATUS_FWP_DUPLICATE_CONDITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_DUPLICATE_CONDITION")), ("STATUS_FWP_DUPLICATE_CONDITION") }, (ULONG)((NTSTATUS)0xC022002AL) }, { { sizeof( "STATUS_FWP_DUPLICATE_KEYMOD" ) - sizeof( ("STATUS_FWP_DUPLICATE_KEYMOD")[0] ), sizeof( "STATUS_FWP_DUPLICATE_KEYMOD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_DUPLICATE_KEYMOD")), ("STATUS_FWP_DUPLICATE_KEYMOD") }, (ULONG)((NTSTATUS)0xC022002BL) }, { { sizeof( "STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER" ) - sizeof( ("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER")[0] ), sizeof( "STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER")), ("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_LAYER") }, (ULONG)((NTSTATUS)0xC022002CL) }, { { sizeof( "STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER" ) - sizeof( ("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER")[0] ), sizeof( "STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER")), ("STATUS_FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER") }, (ULONG)((NTSTATUS)0xC022002DL) }, { { sizeof( "STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER" ) - sizeof( ("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER")[0] ), sizeof( "STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER")), ("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER") }, (ULONG)((NTSTATUS)0xC022002EL) }, { { sizeof( "STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT" ) - sizeof( ("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT")[0] ), sizeof( "STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT")), ("STATUS_FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT") }, (ULONG)((NTSTATUS)0xC022002FL) }, { { sizeof( "STATUS_FWP_INCOMPATIBLE_AUTH_METHOD" ) - sizeof( ("STATUS_FWP_INCOMPATIBLE_AUTH_METHOD")[0] ), sizeof( "STATUS_FWP_INCOMPATIBLE_AUTH_METHOD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INCOMPATIBLE_AUTH_METHOD")), ("STATUS_FWP_INCOMPATIBLE_AUTH_METHOD") }, (ULONG)((NTSTATUS)0xC0220030L) }, { { sizeof( "STATUS_FWP_INCOMPATIBLE_DH_GROUP" ) - sizeof( ("STATUS_FWP_INCOMPATIBLE_DH_GROUP")[0] ), sizeof( "STATUS_FWP_INCOMPATIBLE_DH_GROUP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INCOMPATIBLE_DH_GROUP")), ("STATUS_FWP_INCOMPATIBLE_DH_GROUP") }, (ULONG)((NTSTATUS)0xC0220031L) }, { { sizeof( "STATUS_FWP_EM_NOT_SUPPORTED" ) - sizeof( ("STATUS_FWP_EM_NOT_SUPPORTED")[0] ), sizeof( "STATUS_FWP_EM_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_EM_NOT_SUPPORTED")), ("STATUS_FWP_EM_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0220032L) }, { { sizeof( "STATUS_FWP_NEVER_MATCH" ) - sizeof( ("STATUS_FWP_NEVER_MATCH")[0] ), sizeof( "STATUS_FWP_NEVER_MATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_NEVER_MATCH")), ("STATUS_FWP_NEVER_MATCH") }, (ULONG)((NTSTATUS)0xC0220033L) }, { { sizeof( "STATUS_FWP_PROVIDER_CONTEXT_MISMATCH" ) - sizeof( ("STATUS_FWP_PROVIDER_CONTEXT_MISMATCH")[0] ), sizeof( "STATUS_FWP_PROVIDER_CONTEXT_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_PROVIDER_CONTEXT_MISMATCH")), ("STATUS_FWP_PROVIDER_CONTEXT_MISMATCH") }, (ULONG)((NTSTATUS)0xC0220034L) }, { { sizeof( "STATUS_FWP_INVALID_PARAMETER" ) - sizeof( ("STATUS_FWP_INVALID_PARAMETER")[0] ), sizeof( "STATUS_FWP_INVALID_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_PARAMETER")), ("STATUS_FWP_INVALID_PARAMETER") }, (ULONG)((NTSTATUS)0xC0220035L) }, { { sizeof( "STATUS_FWP_TOO_MANY_SUBLAYERS" ) - sizeof( ("STATUS_FWP_TOO_MANY_SUBLAYERS")[0] ), sizeof( "STATUS_FWP_TOO_MANY_SUBLAYERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TOO_MANY_SUBLAYERS")), ("STATUS_FWP_TOO_MANY_SUBLAYERS") }, (ULONG)((NTSTATUS)0xC0220036L) }, { { sizeof( "STATUS_FWP_CALLOUT_NOTIFICATION_FAILED" ) - sizeof( ("STATUS_FWP_CALLOUT_NOTIFICATION_FAILED")[0] ), sizeof( "STATUS_FWP_CALLOUT_NOTIFICATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CALLOUT_NOTIFICATION_FAILED")), ("STATUS_FWP_CALLOUT_NOTIFICATION_FAILED") }, (ULONG)((NTSTATUS)0xC0220037L) }, { { sizeof( "STATUS_FWP_INVALID_AUTH_TRANSFORM" ) - sizeof( ("STATUS_FWP_INVALID_AUTH_TRANSFORM")[0] ), sizeof( "STATUS_FWP_INVALID_AUTH_TRANSFORM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_AUTH_TRANSFORM")), ("STATUS_FWP_INVALID_AUTH_TRANSFORM") }, (ULONG)((NTSTATUS)0xC0220038L) }, { { sizeof( "STATUS_FWP_INVALID_CIPHER_TRANSFORM" ) - sizeof( ("STATUS_FWP_INVALID_CIPHER_TRANSFORM")[0] ), sizeof( "STATUS_FWP_INVALID_CIPHER_TRANSFORM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_CIPHER_TRANSFORM")), ("STATUS_FWP_INVALID_CIPHER_TRANSFORM") }, (ULONG)((NTSTATUS)0xC0220039L) }, { { sizeof( "STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM" ) - sizeof( ("STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM")[0] ), sizeof( "STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM")), ("STATUS_FWP_INCOMPATIBLE_CIPHER_TRANSFORM") }, (ULONG)((NTSTATUS)0xC022003AL) }, { { sizeof( "STATUS_FWP_INVALID_TRANSFORM_COMBINATION" ) - sizeof( ("STATUS_FWP_INVALID_TRANSFORM_COMBINATION")[0] ), sizeof( "STATUS_FWP_INVALID_TRANSFORM_COMBINATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_TRANSFORM_COMBINATION")), ("STATUS_FWP_INVALID_TRANSFORM_COMBINATION") }, (ULONG)((NTSTATUS)0xC022003BL) }, { { sizeof( "STATUS_FWP_DUPLICATE_AUTH_METHOD" ) - sizeof( ("STATUS_FWP_DUPLICATE_AUTH_METHOD")[0] ), sizeof( "STATUS_FWP_DUPLICATE_AUTH_METHOD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_DUPLICATE_AUTH_METHOD")), ("STATUS_FWP_DUPLICATE_AUTH_METHOD") }, (ULONG)((NTSTATUS)0xC022003CL) }, { { sizeof( "STATUS_FWP_INVALID_TUNNEL_ENDPOINT" ) - sizeof( ("STATUS_FWP_INVALID_TUNNEL_ENDPOINT")[0] ), sizeof( "STATUS_FWP_INVALID_TUNNEL_ENDPOINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_TUNNEL_ENDPOINT")), ("STATUS_FWP_INVALID_TUNNEL_ENDPOINT") }, (ULONG)((NTSTATUS)0xC022003DL) }, { { sizeof( "STATUS_FWP_L2_DRIVER_NOT_READY" ) - sizeof( ("STATUS_FWP_L2_DRIVER_NOT_READY")[0] ), sizeof( "STATUS_FWP_L2_DRIVER_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_L2_DRIVER_NOT_READY")), ("STATUS_FWP_L2_DRIVER_NOT_READY") }, (ULONG)((NTSTATUS)0xC022003EL) }, { { sizeof( "STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED" ) - sizeof( ("STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED")[0] ), sizeof( "STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED")), ("STATUS_FWP_KEY_DICTATOR_ALREADY_REGISTERED") }, (ULONG)((NTSTATUS)0xC022003FL) }, { { sizeof( "STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL" ) - sizeof( ("STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL")[0] ), sizeof( "STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL")), ("STATUS_FWP_KEY_DICTATION_INVALID_KEYING_MATERIAL") }, (ULONG)((NTSTATUS)0xC0220040L) }, { { sizeof( "STATUS_FWP_CONNECTIONS_DISABLED" ) - sizeof( ("STATUS_FWP_CONNECTIONS_DISABLED")[0] ), sizeof( "STATUS_FWP_CONNECTIONS_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CONNECTIONS_DISABLED")), ("STATUS_FWP_CONNECTIONS_DISABLED") }, (ULONG)((NTSTATUS)0xC0220041L) }, { { sizeof( "STATUS_FWP_INVALID_DNS_NAME" ) - sizeof( ("STATUS_FWP_INVALID_DNS_NAME")[0] ), sizeof( "STATUS_FWP_INVALID_DNS_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INVALID_DNS_NAME")), ("STATUS_FWP_INVALID_DNS_NAME") }, (ULONG)((NTSTATUS)0xC0220042L) }, { { sizeof( "STATUS_FWP_STILL_ON" ) - sizeof( ("STATUS_FWP_STILL_ON")[0] ), sizeof( "STATUS_FWP_STILL_ON" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_STILL_ON")), ("STATUS_FWP_STILL_ON") }, (ULONG)((NTSTATUS)0xC0220043L) }, { { sizeof( "STATUS_FWP_IKEEXT_NOT_RUNNING" ) - sizeof( ("STATUS_FWP_IKEEXT_NOT_RUNNING")[0] ), sizeof( "STATUS_FWP_IKEEXT_NOT_RUNNING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_IKEEXT_NOT_RUNNING")), ("STATUS_FWP_IKEEXT_NOT_RUNNING") }, (ULONG)((NTSTATUS)0xC0220044L) }, { { sizeof( "STATUS_FWP_TCPIP_NOT_READY" ) - sizeof( ("STATUS_FWP_TCPIP_NOT_READY")[0] ), sizeof( "STATUS_FWP_TCPIP_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_TCPIP_NOT_READY")), ("STATUS_FWP_TCPIP_NOT_READY") }, (ULONG)((NTSTATUS)0xC0220100L) }, { { sizeof( "STATUS_FWP_INJECT_HANDLE_CLOSING" ) - sizeof( ("STATUS_FWP_INJECT_HANDLE_CLOSING")[0] ), sizeof( "STATUS_FWP_INJECT_HANDLE_CLOSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INJECT_HANDLE_CLOSING")), ("STATUS_FWP_INJECT_HANDLE_CLOSING") }, (ULONG)((NTSTATUS)0xC0220101L) }, { { sizeof( "STATUS_FWP_INJECT_HANDLE_STALE" ) - sizeof( ("STATUS_FWP_INJECT_HANDLE_STALE")[0] ), sizeof( "STATUS_FWP_INJECT_HANDLE_STALE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_INJECT_HANDLE_STALE")), ("STATUS_FWP_INJECT_HANDLE_STALE") }, (ULONG)((NTSTATUS)0xC0220102L) }, { { sizeof( "STATUS_FWP_CANNOT_PEND" ) - sizeof( ("STATUS_FWP_CANNOT_PEND")[0] ), sizeof( "STATUS_FWP_CANNOT_PEND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_CANNOT_PEND")), ("STATUS_FWP_CANNOT_PEND") }, (ULONG)((NTSTATUS)0xC0220103L) }, { { sizeof( "STATUS_FWP_DROP_NOICMP" ) - sizeof( ("STATUS_FWP_DROP_NOICMP")[0] ), sizeof( "STATUS_FWP_DROP_NOICMP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_FWP_DROP_NOICMP")), ("STATUS_FWP_DROP_NOICMP") }, (ULONG)((NTSTATUS)0xC0220104L) }, { { sizeof( "STATUS_NDIS_CLOSING" ) - sizeof( ("STATUS_NDIS_CLOSING")[0] ), sizeof( "STATUS_NDIS_CLOSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_CLOSING")), ("STATUS_NDIS_CLOSING") }, (ULONG)((NTSTATUS)0xC0230002L) }, { { sizeof( "STATUS_NDIS_BAD_VERSION" ) - sizeof( ("STATUS_NDIS_BAD_VERSION")[0] ), sizeof( "STATUS_NDIS_BAD_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_BAD_VERSION")), ("STATUS_NDIS_BAD_VERSION") }, (ULONG)((NTSTATUS)0xC0230004L) }, { { sizeof( "STATUS_NDIS_BAD_CHARACTERISTICS" ) - sizeof( ("STATUS_NDIS_BAD_CHARACTERISTICS")[0] ), sizeof( "STATUS_NDIS_BAD_CHARACTERISTICS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_BAD_CHARACTERISTICS")), ("STATUS_NDIS_BAD_CHARACTERISTICS") }, (ULONG)((NTSTATUS)0xC0230005L) }, { { sizeof( "STATUS_NDIS_ADAPTER_NOT_FOUND" ) - sizeof( ("STATUS_NDIS_ADAPTER_NOT_FOUND")[0] ), sizeof( "STATUS_NDIS_ADAPTER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_ADAPTER_NOT_FOUND")), ("STATUS_NDIS_ADAPTER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0230006L) }, { { sizeof( "STATUS_NDIS_OPEN_FAILED" ) - sizeof( ("STATUS_NDIS_OPEN_FAILED")[0] ), sizeof( "STATUS_NDIS_OPEN_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_OPEN_FAILED")), ("STATUS_NDIS_OPEN_FAILED") }, (ULONG)((NTSTATUS)0xC0230007L) }, { { sizeof( "STATUS_NDIS_DEVICE_FAILED" ) - sizeof( ("STATUS_NDIS_DEVICE_FAILED")[0] ), sizeof( "STATUS_NDIS_DEVICE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DEVICE_FAILED")), ("STATUS_NDIS_DEVICE_FAILED") }, (ULONG)((NTSTATUS)0xC0230008L) }, { { sizeof( "STATUS_NDIS_MULTICAST_FULL" ) - sizeof( ("STATUS_NDIS_MULTICAST_FULL")[0] ), sizeof( "STATUS_NDIS_MULTICAST_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_MULTICAST_FULL")), ("STATUS_NDIS_MULTICAST_FULL") }, (ULONG)((NTSTATUS)0xC0230009L) }, { { sizeof( "STATUS_NDIS_MULTICAST_EXISTS" ) - sizeof( ("STATUS_NDIS_MULTICAST_EXISTS")[0] ), sizeof( "STATUS_NDIS_MULTICAST_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_MULTICAST_EXISTS")), ("STATUS_NDIS_MULTICAST_EXISTS") }, (ULONG)((NTSTATUS)0xC023000AL) }, { { sizeof( "STATUS_NDIS_MULTICAST_NOT_FOUND" ) - sizeof( ("STATUS_NDIS_MULTICAST_NOT_FOUND")[0] ), sizeof( "STATUS_NDIS_MULTICAST_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_MULTICAST_NOT_FOUND")), ("STATUS_NDIS_MULTICAST_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC023000BL) }, { { sizeof( "STATUS_NDIS_REQUEST_ABORTED" ) - sizeof( ("STATUS_NDIS_REQUEST_ABORTED")[0] ), sizeof( "STATUS_NDIS_REQUEST_ABORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_REQUEST_ABORTED")), ("STATUS_NDIS_REQUEST_ABORTED") }, (ULONG)((NTSTATUS)0xC023000CL) }, { { sizeof( "STATUS_NDIS_RESET_IN_PROGRESS" ) - sizeof( ("STATUS_NDIS_RESET_IN_PROGRESS")[0] ), sizeof( "STATUS_NDIS_RESET_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_RESET_IN_PROGRESS")), ("STATUS_NDIS_RESET_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC023000DL) }, { { sizeof( "STATUS_NDIS_NOT_SUPPORTED" ) - sizeof( ("STATUS_NDIS_NOT_SUPPORTED")[0] ), sizeof( "STATUS_NDIS_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_NOT_SUPPORTED")), ("STATUS_NDIS_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC02300BBL) }, { { sizeof( "STATUS_NDIS_INVALID_PACKET" ) - sizeof( ("STATUS_NDIS_INVALID_PACKET")[0] ), sizeof( "STATUS_NDIS_INVALID_PACKET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_PACKET")), ("STATUS_NDIS_INVALID_PACKET") }, (ULONG)((NTSTATUS)0xC023000FL) }, { { sizeof( "STATUS_NDIS_ADAPTER_NOT_READY" ) - sizeof( ("STATUS_NDIS_ADAPTER_NOT_READY")[0] ), sizeof( "STATUS_NDIS_ADAPTER_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_ADAPTER_NOT_READY")), ("STATUS_NDIS_ADAPTER_NOT_READY") }, (ULONG)((NTSTATUS)0xC0230011L) }, { { sizeof( "STATUS_NDIS_INVALID_LENGTH" ) - sizeof( ("STATUS_NDIS_INVALID_LENGTH")[0] ), sizeof( "STATUS_NDIS_INVALID_LENGTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_LENGTH")), ("STATUS_NDIS_INVALID_LENGTH") }, (ULONG)((NTSTATUS)0xC0230014L) }, { { sizeof( "STATUS_NDIS_INVALID_DATA" ) - sizeof( ("STATUS_NDIS_INVALID_DATA")[0] ), sizeof( "STATUS_NDIS_INVALID_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_DATA")), ("STATUS_NDIS_INVALID_DATA") }, (ULONG)((NTSTATUS)0xC0230015L) }, { { sizeof( "STATUS_NDIS_BUFFER_TOO_SHORT" ) - sizeof( ("STATUS_NDIS_BUFFER_TOO_SHORT")[0] ), sizeof( "STATUS_NDIS_BUFFER_TOO_SHORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_BUFFER_TOO_SHORT")), ("STATUS_NDIS_BUFFER_TOO_SHORT") }, (ULONG)((NTSTATUS)0xC0230016L) }, { { sizeof( "STATUS_NDIS_INVALID_OID" ) - sizeof( ("STATUS_NDIS_INVALID_OID")[0] ), sizeof( "STATUS_NDIS_INVALID_OID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_OID")), ("STATUS_NDIS_INVALID_OID") }, (ULONG)((NTSTATUS)0xC0230017L) }, { { sizeof( "STATUS_NDIS_ADAPTER_REMOVED" ) - sizeof( ("STATUS_NDIS_ADAPTER_REMOVED")[0] ), sizeof( "STATUS_NDIS_ADAPTER_REMOVED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_ADAPTER_REMOVED")), ("STATUS_NDIS_ADAPTER_REMOVED") }, (ULONG)((NTSTATUS)0xC0230018L) }, { { sizeof( "STATUS_NDIS_UNSUPPORTED_MEDIA" ) - sizeof( ("STATUS_NDIS_UNSUPPORTED_MEDIA")[0] ), sizeof( "STATUS_NDIS_UNSUPPORTED_MEDIA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_UNSUPPORTED_MEDIA")), ("STATUS_NDIS_UNSUPPORTED_MEDIA") }, (ULONG)((NTSTATUS)0xC0230019L) }, { { sizeof( "STATUS_NDIS_GROUP_ADDRESS_IN_USE" ) - sizeof( ("STATUS_NDIS_GROUP_ADDRESS_IN_USE")[0] ), sizeof( "STATUS_NDIS_GROUP_ADDRESS_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_GROUP_ADDRESS_IN_USE")), ("STATUS_NDIS_GROUP_ADDRESS_IN_USE") }, (ULONG)((NTSTATUS)0xC023001AL) }, { { sizeof( "STATUS_NDIS_FILE_NOT_FOUND" ) - sizeof( ("STATUS_NDIS_FILE_NOT_FOUND")[0] ), sizeof( "STATUS_NDIS_FILE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_FILE_NOT_FOUND")), ("STATUS_NDIS_FILE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC023001BL) }, { { sizeof( "STATUS_NDIS_ERROR_READING_FILE" ) - sizeof( ("STATUS_NDIS_ERROR_READING_FILE")[0] ), sizeof( "STATUS_NDIS_ERROR_READING_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_ERROR_READING_FILE")), ("STATUS_NDIS_ERROR_READING_FILE") }, (ULONG)((NTSTATUS)0xC023001CL) }, { { sizeof( "STATUS_NDIS_ALREADY_MAPPED" ) - sizeof( ("STATUS_NDIS_ALREADY_MAPPED")[0] ), sizeof( "STATUS_NDIS_ALREADY_MAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_ALREADY_MAPPED")), ("STATUS_NDIS_ALREADY_MAPPED") }, (ULONG)((NTSTATUS)0xC023001DL) }, { { sizeof( "STATUS_NDIS_RESOURCE_CONFLICT" ) - sizeof( ("STATUS_NDIS_RESOURCE_CONFLICT")[0] ), sizeof( "STATUS_NDIS_RESOURCE_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_RESOURCE_CONFLICT")), ("STATUS_NDIS_RESOURCE_CONFLICT") }, (ULONG)((NTSTATUS)0xC023001EL) }, { { sizeof( "STATUS_NDIS_MEDIA_DISCONNECTED" ) - sizeof( ("STATUS_NDIS_MEDIA_DISCONNECTED")[0] ), sizeof( "STATUS_NDIS_MEDIA_DISCONNECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_MEDIA_DISCONNECTED")), ("STATUS_NDIS_MEDIA_DISCONNECTED") }, (ULONG)((NTSTATUS)0xC023001FL) }, { { sizeof( "STATUS_NDIS_INVALID_ADDRESS" ) - sizeof( ("STATUS_NDIS_INVALID_ADDRESS")[0] ), sizeof( "STATUS_NDIS_INVALID_ADDRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_ADDRESS")), ("STATUS_NDIS_INVALID_ADDRESS") }, (ULONG)((NTSTATUS)0xC0230022L) }, { { sizeof( "STATUS_NDIS_INVALID_DEVICE_REQUEST" ) - sizeof( ("STATUS_NDIS_INVALID_DEVICE_REQUEST")[0] ), sizeof( "STATUS_NDIS_INVALID_DEVICE_REQUEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_DEVICE_REQUEST")), ("STATUS_NDIS_INVALID_DEVICE_REQUEST") }, (ULONG)((NTSTATUS)0xC0230010L) }, { { sizeof( "STATUS_NDIS_PAUSED" ) - sizeof( ("STATUS_NDIS_PAUSED")[0] ), sizeof( "STATUS_NDIS_PAUSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_PAUSED")), ("STATUS_NDIS_PAUSED") }, (ULONG)((NTSTATUS)0xC023002AL) }, { { sizeof( "STATUS_NDIS_INTERFACE_NOT_FOUND" ) - sizeof( ("STATUS_NDIS_INTERFACE_NOT_FOUND")[0] ), sizeof( "STATUS_NDIS_INTERFACE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INTERFACE_NOT_FOUND")), ("STATUS_NDIS_INTERFACE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC023002BL) }, { { sizeof( "STATUS_NDIS_UNSUPPORTED_REVISION" ) - sizeof( ("STATUS_NDIS_UNSUPPORTED_REVISION")[0] ), sizeof( "STATUS_NDIS_UNSUPPORTED_REVISION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_UNSUPPORTED_REVISION")), ("STATUS_NDIS_UNSUPPORTED_REVISION") }, (ULONG)((NTSTATUS)0xC023002CL) }, { { sizeof( "STATUS_NDIS_INVALID_PORT" ) - sizeof( ("STATUS_NDIS_INVALID_PORT")[0] ), sizeof( "STATUS_NDIS_INVALID_PORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_PORT")), ("STATUS_NDIS_INVALID_PORT") }, (ULONG)((NTSTATUS)0xC023002DL) }, { { sizeof( "STATUS_NDIS_INVALID_PORT_STATE" ) - sizeof( ("STATUS_NDIS_INVALID_PORT_STATE")[0] ), sizeof( "STATUS_NDIS_INVALID_PORT_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INVALID_PORT_STATE")), ("STATUS_NDIS_INVALID_PORT_STATE") }, (ULONG)((NTSTATUS)0xC023002EL) }, { { sizeof( "STATUS_NDIS_LOW_POWER_STATE" ) - sizeof( ("STATUS_NDIS_LOW_POWER_STATE")[0] ), sizeof( "STATUS_NDIS_LOW_POWER_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_LOW_POWER_STATE")), ("STATUS_NDIS_LOW_POWER_STATE") }, (ULONG)((NTSTATUS)0xC023002FL) }, { { sizeof( "STATUS_NDIS_REINIT_REQUIRED" ) - sizeof( ("STATUS_NDIS_REINIT_REQUIRED")[0] ), sizeof( "STATUS_NDIS_REINIT_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_REINIT_REQUIRED")), ("STATUS_NDIS_REINIT_REQUIRED") }, (ULONG)((NTSTATUS)0xC0230030L) }, { { sizeof( "STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED" ) - sizeof( ("STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED")[0] ), sizeof( "STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED")), ("STATUS_NDIS_DOT11_AUTO_CONFIG_ENABLED") }, (ULONG)((NTSTATUS)0xC0232000L) }, { { sizeof( "STATUS_NDIS_DOT11_MEDIA_IN_USE" ) - sizeof( ("STATUS_NDIS_DOT11_MEDIA_IN_USE")[0] ), sizeof( "STATUS_NDIS_DOT11_MEDIA_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_MEDIA_IN_USE")), ("STATUS_NDIS_DOT11_MEDIA_IN_USE") }, (ULONG)((NTSTATUS)0xC0232001L) }, { { sizeof( "STATUS_NDIS_DOT11_POWER_STATE_INVALID" ) - sizeof( ("STATUS_NDIS_DOT11_POWER_STATE_INVALID")[0] ), sizeof( "STATUS_NDIS_DOT11_POWER_STATE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_POWER_STATE_INVALID")), ("STATUS_NDIS_DOT11_POWER_STATE_INVALID") }, (ULONG)((NTSTATUS)0xC0232002L) }, { { sizeof( "STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL" ) - sizeof( ("STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL")[0] ), sizeof( "STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL")), ("STATUS_NDIS_PM_WOL_PATTERN_LIST_FULL") }, (ULONG)((NTSTATUS)0xC0232003L) }, { { sizeof( "STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL" ) - sizeof( ("STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL")[0] ), sizeof( "STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL")), ("STATUS_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL") }, (ULONG)((NTSTATUS)0xC0232004L) }, { { sizeof( "STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE" ) - sizeof( ("STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE")[0] ), sizeof( "STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE")), ("STATUS_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC0232005L) }, { { sizeof( "STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE" ) - sizeof( ("STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE")[0] ), sizeof( "STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE")), ("STATUS_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC0232006L) }, { { sizeof( "STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED" ) - sizeof( ("STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED")[0] ), sizeof( "STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED")), ("STATUS_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0232007L) }, { { sizeof( "STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED" ) - sizeof( ("STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED")[0] ), sizeof( "STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED")), ("STATUS_NDIS_DOT11_AP_BAND_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0232008L) }, { { sizeof( "STATUS_NDIS_INDICATION_REQUIRED" ) - sizeof( ("STATUS_NDIS_INDICATION_REQUIRED")[0] ), sizeof( "STATUS_NDIS_INDICATION_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_INDICATION_REQUIRED")), ("STATUS_NDIS_INDICATION_REQUIRED") }, (ULONG)((NTSTATUS)0x40230001L) }, { { sizeof( "STATUS_NDIS_OFFLOAD_POLICY" ) - sizeof( ("STATUS_NDIS_OFFLOAD_POLICY")[0] ), sizeof( "STATUS_NDIS_OFFLOAD_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_OFFLOAD_POLICY")), ("STATUS_NDIS_OFFLOAD_POLICY") }, (ULONG)((NTSTATUS)0xC023100FL) }, { { sizeof( "STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED" ) - sizeof( ("STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED")[0] ), sizeof( "STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED")), ("STATUS_NDIS_OFFLOAD_CONNECTION_REJECTED") }, (ULONG)((NTSTATUS)0xC0231012L) }, { { sizeof( "STATUS_NDIS_OFFLOAD_PATH_REJECTED" ) - sizeof( ("STATUS_NDIS_OFFLOAD_PATH_REJECTED")[0] ), sizeof( "STATUS_NDIS_OFFLOAD_PATH_REJECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NDIS_OFFLOAD_PATH_REJECTED")), ("STATUS_NDIS_OFFLOAD_PATH_REJECTED") }, (ULONG)((NTSTATUS)0xC0231013L) }, { { sizeof( "STATUS_TPM_ERROR_MASK" ) - sizeof( ("STATUS_TPM_ERROR_MASK")[0] ), sizeof( "STATUS_TPM_ERROR_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_ERROR_MASK")), ("STATUS_TPM_ERROR_MASK") }, (ULONG)((NTSTATUS)0xC0290000L) }, { { sizeof( "STATUS_TPM_AUTHFAIL" ) - sizeof( ("STATUS_TPM_AUTHFAIL")[0] ), sizeof( "STATUS_TPM_AUTHFAIL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AUTHFAIL")), ("STATUS_TPM_AUTHFAIL") }, (ULONG)((NTSTATUS)0xC0290001L) }, { { sizeof( "STATUS_TPM_BADINDEX" ) - sizeof( ("STATUS_TPM_BADINDEX")[0] ), sizeof( "STATUS_TPM_BADINDEX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BADINDEX")), ("STATUS_TPM_BADINDEX") }, (ULONG)((NTSTATUS)0xC0290002L) }, { { sizeof( "STATUS_TPM_BAD_PARAMETER" ) - sizeof( ("STATUS_TPM_BAD_PARAMETER")[0] ), sizeof( "STATUS_TPM_BAD_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_PARAMETER")), ("STATUS_TPM_BAD_PARAMETER") }, (ULONG)((NTSTATUS)0xC0290003L) }, { { sizeof( "STATUS_TPM_AUDITFAILURE" ) - sizeof( ("STATUS_TPM_AUDITFAILURE")[0] ), sizeof( "STATUS_TPM_AUDITFAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AUDITFAILURE")), ("STATUS_TPM_AUDITFAILURE") }, (ULONG)((NTSTATUS)0xC0290004L) }, { { sizeof( "STATUS_TPM_CLEAR_DISABLED" ) - sizeof( ("STATUS_TPM_CLEAR_DISABLED")[0] ), sizeof( "STATUS_TPM_CLEAR_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_CLEAR_DISABLED")), ("STATUS_TPM_CLEAR_DISABLED") }, (ULONG)((NTSTATUS)0xC0290005L) }, { { sizeof( "STATUS_TPM_DEACTIVATED" ) - sizeof( ("STATUS_TPM_DEACTIVATED")[0] ), sizeof( "STATUS_TPM_DEACTIVATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DEACTIVATED")), ("STATUS_TPM_DEACTIVATED") }, (ULONG)((NTSTATUS)0xC0290006L) }, { { sizeof( "STATUS_TPM_DISABLED" ) - sizeof( ("STATUS_TPM_DISABLED")[0] ), sizeof( "STATUS_TPM_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DISABLED")), ("STATUS_TPM_DISABLED") }, (ULONG)((NTSTATUS)0xC0290007L) }, { { sizeof( "STATUS_TPM_DISABLED_CMD" ) - sizeof( ("STATUS_TPM_DISABLED_CMD")[0] ), sizeof( "STATUS_TPM_DISABLED_CMD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DISABLED_CMD")), ("STATUS_TPM_DISABLED_CMD") }, (ULONG)((NTSTATUS)0xC0290008L) }, { { sizeof( "STATUS_TPM_FAIL" ) - sizeof( ("STATUS_TPM_FAIL")[0] ), sizeof( "STATUS_TPM_FAIL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_FAIL")), ("STATUS_TPM_FAIL") }, (ULONG)((NTSTATUS)0xC0290009L) }, { { sizeof( "STATUS_TPM_BAD_ORDINAL" ) - sizeof( ("STATUS_TPM_BAD_ORDINAL")[0] ), sizeof( "STATUS_TPM_BAD_ORDINAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_ORDINAL")), ("STATUS_TPM_BAD_ORDINAL") }, (ULONG)((NTSTATUS)0xC029000AL) }, { { sizeof( "STATUS_TPM_INSTALL_DISABLED" ) - sizeof( ("STATUS_TPM_INSTALL_DISABLED")[0] ), sizeof( "STATUS_TPM_INSTALL_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INSTALL_DISABLED")), ("STATUS_TPM_INSTALL_DISABLED") }, (ULONG)((NTSTATUS)0xC029000BL) }, { { sizeof( "STATUS_TPM_INVALID_KEYHANDLE" ) - sizeof( ("STATUS_TPM_INVALID_KEYHANDLE")[0] ), sizeof( "STATUS_TPM_INVALID_KEYHANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_KEYHANDLE")), ("STATUS_TPM_INVALID_KEYHANDLE") }, (ULONG)((NTSTATUS)0xC029000CL) }, { { sizeof( "STATUS_TPM_KEYNOTFOUND" ) - sizeof( ("STATUS_TPM_KEYNOTFOUND")[0] ), sizeof( "STATUS_TPM_KEYNOTFOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_KEYNOTFOUND")), ("STATUS_TPM_KEYNOTFOUND") }, (ULONG)((NTSTATUS)0xC029000DL) }, { { sizeof( "STATUS_TPM_INAPPROPRIATE_ENC" ) - sizeof( ("STATUS_TPM_INAPPROPRIATE_ENC")[0] ), sizeof( "STATUS_TPM_INAPPROPRIATE_ENC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INAPPROPRIATE_ENC")), ("STATUS_TPM_INAPPROPRIATE_ENC") }, (ULONG)((NTSTATUS)0xC029000EL) }, { { sizeof( "STATUS_TPM_MIGRATEFAIL" ) - sizeof( ("STATUS_TPM_MIGRATEFAIL")[0] ), sizeof( "STATUS_TPM_MIGRATEFAIL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_MIGRATEFAIL")), ("STATUS_TPM_MIGRATEFAIL") }, (ULONG)((NTSTATUS)0xC029000FL) }, { { sizeof( "STATUS_TPM_INVALID_PCR_INFO" ) - sizeof( ("STATUS_TPM_INVALID_PCR_INFO")[0] ), sizeof( "STATUS_TPM_INVALID_PCR_INFO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_PCR_INFO")), ("STATUS_TPM_INVALID_PCR_INFO") }, (ULONG)((NTSTATUS)0xC0290010L) }, { { sizeof( "STATUS_TPM_NOSPACE" ) - sizeof( ("STATUS_TPM_NOSPACE")[0] ), sizeof( "STATUS_TPM_NOSPACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOSPACE")), ("STATUS_TPM_NOSPACE") }, (ULONG)((NTSTATUS)0xC0290011L) }, { { sizeof( "STATUS_TPM_NOSRK" ) - sizeof( ("STATUS_TPM_NOSRK")[0] ), sizeof( "STATUS_TPM_NOSRK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOSRK")), ("STATUS_TPM_NOSRK") }, (ULONG)((NTSTATUS)0xC0290012L) }, { { sizeof( "STATUS_TPM_NOTSEALED_BLOB" ) - sizeof( ("STATUS_TPM_NOTSEALED_BLOB")[0] ), sizeof( "STATUS_TPM_NOTSEALED_BLOB" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOTSEALED_BLOB")), ("STATUS_TPM_NOTSEALED_BLOB") }, (ULONG)((NTSTATUS)0xC0290013L) }, { { sizeof( "STATUS_TPM_OWNER_SET" ) - sizeof( ("STATUS_TPM_OWNER_SET")[0] ), sizeof( "STATUS_TPM_OWNER_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_OWNER_SET")), ("STATUS_TPM_OWNER_SET") }, (ULONG)((NTSTATUS)0xC0290014L) }, { { sizeof( "STATUS_TPM_RESOURCES" ) - sizeof( ("STATUS_TPM_RESOURCES")[0] ), sizeof( "STATUS_TPM_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_RESOURCES")), ("STATUS_TPM_RESOURCES") }, (ULONG)((NTSTATUS)0xC0290015L) }, { { sizeof( "STATUS_TPM_SHORTRANDOM" ) - sizeof( ("STATUS_TPM_SHORTRANDOM")[0] ), sizeof( "STATUS_TPM_SHORTRANDOM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_SHORTRANDOM")), ("STATUS_TPM_SHORTRANDOM") }, (ULONG)((NTSTATUS)0xC0290016L) }, { { sizeof( "STATUS_TPM_SIZE" ) - sizeof( ("STATUS_TPM_SIZE")[0] ), sizeof( "STATUS_TPM_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_SIZE")), ("STATUS_TPM_SIZE") }, (ULONG)((NTSTATUS)0xC0290017L) }, { { sizeof( "STATUS_TPM_WRONGPCRVAL" ) - sizeof( ("STATUS_TPM_WRONGPCRVAL")[0] ), sizeof( "STATUS_TPM_WRONGPCRVAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_WRONGPCRVAL")), ("STATUS_TPM_WRONGPCRVAL") }, (ULONG)((NTSTATUS)0xC0290018L) }, { { sizeof( "STATUS_TPM_BAD_PARAM_SIZE" ) - sizeof( ("STATUS_TPM_BAD_PARAM_SIZE")[0] ), sizeof( "STATUS_TPM_BAD_PARAM_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_PARAM_SIZE")), ("STATUS_TPM_BAD_PARAM_SIZE") }, (ULONG)((NTSTATUS)0xC0290019L) }, { { sizeof( "STATUS_TPM_SHA_THREAD" ) - sizeof( ("STATUS_TPM_SHA_THREAD")[0] ), sizeof( "STATUS_TPM_SHA_THREAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_SHA_THREAD")), ("STATUS_TPM_SHA_THREAD") }, (ULONG)((NTSTATUS)0xC029001AL) }, { { sizeof( "STATUS_TPM_SHA_ERROR" ) - sizeof( ("STATUS_TPM_SHA_ERROR")[0] ), sizeof( "STATUS_TPM_SHA_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_SHA_ERROR")), ("STATUS_TPM_SHA_ERROR") }, (ULONG)((NTSTATUS)0xC029001BL) }, { { sizeof( "STATUS_TPM_FAILEDSELFTEST" ) - sizeof( ("STATUS_TPM_FAILEDSELFTEST")[0] ), sizeof( "STATUS_TPM_FAILEDSELFTEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_FAILEDSELFTEST")), ("STATUS_TPM_FAILEDSELFTEST") }, (ULONG)((NTSTATUS)0xC029001CL) }, { { sizeof( "STATUS_TPM_AUTH2FAIL" ) - sizeof( ("STATUS_TPM_AUTH2FAIL")[0] ), sizeof( "STATUS_TPM_AUTH2FAIL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AUTH2FAIL")), ("STATUS_TPM_AUTH2FAIL") }, (ULONG)((NTSTATUS)0xC029001DL) }, { { sizeof( "STATUS_TPM_BADTAG" ) - sizeof( ("STATUS_TPM_BADTAG")[0] ), sizeof( "STATUS_TPM_BADTAG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BADTAG")), ("STATUS_TPM_BADTAG") }, (ULONG)((NTSTATUS)0xC029001EL) }, { { sizeof( "STATUS_TPM_IOERROR" ) - sizeof( ("STATUS_TPM_IOERROR")[0] ), sizeof( "STATUS_TPM_IOERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_IOERROR")), ("STATUS_TPM_IOERROR") }, (ULONG)((NTSTATUS)0xC029001FL) }, { { sizeof( "STATUS_TPM_ENCRYPT_ERROR" ) - sizeof( ("STATUS_TPM_ENCRYPT_ERROR")[0] ), sizeof( "STATUS_TPM_ENCRYPT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_ENCRYPT_ERROR")), ("STATUS_TPM_ENCRYPT_ERROR") }, (ULONG)((NTSTATUS)0xC0290020L) }, { { sizeof( "STATUS_TPM_DECRYPT_ERROR" ) - sizeof( ("STATUS_TPM_DECRYPT_ERROR")[0] ), sizeof( "STATUS_TPM_DECRYPT_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DECRYPT_ERROR")), ("STATUS_TPM_DECRYPT_ERROR") }, (ULONG)((NTSTATUS)0xC0290021L) }, { { sizeof( "STATUS_TPM_INVALID_AUTHHANDLE" ) - sizeof( ("STATUS_TPM_INVALID_AUTHHANDLE")[0] ), sizeof( "STATUS_TPM_INVALID_AUTHHANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_AUTHHANDLE")), ("STATUS_TPM_INVALID_AUTHHANDLE") }, (ULONG)((NTSTATUS)0xC0290022L) }, { { sizeof( "STATUS_TPM_NO_ENDORSEMENT" ) - sizeof( ("STATUS_TPM_NO_ENDORSEMENT")[0] ), sizeof( "STATUS_TPM_NO_ENDORSEMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NO_ENDORSEMENT")), ("STATUS_TPM_NO_ENDORSEMENT") }, (ULONG)((NTSTATUS)0xC0290023L) }, { { sizeof( "STATUS_TPM_INVALID_KEYUSAGE" ) - sizeof( ("STATUS_TPM_INVALID_KEYUSAGE")[0] ), sizeof( "STATUS_TPM_INVALID_KEYUSAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_KEYUSAGE")), ("STATUS_TPM_INVALID_KEYUSAGE") }, (ULONG)((NTSTATUS)0xC0290024L) }, { { sizeof( "STATUS_TPM_WRONG_ENTITYTYPE" ) - sizeof( ("STATUS_TPM_WRONG_ENTITYTYPE")[0] ), sizeof( "STATUS_TPM_WRONG_ENTITYTYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_WRONG_ENTITYTYPE")), ("STATUS_TPM_WRONG_ENTITYTYPE") }, (ULONG)((NTSTATUS)0xC0290025L) }, { { sizeof( "STATUS_TPM_INVALID_POSTINIT" ) - sizeof( ("STATUS_TPM_INVALID_POSTINIT")[0] ), sizeof( "STATUS_TPM_INVALID_POSTINIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_POSTINIT")), ("STATUS_TPM_INVALID_POSTINIT") }, (ULONG)((NTSTATUS)0xC0290026L) }, { { sizeof( "STATUS_TPM_INAPPROPRIATE_SIG" ) - sizeof( ("STATUS_TPM_INAPPROPRIATE_SIG")[0] ), sizeof( "STATUS_TPM_INAPPROPRIATE_SIG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INAPPROPRIATE_SIG")), ("STATUS_TPM_INAPPROPRIATE_SIG") }, (ULONG)((NTSTATUS)0xC0290027L) }, { { sizeof( "STATUS_TPM_BAD_KEY_PROPERTY" ) - sizeof( ("STATUS_TPM_BAD_KEY_PROPERTY")[0] ), sizeof( "STATUS_TPM_BAD_KEY_PROPERTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_KEY_PROPERTY")), ("STATUS_TPM_BAD_KEY_PROPERTY") }, (ULONG)((NTSTATUS)0xC0290028L) }, { { sizeof( "STATUS_TPM_BAD_MIGRATION" ) - sizeof( ("STATUS_TPM_BAD_MIGRATION")[0] ), sizeof( "STATUS_TPM_BAD_MIGRATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_MIGRATION")), ("STATUS_TPM_BAD_MIGRATION") }, (ULONG)((NTSTATUS)0xC0290029L) }, { { sizeof( "STATUS_TPM_BAD_SCHEME" ) - sizeof( ("STATUS_TPM_BAD_SCHEME")[0] ), sizeof( "STATUS_TPM_BAD_SCHEME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_SCHEME")), ("STATUS_TPM_BAD_SCHEME") }, (ULONG)((NTSTATUS)0xC029002AL) }, { { sizeof( "STATUS_TPM_BAD_DATASIZE" ) - sizeof( ("STATUS_TPM_BAD_DATASIZE")[0] ), sizeof( "STATUS_TPM_BAD_DATASIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_DATASIZE")), ("STATUS_TPM_BAD_DATASIZE") }, (ULONG)((NTSTATUS)0xC029002BL) }, { { sizeof( "STATUS_TPM_BAD_MODE" ) - sizeof( ("STATUS_TPM_BAD_MODE")[0] ), sizeof( "STATUS_TPM_BAD_MODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_MODE")), ("STATUS_TPM_BAD_MODE") }, (ULONG)((NTSTATUS)0xC029002CL) }, { { sizeof( "STATUS_TPM_BAD_PRESENCE" ) - sizeof( ("STATUS_TPM_BAD_PRESENCE")[0] ), sizeof( "STATUS_TPM_BAD_PRESENCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_PRESENCE")), ("STATUS_TPM_BAD_PRESENCE") }, (ULONG)((NTSTATUS)0xC029002DL) }, { { sizeof( "STATUS_TPM_BAD_VERSION" ) - sizeof( ("STATUS_TPM_BAD_VERSION")[0] ), sizeof( "STATUS_TPM_BAD_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_VERSION")), ("STATUS_TPM_BAD_VERSION") }, (ULONG)((NTSTATUS)0xC029002EL) }, { { sizeof( "STATUS_TPM_NO_WRAP_TRANSPORT" ) - sizeof( ("STATUS_TPM_NO_WRAP_TRANSPORT")[0] ), sizeof( "STATUS_TPM_NO_WRAP_TRANSPORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NO_WRAP_TRANSPORT")), ("STATUS_TPM_NO_WRAP_TRANSPORT") }, (ULONG)((NTSTATUS)0xC029002FL) }, { { sizeof( "STATUS_TPM_AUDITFAIL_UNSUCCESSFUL" ) - sizeof( ("STATUS_TPM_AUDITFAIL_UNSUCCESSFUL")[0] ), sizeof( "STATUS_TPM_AUDITFAIL_UNSUCCESSFUL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AUDITFAIL_UNSUCCESSFUL")), ("STATUS_TPM_AUDITFAIL_UNSUCCESSFUL") }, (ULONG)((NTSTATUS)0xC0290030L) }, { { sizeof( "STATUS_TPM_AUDITFAIL_SUCCESSFUL" ) - sizeof( ("STATUS_TPM_AUDITFAIL_SUCCESSFUL")[0] ), sizeof( "STATUS_TPM_AUDITFAIL_SUCCESSFUL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AUDITFAIL_SUCCESSFUL")), ("STATUS_TPM_AUDITFAIL_SUCCESSFUL") }, (ULONG)((NTSTATUS)0xC0290031L) }, { { sizeof( "STATUS_TPM_NOTRESETABLE" ) - sizeof( ("STATUS_TPM_NOTRESETABLE")[0] ), sizeof( "STATUS_TPM_NOTRESETABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOTRESETABLE")), ("STATUS_TPM_NOTRESETABLE") }, (ULONG)((NTSTATUS)0xC0290032L) }, { { sizeof( "STATUS_TPM_NOTLOCAL" ) - sizeof( ("STATUS_TPM_NOTLOCAL")[0] ), sizeof( "STATUS_TPM_NOTLOCAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOTLOCAL")), ("STATUS_TPM_NOTLOCAL") }, (ULONG)((NTSTATUS)0xC0290033L) }, { { sizeof( "STATUS_TPM_BAD_TYPE" ) - sizeof( ("STATUS_TPM_BAD_TYPE")[0] ), sizeof( "STATUS_TPM_BAD_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_TYPE")), ("STATUS_TPM_BAD_TYPE") }, (ULONG)((NTSTATUS)0xC0290034L) }, { { sizeof( "STATUS_TPM_INVALID_RESOURCE" ) - sizeof( ("STATUS_TPM_INVALID_RESOURCE")[0] ), sizeof( "STATUS_TPM_INVALID_RESOURCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_RESOURCE")), ("STATUS_TPM_INVALID_RESOURCE") }, (ULONG)((NTSTATUS)0xC0290035L) }, { { sizeof( "STATUS_TPM_NOTFIPS" ) - sizeof( ("STATUS_TPM_NOTFIPS")[0] ), sizeof( "STATUS_TPM_NOTFIPS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOTFIPS")), ("STATUS_TPM_NOTFIPS") }, (ULONG)((NTSTATUS)0xC0290036L) }, { { sizeof( "STATUS_TPM_INVALID_FAMILY" ) - sizeof( ("STATUS_TPM_INVALID_FAMILY")[0] ), sizeof( "STATUS_TPM_INVALID_FAMILY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_FAMILY")), ("STATUS_TPM_INVALID_FAMILY") }, (ULONG)((NTSTATUS)0xC0290037L) }, { { sizeof( "STATUS_TPM_NO_NV_PERMISSION" ) - sizeof( ("STATUS_TPM_NO_NV_PERMISSION")[0] ), sizeof( "STATUS_TPM_NO_NV_PERMISSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NO_NV_PERMISSION")), ("STATUS_TPM_NO_NV_PERMISSION") }, (ULONG)((NTSTATUS)0xC0290038L) }, { { sizeof( "STATUS_TPM_REQUIRES_SIGN" ) - sizeof( ("STATUS_TPM_REQUIRES_SIGN")[0] ), sizeof( "STATUS_TPM_REQUIRES_SIGN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_REQUIRES_SIGN")), ("STATUS_TPM_REQUIRES_SIGN") }, (ULONG)((NTSTATUS)0xC0290039L) }, { { sizeof( "STATUS_TPM_KEY_NOTSUPPORTED" ) - sizeof( ("STATUS_TPM_KEY_NOTSUPPORTED")[0] ), sizeof( "STATUS_TPM_KEY_NOTSUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_KEY_NOTSUPPORTED")), ("STATUS_TPM_KEY_NOTSUPPORTED") }, (ULONG)((NTSTATUS)0xC029003AL) }, { { sizeof( "STATUS_TPM_AUTH_CONFLICT" ) - sizeof( ("STATUS_TPM_AUTH_CONFLICT")[0] ), sizeof( "STATUS_TPM_AUTH_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AUTH_CONFLICT")), ("STATUS_TPM_AUTH_CONFLICT") }, (ULONG)((NTSTATUS)0xC029003BL) }, { { sizeof( "STATUS_TPM_AREA_LOCKED" ) - sizeof( ("STATUS_TPM_AREA_LOCKED")[0] ), sizeof( "STATUS_TPM_AREA_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_AREA_LOCKED")), ("STATUS_TPM_AREA_LOCKED") }, (ULONG)((NTSTATUS)0xC029003CL) }, { { sizeof( "STATUS_TPM_BAD_LOCALITY" ) - sizeof( ("STATUS_TPM_BAD_LOCALITY")[0] ), sizeof( "STATUS_TPM_BAD_LOCALITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_LOCALITY")), ("STATUS_TPM_BAD_LOCALITY") }, (ULONG)((NTSTATUS)0xC029003DL) }, { { sizeof( "STATUS_TPM_READ_ONLY" ) - sizeof( ("STATUS_TPM_READ_ONLY")[0] ), sizeof( "STATUS_TPM_READ_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_READ_ONLY")), ("STATUS_TPM_READ_ONLY") }, (ULONG)((NTSTATUS)0xC029003EL) }, { { sizeof( "STATUS_TPM_PER_NOWRITE" ) - sizeof( ("STATUS_TPM_PER_NOWRITE")[0] ), sizeof( "STATUS_TPM_PER_NOWRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_PER_NOWRITE")), ("STATUS_TPM_PER_NOWRITE") }, (ULONG)((NTSTATUS)0xC029003FL) }, { { sizeof( "STATUS_TPM_FAMILYCOUNT" ) - sizeof( ("STATUS_TPM_FAMILYCOUNT")[0] ), sizeof( "STATUS_TPM_FAMILYCOUNT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_FAMILYCOUNT")), ("STATUS_TPM_FAMILYCOUNT") }, (ULONG)((NTSTATUS)0xC0290040L) }, { { sizeof( "STATUS_TPM_WRITE_LOCKED" ) - sizeof( ("STATUS_TPM_WRITE_LOCKED")[0] ), sizeof( "STATUS_TPM_WRITE_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_WRITE_LOCKED")), ("STATUS_TPM_WRITE_LOCKED") }, (ULONG)((NTSTATUS)0xC0290041L) }, { { sizeof( "STATUS_TPM_BAD_ATTRIBUTES" ) - sizeof( ("STATUS_TPM_BAD_ATTRIBUTES")[0] ), sizeof( "STATUS_TPM_BAD_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_ATTRIBUTES")), ("STATUS_TPM_BAD_ATTRIBUTES") }, (ULONG)((NTSTATUS)0xC0290042L) }, { { sizeof( "STATUS_TPM_INVALID_STRUCTURE" ) - sizeof( ("STATUS_TPM_INVALID_STRUCTURE")[0] ), sizeof( "STATUS_TPM_INVALID_STRUCTURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_STRUCTURE")), ("STATUS_TPM_INVALID_STRUCTURE") }, (ULONG)((NTSTATUS)0xC0290043L) }, { { sizeof( "STATUS_TPM_KEY_OWNER_CONTROL" ) - sizeof( ("STATUS_TPM_KEY_OWNER_CONTROL")[0] ), sizeof( "STATUS_TPM_KEY_OWNER_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_KEY_OWNER_CONTROL")), ("STATUS_TPM_KEY_OWNER_CONTROL") }, (ULONG)((NTSTATUS)0xC0290044L) }, { { sizeof( "STATUS_TPM_BAD_COUNTER" ) - sizeof( ("STATUS_TPM_BAD_COUNTER")[0] ), sizeof( "STATUS_TPM_BAD_COUNTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_COUNTER")), ("STATUS_TPM_BAD_COUNTER") }, (ULONG)((NTSTATUS)0xC0290045L) }, { { sizeof( "STATUS_TPM_NOT_FULLWRITE" ) - sizeof( ("STATUS_TPM_NOT_FULLWRITE")[0] ), sizeof( "STATUS_TPM_NOT_FULLWRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOT_FULLWRITE")), ("STATUS_TPM_NOT_FULLWRITE") }, (ULONG)((NTSTATUS)0xC0290046L) }, { { sizeof( "STATUS_TPM_CONTEXT_GAP" ) - sizeof( ("STATUS_TPM_CONTEXT_GAP")[0] ), sizeof( "STATUS_TPM_CONTEXT_GAP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_CONTEXT_GAP")), ("STATUS_TPM_CONTEXT_GAP") }, (ULONG)((NTSTATUS)0xC0290047L) }, { { sizeof( "STATUS_TPM_MAXNVWRITES" ) - sizeof( ("STATUS_TPM_MAXNVWRITES")[0] ), sizeof( "STATUS_TPM_MAXNVWRITES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_MAXNVWRITES")), ("STATUS_TPM_MAXNVWRITES") }, (ULONG)((NTSTATUS)0xC0290048L) }, { { sizeof( "STATUS_TPM_NOOPERATOR" ) - sizeof( ("STATUS_TPM_NOOPERATOR")[0] ), sizeof( "STATUS_TPM_NOOPERATOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOOPERATOR")), ("STATUS_TPM_NOOPERATOR") }, (ULONG)((NTSTATUS)0xC0290049L) }, { { sizeof( "STATUS_TPM_RESOURCEMISSING" ) - sizeof( ("STATUS_TPM_RESOURCEMISSING")[0] ), sizeof( "STATUS_TPM_RESOURCEMISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_RESOURCEMISSING")), ("STATUS_TPM_RESOURCEMISSING") }, (ULONG)((NTSTATUS)0xC029004AL) }, { { sizeof( "STATUS_TPM_DELEGATE_LOCK" ) - sizeof( ("STATUS_TPM_DELEGATE_LOCK")[0] ), sizeof( "STATUS_TPM_DELEGATE_LOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DELEGATE_LOCK")), ("STATUS_TPM_DELEGATE_LOCK") }, (ULONG)((NTSTATUS)0xC029004BL) }, { { sizeof( "STATUS_TPM_DELEGATE_FAMILY" ) - sizeof( ("STATUS_TPM_DELEGATE_FAMILY")[0] ), sizeof( "STATUS_TPM_DELEGATE_FAMILY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DELEGATE_FAMILY")), ("STATUS_TPM_DELEGATE_FAMILY") }, (ULONG)((NTSTATUS)0xC029004CL) }, { { sizeof( "STATUS_TPM_DELEGATE_ADMIN" ) - sizeof( ("STATUS_TPM_DELEGATE_ADMIN")[0] ), sizeof( "STATUS_TPM_DELEGATE_ADMIN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DELEGATE_ADMIN")), ("STATUS_TPM_DELEGATE_ADMIN") }, (ULONG)((NTSTATUS)0xC029004DL) }, { { sizeof( "STATUS_TPM_TRANSPORT_NOTEXCLUSIVE" ) - sizeof( ("STATUS_TPM_TRANSPORT_NOTEXCLUSIVE")[0] ), sizeof( "STATUS_TPM_TRANSPORT_NOTEXCLUSIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_TRANSPORT_NOTEXCLUSIVE")), ("STATUS_TPM_TRANSPORT_NOTEXCLUSIVE") }, (ULONG)((NTSTATUS)0xC029004EL) }, { { sizeof( "STATUS_TPM_OWNER_CONTROL" ) - sizeof( ("STATUS_TPM_OWNER_CONTROL")[0] ), sizeof( "STATUS_TPM_OWNER_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_OWNER_CONTROL")), ("STATUS_TPM_OWNER_CONTROL") }, (ULONG)((NTSTATUS)0xC029004FL) }, { { sizeof( "STATUS_TPM_DAA_RESOURCES" ) - sizeof( ("STATUS_TPM_DAA_RESOURCES")[0] ), sizeof( "STATUS_TPM_DAA_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_RESOURCES")), ("STATUS_TPM_DAA_RESOURCES") }, (ULONG)((NTSTATUS)0xC0290050L) }, { { sizeof( "STATUS_TPM_DAA_INPUT_DATA0" ) - sizeof( ("STATUS_TPM_DAA_INPUT_DATA0")[0] ), sizeof( "STATUS_TPM_DAA_INPUT_DATA0" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_INPUT_DATA0")), ("STATUS_TPM_DAA_INPUT_DATA0") }, (ULONG)((NTSTATUS)0xC0290051L) }, { { sizeof( "STATUS_TPM_DAA_INPUT_DATA1" ) - sizeof( ("STATUS_TPM_DAA_INPUT_DATA1")[0] ), sizeof( "STATUS_TPM_DAA_INPUT_DATA1" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_INPUT_DATA1")), ("STATUS_TPM_DAA_INPUT_DATA1") }, (ULONG)((NTSTATUS)0xC0290052L) }, { { sizeof( "STATUS_TPM_DAA_ISSUER_SETTINGS" ) - sizeof( ("STATUS_TPM_DAA_ISSUER_SETTINGS")[0] ), sizeof( "STATUS_TPM_DAA_ISSUER_SETTINGS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_ISSUER_SETTINGS")), ("STATUS_TPM_DAA_ISSUER_SETTINGS") }, (ULONG)((NTSTATUS)0xC0290053L) }, { { sizeof( "STATUS_TPM_DAA_TPM_SETTINGS" ) - sizeof( ("STATUS_TPM_DAA_TPM_SETTINGS")[0] ), sizeof( "STATUS_TPM_DAA_TPM_SETTINGS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_TPM_SETTINGS")), ("STATUS_TPM_DAA_TPM_SETTINGS") }, (ULONG)((NTSTATUS)0xC0290054L) }, { { sizeof( "STATUS_TPM_DAA_STAGE" ) - sizeof( ("STATUS_TPM_DAA_STAGE")[0] ), sizeof( "STATUS_TPM_DAA_STAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_STAGE")), ("STATUS_TPM_DAA_STAGE") }, (ULONG)((NTSTATUS)0xC0290055L) }, { { sizeof( "STATUS_TPM_DAA_ISSUER_VALIDITY" ) - sizeof( ("STATUS_TPM_DAA_ISSUER_VALIDITY")[0] ), sizeof( "STATUS_TPM_DAA_ISSUER_VALIDITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_ISSUER_VALIDITY")), ("STATUS_TPM_DAA_ISSUER_VALIDITY") }, (ULONG)((NTSTATUS)0xC0290056L) }, { { sizeof( "STATUS_TPM_DAA_WRONG_W" ) - sizeof( ("STATUS_TPM_DAA_WRONG_W")[0] ), sizeof( "STATUS_TPM_DAA_WRONG_W" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DAA_WRONG_W")), ("STATUS_TPM_DAA_WRONG_W") }, (ULONG)((NTSTATUS)0xC0290057L) }, { { sizeof( "STATUS_TPM_BAD_HANDLE" ) - sizeof( ("STATUS_TPM_BAD_HANDLE")[0] ), sizeof( "STATUS_TPM_BAD_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_HANDLE")), ("STATUS_TPM_BAD_HANDLE") }, (ULONG)((NTSTATUS)0xC0290058L) }, { { sizeof( "STATUS_TPM_BAD_DELEGATE" ) - sizeof( ("STATUS_TPM_BAD_DELEGATE")[0] ), sizeof( "STATUS_TPM_BAD_DELEGATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_DELEGATE")), ("STATUS_TPM_BAD_DELEGATE") }, (ULONG)((NTSTATUS)0xC0290059L) }, { { sizeof( "STATUS_TPM_BADCONTEXT" ) - sizeof( ("STATUS_TPM_BADCONTEXT")[0] ), sizeof( "STATUS_TPM_BADCONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BADCONTEXT")), ("STATUS_TPM_BADCONTEXT") }, (ULONG)((NTSTATUS)0xC029005AL) }, { { sizeof( "STATUS_TPM_TOOMANYCONTEXTS" ) - sizeof( ("STATUS_TPM_TOOMANYCONTEXTS")[0] ), sizeof( "STATUS_TPM_TOOMANYCONTEXTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_TOOMANYCONTEXTS")), ("STATUS_TPM_TOOMANYCONTEXTS") }, (ULONG)((NTSTATUS)0xC029005BL) }, { { sizeof( "STATUS_TPM_MA_TICKET_SIGNATURE" ) - sizeof( ("STATUS_TPM_MA_TICKET_SIGNATURE")[0] ), sizeof( "STATUS_TPM_MA_TICKET_SIGNATURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_MA_TICKET_SIGNATURE")), ("STATUS_TPM_MA_TICKET_SIGNATURE") }, (ULONG)((NTSTATUS)0xC029005CL) }, { { sizeof( "STATUS_TPM_MA_DESTINATION" ) - sizeof( ("STATUS_TPM_MA_DESTINATION")[0] ), sizeof( "STATUS_TPM_MA_DESTINATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_MA_DESTINATION")), ("STATUS_TPM_MA_DESTINATION") }, (ULONG)((NTSTATUS)0xC029005DL) }, { { sizeof( "STATUS_TPM_MA_SOURCE" ) - sizeof( ("STATUS_TPM_MA_SOURCE")[0] ), sizeof( "STATUS_TPM_MA_SOURCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_MA_SOURCE")), ("STATUS_TPM_MA_SOURCE") }, (ULONG)((NTSTATUS)0xC029005EL) }, { { sizeof( "STATUS_TPM_MA_AUTHORITY" ) - sizeof( ("STATUS_TPM_MA_AUTHORITY")[0] ), sizeof( "STATUS_TPM_MA_AUTHORITY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_MA_AUTHORITY")), ("STATUS_TPM_MA_AUTHORITY") }, (ULONG)((NTSTATUS)0xC029005FL) }, { { sizeof( "STATUS_TPM_PERMANENTEK" ) - sizeof( ("STATUS_TPM_PERMANENTEK")[0] ), sizeof( "STATUS_TPM_PERMANENTEK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_PERMANENTEK")), ("STATUS_TPM_PERMANENTEK") }, (ULONG)((NTSTATUS)0xC0290061L) }, { { sizeof( "STATUS_TPM_BAD_SIGNATURE" ) - sizeof( ("STATUS_TPM_BAD_SIGNATURE")[0] ), sizeof( "STATUS_TPM_BAD_SIGNATURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_BAD_SIGNATURE")), ("STATUS_TPM_BAD_SIGNATURE") }, (ULONG)((NTSTATUS)0xC0290062L) }, { { sizeof( "STATUS_TPM_NOCONTEXTSPACE" ) - sizeof( ("STATUS_TPM_NOCONTEXTSPACE")[0] ), sizeof( "STATUS_TPM_NOCONTEXTSPACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOCONTEXTSPACE")), ("STATUS_TPM_NOCONTEXTSPACE") }, (ULONG)((NTSTATUS)0xC0290063L) }, { { sizeof( "STATUS_TPM_COMMAND_BLOCKED" ) - sizeof( ("STATUS_TPM_COMMAND_BLOCKED")[0] ), sizeof( "STATUS_TPM_COMMAND_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_COMMAND_BLOCKED")), ("STATUS_TPM_COMMAND_BLOCKED") }, (ULONG)((NTSTATUS)0xC0290400L) }, { { sizeof( "STATUS_TPM_INVALID_HANDLE" ) - sizeof( ("STATUS_TPM_INVALID_HANDLE")[0] ), sizeof( "STATUS_TPM_INVALID_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INVALID_HANDLE")), ("STATUS_TPM_INVALID_HANDLE") }, (ULONG)((NTSTATUS)0xC0290401L) }, { { sizeof( "STATUS_TPM_DUPLICATE_VHANDLE" ) - sizeof( ("STATUS_TPM_DUPLICATE_VHANDLE")[0] ), sizeof( "STATUS_TPM_DUPLICATE_VHANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DUPLICATE_VHANDLE")), ("STATUS_TPM_DUPLICATE_VHANDLE") }, (ULONG)((NTSTATUS)0xC0290402L) }, { { sizeof( "STATUS_TPM_EMBEDDED_COMMAND_BLOCKED" ) - sizeof( ("STATUS_TPM_EMBEDDED_COMMAND_BLOCKED")[0] ), sizeof( "STATUS_TPM_EMBEDDED_COMMAND_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_EMBEDDED_COMMAND_BLOCKED")), ("STATUS_TPM_EMBEDDED_COMMAND_BLOCKED") }, (ULONG)((NTSTATUS)0xC0290403L) }, { { sizeof( "STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED" ) - sizeof( ("STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED")[0] ), sizeof( "STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED")), ("STATUS_TPM_EMBEDDED_COMMAND_UNSUPPORTED") }, (ULONG)((NTSTATUS)0xC0290404L) }, { { sizeof( "STATUS_TPM_RETRY" ) - sizeof( ("STATUS_TPM_RETRY")[0] ), sizeof( "STATUS_TPM_RETRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_RETRY")), ("STATUS_TPM_RETRY") }, (ULONG)((NTSTATUS)0xC0290800L) }, { { sizeof( "STATUS_TPM_NEEDS_SELFTEST" ) - sizeof( ("STATUS_TPM_NEEDS_SELFTEST")[0] ), sizeof( "STATUS_TPM_NEEDS_SELFTEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NEEDS_SELFTEST")), ("STATUS_TPM_NEEDS_SELFTEST") }, (ULONG)((NTSTATUS)0xC0290801L) }, { { sizeof( "STATUS_TPM_DOING_SELFTEST" ) - sizeof( ("STATUS_TPM_DOING_SELFTEST")[0] ), sizeof( "STATUS_TPM_DOING_SELFTEST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DOING_SELFTEST")), ("STATUS_TPM_DOING_SELFTEST") }, (ULONG)((NTSTATUS)0xC0290802L) }, { { sizeof( "STATUS_TPM_DEFEND_LOCK_RUNNING" ) - sizeof( ("STATUS_TPM_DEFEND_LOCK_RUNNING")[0] ), sizeof( "STATUS_TPM_DEFEND_LOCK_RUNNING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_DEFEND_LOCK_RUNNING")), ("STATUS_TPM_DEFEND_LOCK_RUNNING") }, (ULONG)((NTSTATUS)0xC0290803L) }, { { sizeof( "STATUS_TPM_COMMAND_CANCELED" ) - sizeof( ("STATUS_TPM_COMMAND_CANCELED")[0] ), sizeof( "STATUS_TPM_COMMAND_CANCELED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_COMMAND_CANCELED")), ("STATUS_TPM_COMMAND_CANCELED") }, (ULONG)((NTSTATUS)0xC0291001L) }, { { sizeof( "STATUS_TPM_TOO_MANY_CONTEXTS" ) - sizeof( ("STATUS_TPM_TOO_MANY_CONTEXTS")[0] ), sizeof( "STATUS_TPM_TOO_MANY_CONTEXTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_TOO_MANY_CONTEXTS")), ("STATUS_TPM_TOO_MANY_CONTEXTS") }, (ULONG)((NTSTATUS)0xC0291002L) }, { { sizeof( "STATUS_TPM_NOT_FOUND" ) - sizeof( ("STATUS_TPM_NOT_FOUND")[0] ), sizeof( "STATUS_TPM_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_NOT_FOUND")), ("STATUS_TPM_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0291003L) }, { { sizeof( "STATUS_TPM_ACCESS_DENIED" ) - sizeof( ("STATUS_TPM_ACCESS_DENIED")[0] ), sizeof( "STATUS_TPM_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_ACCESS_DENIED")), ("STATUS_TPM_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC0291004L) }, { { sizeof( "STATUS_TPM_INSUFFICIENT_BUFFER" ) - sizeof( ("STATUS_TPM_INSUFFICIENT_BUFFER")[0] ), sizeof( "STATUS_TPM_INSUFFICIENT_BUFFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_INSUFFICIENT_BUFFER")), ("STATUS_TPM_INSUFFICIENT_BUFFER") }, (ULONG)((NTSTATUS)0xC0291005L) }, { { sizeof( "STATUS_TPM_PPI_FUNCTION_UNSUPPORTED" ) - sizeof( ("STATUS_TPM_PPI_FUNCTION_UNSUPPORTED")[0] ), sizeof( "STATUS_TPM_PPI_FUNCTION_UNSUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_TPM_PPI_FUNCTION_UNSUPPORTED")), ("STATUS_TPM_PPI_FUNCTION_UNSUPPORTED") }, (ULONG)((NTSTATUS)0xC0291006L) }, { { sizeof( "STATUS_PCP_ERROR_MASK" ) - sizeof( ("STATUS_PCP_ERROR_MASK")[0] ), sizeof( "STATUS_PCP_ERROR_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_ERROR_MASK")), ("STATUS_PCP_ERROR_MASK") }, (ULONG)((NTSTATUS)0xC0292000L) }, { { sizeof( "STATUS_PCP_DEVICE_NOT_READY" ) - sizeof( ("STATUS_PCP_DEVICE_NOT_READY")[0] ), sizeof( "STATUS_PCP_DEVICE_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_DEVICE_NOT_READY")), ("STATUS_PCP_DEVICE_NOT_READY") }, (ULONG)((NTSTATUS)0xC0292001L) }, { { sizeof( "STATUS_PCP_INVALID_HANDLE" ) - sizeof( ("STATUS_PCP_INVALID_HANDLE")[0] ), sizeof( "STATUS_PCP_INVALID_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_INVALID_HANDLE")), ("STATUS_PCP_INVALID_HANDLE") }, (ULONG)((NTSTATUS)0xC0292002L) }, { { sizeof( "STATUS_PCP_INVALID_PARAMETER" ) - sizeof( ("STATUS_PCP_INVALID_PARAMETER")[0] ), sizeof( "STATUS_PCP_INVALID_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_INVALID_PARAMETER")), ("STATUS_PCP_INVALID_PARAMETER") }, (ULONG)((NTSTATUS)0xC0292003L) }, { { sizeof( "STATUS_PCP_FLAG_NOT_SUPPORTED" ) - sizeof( ("STATUS_PCP_FLAG_NOT_SUPPORTED")[0] ), sizeof( "STATUS_PCP_FLAG_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_FLAG_NOT_SUPPORTED")), ("STATUS_PCP_FLAG_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0292004L) }, { { sizeof( "STATUS_PCP_NOT_SUPPORTED" ) - sizeof( ("STATUS_PCP_NOT_SUPPORTED")[0] ), sizeof( "STATUS_PCP_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_NOT_SUPPORTED")), ("STATUS_PCP_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0292005L) }, { { sizeof( "STATUS_PCP_BUFFER_TOO_SMALL" ) - sizeof( ("STATUS_PCP_BUFFER_TOO_SMALL")[0] ), sizeof( "STATUS_PCP_BUFFER_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_BUFFER_TOO_SMALL")), ("STATUS_PCP_BUFFER_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC0292006L) }, { { sizeof( "STATUS_PCP_INTERNAL_ERROR" ) - sizeof( ("STATUS_PCP_INTERNAL_ERROR")[0] ), sizeof( "STATUS_PCP_INTERNAL_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_INTERNAL_ERROR")), ("STATUS_PCP_INTERNAL_ERROR") }, (ULONG)((NTSTATUS)0xC0292007L) }, { { sizeof( "STATUS_PCP_AUTHENTICATION_FAILED" ) - sizeof( ("STATUS_PCP_AUTHENTICATION_FAILED")[0] ), sizeof( "STATUS_PCP_AUTHENTICATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_AUTHENTICATION_FAILED")), ("STATUS_PCP_AUTHENTICATION_FAILED") }, (ULONG)((NTSTATUS)0xC0292008L) }, { { sizeof( "STATUS_PCP_AUTHENTICATION_IGNORED" ) - sizeof( ("STATUS_PCP_AUTHENTICATION_IGNORED")[0] ), sizeof( "STATUS_PCP_AUTHENTICATION_IGNORED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_AUTHENTICATION_IGNORED")), ("STATUS_PCP_AUTHENTICATION_IGNORED") }, (ULONG)((NTSTATUS)0xC0292009L) }, { { sizeof( "STATUS_PCP_POLICY_NOT_FOUND" ) - sizeof( ("STATUS_PCP_POLICY_NOT_FOUND")[0] ), sizeof( "STATUS_PCP_POLICY_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_POLICY_NOT_FOUND")), ("STATUS_PCP_POLICY_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC029200AL) }, { { sizeof( "STATUS_PCP_PROFILE_NOT_FOUND" ) - sizeof( ("STATUS_PCP_PROFILE_NOT_FOUND")[0] ), sizeof( "STATUS_PCP_PROFILE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_PROFILE_NOT_FOUND")), ("STATUS_PCP_PROFILE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC029200BL) }, { { sizeof( "STATUS_PCP_VALIDATION_FAILED" ) - sizeof( ("STATUS_PCP_VALIDATION_FAILED")[0] ), sizeof( "STATUS_PCP_VALIDATION_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_VALIDATION_FAILED")), ("STATUS_PCP_VALIDATION_FAILED") }, (ULONG)((NTSTATUS)0xC029200CL) }, { { sizeof( "STATUS_PCP_DEVICE_NOT_FOUND" ) - sizeof( ("STATUS_PCP_DEVICE_NOT_FOUND")[0] ), sizeof( "STATUS_PCP_DEVICE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PCP_DEVICE_NOT_FOUND")), ("STATUS_PCP_DEVICE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC029200DL) }, { { sizeof( "STATUS_RTPM_CONTEXT_CONTINUE" ) - sizeof( ("STATUS_RTPM_CONTEXT_CONTINUE")[0] ), sizeof( "STATUS_RTPM_CONTEXT_CONTINUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RTPM_CONTEXT_CONTINUE")), ("STATUS_RTPM_CONTEXT_CONTINUE") }, (ULONG)((NTSTATUS)0x00293000L) }, { { sizeof( "STATUS_RTPM_CONTEXT_COMPLETE" ) - sizeof( ("STATUS_RTPM_CONTEXT_COMPLETE")[0] ), sizeof( "STATUS_RTPM_CONTEXT_COMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RTPM_CONTEXT_COMPLETE")), ("STATUS_RTPM_CONTEXT_COMPLETE") }, (ULONG)((NTSTATUS)0x00293001L) }, { { sizeof( "STATUS_RTPM_NO_RESULT" ) - sizeof( ("STATUS_RTPM_NO_RESULT")[0] ), sizeof( "STATUS_RTPM_NO_RESULT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RTPM_NO_RESULT")), ("STATUS_RTPM_NO_RESULT") }, (ULONG)((NTSTATUS)0xC0293002L) }, { { sizeof( "STATUS_RTPM_PCR_READ_INCOMPLETE" ) - sizeof( ("STATUS_RTPM_PCR_READ_INCOMPLETE")[0] ), sizeof( "STATUS_RTPM_PCR_READ_INCOMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RTPM_PCR_READ_INCOMPLETE")), ("STATUS_RTPM_PCR_READ_INCOMPLETE") }, (ULONG)((NTSTATUS)0xC0293003L) }, { { sizeof( "STATUS_RTPM_INVALID_CONTEXT" ) - sizeof( ("STATUS_RTPM_INVALID_CONTEXT")[0] ), sizeof( "STATUS_RTPM_INVALID_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RTPM_INVALID_CONTEXT")), ("STATUS_RTPM_INVALID_CONTEXT") }, (ULONG)((NTSTATUS)0xC0293004L) }, { { sizeof( "STATUS_RTPM_UNSUPPORTED_CMD" ) - sizeof( ("STATUS_RTPM_UNSUPPORTED_CMD")[0] ), sizeof( "STATUS_RTPM_UNSUPPORTED_CMD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RTPM_UNSUPPORTED_CMD")), ("STATUS_RTPM_UNSUPPORTED_CMD") }, (ULONG)((NTSTATUS)0xC0293005L) }, { { sizeof( "STATUS_HV_INVALID_HYPERCALL_CODE" ) - sizeof( ("STATUS_HV_INVALID_HYPERCALL_CODE")[0] ), sizeof( "STATUS_HV_INVALID_HYPERCALL_CODE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_HYPERCALL_CODE")), ("STATUS_HV_INVALID_HYPERCALL_CODE") }, (ULONG)((NTSTATUS)0xC0350002L) }, { { sizeof( "STATUS_HV_INVALID_HYPERCALL_INPUT" ) - sizeof( ("STATUS_HV_INVALID_HYPERCALL_INPUT")[0] ), sizeof( "STATUS_HV_INVALID_HYPERCALL_INPUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_HYPERCALL_INPUT")), ("STATUS_HV_INVALID_HYPERCALL_INPUT") }, (ULONG)((NTSTATUS)0xC0350003L) }, { { sizeof( "STATUS_HV_INVALID_ALIGNMENT" ) - sizeof( ("STATUS_HV_INVALID_ALIGNMENT")[0] ), sizeof( "STATUS_HV_INVALID_ALIGNMENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_ALIGNMENT")), ("STATUS_HV_INVALID_ALIGNMENT") }, (ULONG)((NTSTATUS)0xC0350004L) }, { { sizeof( "STATUS_HV_INVALID_PARAMETER" ) - sizeof( ("STATUS_HV_INVALID_PARAMETER")[0] ), sizeof( "STATUS_HV_INVALID_PARAMETER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_PARAMETER")), ("STATUS_HV_INVALID_PARAMETER") }, (ULONG)((NTSTATUS)0xC0350005L) }, { { sizeof( "STATUS_HV_ACCESS_DENIED" ) - sizeof( ("STATUS_HV_ACCESS_DENIED")[0] ), sizeof( "STATUS_HV_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_ACCESS_DENIED")), ("STATUS_HV_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC0350006L) }, { { sizeof( "STATUS_HV_INVALID_PARTITION_STATE" ) - sizeof( ("STATUS_HV_INVALID_PARTITION_STATE")[0] ), sizeof( "STATUS_HV_INVALID_PARTITION_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_PARTITION_STATE")), ("STATUS_HV_INVALID_PARTITION_STATE") }, (ULONG)((NTSTATUS)0xC0350007L) }, { { sizeof( "STATUS_HV_OPERATION_DENIED" ) - sizeof( ("STATUS_HV_OPERATION_DENIED")[0] ), sizeof( "STATUS_HV_OPERATION_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_OPERATION_DENIED")), ("STATUS_HV_OPERATION_DENIED") }, (ULONG)((NTSTATUS)0xC0350008L) }, { { sizeof( "STATUS_HV_UNKNOWN_PROPERTY" ) - sizeof( ("STATUS_HV_UNKNOWN_PROPERTY")[0] ), sizeof( "STATUS_HV_UNKNOWN_PROPERTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_UNKNOWN_PROPERTY")), ("STATUS_HV_UNKNOWN_PROPERTY") }, (ULONG)((NTSTATUS)0xC0350009L) }, { { sizeof( "STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE" ) - sizeof( ("STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE")[0] ), sizeof( "STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE")), ("STATUS_HV_PROPERTY_VALUE_OUT_OF_RANGE") }, (ULONG)((NTSTATUS)0xC035000AL) }, { { sizeof( "STATUS_HV_INSUFFICIENT_MEMORY" ) - sizeof( ("STATUS_HV_INSUFFICIENT_MEMORY")[0] ), sizeof( "STATUS_HV_INSUFFICIENT_MEMORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INSUFFICIENT_MEMORY")), ("STATUS_HV_INSUFFICIENT_MEMORY") }, (ULONG)((NTSTATUS)0xC035000BL) }, { { sizeof( "STATUS_HV_PARTITION_TOO_DEEP" ) - sizeof( ("STATUS_HV_PARTITION_TOO_DEEP")[0] ), sizeof( "STATUS_HV_PARTITION_TOO_DEEP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_PARTITION_TOO_DEEP")), ("STATUS_HV_PARTITION_TOO_DEEP") }, (ULONG)((NTSTATUS)0xC035000CL) }, { { sizeof( "STATUS_HV_INVALID_PARTITION_ID" ) - sizeof( ("STATUS_HV_INVALID_PARTITION_ID")[0] ), sizeof( "STATUS_HV_INVALID_PARTITION_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_PARTITION_ID")), ("STATUS_HV_INVALID_PARTITION_ID") }, (ULONG)((NTSTATUS)0xC035000DL) }, { { sizeof( "STATUS_HV_INVALID_VP_INDEX" ) - sizeof( ("STATUS_HV_INVALID_VP_INDEX")[0] ), sizeof( "STATUS_HV_INVALID_VP_INDEX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_VP_INDEX")), ("STATUS_HV_INVALID_VP_INDEX") }, (ULONG)((NTSTATUS)0xC035000EL) }, { { sizeof( "STATUS_HV_INVALID_PORT_ID" ) - sizeof( ("STATUS_HV_INVALID_PORT_ID")[0] ), sizeof( "STATUS_HV_INVALID_PORT_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_PORT_ID")), ("STATUS_HV_INVALID_PORT_ID") }, (ULONG)((NTSTATUS)0xC0350011L) }, { { sizeof( "STATUS_HV_INVALID_CONNECTION_ID" ) - sizeof( ("STATUS_HV_INVALID_CONNECTION_ID")[0] ), sizeof( "STATUS_HV_INVALID_CONNECTION_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_CONNECTION_ID")), ("STATUS_HV_INVALID_CONNECTION_ID") }, (ULONG)((NTSTATUS)0xC0350012L) }, { { sizeof( "STATUS_HV_INSUFFICIENT_BUFFERS" ) - sizeof( ("STATUS_HV_INSUFFICIENT_BUFFERS")[0] ), sizeof( "STATUS_HV_INSUFFICIENT_BUFFERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INSUFFICIENT_BUFFERS")), ("STATUS_HV_INSUFFICIENT_BUFFERS") }, (ULONG)((NTSTATUS)0xC0350013L) }, { { sizeof( "STATUS_HV_NOT_ACKNOWLEDGED" ) - sizeof( ("STATUS_HV_NOT_ACKNOWLEDGED")[0] ), sizeof( "STATUS_HV_NOT_ACKNOWLEDGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_NOT_ACKNOWLEDGED")), ("STATUS_HV_NOT_ACKNOWLEDGED") }, (ULONG)((NTSTATUS)0xC0350014L) }, { { sizeof( "STATUS_HV_INVALID_VP_STATE" ) - sizeof( ("STATUS_HV_INVALID_VP_STATE")[0] ), sizeof( "STATUS_HV_INVALID_VP_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_VP_STATE")), ("STATUS_HV_INVALID_VP_STATE") }, (ULONG)((NTSTATUS)0xC0350015L) }, { { sizeof( "STATUS_HV_ACKNOWLEDGED" ) - sizeof( ("STATUS_HV_ACKNOWLEDGED")[0] ), sizeof( "STATUS_HV_ACKNOWLEDGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_ACKNOWLEDGED")), ("STATUS_HV_ACKNOWLEDGED") }, (ULONG)((NTSTATUS)0xC0350016L) }, { { sizeof( "STATUS_HV_INVALID_SAVE_RESTORE_STATE" ) - sizeof( ("STATUS_HV_INVALID_SAVE_RESTORE_STATE")[0] ), sizeof( "STATUS_HV_INVALID_SAVE_RESTORE_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_SAVE_RESTORE_STATE")), ("STATUS_HV_INVALID_SAVE_RESTORE_STATE") }, (ULONG)((NTSTATUS)0xC0350017L) }, { { sizeof( "STATUS_HV_INVALID_SYNIC_STATE" ) - sizeof( ("STATUS_HV_INVALID_SYNIC_STATE")[0] ), sizeof( "STATUS_HV_INVALID_SYNIC_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_SYNIC_STATE")), ("STATUS_HV_INVALID_SYNIC_STATE") }, (ULONG)((NTSTATUS)0xC0350018L) }, { { sizeof( "STATUS_HV_OBJECT_IN_USE" ) - sizeof( ("STATUS_HV_OBJECT_IN_USE")[0] ), sizeof( "STATUS_HV_OBJECT_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_OBJECT_IN_USE")), ("STATUS_HV_OBJECT_IN_USE") }, (ULONG)((NTSTATUS)0xC0350019L) }, { { sizeof( "STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO" ) - sizeof( ("STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO")[0] ), sizeof( "STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO")), ("STATUS_HV_INVALID_PROXIMITY_DOMAIN_INFO") }, (ULONG)((NTSTATUS)0xC035001AL) }, { { sizeof( "STATUS_HV_NO_DATA" ) - sizeof( ("STATUS_HV_NO_DATA")[0] ), sizeof( "STATUS_HV_NO_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_NO_DATA")), ("STATUS_HV_NO_DATA") }, (ULONG)((NTSTATUS)0xC035001BL) }, { { sizeof( "STATUS_HV_INACTIVE" ) - sizeof( ("STATUS_HV_INACTIVE")[0] ), sizeof( "STATUS_HV_INACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INACTIVE")), ("STATUS_HV_INACTIVE") }, (ULONG)((NTSTATUS)0xC035001CL) }, { { sizeof( "STATUS_HV_NO_RESOURCES" ) - sizeof( ("STATUS_HV_NO_RESOURCES")[0] ), sizeof( "STATUS_HV_NO_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_NO_RESOURCES")), ("STATUS_HV_NO_RESOURCES") }, (ULONG)((NTSTATUS)0xC035001DL) }, { { sizeof( "STATUS_HV_FEATURE_UNAVAILABLE" ) - sizeof( ("STATUS_HV_FEATURE_UNAVAILABLE")[0] ), sizeof( "STATUS_HV_FEATURE_UNAVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_FEATURE_UNAVAILABLE")), ("STATUS_HV_FEATURE_UNAVAILABLE") }, (ULONG)((NTSTATUS)0xC035001EL) }, { { sizeof( "STATUS_HV_INSUFFICIENT_BUFFER" ) - sizeof( ("STATUS_HV_INSUFFICIENT_BUFFER")[0] ), sizeof( "STATUS_HV_INSUFFICIENT_BUFFER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INSUFFICIENT_BUFFER")), ("STATUS_HV_INSUFFICIENT_BUFFER") }, (ULONG)((NTSTATUS)0xC0350033L) }, { { sizeof( "STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS" ) - sizeof( ("STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS")[0] ), sizeof( "STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS")), ("STATUS_HV_INSUFFICIENT_DEVICE_DOMAINS") }, (ULONG)((NTSTATUS)0xC0350038L) }, { { sizeof( "STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR" ) - sizeof( ("STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR")[0] ), sizeof( "STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR")), ("STATUS_HV_CPUID_FEATURE_VALIDATION_ERROR") }, (ULONG)((NTSTATUS)0xC035003CL) }, { { sizeof( "STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR" ) - sizeof( ("STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR")[0] ), sizeof( "STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR")), ("STATUS_HV_CPUID_XSAVE_FEATURE_VALIDATION_ERROR") }, (ULONG)((NTSTATUS)0xC035003DL) }, { { sizeof( "STATUS_HV_PROCESSOR_STARTUP_TIMEOUT" ) - sizeof( ("STATUS_HV_PROCESSOR_STARTUP_TIMEOUT")[0] ), sizeof( "STATUS_HV_PROCESSOR_STARTUP_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_PROCESSOR_STARTUP_TIMEOUT")), ("STATUS_HV_PROCESSOR_STARTUP_TIMEOUT") }, (ULONG)((NTSTATUS)0xC035003EL) }, { { sizeof( "STATUS_HV_SMX_ENABLED" ) - sizeof( ("STATUS_HV_SMX_ENABLED")[0] ), sizeof( "STATUS_HV_SMX_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_SMX_ENABLED")), ("STATUS_HV_SMX_ENABLED") }, (ULONG)((NTSTATUS)0xC035003FL) }, { { sizeof( "STATUS_HV_INVALID_LP_INDEX" ) - sizeof( ("STATUS_HV_INVALID_LP_INDEX")[0] ), sizeof( "STATUS_HV_INVALID_LP_INDEX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_LP_INDEX")), ("STATUS_HV_INVALID_LP_INDEX") }, (ULONG)((NTSTATUS)0xC0350041L) }, { { sizeof( "STATUS_HV_INVALID_REGISTER_VALUE" ) - sizeof( ("STATUS_HV_INVALID_REGISTER_VALUE")[0] ), sizeof( "STATUS_HV_INVALID_REGISTER_VALUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_REGISTER_VALUE")), ("STATUS_HV_INVALID_REGISTER_VALUE") }, (ULONG)((NTSTATUS)0xC0350050L) }, { { sizeof( "STATUS_HV_INVALID_VTL_STATE" ) - sizeof( ("STATUS_HV_INVALID_VTL_STATE")[0] ), sizeof( "STATUS_HV_INVALID_VTL_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_VTL_STATE")), ("STATUS_HV_INVALID_VTL_STATE") }, (ULONG)((NTSTATUS)0xC0350051L) }, { { sizeof( "STATUS_HV_NX_NOT_DETECTED" ) - sizeof( ("STATUS_HV_NX_NOT_DETECTED")[0] ), sizeof( "STATUS_HV_NX_NOT_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_NX_NOT_DETECTED")), ("STATUS_HV_NX_NOT_DETECTED") }, (ULONG)((NTSTATUS)0xC0350055L) }, { { sizeof( "STATUS_HV_INVALID_DEVICE_ID" ) - sizeof( ("STATUS_HV_INVALID_DEVICE_ID")[0] ), sizeof( "STATUS_HV_INVALID_DEVICE_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_DEVICE_ID")), ("STATUS_HV_INVALID_DEVICE_ID") }, (ULONG)((NTSTATUS)0xC0350057L) }, { { sizeof( "STATUS_HV_INVALID_DEVICE_STATE" ) - sizeof( ("STATUS_HV_INVALID_DEVICE_STATE")[0] ), sizeof( "STATUS_HV_INVALID_DEVICE_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_DEVICE_STATE")), ("STATUS_HV_INVALID_DEVICE_STATE") }, (ULONG)((NTSTATUS)0xC0350058L) }, { { sizeof( "STATUS_HV_PENDING_PAGE_REQUESTS" ) - sizeof( ("STATUS_HV_PENDING_PAGE_REQUESTS")[0] ), sizeof( "STATUS_HV_PENDING_PAGE_REQUESTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_PENDING_PAGE_REQUESTS")), ("STATUS_HV_PENDING_PAGE_REQUESTS") }, (ULONG)((NTSTATUS)0x00350059L) }, { { sizeof( "STATUS_HV_PAGE_REQUEST_INVALID" ) - sizeof( ("STATUS_HV_PAGE_REQUEST_INVALID")[0] ), sizeof( "STATUS_HV_PAGE_REQUEST_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_PAGE_REQUEST_INVALID")), ("STATUS_HV_PAGE_REQUEST_INVALID") }, (ULONG)((NTSTATUS)0xC0350060L) }, { { sizeof( "STATUS_HV_INVALID_CPU_GROUP_ID" ) - sizeof( ("STATUS_HV_INVALID_CPU_GROUP_ID")[0] ), sizeof( "STATUS_HV_INVALID_CPU_GROUP_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_CPU_GROUP_ID")), ("STATUS_HV_INVALID_CPU_GROUP_ID") }, (ULONG)((NTSTATUS)0xC035006FL) }, { { sizeof( "STATUS_HV_INVALID_CPU_GROUP_STATE" ) - sizeof( ("STATUS_HV_INVALID_CPU_GROUP_STATE")[0] ), sizeof( "STATUS_HV_INVALID_CPU_GROUP_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_INVALID_CPU_GROUP_STATE")), ("STATUS_HV_INVALID_CPU_GROUP_STATE") }, (ULONG)((NTSTATUS)0xC0350070L) }, { { sizeof( "STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE" ) - sizeof( ("STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE")[0] ), sizeof( "STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE")), ("STATUS_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE") }, (ULONG)((NTSTATUS)0xC0350072L) }, { { sizeof( "STATUS_HV_NOT_PRESENT" ) - sizeof( ("STATUS_HV_NOT_PRESENT")[0] ), sizeof( "STATUS_HV_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HV_NOT_PRESENT")), ("STATUS_HV_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC0351000L) }, { { sizeof( "STATUS_VID_DUPLICATE_HANDLER" ) - sizeof( ("STATUS_VID_DUPLICATE_HANDLER")[0] ), sizeof( "STATUS_VID_DUPLICATE_HANDLER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_DUPLICATE_HANDLER")), ("STATUS_VID_DUPLICATE_HANDLER") }, (ULONG)((NTSTATUS)0xC0370001L) }, { { sizeof( "STATUS_VID_TOO_MANY_HANDLERS" ) - sizeof( ("STATUS_VID_TOO_MANY_HANDLERS")[0] ), sizeof( "STATUS_VID_TOO_MANY_HANDLERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_TOO_MANY_HANDLERS")), ("STATUS_VID_TOO_MANY_HANDLERS") }, (ULONG)((NTSTATUS)0xC0370002L) }, { { sizeof( "STATUS_VID_QUEUE_FULL" ) - sizeof( ("STATUS_VID_QUEUE_FULL")[0] ), sizeof( "STATUS_VID_QUEUE_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_QUEUE_FULL")), ("STATUS_VID_QUEUE_FULL") }, (ULONG)((NTSTATUS)0xC0370003L) }, { { sizeof( "STATUS_VID_HANDLER_NOT_PRESENT" ) - sizeof( ("STATUS_VID_HANDLER_NOT_PRESENT")[0] ), sizeof( "STATUS_VID_HANDLER_NOT_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_HANDLER_NOT_PRESENT")), ("STATUS_VID_HANDLER_NOT_PRESENT") }, (ULONG)((NTSTATUS)0xC0370004L) }, { { sizeof( "STATUS_VID_INVALID_OBJECT_NAME" ) - sizeof( ("STATUS_VID_INVALID_OBJECT_NAME")[0] ), sizeof( "STATUS_VID_INVALID_OBJECT_NAME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_OBJECT_NAME")), ("STATUS_VID_INVALID_OBJECT_NAME") }, (ULONG)((NTSTATUS)0xC0370005L) }, { { sizeof( "STATUS_VID_PARTITION_NAME_TOO_LONG" ) - sizeof( ("STATUS_VID_PARTITION_NAME_TOO_LONG")[0] ), sizeof( "STATUS_VID_PARTITION_NAME_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_PARTITION_NAME_TOO_LONG")), ("STATUS_VID_PARTITION_NAME_TOO_LONG") }, (ULONG)((NTSTATUS)0xC0370006L) }, { { sizeof( "STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG" ) - sizeof( ("STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG")[0] ), sizeof( "STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG")), ("STATUS_VID_MESSAGE_QUEUE_NAME_TOO_LONG") }, (ULONG)((NTSTATUS)0xC0370007L) }, { { sizeof( "STATUS_VID_PARTITION_ALREADY_EXISTS" ) - sizeof( ("STATUS_VID_PARTITION_ALREADY_EXISTS")[0] ), sizeof( "STATUS_VID_PARTITION_ALREADY_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_PARTITION_ALREADY_EXISTS")), ("STATUS_VID_PARTITION_ALREADY_EXISTS") }, (ULONG)((NTSTATUS)0xC0370008L) }, { { sizeof( "STATUS_VID_PARTITION_DOES_NOT_EXIST" ) - sizeof( ("STATUS_VID_PARTITION_DOES_NOT_EXIST")[0] ), sizeof( "STATUS_VID_PARTITION_DOES_NOT_EXIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_PARTITION_DOES_NOT_EXIST")), ("STATUS_VID_PARTITION_DOES_NOT_EXIST") }, (ULONG)((NTSTATUS)0xC0370009L) }, { { sizeof( "STATUS_VID_PARTITION_NAME_NOT_FOUND" ) - sizeof( ("STATUS_VID_PARTITION_NAME_NOT_FOUND")[0] ), sizeof( "STATUS_VID_PARTITION_NAME_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_PARTITION_NAME_NOT_FOUND")), ("STATUS_VID_PARTITION_NAME_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC037000AL) }, { { sizeof( "STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS" ) - sizeof( ("STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS")[0] ), sizeof( "STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS")), ("STATUS_VID_MESSAGE_QUEUE_ALREADY_EXISTS") }, (ULONG)((NTSTATUS)0xC037000BL) }, { { sizeof( "STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT" ) - sizeof( ("STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT")[0] ), sizeof( "STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT")), ("STATUS_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT") }, (ULONG)((NTSTATUS)0xC037000CL) }, { { sizeof( "STATUS_VID_MB_STILL_REFERENCED" ) - sizeof( ("STATUS_VID_MB_STILL_REFERENCED")[0] ), sizeof( "STATUS_VID_MB_STILL_REFERENCED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MB_STILL_REFERENCED")), ("STATUS_VID_MB_STILL_REFERENCED") }, (ULONG)((NTSTATUS)0xC037000DL) }, { { sizeof( "STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED" ) - sizeof( ("STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED")[0] ), sizeof( "STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED")), ("STATUS_VID_CHILD_GPA_PAGE_SET_CORRUPTED") }, (ULONG)((NTSTATUS)0xC037000EL) }, { { sizeof( "STATUS_VID_INVALID_NUMA_SETTINGS" ) - sizeof( ("STATUS_VID_INVALID_NUMA_SETTINGS")[0] ), sizeof( "STATUS_VID_INVALID_NUMA_SETTINGS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_NUMA_SETTINGS")), ("STATUS_VID_INVALID_NUMA_SETTINGS") }, (ULONG)((NTSTATUS)0xC037000FL) }, { { sizeof( "STATUS_VID_INVALID_NUMA_NODE_INDEX" ) - sizeof( ("STATUS_VID_INVALID_NUMA_NODE_INDEX")[0] ), sizeof( "STATUS_VID_INVALID_NUMA_NODE_INDEX" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_NUMA_NODE_INDEX")), ("STATUS_VID_INVALID_NUMA_NODE_INDEX") }, (ULONG)((NTSTATUS)0xC0370010L) }, { { sizeof( "STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED" ) - sizeof( ("STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED")[0] ), sizeof( "STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED")), ("STATUS_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED") }, (ULONG)((NTSTATUS)0xC0370011L) }, { { sizeof( "STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE" ) - sizeof( ("STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE")[0] ), sizeof( "STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE")), ("STATUS_VID_INVALID_MEMORY_BLOCK_HANDLE") }, (ULONG)((NTSTATUS)0xC0370012L) }, { { sizeof( "STATUS_VID_PAGE_RANGE_OVERFLOW" ) - sizeof( ("STATUS_VID_PAGE_RANGE_OVERFLOW")[0] ), sizeof( "STATUS_VID_PAGE_RANGE_OVERFLOW" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_PAGE_RANGE_OVERFLOW")), ("STATUS_VID_PAGE_RANGE_OVERFLOW") }, (ULONG)((NTSTATUS)0xC0370013L) }, { { sizeof( "STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE" ) - sizeof( ("STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE")[0] ), sizeof( "STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE")), ("STATUS_VID_INVALID_MESSAGE_QUEUE_HANDLE") }, (ULONG)((NTSTATUS)0xC0370014L) }, { { sizeof( "STATUS_VID_INVALID_GPA_RANGE_HANDLE" ) - sizeof( ("STATUS_VID_INVALID_GPA_RANGE_HANDLE")[0] ), sizeof( "STATUS_VID_INVALID_GPA_RANGE_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_GPA_RANGE_HANDLE")), ("STATUS_VID_INVALID_GPA_RANGE_HANDLE") }, (ULONG)((NTSTATUS)0xC0370015L) }, { { sizeof( "STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE" ) - sizeof( ("STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE")[0] ), sizeof( "STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE")), ("STATUS_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE") }, (ULONG)((NTSTATUS)0xC0370016L) }, { { sizeof( "STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED" ) - sizeof( ("STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED")[0] ), sizeof( "STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED")), ("STATUS_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC0370017L) }, { { sizeof( "STATUS_VID_INVALID_PPM_HANDLE" ) - sizeof( ("STATUS_VID_INVALID_PPM_HANDLE")[0] ), sizeof( "STATUS_VID_INVALID_PPM_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_PPM_HANDLE")), ("STATUS_VID_INVALID_PPM_HANDLE") }, (ULONG)((NTSTATUS)0xC0370018L) }, { { sizeof( "STATUS_VID_MBPS_ARE_LOCKED" ) - sizeof( ("STATUS_VID_MBPS_ARE_LOCKED")[0] ), sizeof( "STATUS_VID_MBPS_ARE_LOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MBPS_ARE_LOCKED")), ("STATUS_VID_MBPS_ARE_LOCKED") }, (ULONG)((NTSTATUS)0xC0370019L) }, { { sizeof( "STATUS_VID_MESSAGE_QUEUE_CLOSED" ) - sizeof( ("STATUS_VID_MESSAGE_QUEUE_CLOSED")[0] ), sizeof( "STATUS_VID_MESSAGE_QUEUE_CLOSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MESSAGE_QUEUE_CLOSED")), ("STATUS_VID_MESSAGE_QUEUE_CLOSED") }, (ULONG)((NTSTATUS)0xC037001AL) }, { { sizeof( "STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED" ) - sizeof( ("STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED")[0] ), sizeof( "STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED")), ("STATUS_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED") }, (ULONG)((NTSTATUS)0xC037001BL) }, { { sizeof( "STATUS_VID_STOP_PENDING" ) - sizeof( ("STATUS_VID_STOP_PENDING")[0] ), sizeof( "STATUS_VID_STOP_PENDING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_STOP_PENDING")), ("STATUS_VID_STOP_PENDING") }, (ULONG)((NTSTATUS)0xC037001CL) }, { { sizeof( "STATUS_VID_INVALID_PROCESSOR_STATE" ) - sizeof( ("STATUS_VID_INVALID_PROCESSOR_STATE")[0] ), sizeof( "STATUS_VID_INVALID_PROCESSOR_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_PROCESSOR_STATE")), ("STATUS_VID_INVALID_PROCESSOR_STATE") }, (ULONG)((NTSTATUS)0xC037001DL) }, { { sizeof( "STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT" ) - sizeof( ("STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT")[0] ), sizeof( "STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT")), ("STATUS_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT") }, (ULONG)((NTSTATUS)0xC037001EL) }, { { sizeof( "STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED" ) - sizeof( ("STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED")[0] ), sizeof( "STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED")), ("STATUS_VID_KM_INTERFACE_ALREADY_INITIALIZED") }, (ULONG)((NTSTATUS)0xC037001FL) }, { { sizeof( "STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET" ) - sizeof( ("STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET")[0] ), sizeof( "STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET")), ("STATUS_VID_MB_PROPERTY_ALREADY_SET_RESET") }, (ULONG)((NTSTATUS)0xC0370020L) }, { { sizeof( "STATUS_VID_MMIO_RANGE_DESTROYED" ) - sizeof( ("STATUS_VID_MMIO_RANGE_DESTROYED")[0] ), sizeof( "STATUS_VID_MMIO_RANGE_DESTROYED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MMIO_RANGE_DESTROYED")), ("STATUS_VID_MMIO_RANGE_DESTROYED") }, (ULONG)((NTSTATUS)0xC0370021L) }, { { sizeof( "STATUS_VID_INVALID_CHILD_GPA_PAGE_SET" ) - sizeof( ("STATUS_VID_INVALID_CHILD_GPA_PAGE_SET")[0] ), sizeof( "STATUS_VID_INVALID_CHILD_GPA_PAGE_SET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_INVALID_CHILD_GPA_PAGE_SET")), ("STATUS_VID_INVALID_CHILD_GPA_PAGE_SET") }, (ULONG)((NTSTATUS)0xC0370022L) }, { { sizeof( "STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED" ) - sizeof( ("STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED")[0] ), sizeof( "STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED")), ("STATUS_VID_RESERVE_PAGE_SET_IS_BEING_USED") }, (ULONG)((NTSTATUS)0xC0370023L) }, { { sizeof( "STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL" ) - sizeof( ("STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL")[0] ), sizeof( "STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL")), ("STATUS_VID_RESERVE_PAGE_SET_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC0370024L) }, { { sizeof( "STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE" ) - sizeof( ("STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE")[0] ), sizeof( "STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE")), ("STATUS_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE") }, (ULONG)((NTSTATUS)0xC0370025L) }, { { sizeof( "STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT" ) - sizeof( ("STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT")[0] ), sizeof( "STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT")), ("STATUS_VID_MBP_COUNT_EXCEEDED_LIMIT") }, (ULONG)((NTSTATUS)0xC0370026L) }, { { sizeof( "STATUS_VID_SAVED_STATE_CORRUPT" ) - sizeof( ("STATUS_VID_SAVED_STATE_CORRUPT")[0] ), sizeof( "STATUS_VID_SAVED_STATE_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_SAVED_STATE_CORRUPT")), ("STATUS_VID_SAVED_STATE_CORRUPT") }, (ULONG)((NTSTATUS)0xC0370027L) }, { { sizeof( "STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM" ) - sizeof( ("STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM")[0] ), sizeof( "STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM")), ("STATUS_VID_SAVED_STATE_UNRECOGNIZED_ITEM") }, (ULONG)((NTSTATUS)0xC0370028L) }, { { sizeof( "STATUS_VID_SAVED_STATE_INCOMPATIBLE" ) - sizeof( ("STATUS_VID_SAVED_STATE_INCOMPATIBLE")[0] ), sizeof( "STATUS_VID_SAVED_STATE_INCOMPATIBLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_SAVED_STATE_INCOMPATIBLE")), ("STATUS_VID_SAVED_STATE_INCOMPATIBLE") }, (ULONG)((NTSTATUS)0xC0370029L) }, { { sizeof( "STATUS_VID_VTL_ACCESS_DENIED" ) - sizeof( ("STATUS_VID_VTL_ACCESS_DENIED")[0] ), sizeof( "STATUS_VID_VTL_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_VTL_ACCESS_DENIED")), ("STATUS_VID_VTL_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC037002AL) }, { { sizeof( "STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED" ) - sizeof( ("STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED")[0] ), sizeof( "STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED")), ("STATUS_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED") }, (ULONG)((NTSTATUS)0x80370001L) }, { { sizeof( "STATUS_IPSEC_BAD_SPI" ) - sizeof( ("STATUS_IPSEC_BAD_SPI")[0] ), sizeof( "STATUS_IPSEC_BAD_SPI" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_BAD_SPI")), ("STATUS_IPSEC_BAD_SPI") }, (ULONG)((NTSTATUS)0xC0360001L) }, { { sizeof( "STATUS_IPSEC_SA_LIFETIME_EXPIRED" ) - sizeof( ("STATUS_IPSEC_SA_LIFETIME_EXPIRED")[0] ), sizeof( "STATUS_IPSEC_SA_LIFETIME_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_SA_LIFETIME_EXPIRED")), ("STATUS_IPSEC_SA_LIFETIME_EXPIRED") }, (ULONG)((NTSTATUS)0xC0360002L) }, { { sizeof( "STATUS_IPSEC_WRONG_SA" ) - sizeof( ("STATUS_IPSEC_WRONG_SA")[0] ), sizeof( "STATUS_IPSEC_WRONG_SA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_WRONG_SA")), ("STATUS_IPSEC_WRONG_SA") }, (ULONG)((NTSTATUS)0xC0360003L) }, { { sizeof( "STATUS_IPSEC_REPLAY_CHECK_FAILED" ) - sizeof( ("STATUS_IPSEC_REPLAY_CHECK_FAILED")[0] ), sizeof( "STATUS_IPSEC_REPLAY_CHECK_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_REPLAY_CHECK_FAILED")), ("STATUS_IPSEC_REPLAY_CHECK_FAILED") }, (ULONG)((NTSTATUS)0xC0360004L) }, { { sizeof( "STATUS_IPSEC_INVALID_PACKET" ) - sizeof( ("STATUS_IPSEC_INVALID_PACKET")[0] ), sizeof( "STATUS_IPSEC_INVALID_PACKET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_INVALID_PACKET")), ("STATUS_IPSEC_INVALID_PACKET") }, (ULONG)((NTSTATUS)0xC0360005L) }, { { sizeof( "STATUS_IPSEC_INTEGRITY_CHECK_FAILED" ) - sizeof( ("STATUS_IPSEC_INTEGRITY_CHECK_FAILED")[0] ), sizeof( "STATUS_IPSEC_INTEGRITY_CHECK_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_INTEGRITY_CHECK_FAILED")), ("STATUS_IPSEC_INTEGRITY_CHECK_FAILED") }, (ULONG)((NTSTATUS)0xC0360006L) }, { { sizeof( "STATUS_IPSEC_CLEAR_TEXT_DROP" ) - sizeof( ("STATUS_IPSEC_CLEAR_TEXT_DROP")[0] ), sizeof( "STATUS_IPSEC_CLEAR_TEXT_DROP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_CLEAR_TEXT_DROP")), ("STATUS_IPSEC_CLEAR_TEXT_DROP") }, (ULONG)((NTSTATUS)0xC0360007L) }, { { sizeof( "STATUS_IPSEC_AUTH_FIREWALL_DROP" ) - sizeof( ("STATUS_IPSEC_AUTH_FIREWALL_DROP")[0] ), sizeof( "STATUS_IPSEC_AUTH_FIREWALL_DROP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_AUTH_FIREWALL_DROP")), ("STATUS_IPSEC_AUTH_FIREWALL_DROP") }, (ULONG)((NTSTATUS)0xC0360008L) }, { { sizeof( "STATUS_IPSEC_THROTTLE_DROP" ) - sizeof( ("STATUS_IPSEC_THROTTLE_DROP")[0] ), sizeof( "STATUS_IPSEC_THROTTLE_DROP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_THROTTLE_DROP")), ("STATUS_IPSEC_THROTTLE_DROP") }, (ULONG)((NTSTATUS)0xC0360009L) }, { { sizeof( "STATUS_IPSEC_DOSP_BLOCK" ) - sizeof( ("STATUS_IPSEC_DOSP_BLOCK")[0] ), sizeof( "STATUS_IPSEC_DOSP_BLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_BLOCK")), ("STATUS_IPSEC_DOSP_BLOCK") }, (ULONG)((NTSTATUS)0xC0368000L) }, { { sizeof( "STATUS_IPSEC_DOSP_RECEIVED_MULTICAST" ) - sizeof( ("STATUS_IPSEC_DOSP_RECEIVED_MULTICAST")[0] ), sizeof( "STATUS_IPSEC_DOSP_RECEIVED_MULTICAST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_RECEIVED_MULTICAST")), ("STATUS_IPSEC_DOSP_RECEIVED_MULTICAST") }, (ULONG)((NTSTATUS)0xC0368001L) }, { { sizeof( "STATUS_IPSEC_DOSP_INVALID_PACKET" ) - sizeof( ("STATUS_IPSEC_DOSP_INVALID_PACKET")[0] ), sizeof( "STATUS_IPSEC_DOSP_INVALID_PACKET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_INVALID_PACKET")), ("STATUS_IPSEC_DOSP_INVALID_PACKET") }, (ULONG)((NTSTATUS)0xC0368002L) }, { { sizeof( "STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED" ) - sizeof( ("STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED")[0] ), sizeof( "STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED")), ("STATUS_IPSEC_DOSP_STATE_LOOKUP_FAILED") }, (ULONG)((NTSTATUS)0xC0368003L) }, { { sizeof( "STATUS_IPSEC_DOSP_MAX_ENTRIES" ) - sizeof( ("STATUS_IPSEC_DOSP_MAX_ENTRIES")[0] ), sizeof( "STATUS_IPSEC_DOSP_MAX_ENTRIES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_MAX_ENTRIES")), ("STATUS_IPSEC_DOSP_MAX_ENTRIES") }, (ULONG)((NTSTATUS)0xC0368004L) }, { { sizeof( "STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED" ) - sizeof( ("STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED")[0] ), sizeof( "STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED")), ("STATUS_IPSEC_DOSP_KEYMOD_NOT_ALLOWED") }, (ULONG)((NTSTATUS)0xC0368005L) }, { { sizeof( "STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES" ) - sizeof( ("STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES")[0] ), sizeof( "STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES")), ("STATUS_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES") }, (ULONG)((NTSTATUS)0xC0368006L) }, { { sizeof( "STATUS_VOLMGR_INCOMPLETE_REGENERATION" ) - sizeof( ("STATUS_VOLMGR_INCOMPLETE_REGENERATION")[0] ), sizeof( "STATUS_VOLMGR_INCOMPLETE_REGENERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_INCOMPLETE_REGENERATION")), ("STATUS_VOLMGR_INCOMPLETE_REGENERATION") }, (ULONG)((NTSTATUS)0x80380001L) }, { { sizeof( "STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION" ) - sizeof( ("STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION")[0] ), sizeof( "STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION")), ("STATUS_VOLMGR_INCOMPLETE_DISK_MIGRATION") }, (ULONG)((NTSTATUS)0x80380002L) }, { { sizeof( "STATUS_VOLMGR_DATABASE_FULL" ) - sizeof( ("STATUS_VOLMGR_DATABASE_FULL")[0] ), sizeof( "STATUS_VOLMGR_DATABASE_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DATABASE_FULL")), ("STATUS_VOLMGR_DATABASE_FULL") }, (ULONG)((NTSTATUS)0xC0380001L) }, { { sizeof( "STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED" ) - sizeof( ("STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED")[0] ), sizeof( "STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED")), ("STATUS_VOLMGR_DISK_CONFIGURATION_CORRUPTED") }, (ULONG)((NTSTATUS)0xC0380002L) }, { { sizeof( "STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC" ) - sizeof( ("STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC")[0] ), sizeof( "STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC")), ("STATUS_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC") }, (ULONG)((NTSTATUS)0xC0380003L) }, { { sizeof( "STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED" ) - sizeof( ("STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED")[0] ), sizeof( "STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED")), ("STATUS_VOLMGR_PACK_CONFIG_UPDATE_FAILED") }, (ULONG)((NTSTATUS)0xC0380004L) }, { { sizeof( "STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME" ) - sizeof( ("STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME")[0] ), sizeof( "STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME")), ("STATUS_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME") }, (ULONG)((NTSTATUS)0xC0380005L) }, { { sizeof( "STATUS_VOLMGR_DISK_DUPLICATE" ) - sizeof( ("STATUS_VOLMGR_DISK_DUPLICATE")[0] ), sizeof( "STATUS_VOLMGR_DISK_DUPLICATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_DUPLICATE")), ("STATUS_VOLMGR_DISK_DUPLICATE") }, (ULONG)((NTSTATUS)0xC0380006L) }, { { sizeof( "STATUS_VOLMGR_DISK_DYNAMIC" ) - sizeof( ("STATUS_VOLMGR_DISK_DYNAMIC")[0] ), sizeof( "STATUS_VOLMGR_DISK_DYNAMIC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_DYNAMIC")), ("STATUS_VOLMGR_DISK_DYNAMIC") }, (ULONG)((NTSTATUS)0xC0380007L) }, { { sizeof( "STATUS_VOLMGR_DISK_ID_INVALID" ) - sizeof( ("STATUS_VOLMGR_DISK_ID_INVALID")[0] ), sizeof( "STATUS_VOLMGR_DISK_ID_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_ID_INVALID")), ("STATUS_VOLMGR_DISK_ID_INVALID") }, (ULONG)((NTSTATUS)0xC0380008L) }, { { sizeof( "STATUS_VOLMGR_DISK_INVALID" ) - sizeof( ("STATUS_VOLMGR_DISK_INVALID")[0] ), sizeof( "STATUS_VOLMGR_DISK_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_INVALID")), ("STATUS_VOLMGR_DISK_INVALID") }, (ULONG)((NTSTATUS)0xC0380009L) }, { { sizeof( "STATUS_VOLMGR_DISK_LAST_VOTER" ) - sizeof( ("STATUS_VOLMGR_DISK_LAST_VOTER")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAST_VOTER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAST_VOTER")), ("STATUS_VOLMGR_DISK_LAST_VOTER") }, (ULONG)((NTSTATUS)0xC038000AL) }, { { sizeof( "STATUS_VOLMGR_DISK_LAYOUT_INVALID" ) - sizeof( ("STATUS_VOLMGR_DISK_LAYOUT_INVALID")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAYOUT_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAYOUT_INVALID")), ("STATUS_VOLMGR_DISK_LAYOUT_INVALID") }, (ULONG)((NTSTATUS)0xC038000BL) }, { { sizeof( "STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS" ) - sizeof( ("STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS")), ("STATUS_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS") }, (ULONG)((NTSTATUS)0xC038000CL) }, { { sizeof( "STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED" ) - sizeof( ("STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED")), ("STATUS_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED") }, (ULONG)((NTSTATUS)0xC038000DL) }, { { sizeof( "STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL" ) - sizeof( ("STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL")), ("STATUS_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL") }, (ULONG)((NTSTATUS)0xC038000EL) }, { { sizeof( "STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS" ) - sizeof( ("STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS")), ("STATUS_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS") }, (ULONG)((NTSTATUS)0xC038000FL) }, { { sizeof( "STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS" ) - sizeof( ("STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS")[0] ), sizeof( "STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS")), ("STATUS_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS") }, (ULONG)((NTSTATUS)0xC0380010L) }, { { sizeof( "STATUS_VOLMGR_DISK_MISSING" ) - sizeof( ("STATUS_VOLMGR_DISK_MISSING")[0] ), sizeof( "STATUS_VOLMGR_DISK_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_MISSING")), ("STATUS_VOLMGR_DISK_MISSING") }, (ULONG)((NTSTATUS)0xC0380011L) }, { { sizeof( "STATUS_VOLMGR_DISK_NOT_EMPTY" ) - sizeof( ("STATUS_VOLMGR_DISK_NOT_EMPTY")[0] ), sizeof( "STATUS_VOLMGR_DISK_NOT_EMPTY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_NOT_EMPTY")), ("STATUS_VOLMGR_DISK_NOT_EMPTY") }, (ULONG)((NTSTATUS)0xC0380012L) }, { { sizeof( "STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE" ) - sizeof( ("STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE")[0] ), sizeof( "STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE")), ("STATUS_VOLMGR_DISK_NOT_ENOUGH_SPACE") }, (ULONG)((NTSTATUS)0xC0380013L) }, { { sizeof( "STATUS_VOLMGR_DISK_REVECTORING_FAILED" ) - sizeof( ("STATUS_VOLMGR_DISK_REVECTORING_FAILED")[0] ), sizeof( "STATUS_VOLMGR_DISK_REVECTORING_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_REVECTORING_FAILED")), ("STATUS_VOLMGR_DISK_REVECTORING_FAILED") }, (ULONG)((NTSTATUS)0xC0380014L) }, { { sizeof( "STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID" ) - sizeof( ("STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID")[0] ), sizeof( "STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID")), ("STATUS_VOLMGR_DISK_SECTOR_SIZE_INVALID") }, (ULONG)((NTSTATUS)0xC0380015L) }, { { sizeof( "STATUS_VOLMGR_DISK_SET_NOT_CONTAINED" ) - sizeof( ("STATUS_VOLMGR_DISK_SET_NOT_CONTAINED")[0] ), sizeof( "STATUS_VOLMGR_DISK_SET_NOT_CONTAINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_SET_NOT_CONTAINED")), ("STATUS_VOLMGR_DISK_SET_NOT_CONTAINED") }, (ULONG)((NTSTATUS)0xC0380016L) }, { { sizeof( "STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS" ) - sizeof( ("STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS")[0] ), sizeof( "STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS")), ("STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS") }, (ULONG)((NTSTATUS)0xC0380017L) }, { { sizeof( "STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES" ) - sizeof( ("STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES")[0] ), sizeof( "STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES")), ("STATUS_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES") }, (ULONG)((NTSTATUS)0xC0380018L) }, { { sizeof( "STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED" ) - sizeof( ("STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED")[0] ), sizeof( "STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED")), ("STATUS_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0380019L) }, { { sizeof( "STATUS_VOLMGR_EXTENT_ALREADY_USED" ) - sizeof( ("STATUS_VOLMGR_EXTENT_ALREADY_USED")[0] ), sizeof( "STATUS_VOLMGR_EXTENT_ALREADY_USED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_EXTENT_ALREADY_USED")), ("STATUS_VOLMGR_EXTENT_ALREADY_USED") }, (ULONG)((NTSTATUS)0xC038001AL) }, { { sizeof( "STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS" ) - sizeof( ("STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS")[0] ), sizeof( "STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS")), ("STATUS_VOLMGR_EXTENT_NOT_CONTIGUOUS") }, (ULONG)((NTSTATUS)0xC038001BL) }, { { sizeof( "STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION" ) - sizeof( ("STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION")[0] ), sizeof( "STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION")), ("STATUS_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION") }, (ULONG)((NTSTATUS)0xC038001CL) }, { { sizeof( "STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED" ) - sizeof( ("STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED")[0] ), sizeof( "STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED")), ("STATUS_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED") }, (ULONG)((NTSTATUS)0xC038001DL) }, { { sizeof( "STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION" ) - sizeof( ("STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION")[0] ), sizeof( "STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION")), ("STATUS_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION") }, (ULONG)((NTSTATUS)0xC038001EL) }, { { sizeof( "STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH" ) - sizeof( ("STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH")[0] ), sizeof( "STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH")), ("STATUS_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH") }, (ULONG)((NTSTATUS)0xC038001FL) }, { { sizeof( "STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED" ) - sizeof( ("STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED")[0] ), sizeof( "STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED")), ("STATUS_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0380020L) }, { { sizeof( "STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID" ) - sizeof( ("STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID")[0] ), sizeof( "STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID")), ("STATUS_VOLMGR_INTERLEAVE_LENGTH_INVALID") }, (ULONG)((NTSTATUS)0xC0380021L) }, { { sizeof( "STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS" ) - sizeof( ("STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS")[0] ), sizeof( "STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS")), ("STATUS_VOLMGR_MAXIMUM_REGISTERED_USERS") }, (ULONG)((NTSTATUS)0xC0380022L) }, { { sizeof( "STATUS_VOLMGR_MEMBER_IN_SYNC" ) - sizeof( ("STATUS_VOLMGR_MEMBER_IN_SYNC")[0] ), sizeof( "STATUS_VOLMGR_MEMBER_IN_SYNC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MEMBER_IN_SYNC")), ("STATUS_VOLMGR_MEMBER_IN_SYNC") }, (ULONG)((NTSTATUS)0xC0380023L) }, { { sizeof( "STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE" ) - sizeof( ("STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE")[0] ), sizeof( "STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE")), ("STATUS_VOLMGR_MEMBER_INDEX_DUPLICATE") }, (ULONG)((NTSTATUS)0xC0380024L) }, { { sizeof( "STATUS_VOLMGR_MEMBER_INDEX_INVALID" ) - sizeof( ("STATUS_VOLMGR_MEMBER_INDEX_INVALID")[0] ), sizeof( "STATUS_VOLMGR_MEMBER_INDEX_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MEMBER_INDEX_INVALID")), ("STATUS_VOLMGR_MEMBER_INDEX_INVALID") }, (ULONG)((NTSTATUS)0xC0380025L) }, { { sizeof( "STATUS_VOLMGR_MEMBER_MISSING" ) - sizeof( ("STATUS_VOLMGR_MEMBER_MISSING")[0] ), sizeof( "STATUS_VOLMGR_MEMBER_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MEMBER_MISSING")), ("STATUS_VOLMGR_MEMBER_MISSING") }, (ULONG)((NTSTATUS)0xC0380026L) }, { { sizeof( "STATUS_VOLMGR_MEMBER_NOT_DETACHED" ) - sizeof( ("STATUS_VOLMGR_MEMBER_NOT_DETACHED")[0] ), sizeof( "STATUS_VOLMGR_MEMBER_NOT_DETACHED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MEMBER_NOT_DETACHED")), ("STATUS_VOLMGR_MEMBER_NOT_DETACHED") }, (ULONG)((NTSTATUS)0xC0380027L) }, { { sizeof( "STATUS_VOLMGR_MEMBER_REGENERATING" ) - sizeof( ("STATUS_VOLMGR_MEMBER_REGENERATING")[0] ), sizeof( "STATUS_VOLMGR_MEMBER_REGENERATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MEMBER_REGENERATING")), ("STATUS_VOLMGR_MEMBER_REGENERATING") }, (ULONG)((NTSTATUS)0xC0380028L) }, { { sizeof( "STATUS_VOLMGR_ALL_DISKS_FAILED" ) - sizeof( ("STATUS_VOLMGR_ALL_DISKS_FAILED")[0] ), sizeof( "STATUS_VOLMGR_ALL_DISKS_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_ALL_DISKS_FAILED")), ("STATUS_VOLMGR_ALL_DISKS_FAILED") }, (ULONG)((NTSTATUS)0xC0380029L) }, { { sizeof( "STATUS_VOLMGR_NO_REGISTERED_USERS" ) - sizeof( ("STATUS_VOLMGR_NO_REGISTERED_USERS")[0] ), sizeof( "STATUS_VOLMGR_NO_REGISTERED_USERS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NO_REGISTERED_USERS")), ("STATUS_VOLMGR_NO_REGISTERED_USERS") }, (ULONG)((NTSTATUS)0xC038002AL) }, { { sizeof( "STATUS_VOLMGR_NO_SUCH_USER" ) - sizeof( ("STATUS_VOLMGR_NO_SUCH_USER")[0] ), sizeof( "STATUS_VOLMGR_NO_SUCH_USER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NO_SUCH_USER")), ("STATUS_VOLMGR_NO_SUCH_USER") }, (ULONG)((NTSTATUS)0xC038002BL) }, { { sizeof( "STATUS_VOLMGR_NOTIFICATION_RESET" ) - sizeof( ("STATUS_VOLMGR_NOTIFICATION_RESET")[0] ), sizeof( "STATUS_VOLMGR_NOTIFICATION_RESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NOTIFICATION_RESET")), ("STATUS_VOLMGR_NOTIFICATION_RESET") }, (ULONG)((NTSTATUS)0xC038002CL) }, { { sizeof( "STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID" ) - sizeof( ("STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID")[0] ), sizeof( "STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID")), ("STATUS_VOLMGR_NUMBER_OF_MEMBERS_INVALID") }, (ULONG)((NTSTATUS)0xC038002DL) }, { { sizeof( "STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID" ) - sizeof( ("STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID")[0] ), sizeof( "STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID")), ("STATUS_VOLMGR_NUMBER_OF_PLEXES_INVALID") }, (ULONG)((NTSTATUS)0xC038002EL) }, { { sizeof( "STATUS_VOLMGR_PACK_DUPLICATE" ) - sizeof( ("STATUS_VOLMGR_PACK_DUPLICATE")[0] ), sizeof( "STATUS_VOLMGR_PACK_DUPLICATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_DUPLICATE")), ("STATUS_VOLMGR_PACK_DUPLICATE") }, (ULONG)((NTSTATUS)0xC038002FL) }, { { sizeof( "STATUS_VOLMGR_PACK_ID_INVALID" ) - sizeof( ("STATUS_VOLMGR_PACK_ID_INVALID")[0] ), sizeof( "STATUS_VOLMGR_PACK_ID_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_ID_INVALID")), ("STATUS_VOLMGR_PACK_ID_INVALID") }, (ULONG)((NTSTATUS)0xC0380030L) }, { { sizeof( "STATUS_VOLMGR_PACK_INVALID" ) - sizeof( ("STATUS_VOLMGR_PACK_INVALID")[0] ), sizeof( "STATUS_VOLMGR_PACK_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_INVALID")), ("STATUS_VOLMGR_PACK_INVALID") }, (ULONG)((NTSTATUS)0xC0380031L) }, { { sizeof( "STATUS_VOLMGR_PACK_NAME_INVALID" ) - sizeof( ("STATUS_VOLMGR_PACK_NAME_INVALID")[0] ), sizeof( "STATUS_VOLMGR_PACK_NAME_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_NAME_INVALID")), ("STATUS_VOLMGR_PACK_NAME_INVALID") }, (ULONG)((NTSTATUS)0xC0380032L) }, { { sizeof( "STATUS_VOLMGR_PACK_OFFLINE" ) - sizeof( ("STATUS_VOLMGR_PACK_OFFLINE")[0] ), sizeof( "STATUS_VOLMGR_PACK_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_OFFLINE")), ("STATUS_VOLMGR_PACK_OFFLINE") }, (ULONG)((NTSTATUS)0xC0380033L) }, { { sizeof( "STATUS_VOLMGR_PACK_HAS_QUORUM" ) - sizeof( ("STATUS_VOLMGR_PACK_HAS_QUORUM")[0] ), sizeof( "STATUS_VOLMGR_PACK_HAS_QUORUM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_HAS_QUORUM")), ("STATUS_VOLMGR_PACK_HAS_QUORUM") }, (ULONG)((NTSTATUS)0xC0380034L) }, { { sizeof( "STATUS_VOLMGR_PACK_WITHOUT_QUORUM" ) - sizeof( ("STATUS_VOLMGR_PACK_WITHOUT_QUORUM")[0] ), sizeof( "STATUS_VOLMGR_PACK_WITHOUT_QUORUM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_WITHOUT_QUORUM")), ("STATUS_VOLMGR_PACK_WITHOUT_QUORUM") }, (ULONG)((NTSTATUS)0xC0380035L) }, { { sizeof( "STATUS_VOLMGR_PARTITION_STYLE_INVALID" ) - sizeof( ("STATUS_VOLMGR_PARTITION_STYLE_INVALID")[0] ), sizeof( "STATUS_VOLMGR_PARTITION_STYLE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PARTITION_STYLE_INVALID")), ("STATUS_VOLMGR_PARTITION_STYLE_INVALID") }, (ULONG)((NTSTATUS)0xC0380036L) }, { { sizeof( "STATUS_VOLMGR_PARTITION_UPDATE_FAILED" ) - sizeof( ("STATUS_VOLMGR_PARTITION_UPDATE_FAILED")[0] ), sizeof( "STATUS_VOLMGR_PARTITION_UPDATE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PARTITION_UPDATE_FAILED")), ("STATUS_VOLMGR_PARTITION_UPDATE_FAILED") }, (ULONG)((NTSTATUS)0xC0380037L) }, { { sizeof( "STATUS_VOLMGR_PLEX_IN_SYNC" ) - sizeof( ("STATUS_VOLMGR_PLEX_IN_SYNC")[0] ), sizeof( "STATUS_VOLMGR_PLEX_IN_SYNC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_IN_SYNC")), ("STATUS_VOLMGR_PLEX_IN_SYNC") }, (ULONG)((NTSTATUS)0xC0380038L) }, { { sizeof( "STATUS_VOLMGR_PLEX_INDEX_DUPLICATE" ) - sizeof( ("STATUS_VOLMGR_PLEX_INDEX_DUPLICATE")[0] ), sizeof( "STATUS_VOLMGR_PLEX_INDEX_DUPLICATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_INDEX_DUPLICATE")), ("STATUS_VOLMGR_PLEX_INDEX_DUPLICATE") }, (ULONG)((NTSTATUS)0xC0380039L) }, { { sizeof( "STATUS_VOLMGR_PLEX_INDEX_INVALID" ) - sizeof( ("STATUS_VOLMGR_PLEX_INDEX_INVALID")[0] ), sizeof( "STATUS_VOLMGR_PLEX_INDEX_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_INDEX_INVALID")), ("STATUS_VOLMGR_PLEX_INDEX_INVALID") }, (ULONG)((NTSTATUS)0xC038003AL) }, { { sizeof( "STATUS_VOLMGR_PLEX_LAST_ACTIVE" ) - sizeof( ("STATUS_VOLMGR_PLEX_LAST_ACTIVE")[0] ), sizeof( "STATUS_VOLMGR_PLEX_LAST_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_LAST_ACTIVE")), ("STATUS_VOLMGR_PLEX_LAST_ACTIVE") }, (ULONG)((NTSTATUS)0xC038003BL) }, { { sizeof( "STATUS_VOLMGR_PLEX_MISSING" ) - sizeof( ("STATUS_VOLMGR_PLEX_MISSING")[0] ), sizeof( "STATUS_VOLMGR_PLEX_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_MISSING")), ("STATUS_VOLMGR_PLEX_MISSING") }, (ULONG)((NTSTATUS)0xC038003CL) }, { { sizeof( "STATUS_VOLMGR_PLEX_REGENERATING" ) - sizeof( ("STATUS_VOLMGR_PLEX_REGENERATING")[0] ), sizeof( "STATUS_VOLMGR_PLEX_REGENERATING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_REGENERATING")), ("STATUS_VOLMGR_PLEX_REGENERATING") }, (ULONG)((NTSTATUS)0xC038003DL) }, { { sizeof( "STATUS_VOLMGR_PLEX_TYPE_INVALID" ) - sizeof( ("STATUS_VOLMGR_PLEX_TYPE_INVALID")[0] ), sizeof( "STATUS_VOLMGR_PLEX_TYPE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_TYPE_INVALID")), ("STATUS_VOLMGR_PLEX_TYPE_INVALID") }, (ULONG)((NTSTATUS)0xC038003EL) }, { { sizeof( "STATUS_VOLMGR_PLEX_NOT_RAID5" ) - sizeof( ("STATUS_VOLMGR_PLEX_NOT_RAID5")[0] ), sizeof( "STATUS_VOLMGR_PLEX_NOT_RAID5" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_NOT_RAID5")), ("STATUS_VOLMGR_PLEX_NOT_RAID5") }, (ULONG)((NTSTATUS)0xC038003FL) }, { { sizeof( "STATUS_VOLMGR_PLEX_NOT_SIMPLE" ) - sizeof( ("STATUS_VOLMGR_PLEX_NOT_SIMPLE")[0] ), sizeof( "STATUS_VOLMGR_PLEX_NOT_SIMPLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_NOT_SIMPLE")), ("STATUS_VOLMGR_PLEX_NOT_SIMPLE") }, (ULONG)((NTSTATUS)0xC0380040L) }, { { sizeof( "STATUS_VOLMGR_STRUCTURE_SIZE_INVALID" ) - sizeof( ("STATUS_VOLMGR_STRUCTURE_SIZE_INVALID")[0] ), sizeof( "STATUS_VOLMGR_STRUCTURE_SIZE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_STRUCTURE_SIZE_INVALID")), ("STATUS_VOLMGR_STRUCTURE_SIZE_INVALID") }, (ULONG)((NTSTATUS)0xC0380041L) }, { { sizeof( "STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS" ) - sizeof( ("STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS")[0] ), sizeof( "STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS")), ("STATUS_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS") }, (ULONG)((NTSTATUS)0xC0380042L) }, { { sizeof( "STATUS_VOLMGR_TRANSACTION_IN_PROGRESS" ) - sizeof( ("STATUS_VOLMGR_TRANSACTION_IN_PROGRESS")[0] ), sizeof( "STATUS_VOLMGR_TRANSACTION_IN_PROGRESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_TRANSACTION_IN_PROGRESS")), ("STATUS_VOLMGR_TRANSACTION_IN_PROGRESS") }, (ULONG)((NTSTATUS)0xC0380043L) }, { { sizeof( "STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE" ) - sizeof( ("STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE")[0] ), sizeof( "STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE")), ("STATUS_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE") }, (ULONG)((NTSTATUS)0xC0380044L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK" ) - sizeof( ("STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK")), ("STATUS_VOLMGR_VOLUME_CONTAINS_MISSING_DISK") }, (ULONG)((NTSTATUS)0xC0380045L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_ID_INVALID" ) - sizeof( ("STATUS_VOLMGR_VOLUME_ID_INVALID")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_ID_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_ID_INVALID")), ("STATUS_VOLMGR_VOLUME_ID_INVALID") }, (ULONG)((NTSTATUS)0xC0380046L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_LENGTH_INVALID" ) - sizeof( ("STATUS_VOLMGR_VOLUME_LENGTH_INVALID")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_LENGTH_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_LENGTH_INVALID")), ("STATUS_VOLMGR_VOLUME_LENGTH_INVALID") }, (ULONG)((NTSTATUS)0xC0380047L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE" ) - sizeof( ("STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE")), ("STATUS_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE") }, (ULONG)((NTSTATUS)0xC0380048L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_NOT_MIRRORED" ) - sizeof( ("STATUS_VOLMGR_VOLUME_NOT_MIRRORED")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_NOT_MIRRORED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_NOT_MIRRORED")), ("STATUS_VOLMGR_VOLUME_NOT_MIRRORED") }, (ULONG)((NTSTATUS)0xC0380049L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_NOT_RETAINED" ) - sizeof( ("STATUS_VOLMGR_VOLUME_NOT_RETAINED")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_NOT_RETAINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_NOT_RETAINED")), ("STATUS_VOLMGR_VOLUME_NOT_RETAINED") }, (ULONG)((NTSTATUS)0xC038004AL) }, { { sizeof( "STATUS_VOLMGR_VOLUME_OFFLINE" ) - sizeof( ("STATUS_VOLMGR_VOLUME_OFFLINE")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_OFFLINE")), ("STATUS_VOLMGR_VOLUME_OFFLINE") }, (ULONG)((NTSTATUS)0xC038004BL) }, { { sizeof( "STATUS_VOLMGR_VOLUME_RETAINED" ) - sizeof( ("STATUS_VOLMGR_VOLUME_RETAINED")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_RETAINED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_RETAINED")), ("STATUS_VOLMGR_VOLUME_RETAINED") }, (ULONG)((NTSTATUS)0xC038004CL) }, { { sizeof( "STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID" ) - sizeof( ("STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID")[0] ), sizeof( "STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID")), ("STATUS_VOLMGR_NUMBER_OF_EXTENTS_INVALID") }, (ULONG)((NTSTATUS)0xC038004DL) }, { { sizeof( "STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE" ) - sizeof( ("STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE")[0] ), sizeof( "STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE")), ("STATUS_VOLMGR_DIFFERENT_SECTOR_SIZE") }, (ULONG)((NTSTATUS)0xC038004EL) }, { { sizeof( "STATUS_VOLMGR_BAD_BOOT_DISK" ) - sizeof( ("STATUS_VOLMGR_BAD_BOOT_DISK")[0] ), sizeof( "STATUS_VOLMGR_BAD_BOOT_DISK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_BAD_BOOT_DISK")), ("STATUS_VOLMGR_BAD_BOOT_DISK") }, (ULONG)((NTSTATUS)0xC038004FL) }, { { sizeof( "STATUS_VOLMGR_PACK_CONFIG_OFFLINE" ) - sizeof( ("STATUS_VOLMGR_PACK_CONFIG_OFFLINE")[0] ), sizeof( "STATUS_VOLMGR_PACK_CONFIG_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_CONFIG_OFFLINE")), ("STATUS_VOLMGR_PACK_CONFIG_OFFLINE") }, (ULONG)((NTSTATUS)0xC0380050L) }, { { sizeof( "STATUS_VOLMGR_PACK_CONFIG_ONLINE" ) - sizeof( ("STATUS_VOLMGR_PACK_CONFIG_ONLINE")[0] ), sizeof( "STATUS_VOLMGR_PACK_CONFIG_ONLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_CONFIG_ONLINE")), ("STATUS_VOLMGR_PACK_CONFIG_ONLINE") }, (ULONG)((NTSTATUS)0xC0380051L) }, { { sizeof( "STATUS_VOLMGR_NOT_PRIMARY_PACK" ) - sizeof( ("STATUS_VOLMGR_NOT_PRIMARY_PACK")[0] ), sizeof( "STATUS_VOLMGR_NOT_PRIMARY_PACK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NOT_PRIMARY_PACK")), ("STATUS_VOLMGR_NOT_PRIMARY_PACK") }, (ULONG)((NTSTATUS)0xC0380052L) }, { { sizeof( "STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED" ) - sizeof( ("STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED")[0] ), sizeof( "STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED")), ("STATUS_VOLMGR_PACK_LOG_UPDATE_FAILED") }, (ULONG)((NTSTATUS)0xC0380053L) }, { { sizeof( "STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID" ) - sizeof( ("STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID")[0] ), sizeof( "STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID")), ("STATUS_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID") }, (ULONG)((NTSTATUS)0xC0380054L) }, { { sizeof( "STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID" ) - sizeof( ("STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID")[0] ), sizeof( "STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID")), ("STATUS_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID") }, (ULONG)((NTSTATUS)0xC0380055L) }, { { sizeof( "STATUS_VOLMGR_VOLUME_MIRRORED" ) - sizeof( ("STATUS_VOLMGR_VOLUME_MIRRORED")[0] ), sizeof( "STATUS_VOLMGR_VOLUME_MIRRORED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_VOLUME_MIRRORED")), ("STATUS_VOLMGR_VOLUME_MIRRORED") }, (ULONG)((NTSTATUS)0xC0380056L) }, { { sizeof( "STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED" ) - sizeof( ("STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED")[0] ), sizeof( "STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED")), ("STATUS_VOLMGR_PLEX_NOT_SIMPLE_SPANNED") }, (ULONG)((NTSTATUS)0xC0380057L) }, { { sizeof( "STATUS_VOLMGR_NO_VALID_LOG_COPIES" ) - sizeof( ("STATUS_VOLMGR_NO_VALID_LOG_COPIES")[0] ), sizeof( "STATUS_VOLMGR_NO_VALID_LOG_COPIES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NO_VALID_LOG_COPIES")), ("STATUS_VOLMGR_NO_VALID_LOG_COPIES") }, (ULONG)((NTSTATUS)0xC0380058L) }, { { sizeof( "STATUS_VOLMGR_PRIMARY_PACK_PRESENT" ) - sizeof( ("STATUS_VOLMGR_PRIMARY_PACK_PRESENT")[0] ), sizeof( "STATUS_VOLMGR_PRIMARY_PACK_PRESENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_PRIMARY_PACK_PRESENT")), ("STATUS_VOLMGR_PRIMARY_PACK_PRESENT") }, (ULONG)((NTSTATUS)0xC0380059L) }, { { sizeof( "STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID" ) - sizeof( ("STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID")[0] ), sizeof( "STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID")), ("STATUS_VOLMGR_NUMBER_OF_DISKS_INVALID") }, (ULONG)((NTSTATUS)0xC038005AL) }, { { sizeof( "STATUS_VOLMGR_MIRROR_NOT_SUPPORTED" ) - sizeof( ("STATUS_VOLMGR_MIRROR_NOT_SUPPORTED")[0] ), sizeof( "STATUS_VOLMGR_MIRROR_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_MIRROR_NOT_SUPPORTED")), ("STATUS_VOLMGR_MIRROR_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC038005BL) }, { { sizeof( "STATUS_VOLMGR_RAID5_NOT_SUPPORTED" ) - sizeof( ("STATUS_VOLMGR_RAID5_NOT_SUPPORTED")[0] ), sizeof( "STATUS_VOLMGR_RAID5_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLMGR_RAID5_NOT_SUPPORTED")), ("STATUS_VOLMGR_RAID5_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC038005CL) }, { { sizeof( "STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED" ) - sizeof( ("STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED")[0] ), sizeof( "STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED")), ("STATUS_BCD_NOT_ALL_ENTRIES_IMPORTED") }, (ULONG)((NTSTATUS)0x80390001L) }, { { sizeof( "STATUS_BCD_TOO_MANY_ELEMENTS" ) - sizeof( ("STATUS_BCD_TOO_MANY_ELEMENTS")[0] ), sizeof( "STATUS_BCD_TOO_MANY_ELEMENTS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BCD_TOO_MANY_ELEMENTS")), ("STATUS_BCD_TOO_MANY_ELEMENTS") }, (ULONG)((NTSTATUS)0xC0390002L) }, { { sizeof( "STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED" ) - sizeof( ("STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED")[0] ), sizeof( "STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED")), ("STATUS_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED") }, (ULONG)((NTSTATUS)0x80390003L) }, { { sizeof( "STATUS_VHD_DRIVE_FOOTER_MISSING" ) - sizeof( ("STATUS_VHD_DRIVE_FOOTER_MISSING")[0] ), sizeof( "STATUS_VHD_DRIVE_FOOTER_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_DRIVE_FOOTER_MISSING")), ("STATUS_VHD_DRIVE_FOOTER_MISSING") }, (ULONG)((NTSTATUS)0xC03A0001L) }, { { sizeof( "STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH" ) - sizeof( ("STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH")[0] ), sizeof( "STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH")), ("STATUS_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH") }, (ULONG)((NTSTATUS)0xC03A0002L) }, { { sizeof( "STATUS_VHD_DRIVE_FOOTER_CORRUPT" ) - sizeof( ("STATUS_VHD_DRIVE_FOOTER_CORRUPT")[0] ), sizeof( "STATUS_VHD_DRIVE_FOOTER_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_DRIVE_FOOTER_CORRUPT")), ("STATUS_VHD_DRIVE_FOOTER_CORRUPT") }, (ULONG)((NTSTATUS)0xC03A0003L) }, { { sizeof( "STATUS_VHD_FORMAT_UNKNOWN" ) - sizeof( ("STATUS_VHD_FORMAT_UNKNOWN")[0] ), sizeof( "STATUS_VHD_FORMAT_UNKNOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_FORMAT_UNKNOWN")), ("STATUS_VHD_FORMAT_UNKNOWN") }, (ULONG)((NTSTATUS)0xC03A0004L) }, { { sizeof( "STATUS_VHD_FORMAT_UNSUPPORTED_VERSION" ) - sizeof( ("STATUS_VHD_FORMAT_UNSUPPORTED_VERSION")[0] ), sizeof( "STATUS_VHD_FORMAT_UNSUPPORTED_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_FORMAT_UNSUPPORTED_VERSION")), ("STATUS_VHD_FORMAT_UNSUPPORTED_VERSION") }, (ULONG)((NTSTATUS)0xC03A0005L) }, { { sizeof( "STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH" ) - sizeof( ("STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH")[0] ), sizeof( "STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH")), ("STATUS_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH") }, (ULONG)((NTSTATUS)0xC03A0006L) }, { { sizeof( "STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION" ) - sizeof( ("STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION")[0] ), sizeof( "STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION")), ("STATUS_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION") }, (ULONG)((NTSTATUS)0xC03A0007L) }, { { sizeof( "STATUS_VHD_SPARSE_HEADER_CORRUPT" ) - sizeof( ("STATUS_VHD_SPARSE_HEADER_CORRUPT")[0] ), sizeof( "STATUS_VHD_SPARSE_HEADER_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_SPARSE_HEADER_CORRUPT")), ("STATUS_VHD_SPARSE_HEADER_CORRUPT") }, (ULONG)((NTSTATUS)0xC03A0008L) }, { { sizeof( "STATUS_VHD_BLOCK_ALLOCATION_FAILURE" ) - sizeof( ("STATUS_VHD_BLOCK_ALLOCATION_FAILURE")[0] ), sizeof( "STATUS_VHD_BLOCK_ALLOCATION_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_BLOCK_ALLOCATION_FAILURE")), ("STATUS_VHD_BLOCK_ALLOCATION_FAILURE") }, (ULONG)((NTSTATUS)0xC03A0009L) }, { { sizeof( "STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT" ) - sizeof( ("STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT")[0] ), sizeof( "STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT")), ("STATUS_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT") }, (ULONG)((NTSTATUS)0xC03A000AL) }, { { sizeof( "STATUS_VHD_INVALID_BLOCK_SIZE" ) - sizeof( ("STATUS_VHD_INVALID_BLOCK_SIZE")[0] ), sizeof( "STATUS_VHD_INVALID_BLOCK_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_INVALID_BLOCK_SIZE")), ("STATUS_VHD_INVALID_BLOCK_SIZE") }, (ULONG)((NTSTATUS)0xC03A000BL) }, { { sizeof( "STATUS_VHD_BITMAP_MISMATCH" ) - sizeof( ("STATUS_VHD_BITMAP_MISMATCH")[0] ), sizeof( "STATUS_VHD_BITMAP_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_BITMAP_MISMATCH")), ("STATUS_VHD_BITMAP_MISMATCH") }, (ULONG)((NTSTATUS)0xC03A000CL) }, { { sizeof( "STATUS_VHD_PARENT_VHD_NOT_FOUND" ) - sizeof( ("STATUS_VHD_PARENT_VHD_NOT_FOUND")[0] ), sizeof( "STATUS_VHD_PARENT_VHD_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_PARENT_VHD_NOT_FOUND")), ("STATUS_VHD_PARENT_VHD_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC03A000DL) }, { { sizeof( "STATUS_VHD_CHILD_PARENT_ID_MISMATCH" ) - sizeof( ("STATUS_VHD_CHILD_PARENT_ID_MISMATCH")[0] ), sizeof( "STATUS_VHD_CHILD_PARENT_ID_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_CHILD_PARENT_ID_MISMATCH")), ("STATUS_VHD_CHILD_PARENT_ID_MISMATCH") }, (ULONG)((NTSTATUS)0xC03A000EL) }, { { sizeof( "STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH" ) - sizeof( ("STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH")[0] ), sizeof( "STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH")), ("STATUS_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH") }, (ULONG)((NTSTATUS)0xC03A000FL) }, { { sizeof( "STATUS_VHD_METADATA_READ_FAILURE" ) - sizeof( ("STATUS_VHD_METADATA_READ_FAILURE")[0] ), sizeof( "STATUS_VHD_METADATA_READ_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_METADATA_READ_FAILURE")), ("STATUS_VHD_METADATA_READ_FAILURE") }, (ULONG)((NTSTATUS)0xC03A0010L) }, { { sizeof( "STATUS_VHD_METADATA_WRITE_FAILURE" ) - sizeof( ("STATUS_VHD_METADATA_WRITE_FAILURE")[0] ), sizeof( "STATUS_VHD_METADATA_WRITE_FAILURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_METADATA_WRITE_FAILURE")), ("STATUS_VHD_METADATA_WRITE_FAILURE") }, (ULONG)((NTSTATUS)0xC03A0011L) }, { { sizeof( "STATUS_VHD_INVALID_SIZE" ) - sizeof( ("STATUS_VHD_INVALID_SIZE")[0] ), sizeof( "STATUS_VHD_INVALID_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_INVALID_SIZE")), ("STATUS_VHD_INVALID_SIZE") }, (ULONG)((NTSTATUS)0xC03A0012L) }, { { sizeof( "STATUS_VHD_INVALID_FILE_SIZE" ) - sizeof( ("STATUS_VHD_INVALID_FILE_SIZE")[0] ), sizeof( "STATUS_VHD_INVALID_FILE_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_INVALID_FILE_SIZE")), ("STATUS_VHD_INVALID_FILE_SIZE") }, (ULONG)((NTSTATUS)0xC03A0013L) }, { { sizeof( "STATUS_VIRTDISK_PROVIDER_NOT_FOUND" ) - sizeof( ("STATUS_VIRTDISK_PROVIDER_NOT_FOUND")[0] ), sizeof( "STATUS_VIRTDISK_PROVIDER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTDISK_PROVIDER_NOT_FOUND")), ("STATUS_VIRTDISK_PROVIDER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC03A0014L) }, { { sizeof( "STATUS_VIRTDISK_NOT_VIRTUAL_DISK" ) - sizeof( ("STATUS_VIRTDISK_NOT_VIRTUAL_DISK")[0] ), sizeof( "STATUS_VIRTDISK_NOT_VIRTUAL_DISK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTDISK_NOT_VIRTUAL_DISK")), ("STATUS_VIRTDISK_NOT_VIRTUAL_DISK") }, (ULONG)((NTSTATUS)0xC03A0015L) }, { { sizeof( "STATUS_VHD_PARENT_VHD_ACCESS_DENIED" ) - sizeof( ("STATUS_VHD_PARENT_VHD_ACCESS_DENIED")[0] ), sizeof( "STATUS_VHD_PARENT_VHD_ACCESS_DENIED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_PARENT_VHD_ACCESS_DENIED")), ("STATUS_VHD_PARENT_VHD_ACCESS_DENIED") }, (ULONG)((NTSTATUS)0xC03A0016L) }, { { sizeof( "STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH" ) - sizeof( ("STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH")[0] ), sizeof( "STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH")), ("STATUS_VHD_CHILD_PARENT_SIZE_MISMATCH") }, (ULONG)((NTSTATUS)0xC03A0017L) }, { { sizeof( "STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED" ) - sizeof( ("STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED")[0] ), sizeof( "STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED")), ("STATUS_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED") }, (ULONG)((NTSTATUS)0xC03A0018L) }, { { sizeof( "STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT" ) - sizeof( ("STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT")[0] ), sizeof( "STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT")), ("STATUS_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT") }, (ULONG)((NTSTATUS)0xC03A0019L) }, { { sizeof( "STATUS_VIRTUAL_DISK_LIMITATION" ) - sizeof( ("STATUS_VIRTUAL_DISK_LIMITATION")[0] ), sizeof( "STATUS_VIRTUAL_DISK_LIMITATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTUAL_DISK_LIMITATION")), ("STATUS_VIRTUAL_DISK_LIMITATION") }, (ULONG)((NTSTATUS)0xC03A001AL) }, { { sizeof( "STATUS_VHD_INVALID_TYPE" ) - sizeof( ("STATUS_VHD_INVALID_TYPE")[0] ), sizeof( "STATUS_VHD_INVALID_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_INVALID_TYPE")), ("STATUS_VHD_INVALID_TYPE") }, (ULONG)((NTSTATUS)0xC03A001BL) }, { { sizeof( "STATUS_VHD_INVALID_STATE" ) - sizeof( ("STATUS_VHD_INVALID_STATE")[0] ), sizeof( "STATUS_VHD_INVALID_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_INVALID_STATE")), ("STATUS_VHD_INVALID_STATE") }, (ULONG)((NTSTATUS)0xC03A001CL) }, { { sizeof( "STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE" ) - sizeof( ("STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE")[0] ), sizeof( "STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE")), ("STATUS_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE") }, (ULONG)((NTSTATUS)0xC03A001DL) }, { { sizeof( "STATUS_VIRTDISK_DISK_ALREADY_OWNED" ) - sizeof( ("STATUS_VIRTDISK_DISK_ALREADY_OWNED")[0] ), sizeof( "STATUS_VIRTDISK_DISK_ALREADY_OWNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTDISK_DISK_ALREADY_OWNED")), ("STATUS_VIRTDISK_DISK_ALREADY_OWNED") }, (ULONG)((NTSTATUS)0xC03A001EL) }, { { sizeof( "STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE" ) - sizeof( ("STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE")[0] ), sizeof( "STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE")), ("STATUS_VIRTDISK_DISK_ONLINE_AND_WRITABLE") }, (ULONG)((NTSTATUS)0xC03A001FL) }, { { sizeof( "STATUS_CTLOG_TRACKING_NOT_INITIALIZED" ) - sizeof( ("STATUS_CTLOG_TRACKING_NOT_INITIALIZED")[0] ), sizeof( "STATUS_CTLOG_TRACKING_NOT_INITIALIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTLOG_TRACKING_NOT_INITIALIZED")), ("STATUS_CTLOG_TRACKING_NOT_INITIALIZED") }, (ULONG)((NTSTATUS)0xC03A0020L) }, { { sizeof( "STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE" ) - sizeof( ("STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE")[0] ), sizeof( "STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE")), ("STATUS_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE") }, (ULONG)((NTSTATUS)0xC03A0021L) }, { { sizeof( "STATUS_CTLOG_VHD_CHANGED_OFFLINE" ) - sizeof( ("STATUS_CTLOG_VHD_CHANGED_OFFLINE")[0] ), sizeof( "STATUS_CTLOG_VHD_CHANGED_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTLOG_VHD_CHANGED_OFFLINE")), ("STATUS_CTLOG_VHD_CHANGED_OFFLINE") }, (ULONG)((NTSTATUS)0xC03A0022L) }, { { sizeof( "STATUS_CTLOG_INVALID_TRACKING_STATE" ) - sizeof( ("STATUS_CTLOG_INVALID_TRACKING_STATE")[0] ), sizeof( "STATUS_CTLOG_INVALID_TRACKING_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTLOG_INVALID_TRACKING_STATE")), ("STATUS_CTLOG_INVALID_TRACKING_STATE") }, (ULONG)((NTSTATUS)0xC03A0023L) }, { { sizeof( "STATUS_CTLOG_INCONSISTENT_TRACKING_FILE" ) - sizeof( ("STATUS_CTLOG_INCONSISTENT_TRACKING_FILE")[0] ), sizeof( "STATUS_CTLOG_INCONSISTENT_TRACKING_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CTLOG_INCONSISTENT_TRACKING_FILE")), ("STATUS_CTLOG_INCONSISTENT_TRACKING_FILE") }, (ULONG)((NTSTATUS)0xC03A0024L) }, { { sizeof( "STATUS_VHD_METADATA_FULL" ) - sizeof( ("STATUS_VHD_METADATA_FULL")[0] ), sizeof( "STATUS_VHD_METADATA_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_METADATA_FULL")), ("STATUS_VHD_METADATA_FULL") }, (ULONG)((NTSTATUS)0xC03A0028L) }, { { sizeof( "STATUS_VHD_INVALID_CHANGE_TRACKING_ID" ) - sizeof( ("STATUS_VHD_INVALID_CHANGE_TRACKING_ID")[0] ), sizeof( "STATUS_VHD_INVALID_CHANGE_TRACKING_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_INVALID_CHANGE_TRACKING_ID")), ("STATUS_VHD_INVALID_CHANGE_TRACKING_ID") }, (ULONG)((NTSTATUS)0xC03A0029L) }, { { sizeof( "STATUS_VHD_CHANGE_TRACKING_DISABLED" ) - sizeof( ("STATUS_VHD_CHANGE_TRACKING_DISABLED")[0] ), sizeof( "STATUS_VHD_CHANGE_TRACKING_DISABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_CHANGE_TRACKING_DISABLED")), ("STATUS_VHD_CHANGE_TRACKING_DISABLED") }, (ULONG)((NTSTATUS)0xC03A002AL) }, { { sizeof( "STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION" ) - sizeof( ("STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION")[0] ), sizeof( "STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION")), ("STATUS_VHD_MISSING_CHANGE_TRACKING_INFORMATION") }, (ULONG)((NTSTATUS)0xC03A0030L) }, { { sizeof( "STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA" ) - sizeof( ("STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA")[0] ), sizeof( "STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA")), ("STATUS_VHD_RESIZE_WOULD_TRUNCATE_DATA") }, (ULONG)((NTSTATUS)0xC03A0031L) }, { { sizeof( "STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE" ) - sizeof( ("STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE")[0] ), sizeof( "STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE")), ("STATUS_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE") }, (ULONG)((NTSTATUS)0xC03A0032L) }, { { sizeof( "STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE" ) - sizeof( ("STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE")[0] ), sizeof( "STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE")), ("STATUS_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE") }, (ULONG)((NTSTATUS)0xC03A0033L) }, { { sizeof( "STATUS_QUERY_STORAGE_ERROR" ) - sizeof( ("STATUS_QUERY_STORAGE_ERROR")[0] ), sizeof( "STATUS_QUERY_STORAGE_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_QUERY_STORAGE_ERROR")), ("STATUS_QUERY_STORAGE_ERROR") }, (ULONG)((NTSTATUS)0x803A0001L) }, { { sizeof( "STATUS_RKF_KEY_NOT_FOUND" ) - sizeof( ("STATUS_RKF_KEY_NOT_FOUND")[0] ), sizeof( "STATUS_RKF_KEY_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RKF_KEY_NOT_FOUND")), ("STATUS_RKF_KEY_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0400001L) }, { { sizeof( "STATUS_RKF_DUPLICATE_KEY" ) - sizeof( ("STATUS_RKF_DUPLICATE_KEY")[0] ), sizeof( "STATUS_RKF_DUPLICATE_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RKF_DUPLICATE_KEY")), ("STATUS_RKF_DUPLICATE_KEY") }, (ULONG)((NTSTATUS)0xC0400002L) }, { { sizeof( "STATUS_RKF_BLOB_FULL" ) - sizeof( ("STATUS_RKF_BLOB_FULL")[0] ), sizeof( "STATUS_RKF_BLOB_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RKF_BLOB_FULL")), ("STATUS_RKF_BLOB_FULL") }, (ULONG)((NTSTATUS)0xC0400003L) }, { { sizeof( "STATUS_RKF_STORE_FULL" ) - sizeof( ("STATUS_RKF_STORE_FULL")[0] ), sizeof( "STATUS_RKF_STORE_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RKF_STORE_FULL")), ("STATUS_RKF_STORE_FULL") }, (ULONG)((NTSTATUS)0xC0400004L) }, { { sizeof( "STATUS_RKF_FILE_BLOCKED" ) - sizeof( ("STATUS_RKF_FILE_BLOCKED")[0] ), sizeof( "STATUS_RKF_FILE_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RKF_FILE_BLOCKED")), ("STATUS_RKF_FILE_BLOCKED") }, (ULONG)((NTSTATUS)0xC0400005L) }, { { sizeof( "STATUS_RKF_ACTIVE_KEY" ) - sizeof( ("STATUS_RKF_ACTIVE_KEY")[0] ), sizeof( "STATUS_RKF_ACTIVE_KEY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RKF_ACTIVE_KEY")), ("STATUS_RKF_ACTIVE_KEY") }, (ULONG)((NTSTATUS)0xC0400006L) }, { { sizeof( "STATUS_RDBSS_RESTART_OPERATION" ) - sizeof( ("STATUS_RDBSS_RESTART_OPERATION")[0] ), sizeof( "STATUS_RDBSS_RESTART_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RDBSS_RESTART_OPERATION")), ("STATUS_RDBSS_RESTART_OPERATION") }, (ULONG)((NTSTATUS)0xC0410001L) }, { { sizeof( "STATUS_RDBSS_CONTINUE_OPERATION" ) - sizeof( ("STATUS_RDBSS_CONTINUE_OPERATION")[0] ), sizeof( "STATUS_RDBSS_CONTINUE_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RDBSS_CONTINUE_OPERATION")), ("STATUS_RDBSS_CONTINUE_OPERATION") }, (ULONG)((NTSTATUS)0xC0410002L) }, { { sizeof( "STATUS_RDBSS_POST_OPERATION" ) - sizeof( ("STATUS_RDBSS_POST_OPERATION")[0] ), sizeof( "STATUS_RDBSS_POST_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_RDBSS_POST_OPERATION")), ("STATUS_RDBSS_POST_OPERATION") }, (ULONG)((NTSTATUS)0xC0410003L) }, { { sizeof( "STATUS_BTH_ATT_INVALID_HANDLE" ) - sizeof( ("STATUS_BTH_ATT_INVALID_HANDLE")[0] ), sizeof( "STATUS_BTH_ATT_INVALID_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INVALID_HANDLE")), ("STATUS_BTH_ATT_INVALID_HANDLE") }, (ULONG)((NTSTATUS)0xC0420001L) }, { { sizeof( "STATUS_BTH_ATT_READ_NOT_PERMITTED" ) - sizeof( ("STATUS_BTH_ATT_READ_NOT_PERMITTED")[0] ), sizeof( "STATUS_BTH_ATT_READ_NOT_PERMITTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_READ_NOT_PERMITTED")), ("STATUS_BTH_ATT_READ_NOT_PERMITTED") }, (ULONG)((NTSTATUS)0xC0420002L) }, { { sizeof( "STATUS_BTH_ATT_WRITE_NOT_PERMITTED" ) - sizeof( ("STATUS_BTH_ATT_WRITE_NOT_PERMITTED")[0] ), sizeof( "STATUS_BTH_ATT_WRITE_NOT_PERMITTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_WRITE_NOT_PERMITTED")), ("STATUS_BTH_ATT_WRITE_NOT_PERMITTED") }, (ULONG)((NTSTATUS)0xC0420003L) }, { { sizeof( "STATUS_BTH_ATT_INVALID_PDU" ) - sizeof( ("STATUS_BTH_ATT_INVALID_PDU")[0] ), sizeof( "STATUS_BTH_ATT_INVALID_PDU" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INVALID_PDU")), ("STATUS_BTH_ATT_INVALID_PDU") }, (ULONG)((NTSTATUS)0xC0420004L) }, { { sizeof( "STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION" ) - sizeof( ("STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION")[0] ), sizeof( "STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION")), ("STATUS_BTH_ATT_INSUFFICIENT_AUTHENTICATION") }, (ULONG)((NTSTATUS)0xC0420005L) }, { { sizeof( "STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED" ) - sizeof( ("STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED")[0] ), sizeof( "STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED")), ("STATUS_BTH_ATT_REQUEST_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0420006L) }, { { sizeof( "STATUS_BTH_ATT_INVALID_OFFSET" ) - sizeof( ("STATUS_BTH_ATT_INVALID_OFFSET")[0] ), sizeof( "STATUS_BTH_ATT_INVALID_OFFSET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INVALID_OFFSET")), ("STATUS_BTH_ATT_INVALID_OFFSET") }, (ULONG)((NTSTATUS)0xC0420007L) }, { { sizeof( "STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION" ) - sizeof( ("STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION")[0] ), sizeof( "STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION")), ("STATUS_BTH_ATT_INSUFFICIENT_AUTHORIZATION") }, (ULONG)((NTSTATUS)0xC0420008L) }, { { sizeof( "STATUS_BTH_ATT_PREPARE_QUEUE_FULL" ) - sizeof( ("STATUS_BTH_ATT_PREPARE_QUEUE_FULL")[0] ), sizeof( "STATUS_BTH_ATT_PREPARE_QUEUE_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_PREPARE_QUEUE_FULL")), ("STATUS_BTH_ATT_PREPARE_QUEUE_FULL") }, (ULONG)((NTSTATUS)0xC0420009L) }, { { sizeof( "STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND" ) - sizeof( ("STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND")[0] ), sizeof( "STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND")), ("STATUS_BTH_ATT_ATTRIBUTE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC042000AL) }, { { sizeof( "STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG" ) - sizeof( ("STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG")[0] ), sizeof( "STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG")), ("STATUS_BTH_ATT_ATTRIBUTE_NOT_LONG") }, (ULONG)((NTSTATUS)0xC042000BL) }, { { sizeof( "STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE" ) - sizeof( ("STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE")[0] ), sizeof( "STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE")), ("STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE") }, (ULONG)((NTSTATUS)0xC042000CL) }, { { sizeof( "STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH" ) - sizeof( ("STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH")[0] ), sizeof( "STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH")), ("STATUS_BTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH") }, (ULONG)((NTSTATUS)0xC042000DL) }, { { sizeof( "STATUS_BTH_ATT_UNLIKELY" ) - sizeof( ("STATUS_BTH_ATT_UNLIKELY")[0] ), sizeof( "STATUS_BTH_ATT_UNLIKELY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_UNLIKELY")), ("STATUS_BTH_ATT_UNLIKELY") }, (ULONG)((NTSTATUS)0xC042000EL) }, { { sizeof( "STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION" ) - sizeof( ("STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION")[0] ), sizeof( "STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION")), ("STATUS_BTH_ATT_INSUFFICIENT_ENCRYPTION") }, (ULONG)((NTSTATUS)0xC042000FL) }, { { sizeof( "STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE" ) - sizeof( ("STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE")[0] ), sizeof( "STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE")), ("STATUS_BTH_ATT_UNSUPPORTED_GROUP_TYPE") }, (ULONG)((NTSTATUS)0xC0420010L) }, { { sizeof( "STATUS_BTH_ATT_INSUFFICIENT_RESOURCES" ) - sizeof( ("STATUS_BTH_ATT_INSUFFICIENT_RESOURCES")[0] ), sizeof( "STATUS_BTH_ATT_INSUFFICIENT_RESOURCES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_INSUFFICIENT_RESOURCES")), ("STATUS_BTH_ATT_INSUFFICIENT_RESOURCES") }, (ULONG)((NTSTATUS)0xC0420011L) }, { { sizeof( "STATUS_BTH_ATT_UNKNOWN_ERROR" ) - sizeof( ("STATUS_BTH_ATT_UNKNOWN_ERROR")[0] ), sizeof( "STATUS_BTH_ATT_UNKNOWN_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_BTH_ATT_UNKNOWN_ERROR")), ("STATUS_BTH_ATT_UNKNOWN_ERROR") }, (ULONG)((NTSTATUS)0xC0421000L) }, { { sizeof( "STATUS_SECUREBOOT_ROLLBACK_DETECTED" ) - sizeof( ("STATUS_SECUREBOOT_ROLLBACK_DETECTED")[0] ), sizeof( "STATUS_SECUREBOOT_ROLLBACK_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_ROLLBACK_DETECTED")), ("STATUS_SECUREBOOT_ROLLBACK_DETECTED") }, (ULONG)((NTSTATUS)0xC0430001L) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_VIOLATION" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_VIOLATION")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_VIOLATION")), ("STATUS_SECUREBOOT_POLICY_VIOLATION") }, (ULONG)((NTSTATUS)0xC0430002L) }, { { sizeof( "STATUS_SECUREBOOT_INVALID_POLICY" ) - sizeof( ("STATUS_SECUREBOOT_INVALID_POLICY")[0] ), sizeof( "STATUS_SECUREBOOT_INVALID_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_INVALID_POLICY")), ("STATUS_SECUREBOOT_INVALID_POLICY") }, (ULONG)((NTSTATUS)0xC0430003L) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND")), ("STATUS_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0430004L) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_NOT_SIGNED" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_NOT_SIGNED")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_NOT_SIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_NOT_SIGNED")), ("STATUS_SECUREBOOT_POLICY_NOT_SIGNED") }, (ULONG)((NTSTATUS)0xC0430005L) }, { { sizeof( "STATUS_SECUREBOOT_NOT_ENABLED" ) - sizeof( ("STATUS_SECUREBOOT_NOT_ENABLED")[0] ), sizeof( "STATUS_SECUREBOOT_NOT_ENABLED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_NOT_ENABLED")), ("STATUS_SECUREBOOT_NOT_ENABLED") }, (ULONG)((NTSTATUS)0x80430006L) }, { { sizeof( "STATUS_SECUREBOOT_FILE_REPLACED" ) - sizeof( ("STATUS_SECUREBOOT_FILE_REPLACED")[0] ), sizeof( "STATUS_SECUREBOOT_FILE_REPLACED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_FILE_REPLACED")), ("STATUS_SECUREBOOT_FILE_REPLACED") }, (ULONG)((NTSTATUS)0xC0430007L) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED")), ("STATUS_SECUREBOOT_POLICY_NOT_AUTHORIZED") }, (ULONG)((NTSTATUS)0xC0430008L) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_UNKNOWN" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_UNKNOWN")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_UNKNOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_UNKNOWN")), ("STATUS_SECUREBOOT_POLICY_UNKNOWN") }, (ULONG)((NTSTATUS)0xC0430009L) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION")), ("STATUS_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION") }, (ULONG)((NTSTATUS)0xC043000AL) }, { { sizeof( "STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH" ) - sizeof( ("STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH")[0] ), sizeof( "STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH")), ("STATUS_SECUREBOOT_PLATFORM_ID_MISMATCH") }, (ULONG)((NTSTATUS)0xC043000BL) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED")), ("STATUS_SECUREBOOT_POLICY_ROLLBACK_DETECTED") }, (ULONG)((NTSTATUS)0xC043000CL) }, { { sizeof( "STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH" ) - sizeof( ("STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH")[0] ), sizeof( "STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH")), ("STATUS_SECUREBOOT_POLICY_UPGRADE_MISMATCH") }, (ULONG)((NTSTATUS)0xC043000DL) }, { { sizeof( "STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING" ) - sizeof( ("STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING")[0] ), sizeof( "STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING")), ("STATUS_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING") }, (ULONG)((NTSTATUS)0xC043000EL) }, { { sizeof( "STATUS_SECUREBOOT_NOT_BASE_POLICY" ) - sizeof( ("STATUS_SECUREBOOT_NOT_BASE_POLICY")[0] ), sizeof( "STATUS_SECUREBOOT_NOT_BASE_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_NOT_BASE_POLICY")), ("STATUS_SECUREBOOT_NOT_BASE_POLICY") }, (ULONG)((NTSTATUS)0xC043000FL) }, { { sizeof( "STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY" ) - sizeof( ("STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY")[0] ), sizeof( "STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY")), ("STATUS_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY") }, (ULONG)((NTSTATUS)0xC0430010L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED")), ("STATUS_PLATFORM_MANIFEST_NOT_AUTHORIZED") }, (ULONG)((NTSTATUS)0xC0EB0001L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_INVALID" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_INVALID")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_INVALID")), ("STATUS_PLATFORM_MANIFEST_INVALID") }, (ULONG)((NTSTATUS)0xC0EB0002L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED")), ("STATUS_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED") }, (ULONG)((NTSTATUS)0xC0EB0003L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED")), ("STATUS_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED") }, (ULONG)((NTSTATUS)0xC0EB0004L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND")), ("STATUS_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0EB0005L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_NOT_ACTIVE" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_NOT_ACTIVE")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_NOT_ACTIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_NOT_ACTIVE")), ("STATUS_PLATFORM_MANIFEST_NOT_ACTIVE") }, (ULONG)((NTSTATUS)0xC0EB0006L) }, { { sizeof( "STATUS_PLATFORM_MANIFEST_NOT_SIGNED" ) - sizeof( ("STATUS_PLATFORM_MANIFEST_NOT_SIGNED")[0] ), sizeof( "STATUS_PLATFORM_MANIFEST_NOT_SIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_PLATFORM_MANIFEST_NOT_SIGNED")), ("STATUS_PLATFORM_MANIFEST_NOT_SIGNED") }, (ULONG)((NTSTATUS)0xC0EB0007L) }, { { sizeof( "STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED" ) - sizeof( ("STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED")[0] ), sizeof( "STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED")), ("STATUS_SYSTEM_INTEGRITY_ROLLBACK_DETECTED") }, (ULONG)((NTSTATUS)0xC0E90001L) }, { { sizeof( "STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION" ) - sizeof( ("STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION")[0] ), sizeof( "STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION")), ("STATUS_SYSTEM_INTEGRITY_POLICY_VIOLATION") }, (ULONG)((NTSTATUS)0xC0E90002L) }, { { sizeof( "STATUS_SYSTEM_INTEGRITY_INVALID_POLICY" ) - sizeof( ("STATUS_SYSTEM_INTEGRITY_INVALID_POLICY")[0] ), sizeof( "STATUS_SYSTEM_INTEGRITY_INVALID_POLICY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_INTEGRITY_INVALID_POLICY")), ("STATUS_SYSTEM_INTEGRITY_INVALID_POLICY") }, (ULONG)((NTSTATUS)0xC0E90003L) }, { { sizeof( "STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED" ) - sizeof( ("STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED")[0] ), sizeof( "STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED")), ("STATUS_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED") }, (ULONG)((NTSTATUS)0xC0E90004L) }, { { sizeof( "STATUS_NO_APPLICABLE_APP_LICENSES_FOUND" ) - sizeof( ("STATUS_NO_APPLICABLE_APP_LICENSES_FOUND")[0] ), sizeof( "STATUS_NO_APPLICABLE_APP_LICENSES_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_NO_APPLICABLE_APP_LICENSES_FOUND")), ("STATUS_NO_APPLICABLE_APP_LICENSES_FOUND") }, (ULONG)((NTSTATUS)0xC0EA0001L) }, { { sizeof( "STATUS_CLIP_LICENSE_NOT_FOUND" ) - sizeof( ("STATUS_CLIP_LICENSE_NOT_FOUND")[0] ), sizeof( "STATUS_CLIP_LICENSE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_NOT_FOUND")), ("STATUS_CLIP_LICENSE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0EA0002L) }, { { sizeof( "STATUS_CLIP_DEVICE_LICENSE_MISSING" ) - sizeof( ("STATUS_CLIP_DEVICE_LICENSE_MISSING")[0] ), sizeof( "STATUS_CLIP_DEVICE_LICENSE_MISSING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_DEVICE_LICENSE_MISSING")), ("STATUS_CLIP_DEVICE_LICENSE_MISSING") }, (ULONG)((NTSTATUS)0xC0EA0003L) }, { { sizeof( "STATUS_CLIP_LICENSE_INVALID_SIGNATURE" ) - sizeof( ("STATUS_CLIP_LICENSE_INVALID_SIGNATURE")[0] ), sizeof( "STATUS_CLIP_LICENSE_INVALID_SIGNATURE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_INVALID_SIGNATURE")), ("STATUS_CLIP_LICENSE_INVALID_SIGNATURE") }, (ULONG)((NTSTATUS)0xC0EA0004L) }, { { sizeof( "STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID" ) - sizeof( ("STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID")[0] ), sizeof( "STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID")), ("STATUS_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID") }, (ULONG)((NTSTATUS)0xC0EA0005L) }, { { sizeof( "STATUS_CLIP_LICENSE_EXPIRED" ) - sizeof( ("STATUS_CLIP_LICENSE_EXPIRED")[0] ), sizeof( "STATUS_CLIP_LICENSE_EXPIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_EXPIRED")), ("STATUS_CLIP_LICENSE_EXPIRED") }, (ULONG)((NTSTATUS)0xC0EA0006L) }, { { sizeof( "STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE" ) - sizeof( ("STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE")[0] ), sizeof( "STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE")), ("STATUS_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE") }, (ULONG)((NTSTATUS)0xC0EA0007L) }, { { sizeof( "STATUS_CLIP_LICENSE_NOT_SIGNED" ) - sizeof( ("STATUS_CLIP_LICENSE_NOT_SIGNED")[0] ), sizeof( "STATUS_CLIP_LICENSE_NOT_SIGNED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_NOT_SIGNED")), ("STATUS_CLIP_LICENSE_NOT_SIGNED") }, (ULONG)((NTSTATUS)0xC0EA0008L) }, { { sizeof( "STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE" ) - sizeof( ("STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE")[0] ), sizeof( "STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE")), ("STATUS_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE") }, (ULONG)((NTSTATUS)0xC0EA0009L) }, { { sizeof( "STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH" ) - sizeof( ("STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH")[0] ), sizeof( "STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH")), ("STATUS_CLIP_LICENSE_DEVICE_ID_MISMATCH") }, (ULONG)((NTSTATUS)0xC0EA000AL) }, { { sizeof( "STATUS_AUDIO_ENGINE_NODE_NOT_FOUND" ) - sizeof( ("STATUS_AUDIO_ENGINE_NODE_NOT_FOUND")[0] ), sizeof( "STATUS_AUDIO_ENGINE_NODE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_AUDIO_ENGINE_NODE_NOT_FOUND")), ("STATUS_AUDIO_ENGINE_NODE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC0440001L) }, { { sizeof( "STATUS_HDAUDIO_EMPTY_CONNECTION_LIST" ) - sizeof( ("STATUS_HDAUDIO_EMPTY_CONNECTION_LIST")[0] ), sizeof( "STATUS_HDAUDIO_EMPTY_CONNECTION_LIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HDAUDIO_EMPTY_CONNECTION_LIST")), ("STATUS_HDAUDIO_EMPTY_CONNECTION_LIST") }, (ULONG)((NTSTATUS)0xC0440002L) }, { { sizeof( "STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED" ) - sizeof( ("STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED")[0] ), sizeof( "STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED")), ("STATUS_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED") }, (ULONG)((NTSTATUS)0xC0440003L) }, { { sizeof( "STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED" ) - sizeof( ("STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED")[0] ), sizeof( "STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED")), ("STATUS_HDAUDIO_NO_LOGICAL_DEVICES_CREATED") }, (ULONG)((NTSTATUS)0xC0440004L) }, { { sizeof( "STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY" ) - sizeof( ("STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY")[0] ), sizeof( "STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY")), ("STATUS_HDAUDIO_NULL_LINKED_LIST_ENTRY") }, (ULONG)((NTSTATUS)0xC0440005L) }, { { sizeof( "STATUS_SPACES_REPAIRED" ) - sizeof( ("STATUS_SPACES_REPAIRED")[0] ), sizeof( "STATUS_SPACES_REPAIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_REPAIRED")), ("STATUS_SPACES_REPAIRED") }, (ULONG)((NTSTATUS)0x00E70000L) }, { { sizeof( "STATUS_SPACES_PAUSE" ) - sizeof( ("STATUS_SPACES_PAUSE")[0] ), sizeof( "STATUS_SPACES_PAUSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_PAUSE")), ("STATUS_SPACES_PAUSE") }, (ULONG)((NTSTATUS)0x00E70001L) }, { { sizeof( "STATUS_SPACES_COMPLETE" ) - sizeof( ("STATUS_SPACES_COMPLETE")[0] ), sizeof( "STATUS_SPACES_COMPLETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_COMPLETE")), ("STATUS_SPACES_COMPLETE") }, (ULONG)((NTSTATUS)0x00E70002L) }, { { sizeof( "STATUS_SPACES_REDIRECT" ) - sizeof( ("STATUS_SPACES_REDIRECT")[0] ), sizeof( "STATUS_SPACES_REDIRECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_REDIRECT")), ("STATUS_SPACES_REDIRECT") }, (ULONG)((NTSTATUS)0x00E70003L) }, { { sizeof( "STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID" ) - sizeof( ("STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID")[0] ), sizeof( "STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID")), ("STATUS_SPACES_FAULT_DOMAIN_TYPE_INVALID") }, (ULONG)((NTSTATUS)0xC0E70001L) }, { { sizeof( "STATUS_SPACES_RESILIENCY_TYPE_INVALID" ) - sizeof( ("STATUS_SPACES_RESILIENCY_TYPE_INVALID")[0] ), sizeof( "STATUS_SPACES_RESILIENCY_TYPE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_RESILIENCY_TYPE_INVALID")), ("STATUS_SPACES_RESILIENCY_TYPE_INVALID") }, (ULONG)((NTSTATUS)0xC0E70003L) }, { { sizeof( "STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID" ) - sizeof( ("STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID")[0] ), sizeof( "STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID")), ("STATUS_SPACES_DRIVE_SECTOR_SIZE_INVALID") }, (ULONG)((NTSTATUS)0xC0E70004L) }, { { sizeof( "STATUS_SPACES_DRIVE_REDUNDANCY_INVALID" ) - sizeof( ("STATUS_SPACES_DRIVE_REDUNDANCY_INVALID")[0] ), sizeof( "STATUS_SPACES_DRIVE_REDUNDANCY_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRIVE_REDUNDANCY_INVALID")), ("STATUS_SPACES_DRIVE_REDUNDANCY_INVALID") }, (ULONG)((NTSTATUS)0xC0E70006L) }, { { sizeof( "STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID" ) - sizeof( ("STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID")[0] ), sizeof( "STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID")), ("STATUS_SPACES_NUMBER_OF_DATA_COPIES_INVALID") }, (ULONG)((NTSTATUS)0xC0E70007L) }, { { sizeof( "STATUS_SPACES_INTERLEAVE_LENGTH_INVALID" ) - sizeof( ("STATUS_SPACES_INTERLEAVE_LENGTH_INVALID")[0] ), sizeof( "STATUS_SPACES_INTERLEAVE_LENGTH_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_INTERLEAVE_LENGTH_INVALID")), ("STATUS_SPACES_INTERLEAVE_LENGTH_INVALID") }, (ULONG)((NTSTATUS)0xC0E70009L) }, { { sizeof( "STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID" ) - sizeof( ("STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID")[0] ), sizeof( "STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID")), ("STATUS_SPACES_NUMBER_OF_COLUMNS_INVALID") }, (ULONG)((NTSTATUS)0xC0E7000AL) }, { { sizeof( "STATUS_SPACES_NOT_ENOUGH_DRIVES" ) - sizeof( ("STATUS_SPACES_NOT_ENOUGH_DRIVES")[0] ), sizeof( "STATUS_SPACES_NOT_ENOUGH_DRIVES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_NOT_ENOUGH_DRIVES")), ("STATUS_SPACES_NOT_ENOUGH_DRIVES") }, (ULONG)((NTSTATUS)0xC0E7000BL) }, { { sizeof( "STATUS_SPACES_EXTENDED_ERROR" ) - sizeof( ("STATUS_SPACES_EXTENDED_ERROR")[0] ), sizeof( "STATUS_SPACES_EXTENDED_ERROR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_EXTENDED_ERROR")), ("STATUS_SPACES_EXTENDED_ERROR") }, (ULONG)((NTSTATUS)0xC0E7000CL) }, { { sizeof( "STATUS_SPACES_PROVISIONING_TYPE_INVALID" ) - sizeof( ("STATUS_SPACES_PROVISIONING_TYPE_INVALID")[0] ), sizeof( "STATUS_SPACES_PROVISIONING_TYPE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_PROVISIONING_TYPE_INVALID")), ("STATUS_SPACES_PROVISIONING_TYPE_INVALID") }, (ULONG)((NTSTATUS)0xC0E7000DL) }, { { sizeof( "STATUS_SPACES_ALLOCATION_SIZE_INVALID" ) - sizeof( ("STATUS_SPACES_ALLOCATION_SIZE_INVALID")[0] ), sizeof( "STATUS_SPACES_ALLOCATION_SIZE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_ALLOCATION_SIZE_INVALID")), ("STATUS_SPACES_ALLOCATION_SIZE_INVALID") }, (ULONG)((NTSTATUS)0xC0E7000EL) }, { { sizeof( "STATUS_SPACES_ENCLOSURE_AWARE_INVALID" ) - sizeof( ("STATUS_SPACES_ENCLOSURE_AWARE_INVALID")[0] ), sizeof( "STATUS_SPACES_ENCLOSURE_AWARE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_ENCLOSURE_AWARE_INVALID")), ("STATUS_SPACES_ENCLOSURE_AWARE_INVALID") }, (ULONG)((NTSTATUS)0xC0E7000FL) }, { { sizeof( "STATUS_SPACES_WRITE_CACHE_SIZE_INVALID" ) - sizeof( ("STATUS_SPACES_WRITE_CACHE_SIZE_INVALID")[0] ), sizeof( "STATUS_SPACES_WRITE_CACHE_SIZE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_WRITE_CACHE_SIZE_INVALID")), ("STATUS_SPACES_WRITE_CACHE_SIZE_INVALID") }, (ULONG)((NTSTATUS)0xC0E70010L) }, { { sizeof( "STATUS_SPACES_NUMBER_OF_GROUPS_INVALID" ) - sizeof( ("STATUS_SPACES_NUMBER_OF_GROUPS_INVALID")[0] ), sizeof( "STATUS_SPACES_NUMBER_OF_GROUPS_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_NUMBER_OF_GROUPS_INVALID")), ("STATUS_SPACES_NUMBER_OF_GROUPS_INVALID") }, (ULONG)((NTSTATUS)0xC0E70011L) }, { { sizeof( "STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID" ) - sizeof( ("STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID")[0] ), sizeof( "STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID")), ("STATUS_SPACES_DRIVE_OPERATIONAL_STATE_INVALID") }, (ULONG)((NTSTATUS)0xC0E70012L) }, { { sizeof( "STATUS_SPACES_UPDATE_COLUMN_STATE" ) - sizeof( ("STATUS_SPACES_UPDATE_COLUMN_STATE")[0] ), sizeof( "STATUS_SPACES_UPDATE_COLUMN_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_UPDATE_COLUMN_STATE")), ("STATUS_SPACES_UPDATE_COLUMN_STATE") }, (ULONG)((NTSTATUS)0xC0E70013L) }, { { sizeof( "STATUS_SPACES_MAP_REQUIRED" ) - sizeof( ("STATUS_SPACES_MAP_REQUIRED")[0] ), sizeof( "STATUS_SPACES_MAP_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_MAP_REQUIRED")), ("STATUS_SPACES_MAP_REQUIRED") }, (ULONG)((NTSTATUS)0xC0E70014L) }, { { sizeof( "STATUS_SPACES_UNSUPPORTED_VERSION" ) - sizeof( ("STATUS_SPACES_UNSUPPORTED_VERSION")[0] ), sizeof( "STATUS_SPACES_UNSUPPORTED_VERSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_UNSUPPORTED_VERSION")), ("STATUS_SPACES_UNSUPPORTED_VERSION") }, (ULONG)((NTSTATUS)0xC0E70015L) }, { { sizeof( "STATUS_SPACES_CORRUPT_METADATA" ) - sizeof( ("STATUS_SPACES_CORRUPT_METADATA")[0] ), sizeof( "STATUS_SPACES_CORRUPT_METADATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_CORRUPT_METADATA")), ("STATUS_SPACES_CORRUPT_METADATA") }, (ULONG)((NTSTATUS)0xC0E70016L) }, { { sizeof( "STATUS_SPACES_DRT_FULL" ) - sizeof( ("STATUS_SPACES_DRT_FULL")[0] ), sizeof( "STATUS_SPACES_DRT_FULL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRT_FULL")), ("STATUS_SPACES_DRT_FULL") }, (ULONG)((NTSTATUS)0xC0E70017L) }, { { sizeof( "STATUS_SPACES_INCONSISTENCY" ) - sizeof( ("STATUS_SPACES_INCONSISTENCY")[0] ), sizeof( "STATUS_SPACES_INCONSISTENCY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_INCONSISTENCY")), ("STATUS_SPACES_INCONSISTENCY") }, (ULONG)((NTSTATUS)0xC0E70018L) }, { { sizeof( "STATUS_SPACES_LOG_NOT_READY" ) - sizeof( ("STATUS_SPACES_LOG_NOT_READY")[0] ), sizeof( "STATUS_SPACES_LOG_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_LOG_NOT_READY")), ("STATUS_SPACES_LOG_NOT_READY") }, (ULONG)((NTSTATUS)0xC0E70019L) }, { { sizeof( "STATUS_SPACES_NO_REDUNDANCY" ) - sizeof( ("STATUS_SPACES_NO_REDUNDANCY")[0] ), sizeof( "STATUS_SPACES_NO_REDUNDANCY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_NO_REDUNDANCY")), ("STATUS_SPACES_NO_REDUNDANCY") }, (ULONG)((NTSTATUS)0xC0E7001AL) }, { { sizeof( "STATUS_SPACES_DRIVE_NOT_READY" ) - sizeof( ("STATUS_SPACES_DRIVE_NOT_READY")[0] ), sizeof( "STATUS_SPACES_DRIVE_NOT_READY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRIVE_NOT_READY")), ("STATUS_SPACES_DRIVE_NOT_READY") }, (ULONG)((NTSTATUS)0xC0E7001BL) }, { { sizeof( "STATUS_SPACES_DRIVE_SPLIT" ) - sizeof( ("STATUS_SPACES_DRIVE_SPLIT")[0] ), sizeof( "STATUS_SPACES_DRIVE_SPLIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRIVE_SPLIT")), ("STATUS_SPACES_DRIVE_SPLIT") }, (ULONG)((NTSTATUS)0xC0E7001CL) }, { { sizeof( "STATUS_SPACES_DRIVE_LOST_DATA" ) - sizeof( ("STATUS_SPACES_DRIVE_LOST_DATA")[0] ), sizeof( "STATUS_SPACES_DRIVE_LOST_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SPACES_DRIVE_LOST_DATA")), ("STATUS_SPACES_DRIVE_LOST_DATA") }, (ULONG)((NTSTATUS)0xC0E7001DL) }, { { sizeof( "STATUS_VOLSNAP_BOOTFILE_NOT_VALID" ) - sizeof( ("STATUS_VOLSNAP_BOOTFILE_NOT_VALID")[0] ), sizeof( "STATUS_VOLSNAP_BOOTFILE_NOT_VALID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLSNAP_BOOTFILE_NOT_VALID")), ("STATUS_VOLSNAP_BOOTFILE_NOT_VALID") }, (ULONG)((NTSTATUS)0xC0500003L) }, { { sizeof( "STATUS_VOLSNAP_ACTIVATION_TIMEOUT" ) - sizeof( ("STATUS_VOLSNAP_ACTIVATION_TIMEOUT")[0] ), sizeof( "STATUS_VOLSNAP_ACTIVATION_TIMEOUT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VOLSNAP_ACTIVATION_TIMEOUT")), ("STATUS_VOLSNAP_ACTIVATION_TIMEOUT") }, (ULONG)((NTSTATUS)0xC0500004L) }, { { sizeof( "STATUS_IO_PREEMPTED" ) - sizeof( ("STATUS_IO_PREEMPTED")[0] ), sizeof( "STATUS_IO_PREEMPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_IO_PREEMPTED")), ("STATUS_IO_PREEMPTED") }, (ULONG)((NTSTATUS)0xC0510001L) }, { { sizeof( "STATUS_SVHDX_ERROR_STORED" ) - sizeof( ("STATUS_SVHDX_ERROR_STORED")[0] ), sizeof( "STATUS_SVHDX_ERROR_STORED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_ERROR_STORED")), ("STATUS_SVHDX_ERROR_STORED") }, (ULONG)((NTSTATUS)0xC05C0000L) }, { { sizeof( "STATUS_SVHDX_ERROR_NOT_AVAILABLE" ) - sizeof( ("STATUS_SVHDX_ERROR_NOT_AVAILABLE")[0] ), sizeof( "STATUS_SVHDX_ERROR_NOT_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_ERROR_NOT_AVAILABLE")), ("STATUS_SVHDX_ERROR_NOT_AVAILABLE") }, (ULONG)((NTSTATUS)0xC05CFF00L) }, { { sizeof( "STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE" ) - sizeof( ("STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE")[0] ), sizeof( "STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE")), ("STATUS_SVHDX_UNIT_ATTENTION_AVAILABLE") }, (ULONG)((NTSTATUS)0xC05CFF01L) }, { { sizeof( "STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED" ) - sizeof( ("STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED")[0] ), sizeof( "STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED")), ("STATUS_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED") }, (ULONG)((NTSTATUS)0xC05CFF02L) }, { { sizeof( "STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED" ) - sizeof( ("STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED")[0] ), sizeof( "STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED")), ("STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED") }, (ULONG)((NTSTATUS)0xC05CFF03L) }, { { sizeof( "STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED" ) - sizeof( ("STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED")[0] ), sizeof( "STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED")), ("STATUS_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED") }, (ULONG)((NTSTATUS)0xC05CFF04L) }, { { sizeof( "STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED" ) - sizeof( ("STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED")[0] ), sizeof( "STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED")), ("STATUS_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED") }, (ULONG)((NTSTATUS)0xC05CFF05L) }, { { sizeof( "STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED" ) - sizeof( ("STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED")[0] ), sizeof( "STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED")), ("STATUS_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED") }, (ULONG)((NTSTATUS)0xC05CFF06L) }, { { sizeof( "STATUS_SVHDX_RESERVATION_CONFLICT" ) - sizeof( ("STATUS_SVHDX_RESERVATION_CONFLICT")[0] ), sizeof( "STATUS_SVHDX_RESERVATION_CONFLICT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_RESERVATION_CONFLICT")), ("STATUS_SVHDX_RESERVATION_CONFLICT") }, (ULONG)((NTSTATUS)0xC05CFF07L) }, { { sizeof( "STATUS_SVHDX_WRONG_FILE_TYPE" ) - sizeof( ("STATUS_SVHDX_WRONG_FILE_TYPE")[0] ), sizeof( "STATUS_SVHDX_WRONG_FILE_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_WRONG_FILE_TYPE")), ("STATUS_SVHDX_WRONG_FILE_TYPE") }, (ULONG)((NTSTATUS)0xC05CFF08L) }, { { sizeof( "STATUS_SVHDX_VERSION_MISMATCH" ) - sizeof( ("STATUS_SVHDX_VERSION_MISMATCH")[0] ), sizeof( "STATUS_SVHDX_VERSION_MISMATCH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_VERSION_MISMATCH")), ("STATUS_SVHDX_VERSION_MISMATCH") }, (ULONG)((NTSTATUS)0xC05CFF09L) }, { { sizeof( "STATUS_VHD_SHARED" ) - sizeof( ("STATUS_VHD_SHARED")[0] ), sizeof( "STATUS_VHD_SHARED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHD_SHARED")), ("STATUS_VHD_SHARED") }, (ULONG)((NTSTATUS)0xC05CFF0AL) }, { { sizeof( "STATUS_SVHDX_NO_INITIATOR" ) - sizeof( ("STATUS_SVHDX_NO_INITIATOR")[0] ), sizeof( "STATUS_SVHDX_NO_INITIATOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SVHDX_NO_INITIATOR")), ("STATUS_SVHDX_NO_INITIATOR") }, (ULONG)((NTSTATUS)0xC05CFF0BL) }, { { sizeof( "STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND" ) - sizeof( ("STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND")[0] ), sizeof( "STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND")), ("STATUS_VHDSET_BACKING_STORAGE_NOT_FOUND") }, (ULONG)((NTSTATUS)0xC05CFF0CL) }, { { sizeof( "STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP" ) - sizeof( ("STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP")[0] ), sizeof( "STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP")), ("STATUS_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP") }, (ULONG)((NTSTATUS)0xC05D0000L) }, { { sizeof( "STATUS_SMB_BAD_CLUSTER_DIALECT" ) - sizeof( ("STATUS_SMB_BAD_CLUSTER_DIALECT")[0] ), sizeof( "STATUS_SMB_BAD_CLUSTER_DIALECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMB_BAD_CLUSTER_DIALECT")), ("STATUS_SMB_BAD_CLUSTER_DIALECT") }, (ULONG)((NTSTATUS)0xC05D0001L) }, { { sizeof( "STATUS_SMB_GUEST_LOGON_BLOCKED" ) - sizeof( ("STATUS_SMB_GUEST_LOGON_BLOCKED")[0] ), sizeof( "STATUS_SMB_GUEST_LOGON_BLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SMB_GUEST_LOGON_BLOCKED")), ("STATUS_SMB_GUEST_LOGON_BLOCKED") }, (ULONG)((NTSTATUS)0xC05D0002L) }, { { sizeof( "STATUS_SECCORE_INVALID_COMMAND" ) - sizeof( ("STATUS_SECCORE_INVALID_COMMAND")[0] ), sizeof( "STATUS_SECCORE_INVALID_COMMAND" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_SECCORE_INVALID_COMMAND")), ("STATUS_SECCORE_INVALID_COMMAND") }, (ULONG)((NTSTATUS)0xC0E80000L) }, { { sizeof( "STATUS_VSM_NOT_INITIALIZED" ) - sizeof( ("STATUS_VSM_NOT_INITIALIZED")[0] ), sizeof( "STATUS_VSM_NOT_INITIALIZED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VSM_NOT_INITIALIZED")), ("STATUS_VSM_NOT_INITIALIZED") }, (ULONG)((NTSTATUS)0xC0450000L) }, { { sizeof( "STATUS_VSM_DMA_PROTECTION_NOT_IN_USE" ) - sizeof( ("STATUS_VSM_DMA_PROTECTION_NOT_IN_USE")[0] ), sizeof( "STATUS_VSM_DMA_PROTECTION_NOT_IN_USE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STATUS_VSM_DMA_PROTECTION_NOT_IN_USE")), ("STATUS_VSM_DMA_PROTECTION_NOT_IN_USE") }, (ULONG)((NTSTATUS)0xC0450001L) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_NTSTATUS = { .Id = 3, .Type = AHDT_ENUM, .Name = { sizeof( "NTSTATUS" ) - sizeof( ("NTSTATUS")[0] ), sizeof( "NTSTATUS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NTSTATUS")), ("NTSTATUS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_NTSTATUS) / sizeof(AvmpHookEnumNameValue_NTSTATUS[0])), .Items = AvmpHookEnumNameValue_NTSTATUS } };
#line 2372 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_ntstatus.inl"
#line 33 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"





AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_OBJ_ATTRIBUTES[] = { { { sizeof( "OBJ_INHERIT" ) - sizeof( ("OBJ_INHERIT")[0] ), sizeof( "OBJ_INHERIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_INHERIT")), ("OBJ_INHERIT") }, (ULONG)0x00000002L }, { { sizeof( "OBJ_PERMANENT" ) - sizeof( ("OBJ_PERMANENT")[0] ), sizeof( "OBJ_PERMANENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_PERMANENT")), ("OBJ_PERMANENT") }, (ULONG)0x00000010L }, { { sizeof( "OBJ_EXCLUSIVE" ) - sizeof( ("OBJ_EXCLUSIVE")[0] ), sizeof( "OBJ_EXCLUSIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_EXCLUSIVE")), ("OBJ_EXCLUSIVE") }, (ULONG)0x00000020L }, { { sizeof( "OBJ_CASE_INSENSITIVE" ) - sizeof( ("OBJ_CASE_INSENSITIVE")[0] ), sizeof( "OBJ_CASE_INSENSITIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_CASE_INSENSITIVE")), ("OBJ_CASE_INSENSITIVE") }, (ULONG)0x00000040L }, { { sizeof( "OBJ_OPENIF" ) - sizeof( ("OBJ_OPENIF")[0] ), sizeof( "OBJ_OPENIF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_OPENIF")), ("OBJ_OPENIF") }, (ULONG)0x00000080L }, { { sizeof( "OBJ_OPENLINK" ) - sizeof( ("OBJ_OPENLINK")[0] ), sizeof( "OBJ_OPENLINK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_OPENLINK")), ("OBJ_OPENLINK") }, (ULONG)0x00000100L }, { { sizeof( "OBJ_KERNEL_HANDLE" ) - sizeof( ("OBJ_KERNEL_HANDLE")[0] ), sizeof( "OBJ_KERNEL_HANDLE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_KERNEL_HANDLE")), ("OBJ_KERNEL_HANDLE") }, (ULONG)0x00000200L }, { { sizeof( "OBJ_FORCE_ACCESS_CHECK" ) - sizeof( ("OBJ_FORCE_ACCESS_CHECK")[0] ), sizeof( "OBJ_FORCE_ACCESS_CHECK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_FORCE_ACCESS_CHECK")), ("OBJ_FORCE_ACCESS_CHECK") }, (ULONG)0x00000400L }, { { sizeof( "OBJ_IGNORE_IMPERSONATED_DEVICEMAP" ) - sizeof( ("OBJ_IGNORE_IMPERSONATED_DEVICEMAP")[0] ), sizeof( "OBJ_IGNORE_IMPERSONATED_DEVICEMAP" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_IGNORE_IMPERSONATED_DEVICEMAP")), ("OBJ_IGNORE_IMPERSONATED_DEVICEMAP") }, (ULONG)0x00000800L }, { { sizeof( "OBJ_DONT_REPARSE" ) - sizeof( ("OBJ_DONT_REPARSE")[0] ), sizeof( "OBJ_DONT_REPARSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_DONT_REPARSE")), ("OBJ_DONT_REPARSE") }, (ULONG)0x00001000L }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_OBJ_ATTRIBUTES = { .Id = 4, .Type = AHDT_ENUM, .Name = { sizeof( "OBJ_ATTRIBUTES" ) - sizeof( ("OBJ_ATTRIBUTES")[0] ), sizeof( "OBJ_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("OBJ_ATTRIBUTES")), ("OBJ_ATTRIBUTES") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_OBJ_ATTRIBUTES) / sizeof(AvmpHookEnumNameValue_OBJ_ATTRIBUTES[0])), .Items = AvmpHookEnumNameValue_OBJ_ATTRIBUTES } };
#line 51 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_GENERIC_ACCESS_MASK[] = { { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "GENERIC_ALL" ) - sizeof( ("GENERIC_ALL")[0] ), sizeof( "GENERIC_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_ALL")), ("GENERIC_ALL") }, (ULONG)(0x10000000L) }, { { sizeof( "GENERIC_EXECUTE" ) - sizeof( ("GENERIC_EXECUTE")[0] ), sizeof( "GENERIC_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_EXECUTE")), ("GENERIC_EXECUTE") }, (ULONG)(0x20000000L) }, { { sizeof( "GENERIC_WRITE" ) - sizeof( ("GENERIC_WRITE")[0] ), sizeof( "GENERIC_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_WRITE")), ("GENERIC_WRITE") }, (ULONG)(0x40000000L) }, { { sizeof( "GENERIC_READ" ) - sizeof( ("GENERIC_READ")[0] ), sizeof( "GENERIC_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_READ")), ("GENERIC_READ") }, (ULONG)(0x80000000L) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_GENERIC_ACCESS_MASK = { .Id = 5, .Type = AHDT_ENUM, .Name = { sizeof( "GENERIC_ACCESS_MASK" ) - sizeof( ("GENERIC_ACCESS_MASK")[0] ), sizeof( "GENERIC_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_ACCESS_MASK")), ("GENERIC_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_GENERIC_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_GENERIC_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_GENERIC_ACCESS_MASK } };
#line 68 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_FILE_ACCESS_MASK[] = { { { sizeof( "FILE_READ_DATA" ) - sizeof( ("FILE_READ_DATA")[0] ), sizeof( "FILE_READ_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_READ_DATA")), ("FILE_READ_DATA") }, (ULONG)( 0x0001 ) }, { { sizeof( "FILE_WRITE_DATA" ) - sizeof( ("FILE_WRITE_DATA")[0] ), sizeof( "FILE_WRITE_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_WRITE_DATA")), ("FILE_WRITE_DATA") }, (ULONG)( 0x0002 ) }, { { sizeof( "FILE_ADD_FILE" ) - sizeof( ("FILE_ADD_FILE")[0] ), sizeof( "FILE_ADD_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ADD_FILE")), ("FILE_ADD_FILE") }, (ULONG)( 0x0002 ) }, { { sizeof( "FILE_APPEND_DATA" ) - sizeof( ("FILE_APPEND_DATA")[0] ), sizeof( "FILE_APPEND_DATA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_APPEND_DATA")), ("FILE_APPEND_DATA") }, (ULONG)( 0x0004 ) }, { { sizeof( "FILE_READ_EA" ) - sizeof( ("FILE_READ_EA")[0] ), sizeof( "FILE_READ_EA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_READ_EA")), ("FILE_READ_EA") }, (ULONG)( 0x0008 ) }, { { sizeof( "FILE_WRITE_EA" ) - sizeof( ("FILE_WRITE_EA")[0] ), sizeof( "FILE_WRITE_EA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_WRITE_EA")), ("FILE_WRITE_EA") }, (ULONG)( 0x0010 ) }, { { sizeof( "FILE_EXECUTE" ) - sizeof( ("FILE_EXECUTE")[0] ), sizeof( "FILE_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_EXECUTE")), ("FILE_EXECUTE") }, (ULONG)( 0x0020 ) }, { { sizeof( "FILE_DELETE_CHILD" ) - sizeof( ("FILE_DELETE_CHILD")[0] ), sizeof( "FILE_DELETE_CHILD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_DELETE_CHILD")), ("FILE_DELETE_CHILD") }, (ULONG)( 0x0040 ) }, { { sizeof( "FILE_READ_ATTRIBUTES" ) - sizeof( ("FILE_READ_ATTRIBUTES")[0] ), sizeof( "FILE_READ_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_READ_ATTRIBUTES")), ("FILE_READ_ATTRIBUTES") }, (ULONG)( 0x0080 ) }, { { sizeof( "FILE_WRITE_ATTRIBUTES" ) - sizeof( ("FILE_WRITE_ATTRIBUTES")[0] ), sizeof( "FILE_WRITE_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_WRITE_ATTRIBUTES")), ("FILE_WRITE_ATTRIBUTES") }, (ULONG)( 0x0100 ) }, { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "FILE_GENERIC_READ" ) - sizeof( ("FILE_GENERIC_READ")[0] ), sizeof( "FILE_GENERIC_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_GENERIC_READ")), ("FILE_GENERIC_READ") }, (ULONG)(((0x00020000L)) | ( 0x0001 ) | ( 0x0080 ) | ( 0x0008 ) | (0x00100000L)) }, { { sizeof( "FILE_GENERIC_WRITE" ) - sizeof( ("FILE_GENERIC_WRITE")[0] ), sizeof( "FILE_GENERIC_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_GENERIC_WRITE")), ("FILE_GENERIC_WRITE") }, (ULONG)(((0x00020000L)) | ( 0x0002 ) | ( 0x0100 ) | ( 0x0010 ) | ( 0x0004 ) | (0x00100000L)) }, { { sizeof( "FILE_GENERIC_EXECUTE" ) - sizeof( ("FILE_GENERIC_EXECUTE")[0] ), sizeof( "FILE_GENERIC_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_GENERIC_EXECUTE")), ("FILE_GENERIC_EXECUTE") }, (ULONG)(((0x00020000L)) | ( 0x0080 ) | ( 0x0020 ) | (0x00100000L)) }, { { sizeof( "FILE_ALL_ACCESS" ) - sizeof( ("FILE_ALL_ACCESS")[0] ), sizeof( "FILE_ALL_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ALL_ACCESS")), ("FILE_ALL_ACCESS") }, (ULONG)((0x000F0000L) | (0x00100000L) | 0x1FF) }, { { sizeof( "GENERIC_ALL" ) - sizeof( ("GENERIC_ALL")[0] ), sizeof( "GENERIC_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_ALL")), ("GENERIC_ALL") }, (ULONG)(0x10000000L) }, { { sizeof( "GENERIC_EXECUTE" ) - sizeof( ("GENERIC_EXECUTE")[0] ), sizeof( "GENERIC_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_EXECUTE")), ("GENERIC_EXECUTE") }, (ULONG)(0x20000000L) }, { { sizeof( "GENERIC_WRITE" ) - sizeof( ("GENERIC_WRITE")[0] ), sizeof( "GENERIC_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_WRITE")), ("GENERIC_WRITE") }, (ULONG)(0x40000000L) }, { { sizeof( "GENERIC_READ" ) - sizeof( ("GENERIC_READ")[0] ), sizeof( "GENERIC_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_READ")), ("GENERIC_READ") }, (ULONG)(0x80000000L) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_FILE_ACCESS_MASK = { .Id = 6, .Type = AHDT_ENUM, .Name = { sizeof( "FILE_ACCESS_MASK" ) - sizeof( ("FILE_ACCESS_MASK")[0] ), sizeof( "FILE_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ACCESS_MASK")), ("FILE_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_FILE_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_FILE_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_FILE_ACCESS_MASK } };
#line 101 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"















AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_PROCESS_ACCESS_MASK[] = { { { sizeof( "PROCESS_TERMINATE" ) - sizeof( ("PROCESS_TERMINATE")[0] ), sizeof( "PROCESS_TERMINATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_TERMINATE")), ("PROCESS_TERMINATE") }, (ULONG)0x0001 }, { { sizeof( "PROCESS_CREATE_THREAD" ) - sizeof( ("PROCESS_CREATE_THREAD")[0] ), sizeof( "PROCESS_CREATE_THREAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_THREAD")), ("PROCESS_CREATE_THREAD") }, (ULONG)0x0002 }, { { sizeof( "PROCESS_SET_SESSIONID" ) - sizeof( ("PROCESS_SET_SESSIONID")[0] ), sizeof( "PROCESS_SET_SESSIONID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_SET_SESSIONID")), ("PROCESS_SET_SESSIONID") }, (ULONG)0x0004 }, { { sizeof( "PROCESS_VM_OPERATION" ) - sizeof( ("PROCESS_VM_OPERATION")[0] ), sizeof( "PROCESS_VM_OPERATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_VM_OPERATION")), ("PROCESS_VM_OPERATION") }, (ULONG)0x0008 }, { { sizeof( "PROCESS_VM_READ" ) - sizeof( ("PROCESS_VM_READ")[0] ), sizeof( "PROCESS_VM_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_VM_READ")), ("PROCESS_VM_READ") }, (ULONG)0x0010 }, { { sizeof( "PROCESS_VM_WRITE" ) - sizeof( ("PROCESS_VM_WRITE")[0] ), sizeof( "PROCESS_VM_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_VM_WRITE")), ("PROCESS_VM_WRITE") }, (ULONG)0x0020 }, { { sizeof( "PROCESS_CREATE_PROCESS" ) - sizeof( ("PROCESS_CREATE_PROCESS")[0] ), sizeof( "PROCESS_CREATE_PROCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_PROCESS")), ("PROCESS_CREATE_PROCESS") }, (ULONG)0x0080 }, { { sizeof( "PROCESS_SET_QUOTA" ) - sizeof( ("PROCESS_SET_QUOTA")[0] ), sizeof( "PROCESS_SET_QUOTA" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_SET_QUOTA")), ("PROCESS_SET_QUOTA") }, (ULONG)0x0100 }, { { sizeof( "PROCESS_SET_INFORMATION" ) - sizeof( ("PROCESS_SET_INFORMATION")[0] ), sizeof( "PROCESS_SET_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_SET_INFORMATION")), ("PROCESS_SET_INFORMATION") }, (ULONG)0x0200 }, { { sizeof( "PROCESS_QUERY_INFORMATION" ) - sizeof( ("PROCESS_QUERY_INFORMATION")[0] ), sizeof( "PROCESS_QUERY_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_QUERY_INFORMATION")), ("PROCESS_QUERY_INFORMATION") }, (ULONG)0x0400 }, { { sizeof( "PROCESS_SET_PORT" ) - sizeof( ("PROCESS_SET_PORT")[0] ), sizeof( "PROCESS_SET_PORT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_SET_PORT")), ("PROCESS_SET_PORT") }, (ULONG)0x0800 }, { { sizeof( "PROCESS_SUSPEND_RESUME" ) - sizeof( ("PROCESS_SUSPEND_RESUME")[0] ), sizeof( "PROCESS_SUSPEND_RESUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_SUSPEND_RESUME")), ("PROCESS_SUSPEND_RESUME") }, (ULONG)0x0800 }, { { sizeof( "PROCESS_QUERY_LIMITED_INFORMATION" ) - sizeof( ("PROCESS_QUERY_LIMITED_INFORMATION")[0] ), sizeof( "PROCESS_QUERY_LIMITED_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_QUERY_LIMITED_INFORMATION")), ("PROCESS_QUERY_LIMITED_INFORMATION") }, (ULONG)0x1000 }, { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "PROCESS_ALL_ACCESS" ) - sizeof( ("PROCESS_ALL_ACCESS")[0] ), sizeof( "PROCESS_ALL_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_ALL_ACCESS")), ("PROCESS_ALL_ACCESS") }, (ULONG)((0x000F0000L) | (0x00100000L) | 0xFFFF) }, { { sizeof( "GENERIC_ALL" ) - sizeof( ("GENERIC_ALL")[0] ), sizeof( "GENERIC_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_ALL")), ("GENERIC_ALL") }, (ULONG)(0x10000000L) }, { { sizeof( "GENERIC_EXECUTE" ) - sizeof( ("GENERIC_EXECUTE")[0] ), sizeof( "GENERIC_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_EXECUTE")), ("GENERIC_EXECUTE") }, (ULONG)(0x20000000L) }, { { sizeof( "GENERIC_WRITE" ) - sizeof( ("GENERIC_WRITE")[0] ), sizeof( "GENERIC_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_WRITE")), ("GENERIC_WRITE") }, (ULONG)(0x40000000L) }, { { sizeof( "GENERIC_READ" ) - sizeof( ("GENERIC_READ")[0] ), sizeof( "GENERIC_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_READ")), ("GENERIC_READ") }, (ULONG)(0x80000000L) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_PROCESS_ACCESS_MASK = { .Id = 7, .Type = AHDT_ENUM, .Name = { sizeof( "PROCESS_ACCESS_MASK" ) - sizeof( ("PROCESS_ACCESS_MASK")[0] ), sizeof( "PROCESS_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_ACCESS_MASK")), ("PROCESS_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_PROCESS_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_PROCESS_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_PROCESS_ACCESS_MASK } };
#line 148 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"















AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_THREAD_ACCESS_MASK[] = { { { sizeof( "THREAD_TERMINATE" ) - sizeof( ("THREAD_TERMINATE")[0] ), sizeof( "THREAD_TERMINATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_TERMINATE")), ("THREAD_TERMINATE") }, (ULONG)(0x0001) }, { { sizeof( "THREAD_SUSPEND_RESUME" ) - sizeof( ("THREAD_SUSPEND_RESUME")[0] ), sizeof( "THREAD_SUSPEND_RESUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_SUSPEND_RESUME")), ("THREAD_SUSPEND_RESUME") }, (ULONG)(0x0002) }, { { sizeof( "THREAD_ALERT" ) - sizeof( ("THREAD_ALERT")[0] ), sizeof( "THREAD_ALERT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_ALERT")), ("THREAD_ALERT") }, (ULONG)(0x0004) }, { { sizeof( "THREAD_GET_CONTEXT" ) - sizeof( ("THREAD_GET_CONTEXT")[0] ), sizeof( "THREAD_GET_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_GET_CONTEXT")), ("THREAD_GET_CONTEXT") }, (ULONG)(0x0008) }, { { sizeof( "THREAD_SET_CONTEXT" ) - sizeof( ("THREAD_SET_CONTEXT")[0] ), sizeof( "THREAD_SET_CONTEXT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_SET_CONTEXT")), ("THREAD_SET_CONTEXT") }, (ULONG)(0x0010) }, { { sizeof( "THREAD_SET_INFORMATION" ) - sizeof( ("THREAD_SET_INFORMATION")[0] ), sizeof( "THREAD_SET_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_SET_INFORMATION")), ("THREAD_SET_INFORMATION") }, (ULONG)(0x0020) }, { { sizeof( "THREAD_QUERY_INFORMATION" ) - sizeof( ("THREAD_QUERY_INFORMATION")[0] ), sizeof( "THREAD_QUERY_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_QUERY_INFORMATION")), ("THREAD_QUERY_INFORMATION") }, (ULONG)0x0040 }, { { sizeof( "THREAD_SET_THREAD_TOKEN" ) - sizeof( ("THREAD_SET_THREAD_TOKEN")[0] ), sizeof( "THREAD_SET_THREAD_TOKEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_SET_THREAD_TOKEN")), ("THREAD_SET_THREAD_TOKEN") }, (ULONG)0x0080 }, { { sizeof( "THREAD_IMPERSONATE" ) - sizeof( ("THREAD_IMPERSONATE")[0] ), sizeof( "THREAD_IMPERSONATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_IMPERSONATE")), ("THREAD_IMPERSONATE") }, (ULONG)0x0100 }, { { sizeof( "THREAD_DIRECT_IMPERSONATION" ) - sizeof( ("THREAD_DIRECT_IMPERSONATION")[0] ), sizeof( "THREAD_DIRECT_IMPERSONATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_DIRECT_IMPERSONATION")), ("THREAD_DIRECT_IMPERSONATION") }, (ULONG)0x0200 }, { { sizeof( "THREAD_SET_LIMITED_INFORMATION" ) - sizeof( ("THREAD_SET_LIMITED_INFORMATION")[0] ), sizeof( "THREAD_SET_LIMITED_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_SET_LIMITED_INFORMATION")), ("THREAD_SET_LIMITED_INFORMATION") }, (ULONG)(0x0400) }, { { sizeof( "THREAD_QUERY_LIMITED_INFORMATION" ) - sizeof( ("THREAD_QUERY_LIMITED_INFORMATION")[0] ), sizeof( "THREAD_QUERY_LIMITED_INFORMATION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_QUERY_LIMITED_INFORMATION")), ("THREAD_QUERY_LIMITED_INFORMATION") }, (ULONG)(0x0800) }, { { sizeof( "THREAD_RESUME" ) - sizeof( ("THREAD_RESUME")[0] ), sizeof( "THREAD_RESUME" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_RESUME")), ("THREAD_RESUME") }, (ULONG)(0x1000) }, { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "THREAD_ALL_ACCESS" ) - sizeof( ("THREAD_ALL_ACCESS")[0] ), sizeof( "THREAD_ALL_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_ALL_ACCESS")), ("THREAD_ALL_ACCESS") }, (ULONG)((0x000F0000L) | (0x00100000L) | 0xFFFF) }, { { sizeof( "GENERIC_ALL" ) - sizeof( ("GENERIC_ALL")[0] ), sizeof( "GENERIC_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_ALL")), ("GENERIC_ALL") }, (ULONG)(0x10000000L) }, { { sizeof( "GENERIC_EXECUTE" ) - sizeof( ("GENERIC_EXECUTE")[0] ), sizeof( "GENERIC_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_EXECUTE")), ("GENERIC_EXECUTE") }, (ULONG)(0x20000000L) }, { { sizeof( "GENERIC_WRITE" ) - sizeof( ("GENERIC_WRITE")[0] ), sizeof( "GENERIC_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_WRITE")), ("GENERIC_WRITE") }, (ULONG)(0x40000000L) }, { { sizeof( "GENERIC_READ" ) - sizeof( ("GENERIC_READ")[0] ), sizeof( "GENERIC_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("GENERIC_READ")), ("GENERIC_READ") }, (ULONG)(0x80000000L) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_THREAD_ACCESS_MASK = { .Id = 8, .Type = AHDT_ENUM, .Name = { sizeof( "THREAD_ACCESS_MASK" ) - sizeof( ("THREAD_ACCESS_MASK")[0] ), sizeof( "THREAD_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_ACCESS_MASK")), ("THREAD_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_THREAD_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_THREAD_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_THREAD_ACCESS_MASK } };
#line 195 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"




AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_MUTANT_ACCESS_MASK[] = { { { sizeof( "MUTANT_QUERY_STATE" ) - sizeof( ("MUTANT_QUERY_STATE")[0] ), sizeof( "MUTANT_QUERY_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MUTANT_QUERY_STATE")), ("MUTANT_QUERY_STATE") }, (ULONG)0x0001 }, { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "MUTANT_ALL_ACCESS" ) - sizeof( ("MUTANT_ALL_ACCESS")[0] ), sizeof( "MUTANT_ALL_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MUTANT_ALL_ACCESS")), ("MUTANT_ALL_ACCESS") }, (ULONG)((0x000F0000L) | (0x00100000L) | 0x0001) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_MUTANT_ACCESS_MASK = { .Id = 9, .Type = AHDT_ENUM, .Name = { sizeof( "MUTANT_ACCESS_MASK" ) - sizeof( ("MUTANT_ACCESS_MASK")[0] ), sizeof( "MUTANT_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MUTANT_ACCESS_MASK")), ("MUTANT_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_MUTANT_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_MUTANT_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_MUTANT_ACCESS_MASK } };
#line 214 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_EVENT_ACCESS_MASK[] = { { { sizeof( "EVENT_QUERY_STATE" ) - sizeof( ("EVENT_QUERY_STATE")[0] ), sizeof( "EVENT_QUERY_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("EVENT_QUERY_STATE")), ("EVENT_QUERY_STATE") }, (ULONG)0x0001 }, { { sizeof( "EVENT_MODIFY_STATE" ) - sizeof( ("EVENT_MODIFY_STATE")[0] ), sizeof( "EVENT_MODIFY_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("EVENT_MODIFY_STATE")), ("EVENT_MODIFY_STATE") }, (ULONG)0x0002 }, { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "EVENT_ALL_ACCESS" ) - sizeof( ("EVENT_ALL_ACCESS")[0] ), sizeof( "EVENT_ALL_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("EVENT_ALL_ACCESS")), ("EVENT_ALL_ACCESS") }, (ULONG)((0x000F0000L)|(0x00100000L)|0x3) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_EVENT_ACCESS_MASK = { .Id = 10, .Type = AHDT_ENUM, .Name = { sizeof( "EVENT_ACCESS_MASK" ) - sizeof( ("EVENT_ACCESS_MASK")[0] ), sizeof( "EVENT_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("EVENT_ACCESS_MASK")), ("EVENT_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_EVENT_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_EVENT_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_EVENT_ACCESS_MASK } };
#line 231 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_SEMAPHORE_ACCESS_MASK[] = { { { sizeof( "SEMAPHORE_QUERY_STATE" ) - sizeof( ("SEMAPHORE_QUERY_STATE")[0] ), sizeof( "SEMAPHORE_QUERY_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SEMAPHORE_QUERY_STATE")), ("SEMAPHORE_QUERY_STATE") }, (ULONG)0x0001 }, { { sizeof( "SEMAPHORE_MODIFY_STATE" ) - sizeof( ("SEMAPHORE_MODIFY_STATE")[0] ), sizeof( "SEMAPHORE_MODIFY_STATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SEMAPHORE_MODIFY_STATE")), ("SEMAPHORE_MODIFY_STATE") }, (ULONG)0x0002 }, { { sizeof( "DELETE" ) - sizeof( ("DELETE")[0] ), sizeof( "DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DELETE")), ("DELETE") }, (ULONG)(0x00010000L) }, { { sizeof( "READ_CONTROL" ) - sizeof( ("READ_CONTROL")[0] ), sizeof( "READ_CONTROL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("READ_CONTROL")), ("READ_CONTROL") }, (ULONG)(0x00020000L) }, { { sizeof( "WRITE_DAC" ) - sizeof( ("WRITE_DAC")[0] ), sizeof( "WRITE_DAC" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_DAC")), ("WRITE_DAC") }, (ULONG)(0x00040000L) }, { { sizeof( "WRITE_OWNER" ) - sizeof( ("WRITE_OWNER")[0] ), sizeof( "WRITE_OWNER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WRITE_OWNER")), ("WRITE_OWNER") }, (ULONG)(0x00080000L) }, { { sizeof( "STANDARD_RIGHTS_REQUIRED" ) - sizeof( ("STANDARD_RIGHTS_REQUIRED")[0] ), sizeof( "STANDARD_RIGHTS_REQUIRED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_REQUIRED")), ("STANDARD_RIGHTS_REQUIRED") }, (ULONG)(0x000F0000L) }, { { sizeof( "SYNCHRONIZE" ) - sizeof( ("SYNCHRONIZE")[0] ), sizeof( "SYNCHRONIZE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SYNCHRONIZE")), ("SYNCHRONIZE") }, (ULONG)(0x00100000L) }, { { sizeof( "STANDARD_RIGHTS_ALL" ) - sizeof( ("STANDARD_RIGHTS_ALL")[0] ), sizeof( "STANDARD_RIGHTS_ALL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("STANDARD_RIGHTS_ALL")), ("STANDARD_RIGHTS_ALL") }, (ULONG)(0x001F0000L) }, { { sizeof( "SEMAPHORE_ALL_ACCESS" ) - sizeof( ("SEMAPHORE_ALL_ACCESS")[0] ), sizeof( "SEMAPHORE_ALL_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SEMAPHORE_ALL_ACCESS")), ("SEMAPHORE_ALL_ACCESS") }, (ULONG)((0x000F0000L)|(0x00100000L)|0x3) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_SEMAPHORE_ACCESS_MASK = { .Id = 11, .Type = AHDT_ENUM, .Name = { sizeof( "SEMAPHORE_ACCESS_MASK" ) - sizeof( ("SEMAPHORE_ACCESS_MASK")[0] ), sizeof( "SEMAPHORE_ACCESS_MASK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SEMAPHORE_ACCESS_MASK")), ("SEMAPHORE_ACCESS_MASK") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_SEMAPHORE_ACCESS_MASK) / sizeof(AvmpHookEnumNameValue_SEMAPHORE_ACCESS_MASK[0])), .Items = AvmpHookEnumNameValue_SEMAPHORE_ACCESS_MASK } };
#line 248 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_CREATE_DISPOSITION[] = { { { sizeof( "FILE_SUPERSEDE" ) - sizeof( ("FILE_SUPERSEDE")[0] ), sizeof( "FILE_SUPERSEDE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SUPERSEDE")), ("FILE_SUPERSEDE") }, (ULONG)0x00000000 }, { { sizeof( "FILE_OPEN" ) - sizeof( ("FILE_OPEN")[0] ), sizeof( "FILE_OPEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OPEN")), ("FILE_OPEN") }, (ULONG)0x00000001 }, { { sizeof( "FILE_CREATE" ) - sizeof( ("FILE_CREATE")[0] ), sizeof( "FILE_CREATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_CREATE")), ("FILE_CREATE") }, (ULONG)0x00000002 }, { { sizeof( "FILE_OPEN_IF" ) - sizeof( ("FILE_OPEN_IF")[0] ), sizeof( "FILE_OPEN_IF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OPEN_IF")), ("FILE_OPEN_IF") }, (ULONG)0x00000003 }, { { sizeof( "FILE_OVERWRITE" ) - sizeof( ("FILE_OVERWRITE")[0] ), sizeof( "FILE_OVERWRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OVERWRITE")), ("FILE_OVERWRITE") }, (ULONG)0x00000004 }, { { sizeof( "FILE_OVERWRITE_IF" ) - sizeof( ("FILE_OVERWRITE_IF")[0] ), sizeof( "FILE_OVERWRITE_IF" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OVERWRITE_IF")), ("FILE_OVERWRITE_IF") }, (ULONG)0x00000005 }, { { sizeof( "FILE_MAXIMUM_DISPOSITION" ) - sizeof( ("FILE_MAXIMUM_DISPOSITION")[0] ), sizeof( "FILE_MAXIMUM_DISPOSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_MAXIMUM_DISPOSITION")), ("FILE_MAXIMUM_DISPOSITION") }, (ULONG)0x00000005 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_CREATE_DISPOSITION = { .Id = 12, .Type = AHDT_ENUM, .Name = { sizeof( "CREATE_DISPOSITION" ) - sizeof( ("CREATE_DISPOSITION")[0] ), sizeof( "CREATE_DISPOSITION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("CREATE_DISPOSITION")), ("CREATE_DISPOSITION") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_CREATE_DISPOSITION) / sizeof(AvmpHookEnumNameValue_CREATE_DISPOSITION[0])), .Items = AvmpHookEnumNameValue_CREATE_DISPOSITION } };
#line 259 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_CREATE_OPTIONS[] = { { { sizeof( "FILE_DIRECTORY_FILE" ) - sizeof( ("FILE_DIRECTORY_FILE")[0] ), sizeof( "FILE_DIRECTORY_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_DIRECTORY_FILE")), ("FILE_DIRECTORY_FILE") }, (ULONG)0x00000001 }, { { sizeof( "FILE_WRITE_THROUGH" ) - sizeof( ("FILE_WRITE_THROUGH")[0] ), sizeof( "FILE_WRITE_THROUGH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_WRITE_THROUGH")), ("FILE_WRITE_THROUGH") }, (ULONG)0x00000002 }, { { sizeof( "FILE_SEQUENTIAL_ONLY" ) - sizeof( ("FILE_SEQUENTIAL_ONLY")[0] ), sizeof( "FILE_SEQUENTIAL_ONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SEQUENTIAL_ONLY")), ("FILE_SEQUENTIAL_ONLY") }, (ULONG)0x00000004 }, { { sizeof( "FILE_NO_INTERMEDIATE_BUFFERING" ) - sizeof( ("FILE_NO_INTERMEDIATE_BUFFERING")[0] ), sizeof( "FILE_NO_INTERMEDIATE_BUFFERING" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_NO_INTERMEDIATE_BUFFERING")), ("FILE_NO_INTERMEDIATE_BUFFERING") }, (ULONG)0x00000008 }, { { sizeof( "FILE_SYNCHRONOUS_IO_ALERT" ) - sizeof( ("FILE_SYNCHRONOUS_IO_ALERT")[0] ), sizeof( "FILE_SYNCHRONOUS_IO_ALERT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SYNCHRONOUS_IO_ALERT")), ("FILE_SYNCHRONOUS_IO_ALERT") }, (ULONG)0x00000010 }, { { sizeof( "FILE_SYNCHRONOUS_IO_NONALERT" ) - sizeof( ("FILE_SYNCHRONOUS_IO_NONALERT")[0] ), sizeof( "FILE_SYNCHRONOUS_IO_NONALERT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SYNCHRONOUS_IO_NONALERT")), ("FILE_SYNCHRONOUS_IO_NONALERT") }, (ULONG)0x00000020 }, { { sizeof( "FILE_NON_DIRECTORY_FILE" ) - sizeof( ("FILE_NON_DIRECTORY_FILE")[0] ), sizeof( "FILE_NON_DIRECTORY_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_NON_DIRECTORY_FILE")), ("FILE_NON_DIRECTORY_FILE") }, (ULONG)0x00000040 }, { { sizeof( "FILE_CREATE_TREE_CONNECTION" ) - sizeof( ("FILE_CREATE_TREE_CONNECTION")[0] ), sizeof( "FILE_CREATE_TREE_CONNECTION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_CREATE_TREE_CONNECTION")), ("FILE_CREATE_TREE_CONNECTION") }, (ULONG)0x00000080 }, { { sizeof( "FILE_COMPLETE_IF_OPLOCKED" ) - sizeof( ("FILE_COMPLETE_IF_OPLOCKED")[0] ), sizeof( "FILE_COMPLETE_IF_OPLOCKED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_COMPLETE_IF_OPLOCKED")), ("FILE_COMPLETE_IF_OPLOCKED") }, (ULONG)0x00000100 }, { { sizeof( "FILE_NO_EA_KNOWLEDGE" ) - sizeof( ("FILE_NO_EA_KNOWLEDGE")[0] ), sizeof( "FILE_NO_EA_KNOWLEDGE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_NO_EA_KNOWLEDGE")), ("FILE_NO_EA_KNOWLEDGE") }, (ULONG)0x00000200 }, { { sizeof( "FILE_OPEN_REMOTE_INSTANCE" ) - sizeof( ("FILE_OPEN_REMOTE_INSTANCE")[0] ), sizeof( "FILE_OPEN_REMOTE_INSTANCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OPEN_REMOTE_INSTANCE")), ("FILE_OPEN_REMOTE_INSTANCE") }, (ULONG)0x00000400 }, { { sizeof( "FILE_RANDOM_ACCESS" ) - sizeof( ("FILE_RANDOM_ACCESS")[0] ), sizeof( "FILE_RANDOM_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_RANDOM_ACCESS")), ("FILE_RANDOM_ACCESS") }, (ULONG)0x00000800 }, { { sizeof( "FILE_DELETE_ON_CLOSE" ) - sizeof( ("FILE_DELETE_ON_CLOSE")[0] ), sizeof( "FILE_DELETE_ON_CLOSE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_DELETE_ON_CLOSE")), ("FILE_DELETE_ON_CLOSE") }, (ULONG)0x00001000 }, { { sizeof( "FILE_OPEN_BY_FILE_ID" ) - sizeof( ("FILE_OPEN_BY_FILE_ID")[0] ), sizeof( "FILE_OPEN_BY_FILE_ID" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OPEN_BY_FILE_ID")), ("FILE_OPEN_BY_FILE_ID") }, (ULONG)0x00002000 }, { { sizeof( "FILE_OPEN_FOR_BACKUP_INTENT" ) - sizeof( ("FILE_OPEN_FOR_BACKUP_INTENT")[0] ), sizeof( "FILE_OPEN_FOR_BACKUP_INTENT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OPEN_FOR_BACKUP_INTENT")), ("FILE_OPEN_FOR_BACKUP_INTENT") }, (ULONG)0x00004000 }, { { sizeof( "FILE_NO_COMPRESSION" ) - sizeof( ("FILE_NO_COMPRESSION")[0] ), sizeof( "FILE_NO_COMPRESSION" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_NO_COMPRESSION")), ("FILE_NO_COMPRESSION") }, (ULONG)0x00008000 }, { { sizeof( "FILE_OPEN_REQUIRING_OPLOCK" ) - sizeof( ("FILE_OPEN_REQUIRING_OPLOCK")[0] ), sizeof( "FILE_OPEN_REQUIRING_OPLOCK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_OPEN_REQUIRING_OPLOCK")), ("FILE_OPEN_REQUIRING_OPLOCK") }, (ULONG)0x00010000 }, { { sizeof( "FILE_DISALLOW_EXCLUSIVE" ) - sizeof( ("FILE_DISALLOW_EXCLUSIVE")[0] ), sizeof( "FILE_DISALLOW_EXCLUSIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_DISALLOW_EXCLUSIVE")), ("FILE_DISALLOW_EXCLUSIVE") }, (ULONG)0x00020000 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_CREATE_OPTIONS = { .Id = 13, .Type = AHDT_ENUM, .Name = { sizeof( "CREATE_OPTIONS" ) - sizeof( ("CREATE_OPTIONS")[0] ), sizeof( "CREATE_OPTIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("CREATE_OPTIONS")), ("CREATE_OPTIONS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_CREATE_OPTIONS) / sizeof(AvmpHookEnumNameValue_CREATE_OPTIONS[0])), .Items = AvmpHookEnumNameValue_CREATE_OPTIONS } };
#line 281 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_FILE_ATTRIBUTES[] = { { { sizeof( "FILE_ATTRIBUTE_READONLY" ) - sizeof( ("FILE_ATTRIBUTE_READONLY")[0] ), sizeof( "FILE_ATTRIBUTE_READONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_READONLY")), ("FILE_ATTRIBUTE_READONLY") }, (ULONG)0x00000001 }, { { sizeof( "FILE_ATTRIBUTE_HIDDEN" ) - sizeof( ("FILE_ATTRIBUTE_HIDDEN")[0] ), sizeof( "FILE_ATTRIBUTE_HIDDEN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_HIDDEN")), ("FILE_ATTRIBUTE_HIDDEN") }, (ULONG)0x00000002 }, { { sizeof( "FILE_ATTRIBUTE_SYSTEM" ) - sizeof( ("FILE_ATTRIBUTE_SYSTEM")[0] ), sizeof( "FILE_ATTRIBUTE_SYSTEM" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_SYSTEM")), ("FILE_ATTRIBUTE_SYSTEM") }, (ULONG)0x00000004 }, { { sizeof( "FILE_ATTRIBUTE_DIRECTORY" ) - sizeof( ("FILE_ATTRIBUTE_DIRECTORY")[0] ), sizeof( "FILE_ATTRIBUTE_DIRECTORY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_DIRECTORY")), ("FILE_ATTRIBUTE_DIRECTORY") }, (ULONG)0x00000010 }, { { sizeof( "FILE_ATTRIBUTE_ARCHIVE" ) - sizeof( ("FILE_ATTRIBUTE_ARCHIVE")[0] ), sizeof( "FILE_ATTRIBUTE_ARCHIVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_ARCHIVE")), ("FILE_ATTRIBUTE_ARCHIVE") }, (ULONG)0x00000020 }, { { sizeof( "FILE_ATTRIBUTE_DEVICE" ) - sizeof( ("FILE_ATTRIBUTE_DEVICE")[0] ), sizeof( "FILE_ATTRIBUTE_DEVICE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_DEVICE")), ("FILE_ATTRIBUTE_DEVICE") }, (ULONG)0x00000040 }, { { sizeof( "FILE_ATTRIBUTE_NORMAL" ) - sizeof( ("FILE_ATTRIBUTE_NORMAL")[0] ), sizeof( "FILE_ATTRIBUTE_NORMAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_NORMAL")), ("FILE_ATTRIBUTE_NORMAL") }, (ULONG)0x00000080 }, { { sizeof( "FILE_ATTRIBUTE_TEMPORARY" ) - sizeof( ("FILE_ATTRIBUTE_TEMPORARY")[0] ), sizeof( "FILE_ATTRIBUTE_TEMPORARY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_TEMPORARY")), ("FILE_ATTRIBUTE_TEMPORARY") }, (ULONG)0x00000100 }, { { sizeof( "FILE_ATTRIBUTE_SPARSE_FILE" ) - sizeof( ("FILE_ATTRIBUTE_SPARSE_FILE")[0] ), sizeof( "FILE_ATTRIBUTE_SPARSE_FILE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_SPARSE_FILE")), ("FILE_ATTRIBUTE_SPARSE_FILE") }, (ULONG)0x00000200 }, { { sizeof( "FILE_ATTRIBUTE_REPARSE_POINT" ) - sizeof( ("FILE_ATTRIBUTE_REPARSE_POINT")[0] ), sizeof( "FILE_ATTRIBUTE_REPARSE_POINT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_REPARSE_POINT")), ("FILE_ATTRIBUTE_REPARSE_POINT") }, (ULONG)0x00000400 }, { { sizeof( "FILE_ATTRIBUTE_COMPRESSED" ) - sizeof( ("FILE_ATTRIBUTE_COMPRESSED")[0] ), sizeof( "FILE_ATTRIBUTE_COMPRESSED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_COMPRESSED")), ("FILE_ATTRIBUTE_COMPRESSED") }, (ULONG)0x00000800 }, { { sizeof( "FILE_ATTRIBUTE_OFFLINE" ) - sizeof( ("FILE_ATTRIBUTE_OFFLINE")[0] ), sizeof( "FILE_ATTRIBUTE_OFFLINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_OFFLINE")), ("FILE_ATTRIBUTE_OFFLINE") }, (ULONG)0x00001000 }, { { sizeof( "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" ) - sizeof( ("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED")[0] ), sizeof( "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED")), ("FILE_ATTRIBUTE_NOT_CONTENT_INDEXED") }, (ULONG)0x00002000 }, { { sizeof( "FILE_ATTRIBUTE_ENCRYPTED" ) - sizeof( ("FILE_ATTRIBUTE_ENCRYPTED")[0] ), sizeof( "FILE_ATTRIBUTE_ENCRYPTED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_ENCRYPTED")), ("FILE_ATTRIBUTE_ENCRYPTED") }, (ULONG)0x00004000 }, { { sizeof( "FILE_ATTRIBUTE_VIRTUAL" ) - sizeof( ("FILE_ATTRIBUTE_VIRTUAL")[0] ), sizeof( "FILE_ATTRIBUTE_VIRTUAL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTE_VIRTUAL")), ("FILE_ATTRIBUTE_VIRTUAL") }, (ULONG)0x00010000 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_FILE_ATTRIBUTES = { .Id = 14, .Type = AHDT_ENUM, .Name = { sizeof( "FILE_ATTRIBUTES" ) - sizeof( ("FILE_ATTRIBUTES")[0] ), sizeof( "FILE_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_ATTRIBUTES")), ("FILE_ATTRIBUTES") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_FILE_ATTRIBUTES) / sizeof(AvmpHookEnumNameValue_FILE_ATTRIBUTES[0])), .Items = AvmpHookEnumNameValue_FILE_ATTRIBUTES } };
#line 300 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_SHARE_ACCESS[] = { { { sizeof( "FILE_SHARE_READ" ) - sizeof( ("FILE_SHARE_READ")[0] ), sizeof( "FILE_SHARE_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SHARE_READ")), ("FILE_SHARE_READ") }, (ULONG)0x00000001 }, { { sizeof( "FILE_SHARE_WRITE" ) - sizeof( ("FILE_SHARE_WRITE")[0] ), sizeof( "FILE_SHARE_WRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SHARE_WRITE")), ("FILE_SHARE_WRITE") }, (ULONG)0x00000002 }, { { sizeof( "FILE_SHARE_DELETE" ) - sizeof( ("FILE_SHARE_DELETE")[0] ), sizeof( "FILE_SHARE_DELETE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_SHARE_DELETE")), ("FILE_SHARE_DELETE") }, (ULONG)0x00000004 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_SHARE_ACCESS = { .Id = 15, .Type = AHDT_ENUM, .Name = { sizeof( "SHARE_ACCESS" ) - sizeof( ("SHARE_ACCESS")[0] ), sizeof( "SHARE_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SHARE_ACCESS")), ("SHARE_ACCESS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_SHARE_ACCESS) / sizeof(AvmpHookEnumNameValue_SHARE_ACCESS[0])), .Items = AvmpHookEnumNameValue_SHARE_ACCESS } };
#line 307 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_SECTION_INHERIT[] = { { { sizeof( "ViewShare" ) - sizeof( ("ViewShare")[0] ), sizeof( "ViewShare" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ViewShare")), ("ViewShare") }, (ULONG)ViewShare }, { { sizeof( "ViewUnmap" ) - sizeof( ("ViewUnmap")[0] ), sizeof( "ViewUnmap" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ViewUnmap")), ("ViewUnmap") }, (ULONG)ViewUnmap }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_SECTION_INHERIT = { .Id = 16, .Type = AHDT_ENUM, .Name = { sizeof( "SECTION_INHERIT" ) - sizeof( ("SECTION_INHERIT")[0] ), sizeof( "SECTION_INHERIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SECTION_INHERIT")), ("SECTION_INHERIT") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_SECTION_INHERIT) / sizeof(AvmpHookEnumNameValue_SECTION_INHERIT[0])), .Items = AvmpHookEnumNameValue_SECTION_INHERIT } };
#line 313 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_KEY_VALUE_INFORMATION_CLASS[] = { { { sizeof( "KeyValueBasicInformation" ) - sizeof( ("KeyValueBasicInformation")[0] ), sizeof( "KeyValueBasicInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KeyValueBasicInformation")), ("KeyValueBasicInformation") }, (ULONG)KeyValueBasicInformation }, { { sizeof( "KeyValueFullInformation" ) - sizeof( ("KeyValueFullInformation")[0] ), sizeof( "KeyValueFullInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KeyValueFullInformation")), ("KeyValueFullInformation") }, (ULONG)KeyValueFullInformation }, { { sizeof( "KeyValuePartialInformation" ) - sizeof( ("KeyValuePartialInformation")[0] ), sizeof( "KeyValuePartialInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KeyValuePartialInformation")), ("KeyValuePartialInformation") }, (ULONG)KeyValuePartialInformation }, { { sizeof( "KeyValueFullInformationAlign64" ) - sizeof( ("KeyValueFullInformationAlign64")[0] ), sizeof( "KeyValueFullInformationAlign64" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KeyValueFullInformationAlign64")), ("KeyValueFullInformationAlign64") }, (ULONG)KeyValueFullInformationAlign64 }, { { sizeof( "KeyValuePartialInformationAlign64" ) - sizeof( ("KeyValuePartialInformationAlign64")[0] ), sizeof( "KeyValuePartialInformationAlign64" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KeyValuePartialInformationAlign64")), ("KeyValuePartialInformationAlign64") }, (ULONG)KeyValuePartialInformationAlign64 }, { { sizeof( "KeyValueLayerInformation" ) - sizeof( ("KeyValueLayerInformation")[0] ), sizeof( "KeyValueLayerInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KeyValueLayerInformation")), ("KeyValueLayerInformation") }, (ULONG)KeyValueLayerInformation }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_KEY_VALUE_INFORMATION_CLASS = { .Id = 17, .Type = AHDT_ENUM, .Name = { sizeof( "KEY_VALUE_INFORMATION_CLASS" ) - sizeof( ("KEY_VALUE_INFORMATION_CLASS")[0] ), sizeof( "KEY_VALUE_INFORMATION_CLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("KEY_VALUE_INFORMATION_CLASS")), ("KEY_VALUE_INFORMATION_CLASS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_KEY_VALUE_INFORMATION_CLASS) / sizeof(AvmpHookEnumNameValue_KEY_VALUE_INFORMATION_CLASS[0])), .Items = AvmpHookEnumNameValue_KEY_VALUE_INFORMATION_CLASS } };
#line 323 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_REG_TYPE[] = { { { sizeof( "REG_NONE" ) - sizeof( ("REG_NONE")[0] ), sizeof( "REG_NONE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_NONE")), ("REG_NONE") }, (ULONG)( 0ul ) }, { { sizeof( "REG_SZ" ) - sizeof( ("REG_SZ")[0] ), sizeof( "REG_SZ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_SZ")), ("REG_SZ") }, (ULONG)( 1ul ) }, { { sizeof( "REG_EXPAND_SZ" ) - sizeof( ("REG_EXPAND_SZ")[0] ), sizeof( "REG_EXPAND_SZ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_EXPAND_SZ")), ("REG_EXPAND_SZ") }, (ULONG)( 2ul ) }, { { sizeof( "REG_BINARY" ) - sizeof( ("REG_BINARY")[0] ), sizeof( "REG_BINARY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_BINARY")), ("REG_BINARY") }, (ULONG)( 3ul ) }, { { sizeof( "REG_DWORD" ) - sizeof( ("REG_DWORD")[0] ), sizeof( "REG_DWORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_DWORD")), ("REG_DWORD") }, (ULONG)( 4ul ) }, { { sizeof( "REG_DWORD_LITTLE_ENDIAN" ) - sizeof( ("REG_DWORD_LITTLE_ENDIAN")[0] ), sizeof( "REG_DWORD_LITTLE_ENDIAN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_DWORD_LITTLE_ENDIAN")), ("REG_DWORD_LITTLE_ENDIAN") }, (ULONG)( 4ul ) }, { { sizeof( "REG_DWORD_BIG_ENDIAN" ) - sizeof( ("REG_DWORD_BIG_ENDIAN")[0] ), sizeof( "REG_DWORD_BIG_ENDIAN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_DWORD_BIG_ENDIAN")), ("REG_DWORD_BIG_ENDIAN") }, (ULONG)( 5ul ) }, { { sizeof( "REG_LINK" ) - sizeof( ("REG_LINK")[0] ), sizeof( "REG_LINK" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_LINK")), ("REG_LINK") }, (ULONG)( 6ul ) }, { { sizeof( "REG_MULTI_SZ" ) - sizeof( ("REG_MULTI_SZ")[0] ), sizeof( "REG_MULTI_SZ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_MULTI_SZ")), ("REG_MULTI_SZ") }, (ULONG)( 7ul ) }, { { sizeof( "REG_RESOURCE_LIST" ) - sizeof( ("REG_RESOURCE_LIST")[0] ), sizeof( "REG_RESOURCE_LIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_RESOURCE_LIST")), ("REG_RESOURCE_LIST") }, (ULONG)( 8ul ) }, { { sizeof( "REG_FULL_RESOURCE_DESCRIPTOR" ) - sizeof( ("REG_FULL_RESOURCE_DESCRIPTOR")[0] ), sizeof( "REG_FULL_RESOURCE_DESCRIPTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_FULL_RESOURCE_DESCRIPTOR")), ("REG_FULL_RESOURCE_DESCRIPTOR") }, (ULONG)( 9ul ) }, { { sizeof( "REG_RESOURCE_REQUIREMENTS_LIST" ) - sizeof( ("REG_RESOURCE_REQUIREMENTS_LIST")[0] ), sizeof( "REG_RESOURCE_REQUIREMENTS_LIST" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_RESOURCE_REQUIREMENTS_LIST")), ("REG_RESOURCE_REQUIREMENTS_LIST") }, (ULONG)( 10ul ) }, { { sizeof( "REG_QWORD" ) - sizeof( ("REG_QWORD")[0] ), sizeof( "REG_QWORD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_QWORD")), ("REG_QWORD") }, (ULONG)( 11ul ) }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_REG_TYPE = { .Id = 18, .Type = AHDT_ENUM, .Name = { sizeof( "REG_TYPE" ) - sizeof( ("REG_TYPE")[0] ), sizeof( "REG_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("REG_TYPE")), ("REG_TYPE") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_REG_TYPE) / sizeof(AvmpHookEnumNameValue_REG_TYPE[0])), .Items = AvmpHookEnumNameValue_REG_TYPE } };
#line 340 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_ALLOCATION_TYPE[] = { { { sizeof( "MEM_COMMIT" ) - sizeof( ("MEM_COMMIT")[0] ), sizeof( "MEM_COMMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_COMMIT")), ("MEM_COMMIT") }, (ULONG)0x00001000 }, { { sizeof( "MEM_RESERVE" ) - sizeof( ("MEM_RESERVE")[0] ), sizeof( "MEM_RESERVE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_RESERVE")), ("MEM_RESERVE") }, (ULONG)0x00002000 }, { { sizeof( "MEM_DECOMMIT" ) - sizeof( ("MEM_DECOMMIT")[0] ), sizeof( "MEM_DECOMMIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_DECOMMIT")), ("MEM_DECOMMIT") }, (ULONG)0x00004000 }, { { sizeof( "MEM_RELEASE" ) - sizeof( ("MEM_RELEASE")[0] ), sizeof( "MEM_RELEASE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_RELEASE")), ("MEM_RELEASE") }, (ULONG)0x00008000 }, { { sizeof( "MEM_FREE" ) - sizeof( ("MEM_FREE")[0] ), sizeof( "MEM_FREE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_FREE")), ("MEM_FREE") }, (ULONG)0x00010000 }, { { sizeof( "MEM_PRIVATE" ) - sizeof( ("MEM_PRIVATE")[0] ), sizeof( "MEM_PRIVATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_PRIVATE")), ("MEM_PRIVATE") }, (ULONG)0x00020000 }, { { sizeof( "MEM_MAPPED" ) - sizeof( ("MEM_MAPPED")[0] ), sizeof( "MEM_MAPPED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_MAPPED")), ("MEM_MAPPED") }, (ULONG)0x00040000 }, { { sizeof( "MEM_RESET" ) - sizeof( ("MEM_RESET")[0] ), sizeof( "MEM_RESET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_RESET")), ("MEM_RESET") }, (ULONG)0x00080000 }, { { sizeof( "MEM_TOP_DOWN" ) - sizeof( ("MEM_TOP_DOWN")[0] ), sizeof( "MEM_TOP_DOWN" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_TOP_DOWN")), ("MEM_TOP_DOWN") }, (ULONG)0x00100000 }, { { sizeof( "MEM_RESET_UNDO" ) - sizeof( ("MEM_RESET_UNDO")[0] ), sizeof( "MEM_RESET_UNDO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_RESET_UNDO")), ("MEM_RESET_UNDO") }, (ULONG)0x01000000 }, { { sizeof( "MEM_LARGE_PAGES" ) - sizeof( ("MEM_LARGE_PAGES")[0] ), sizeof( "MEM_LARGE_PAGES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("MEM_LARGE_PAGES")), ("MEM_LARGE_PAGES") }, (ULONG)0x20000000 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_ALLOCATION_TYPE = { .Id = 19, .Type = AHDT_ENUM, .Name = { sizeof( "ALLOCATION_TYPE" ) - sizeof( ("ALLOCATION_TYPE")[0] ), sizeof( "ALLOCATION_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ALLOCATION_TYPE")), ("ALLOCATION_TYPE") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_ALLOCATION_TYPE) / sizeof(AvmpHookEnumNameValue_ALLOCATION_TYPE[0])), .Items = AvmpHookEnumNameValue_ALLOCATION_TYPE } };
#line 355 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_PAGE_PROTECT[] = { { { sizeof( "PAGE_NOACCESS" ) - sizeof( ("PAGE_NOACCESS")[0] ), sizeof( "PAGE_NOACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_NOACCESS")), ("PAGE_NOACCESS") }, (ULONG)0x01 }, { { sizeof( "PAGE_READONLY" ) - sizeof( ("PAGE_READONLY")[0] ), sizeof( "PAGE_READONLY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_READONLY")), ("PAGE_READONLY") }, (ULONG)0x02 }, { { sizeof( "PAGE_READWRITE" ) - sizeof( ("PAGE_READWRITE")[0] ), sizeof( "PAGE_READWRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_READWRITE")), ("PAGE_READWRITE") }, (ULONG)0x04 }, { { sizeof( "PAGE_WRITECOPY" ) - sizeof( ("PAGE_WRITECOPY")[0] ), sizeof( "PAGE_WRITECOPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_WRITECOPY")), ("PAGE_WRITECOPY") }, (ULONG)0x08 }, { { sizeof( "PAGE_EXECUTE" ) - sizeof( ("PAGE_EXECUTE")[0] ), sizeof( "PAGE_EXECUTE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_EXECUTE")), ("PAGE_EXECUTE") }, (ULONG)0x10 }, { { sizeof( "PAGE_EXECUTE_READ" ) - sizeof( ("PAGE_EXECUTE_READ")[0] ), sizeof( "PAGE_EXECUTE_READ" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_EXECUTE_READ")), ("PAGE_EXECUTE_READ") }, (ULONG)0x20 }, { { sizeof( "PAGE_EXECUTE_READWRITE" ) - sizeof( ("PAGE_EXECUTE_READWRITE")[0] ), sizeof( "PAGE_EXECUTE_READWRITE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_EXECUTE_READWRITE")), ("PAGE_EXECUTE_READWRITE") }, (ULONG)0x40 }, { { sizeof( "PAGE_EXECUTE_WRITECOPY" ) - sizeof( ("PAGE_EXECUTE_WRITECOPY")[0] ), sizeof( "PAGE_EXECUTE_WRITECOPY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_EXECUTE_WRITECOPY")), ("PAGE_EXECUTE_WRITECOPY") }, (ULONG)0x80 }, { { sizeof( "PAGE_GUARD" ) - sizeof( ("PAGE_GUARD")[0] ), sizeof( "PAGE_GUARD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_GUARD")), ("PAGE_GUARD") }, (ULONG)0x100 }, { { sizeof( "PAGE_NOCACHE" ) - sizeof( ("PAGE_NOCACHE")[0] ), sizeof( "PAGE_NOCACHE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_NOCACHE")), ("PAGE_NOCACHE") }, (ULONG)0x200 }, { { sizeof( "PAGE_WRITECOMBINE" ) - sizeof( ("PAGE_WRITECOMBINE")[0] ), sizeof( "PAGE_WRITECOMBINE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_WRITECOMBINE")), ("PAGE_WRITECOMBINE") }, (ULONG)0x400 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_PAGE_PROTECT = { .Id = 20, .Type = AHDT_ENUM, .Name = { sizeof( "PAGE_PROTECT" ) - sizeof( ("PAGE_PROTECT")[0] ), sizeof( "PAGE_PROTECT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PAGE_PROTECT")), ("PAGE_PROTECT") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_PAGE_PROTECT) / sizeof(AvmpHookEnumNameValue_PAGE_PROTECT[0])), .Items = AvmpHookEnumNameValue_PAGE_PROTECT } };
#line 370 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_FILE_INFORMATION_CLASS[] = { { { sizeof( "FileDirectoryInformation" ) - sizeof( ("FileDirectoryInformation")[0] ), sizeof( "FileDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileDirectoryInformation")), ("FileDirectoryInformation") }, (ULONG)FileDirectoryInformation }, { { sizeof( "FileFullDirectoryInformation" ) - sizeof( ("FileFullDirectoryInformation")[0] ), sizeof( "FileFullDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFullDirectoryInformation")), ("FileFullDirectoryInformation") }, (ULONG)FileFullDirectoryInformation }, { { sizeof( "FileBothDirectoryInformation" ) - sizeof( ("FileBothDirectoryInformation")[0] ), sizeof( "FileBothDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileBothDirectoryInformation")), ("FileBothDirectoryInformation") }, (ULONG)FileBothDirectoryInformation }, { { sizeof( "FileBasicInformation" ) - sizeof( ("FileBasicInformation")[0] ), sizeof( "FileBasicInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileBasicInformation")), ("FileBasicInformation") }, (ULONG)FileBasicInformation }, { { sizeof( "FileStandardInformation" ) - sizeof( ("FileStandardInformation")[0] ), sizeof( "FileStandardInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileStandardInformation")), ("FileStandardInformation") }, (ULONG)FileStandardInformation }, { { sizeof( "FileInternalInformation" ) - sizeof( ("FileInternalInformation")[0] ), sizeof( "FileInternalInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileInternalInformation")), ("FileInternalInformation") }, (ULONG)FileInternalInformation }, { { sizeof( "FileEaInformation" ) - sizeof( ("FileEaInformation")[0] ), sizeof( "FileEaInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileEaInformation")), ("FileEaInformation") }, (ULONG)FileEaInformation }, { { sizeof( "FileAccessInformation" ) - sizeof( ("FileAccessInformation")[0] ), sizeof( "FileAccessInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileAccessInformation")), ("FileAccessInformation") }, (ULONG)FileAccessInformation }, { { sizeof( "FileNameInformation" ) - sizeof( ("FileNameInformation")[0] ), sizeof( "FileNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileNameInformation")), ("FileNameInformation") }, (ULONG)FileNameInformation }, { { sizeof( "FileRenameInformation" ) - sizeof( ("FileRenameInformation")[0] ), sizeof( "FileRenameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileRenameInformation")), ("FileRenameInformation") }, (ULONG)FileRenameInformation }, { { sizeof( "FileLinkInformation" ) - sizeof( ("FileLinkInformation")[0] ), sizeof( "FileLinkInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileLinkInformation")), ("FileLinkInformation") }, (ULONG)FileLinkInformation }, { { sizeof( "FileNamesInformation" ) - sizeof( ("FileNamesInformation")[0] ), sizeof( "FileNamesInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileNamesInformation")), ("FileNamesInformation") }, (ULONG)FileNamesInformation }, { { sizeof( "FileDispositionInformation" ) - sizeof( ("FileDispositionInformation")[0] ), sizeof( "FileDispositionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileDispositionInformation")), ("FileDispositionInformation") }, (ULONG)FileDispositionInformation }, { { sizeof( "FilePositionInformation" ) - sizeof( ("FilePositionInformation")[0] ), sizeof( "FilePositionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FilePositionInformation")), ("FilePositionInformation") }, (ULONG)FilePositionInformation }, { { sizeof( "FileFullEaInformation" ) - sizeof( ("FileFullEaInformation")[0] ), sizeof( "FileFullEaInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFullEaInformation")), ("FileFullEaInformation") }, (ULONG)FileFullEaInformation }, { { sizeof( "FileModeInformation" ) - sizeof( ("FileModeInformation")[0] ), sizeof( "FileModeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileModeInformation")), ("FileModeInformation") }, (ULONG)FileModeInformation }, { { sizeof( "FileAlignmentInformation" ) - sizeof( ("FileAlignmentInformation")[0] ), sizeof( "FileAlignmentInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileAlignmentInformation")), ("FileAlignmentInformation") }, (ULONG)FileAlignmentInformation }, { { sizeof( "FileAllInformation" ) - sizeof( ("FileAllInformation")[0] ), sizeof( "FileAllInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileAllInformation")), ("FileAllInformation") }, (ULONG)FileAllInformation }, { { sizeof( "FileAllocationInformation" ) - sizeof( ("FileAllocationInformation")[0] ), sizeof( "FileAllocationInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileAllocationInformation")), ("FileAllocationInformation") }, (ULONG)FileAllocationInformation }, { { sizeof( "FileEndOfFileInformation" ) - sizeof( ("FileEndOfFileInformation")[0] ), sizeof( "FileEndOfFileInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileEndOfFileInformation")), ("FileEndOfFileInformation") }, (ULONG)FileEndOfFileInformation }, { { sizeof( "FileAlternateNameInformation" ) - sizeof( ("FileAlternateNameInformation")[0] ), sizeof( "FileAlternateNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileAlternateNameInformation")), ("FileAlternateNameInformation") }, (ULONG)FileAlternateNameInformation }, { { sizeof( "FileStreamInformation" ) - sizeof( ("FileStreamInformation")[0] ), sizeof( "FileStreamInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileStreamInformation")), ("FileStreamInformation") }, (ULONG)FileStreamInformation }, { { sizeof( "FilePipeInformation" ) - sizeof( ("FilePipeInformation")[0] ), sizeof( "FilePipeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FilePipeInformation")), ("FilePipeInformation") }, (ULONG)FilePipeInformation }, { { sizeof( "FilePipeLocalInformation" ) - sizeof( ("FilePipeLocalInformation")[0] ), sizeof( "FilePipeLocalInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FilePipeLocalInformation")), ("FilePipeLocalInformation") }, (ULONG)FilePipeLocalInformation }, { { sizeof( "FilePipeRemoteInformation" ) - sizeof( ("FilePipeRemoteInformation")[0] ), sizeof( "FilePipeRemoteInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FilePipeRemoteInformation")), ("FilePipeRemoteInformation") }, (ULONG)FilePipeRemoteInformation }, { { sizeof( "FileMailslotQueryInformation" ) - sizeof( ("FileMailslotQueryInformation")[0] ), sizeof( "FileMailslotQueryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileMailslotQueryInformation")), ("FileMailslotQueryInformation") }, (ULONG)FileMailslotQueryInformation }, { { sizeof( "FileMailslotSetInformation" ) - sizeof( ("FileMailslotSetInformation")[0] ), sizeof( "FileMailslotSetInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileMailslotSetInformation")), ("FileMailslotSetInformation") }, (ULONG)FileMailslotSetInformation }, { { sizeof( "FileCompressionInformation" ) - sizeof( ("FileCompressionInformation")[0] ), sizeof( "FileCompressionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileCompressionInformation")), ("FileCompressionInformation") }, (ULONG)FileCompressionInformation }, { { sizeof( "FileObjectIdInformation" ) - sizeof( ("FileObjectIdInformation")[0] ), sizeof( "FileObjectIdInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileObjectIdInformation")), ("FileObjectIdInformation") }, (ULONG)FileObjectIdInformation }, { { sizeof( "FileCompletionInformation" ) - sizeof( ("FileCompletionInformation")[0] ), sizeof( "FileCompletionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileCompletionInformation")), ("FileCompletionInformation") }, (ULONG)FileCompletionInformation }, { { sizeof( "FileMoveClusterInformation" ) - sizeof( ("FileMoveClusterInformation")[0] ), sizeof( "FileMoveClusterInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileMoveClusterInformation")), ("FileMoveClusterInformation") }, (ULONG)FileMoveClusterInformation }, { { sizeof( "FileQuotaInformation" ) - sizeof( ("FileQuotaInformation")[0] ), sizeof( "FileQuotaInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileQuotaInformation")), ("FileQuotaInformation") }, (ULONG)FileQuotaInformation }, { { sizeof( "FileReparsePointInformation" ) - sizeof( ("FileReparsePointInformation")[0] ), sizeof( "FileReparsePointInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileReparsePointInformation")), ("FileReparsePointInformation") }, (ULONG)FileReparsePointInformation }, { { sizeof( "FileNetworkOpenInformation" ) - sizeof( ("FileNetworkOpenInformation")[0] ), sizeof( "FileNetworkOpenInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileNetworkOpenInformation")), ("FileNetworkOpenInformation") }, (ULONG)FileNetworkOpenInformation }, { { sizeof( "FileAttributeTagInformation" ) - sizeof( ("FileAttributeTagInformation")[0] ), sizeof( "FileAttributeTagInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileAttributeTagInformation")), ("FileAttributeTagInformation") }, (ULONG)FileAttributeTagInformation }, { { sizeof( "FileTrackingInformation" ) - sizeof( ("FileTrackingInformation")[0] ), sizeof( "FileTrackingInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileTrackingInformation")), ("FileTrackingInformation") }, (ULONG)FileTrackingInformation }, { { sizeof( "FileIdBothDirectoryInformation" ) - sizeof( ("FileIdBothDirectoryInformation")[0] ), sizeof( "FileIdBothDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIdBothDirectoryInformation")), ("FileIdBothDirectoryInformation") }, (ULONG)FileIdBothDirectoryInformation }, { { sizeof( "FileIdFullDirectoryInformation" ) - sizeof( ("FileIdFullDirectoryInformation")[0] ), sizeof( "FileIdFullDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIdFullDirectoryInformation")), ("FileIdFullDirectoryInformation") }, (ULONG)FileIdFullDirectoryInformation }, { { sizeof( "FileValidDataLengthInformation" ) - sizeof( ("FileValidDataLengthInformation")[0] ), sizeof( "FileValidDataLengthInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileValidDataLengthInformation")), ("FileValidDataLengthInformation") }, (ULONG)FileValidDataLengthInformation }, { { sizeof( "FileShortNameInformation" ) - sizeof( ("FileShortNameInformation")[0] ), sizeof( "FileShortNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileShortNameInformation")), ("FileShortNameInformation") }, (ULONG)FileShortNameInformation }, { { sizeof( "FileIoCompletionNotificationInformation" ) - sizeof( ("FileIoCompletionNotificationInformation")[0] ), sizeof( "FileIoCompletionNotificationInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIoCompletionNotificationInformation")), ("FileIoCompletionNotificationInformation") }, (ULONG)FileIoCompletionNotificationInformation }, { { sizeof( "FileIoStatusBlockRangeInformation" ) - sizeof( ("FileIoStatusBlockRangeInformation")[0] ), sizeof( "FileIoStatusBlockRangeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIoStatusBlockRangeInformation")), ("FileIoStatusBlockRangeInformation") }, (ULONG)FileIoStatusBlockRangeInformation }, { { sizeof( "FileIoPriorityHintInformation" ) - sizeof( ("FileIoPriorityHintInformation")[0] ), sizeof( "FileIoPriorityHintInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIoPriorityHintInformation")), ("FileIoPriorityHintInformation") }, (ULONG)FileIoPriorityHintInformation }, { { sizeof( "FileSfioReserveInformation" ) - sizeof( ("FileSfioReserveInformation")[0] ), sizeof( "FileSfioReserveInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileSfioReserveInformation")), ("FileSfioReserveInformation") }, (ULONG)FileSfioReserveInformation }, { { sizeof( "FileSfioVolumeInformation" ) - sizeof( ("FileSfioVolumeInformation")[0] ), sizeof( "FileSfioVolumeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileSfioVolumeInformation")), ("FileSfioVolumeInformation") }, (ULONG)FileSfioVolumeInformation }, { { sizeof( "FileHardLinkInformation" ) - sizeof( ("FileHardLinkInformation")[0] ), sizeof( "FileHardLinkInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileHardLinkInformation")), ("FileHardLinkInformation") }, (ULONG)FileHardLinkInformation }, { { sizeof( "FileProcessIdsUsingFileInformation" ) - sizeof( ("FileProcessIdsUsingFileInformation")[0] ), sizeof( "FileProcessIdsUsingFileInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileProcessIdsUsingFileInformation")), ("FileProcessIdsUsingFileInformation") }, (ULONG)FileProcessIdsUsingFileInformation }, { { sizeof( "FileNormalizedNameInformation" ) - sizeof( ("FileNormalizedNameInformation")[0] ), sizeof( "FileNormalizedNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileNormalizedNameInformation")), ("FileNormalizedNameInformation") }, (ULONG)FileNormalizedNameInformation }, { { sizeof( "FileNetworkPhysicalNameInformation" ) - sizeof( ("FileNetworkPhysicalNameInformation")[0] ), sizeof( "FileNetworkPhysicalNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileNetworkPhysicalNameInformation")), ("FileNetworkPhysicalNameInformation") }, (ULONG)FileNetworkPhysicalNameInformation }, { { sizeof( "FileIdGlobalTxDirectoryInformation" ) - sizeof( ("FileIdGlobalTxDirectoryInformation")[0] ), sizeof( "FileIdGlobalTxDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIdGlobalTxDirectoryInformation")), ("FileIdGlobalTxDirectoryInformation") }, (ULONG)FileIdGlobalTxDirectoryInformation }, { { sizeof( "FileIsRemoteDeviceInformation" ) - sizeof( ("FileIsRemoteDeviceInformation")[0] ), sizeof( "FileIsRemoteDeviceInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIsRemoteDeviceInformation")), ("FileIsRemoteDeviceInformation") }, (ULONG)FileIsRemoteDeviceInformation }, { { sizeof( "FileUnusedInformation" ) - sizeof( ("FileUnusedInformation")[0] ), sizeof( "FileUnusedInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileUnusedInformation")), ("FileUnusedInformation") }, (ULONG)FileUnusedInformation }, { { sizeof( "FileNumaNodeInformation" ) - sizeof( ("FileNumaNodeInformation")[0] ), sizeof( "FileNumaNodeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileNumaNodeInformation")), ("FileNumaNodeInformation") }, (ULONG)FileNumaNodeInformation }, { { sizeof( "FileStandardLinkInformation" ) - sizeof( ("FileStandardLinkInformation")[0] ), sizeof( "FileStandardLinkInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileStandardLinkInformation")), ("FileStandardLinkInformation") }, (ULONG)FileStandardLinkInformation }, { { sizeof( "FileRemoteProtocolInformation" ) - sizeof( ("FileRemoteProtocolInformation")[0] ), sizeof( "FileRemoteProtocolInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileRemoteProtocolInformation")), ("FileRemoteProtocolInformation") }, (ULONG)FileRemoteProtocolInformation }, { { sizeof( "FileRenameInformationBypassAccessCheck" ) - sizeof( ("FileRenameInformationBypassAccessCheck")[0] ), sizeof( "FileRenameInformationBypassAccessCheck" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileRenameInformationBypassAccessCheck")), ("FileRenameInformationBypassAccessCheck") }, (ULONG)FileRenameInformationBypassAccessCheck }, { { sizeof( "FileLinkInformationBypassAccessCheck" ) - sizeof( ("FileLinkInformationBypassAccessCheck")[0] ), sizeof( "FileLinkInformationBypassAccessCheck" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileLinkInformationBypassAccessCheck")), ("FileLinkInformationBypassAccessCheck") }, (ULONG)FileLinkInformationBypassAccessCheck }, { { sizeof( "FileVolumeNameInformation" ) - sizeof( ("FileVolumeNameInformation")[0] ), sizeof( "FileVolumeNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileVolumeNameInformation")), ("FileVolumeNameInformation") }, (ULONG)FileVolumeNameInformation }, { { sizeof( "FileIdInformation" ) - sizeof( ("FileIdInformation")[0] ), sizeof( "FileIdInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIdInformation")), ("FileIdInformation") }, (ULONG)FileIdInformation }, { { sizeof( "FileIdExtdDirectoryInformation" ) - sizeof( ("FileIdExtdDirectoryInformation")[0] ), sizeof( "FileIdExtdDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIdExtdDirectoryInformation")), ("FileIdExtdDirectoryInformation") }, (ULONG)FileIdExtdDirectoryInformation }, { { sizeof( "FileReplaceCompletionInformation" ) - sizeof( ("FileReplaceCompletionInformation")[0] ), sizeof( "FileReplaceCompletionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileReplaceCompletionInformation")), ("FileReplaceCompletionInformation") }, (ULONG)FileReplaceCompletionInformation }, { { sizeof( "FileHardLinkFullIdInformation" ) - sizeof( ("FileHardLinkFullIdInformation")[0] ), sizeof( "FileHardLinkFullIdInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileHardLinkFullIdInformation")), ("FileHardLinkFullIdInformation") }, (ULONG)FileHardLinkFullIdInformation }, { { sizeof( "FileIdExtdBothDirectoryInformation" ) - sizeof( ("FileIdExtdBothDirectoryInformation")[0] ), sizeof( "FileIdExtdBothDirectoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileIdExtdBothDirectoryInformation")), ("FileIdExtdBothDirectoryInformation") }, (ULONG)FileIdExtdBothDirectoryInformation }, { { sizeof( "FileDispositionInformationEx" ) - sizeof( ("FileDispositionInformationEx")[0] ), sizeof( "FileDispositionInformationEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileDispositionInformationEx")), ("FileDispositionInformationEx") }, (ULONG)FileDispositionInformationEx }, { { sizeof( "FileRenameInformationEx" ) - sizeof( ("FileRenameInformationEx")[0] ), sizeof( "FileRenameInformationEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileRenameInformationEx")), ("FileRenameInformationEx") }, (ULONG)FileRenameInformationEx }, { { sizeof( "FileRenameInformationExBypassAccessCheck" ) - sizeof( ("FileRenameInformationExBypassAccessCheck")[0] ), sizeof( "FileRenameInformationExBypassAccessCheck" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileRenameInformationExBypassAccessCheck")), ("FileRenameInformationExBypassAccessCheck") }, (ULONG)FileRenameInformationExBypassAccessCheck }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_FILE_INFORMATION_CLASS = { .Id = 21, .Type = AHDT_ENUM, .Name = { sizeof( "FILE_INFORMATION_CLASS" ) - sizeof( ("FILE_INFORMATION_CLASS")[0] ), sizeof( "FILE_INFORMATION_CLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FILE_INFORMATION_CLASS")), ("FILE_INFORMATION_CLASS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_FILE_INFORMATION_CLASS) / sizeof(AvmpHookEnumNameValue_FILE_INFORMATION_CLASS[0])), .Items = AvmpHookEnumNameValue_FILE_INFORMATION_CLASS } };
#line 442 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_FS_INFORMATION_CLASS[] = { { { sizeof( "FileFsVolumeInformation" ) - sizeof( ("FileFsVolumeInformation")[0] ), sizeof( "FileFsVolumeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsVolumeInformation")), ("FileFsVolumeInformation") }, (ULONG)FileFsVolumeInformation }, { { sizeof( "FileFsLabelInformation" ) - sizeof( ("FileFsLabelInformation")[0] ), sizeof( "FileFsLabelInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsLabelInformation")), ("FileFsLabelInformation") }, (ULONG)FileFsLabelInformation }, { { sizeof( "FileFsSizeInformation" ) - sizeof( ("FileFsSizeInformation")[0] ), sizeof( "FileFsSizeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsSizeInformation")), ("FileFsSizeInformation") }, (ULONG)FileFsSizeInformation }, { { sizeof( "FileFsDeviceInformation" ) - sizeof( ("FileFsDeviceInformation")[0] ), sizeof( "FileFsDeviceInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsDeviceInformation")), ("FileFsDeviceInformation") }, (ULONG)FileFsDeviceInformation }, { { sizeof( "FileFsAttributeInformation" ) - sizeof( ("FileFsAttributeInformation")[0] ), sizeof( "FileFsAttributeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsAttributeInformation")), ("FileFsAttributeInformation") }, (ULONG)FileFsAttributeInformation }, { { sizeof( "FileFsControlInformation" ) - sizeof( ("FileFsControlInformation")[0] ), sizeof( "FileFsControlInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsControlInformation")), ("FileFsControlInformation") }, (ULONG)FileFsControlInformation }, { { sizeof( "FileFsFullSizeInformation" ) - sizeof( ("FileFsFullSizeInformation")[0] ), sizeof( "FileFsFullSizeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsFullSizeInformation")), ("FileFsFullSizeInformation") }, (ULONG)FileFsFullSizeInformation }, { { sizeof( "FileFsObjectIdInformation" ) - sizeof( ("FileFsObjectIdInformation")[0] ), sizeof( "FileFsObjectIdInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsObjectIdInformation")), ("FileFsObjectIdInformation") }, (ULONG)FileFsObjectIdInformation }, { { sizeof( "FileFsDriverPathInformation" ) - sizeof( ("FileFsDriverPathInformation")[0] ), sizeof( "FileFsDriverPathInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsDriverPathInformation")), ("FileFsDriverPathInformation") }, (ULONG)FileFsDriverPathInformation }, { { sizeof( "FileFsVolumeFlagsInformation" ) - sizeof( ("FileFsVolumeFlagsInformation")[0] ), sizeof( "FileFsVolumeFlagsInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsVolumeFlagsInformation")), ("FileFsVolumeFlagsInformation") }, (ULONG)FileFsVolumeFlagsInformation }, { { sizeof( "FileFsSectorSizeInformation" ) - sizeof( ("FileFsSectorSizeInformation")[0] ), sizeof( "FileFsSectorSizeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsSectorSizeInformation")), ("FileFsSectorSizeInformation") }, (ULONG)FileFsSectorSizeInformation }, { { sizeof( "FileFsDataCopyInformation" ) - sizeof( ("FileFsDataCopyInformation")[0] ), sizeof( "FileFsDataCopyInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsDataCopyInformation")), ("FileFsDataCopyInformation") }, (ULONG)FileFsDataCopyInformation }, { { sizeof( "FileFsMetadataSizeInformation" ) - sizeof( ("FileFsMetadataSizeInformation")[0] ), sizeof( "FileFsMetadataSizeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FileFsMetadataSizeInformation")), ("FileFsMetadataSizeInformation") }, (ULONG)FileFsMetadataSizeInformation }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_FS_INFORMATION_CLASS = { .Id = 22, .Type = AHDT_ENUM, .Name = { sizeof( "FS_INFORMATION_CLASS" ) - sizeof( ("FS_INFORMATION_CLASS")[0] ), sizeof( "FS_INFORMATION_CLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("FS_INFORMATION_CLASS")), ("FS_INFORMATION_CLASS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_FS_INFORMATION_CLASS) / sizeof(AvmpHookEnumNameValue_FS_INFORMATION_CLASS[0])), .Items = AvmpHookEnumNameValue_FS_INFORMATION_CLASS } };
#line 459 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

enum
{
  ProcessResourceManagement = 35,
  ProcessConsoleHostProcess = 49,
  ProcessDefaultCpuSetsInformation = 66,
  ProcessAllowedCpuSetsInformation = 67,
  ProcessJobMemoryInformation = 69,
  ProcessIumChallengeResponse = 72,
  ProcessChildProcessInformation = 73,
  ProcessHighGraphicsPriorityInformation = 74,
  ProcessEnergyValues,
  ProcessActivityThrottleState = 77,
  ProcessActivityThrottlePolicy = 78,
  ProcessDisableSystemAllowedCpuSets = 80,
  ProcessWakeInformation = 81,
};

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_PROCESSINFOCLASS[] = { { { sizeof( "ProcessBasicInformation" ) - sizeof( ("ProcessBasicInformation")[0] ), sizeof( "ProcessBasicInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessBasicInformation")), ("ProcessBasicInformation") }, (ULONG)ProcessBasicInformation }, { { sizeof( "ProcessQuotaLimits" ) - sizeof( ("ProcessQuotaLimits")[0] ), sizeof( "ProcessQuotaLimits" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessQuotaLimits")), ("ProcessQuotaLimits") }, (ULONG)ProcessQuotaLimits }, { { sizeof( "ProcessIoCounters" ) - sizeof( ("ProcessIoCounters")[0] ), sizeof( "ProcessIoCounters" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessIoCounters")), ("ProcessIoCounters") }, (ULONG)ProcessIoCounters }, { { sizeof( "ProcessVmCounters" ) - sizeof( ("ProcessVmCounters")[0] ), sizeof( "ProcessVmCounters" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessVmCounters")), ("ProcessVmCounters") }, (ULONG)ProcessVmCounters }, { { sizeof( "ProcessTimes" ) - sizeof( ("ProcessTimes")[0] ), sizeof( "ProcessTimes" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessTimes")), ("ProcessTimes") }, (ULONG)ProcessTimes }, { { sizeof( "ProcessBasePriority" ) - sizeof( ("ProcessBasePriority")[0] ), sizeof( "ProcessBasePriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessBasePriority")), ("ProcessBasePriority") }, (ULONG)ProcessBasePriority }, { { sizeof( "ProcessRaisePriority" ) - sizeof( ("ProcessRaisePriority")[0] ), sizeof( "ProcessRaisePriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessRaisePriority")), ("ProcessRaisePriority") }, (ULONG)ProcessRaisePriority }, { { sizeof( "ProcessDebugPort" ) - sizeof( ("ProcessDebugPort")[0] ), sizeof( "ProcessDebugPort" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDebugPort")), ("ProcessDebugPort") }, (ULONG)ProcessDebugPort }, { { sizeof( "ProcessExceptionPort" ) - sizeof( ("ProcessExceptionPort")[0] ), sizeof( "ProcessExceptionPort" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessExceptionPort")), ("ProcessExceptionPort") }, (ULONG)ProcessExceptionPort }, { { sizeof( "ProcessAccessToken" ) - sizeof( ("ProcessAccessToken")[0] ), sizeof( "ProcessAccessToken" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessAccessToken")), ("ProcessAccessToken") }, (ULONG)ProcessAccessToken }, { { sizeof( "ProcessLdtInformation" ) - sizeof( ("ProcessLdtInformation")[0] ), sizeof( "ProcessLdtInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessLdtInformation")), ("ProcessLdtInformation") }, (ULONG)ProcessLdtInformation }, { { sizeof( "ProcessLdtSize" ) - sizeof( ("ProcessLdtSize")[0] ), sizeof( "ProcessLdtSize" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessLdtSize")), ("ProcessLdtSize") }, (ULONG)ProcessLdtSize }, { { sizeof( "ProcessDefaultHardErrorMode" ) - sizeof( ("ProcessDefaultHardErrorMode")[0] ), sizeof( "ProcessDefaultHardErrorMode" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDefaultHardErrorMode")), ("ProcessDefaultHardErrorMode") }, (ULONG)ProcessDefaultHardErrorMode }, { { sizeof( "ProcessIoPortHandlers" ) - sizeof( ("ProcessIoPortHandlers")[0] ), sizeof( "ProcessIoPortHandlers" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessIoPortHandlers")), ("ProcessIoPortHandlers") }, (ULONG)ProcessIoPortHandlers }, { { sizeof( "ProcessPooledUsageAndLimits" ) - sizeof( ("ProcessPooledUsageAndLimits")[0] ), sizeof( "ProcessPooledUsageAndLimits" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessPooledUsageAndLimits")), ("ProcessPooledUsageAndLimits") }, (ULONG)ProcessPooledUsageAndLimits }, { { sizeof( "ProcessWorkingSetWatch" ) - sizeof( ("ProcessWorkingSetWatch")[0] ), sizeof( "ProcessWorkingSetWatch" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWorkingSetWatch")), ("ProcessWorkingSetWatch") }, (ULONG)ProcessWorkingSetWatch }, { { sizeof( "ProcessUserModeIOPL" ) - sizeof( ("ProcessUserModeIOPL")[0] ), sizeof( "ProcessUserModeIOPL" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessUserModeIOPL")), ("ProcessUserModeIOPL") }, (ULONG)ProcessUserModeIOPL }, { { sizeof( "ProcessEnableAlignmentFaultFixup" ) - sizeof( ("ProcessEnableAlignmentFaultFixup")[0] ), sizeof( "ProcessEnableAlignmentFaultFixup" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessEnableAlignmentFaultFixup")), ("ProcessEnableAlignmentFaultFixup") }, (ULONG)ProcessEnableAlignmentFaultFixup }, { { sizeof( "ProcessPriorityClass" ) - sizeof( ("ProcessPriorityClass")[0] ), sizeof( "ProcessPriorityClass" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessPriorityClass")), ("ProcessPriorityClass") }, (ULONG)ProcessPriorityClass }, { { sizeof( "ProcessWx86Information" ) - sizeof( ("ProcessWx86Information")[0] ), sizeof( "ProcessWx86Information" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWx86Information")), ("ProcessWx86Information") }, (ULONG)ProcessWx86Information }, { { sizeof( "ProcessHandleCount" ) - sizeof( ("ProcessHandleCount")[0] ), sizeof( "ProcessHandleCount" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessHandleCount")), ("ProcessHandleCount") }, (ULONG)ProcessHandleCount }, { { sizeof( "ProcessAffinityMask" ) - sizeof( ("ProcessAffinityMask")[0] ), sizeof( "ProcessAffinityMask" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessAffinityMask")), ("ProcessAffinityMask") }, (ULONG)ProcessAffinityMask }, { { sizeof( "ProcessPriorityBoost" ) - sizeof( ("ProcessPriorityBoost")[0] ), sizeof( "ProcessPriorityBoost" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessPriorityBoost")), ("ProcessPriorityBoost") }, (ULONG)ProcessPriorityBoost }, { { sizeof( "ProcessDeviceMap" ) - sizeof( ("ProcessDeviceMap")[0] ), sizeof( "ProcessDeviceMap" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDeviceMap")), ("ProcessDeviceMap") }, (ULONG)ProcessDeviceMap }, { { sizeof( "ProcessSessionInformation" ) - sizeof( ("ProcessSessionInformation")[0] ), sizeof( "ProcessSessionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessSessionInformation")), ("ProcessSessionInformation") }, (ULONG)ProcessSessionInformation }, { { sizeof( "ProcessForegroundInformation" ) - sizeof( ("ProcessForegroundInformation")[0] ), sizeof( "ProcessForegroundInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessForegroundInformation")), ("ProcessForegroundInformation") }, (ULONG)ProcessForegroundInformation }, { { sizeof( "ProcessWow64Information" ) - sizeof( ("ProcessWow64Information")[0] ), sizeof( "ProcessWow64Information" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWow64Information")), ("ProcessWow64Information") }, (ULONG)ProcessWow64Information }, { { sizeof( "ProcessImageFileName" ) - sizeof( ("ProcessImageFileName")[0] ), sizeof( "ProcessImageFileName" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessImageFileName")), ("ProcessImageFileName") }, (ULONG)ProcessImageFileName }, { { sizeof( "ProcessLUIDDeviceMapsEnabled" ) - sizeof( ("ProcessLUIDDeviceMapsEnabled")[0] ), sizeof( "ProcessLUIDDeviceMapsEnabled" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessLUIDDeviceMapsEnabled")), ("ProcessLUIDDeviceMapsEnabled") }, (ULONG)ProcessLUIDDeviceMapsEnabled }, { { sizeof( "ProcessBreakOnTermination" ) - sizeof( ("ProcessBreakOnTermination")[0] ), sizeof( "ProcessBreakOnTermination" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessBreakOnTermination")), ("ProcessBreakOnTermination") }, (ULONG)ProcessBreakOnTermination }, { { sizeof( "ProcessDebugObjectHandle" ) - sizeof( ("ProcessDebugObjectHandle")[0] ), sizeof( "ProcessDebugObjectHandle" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDebugObjectHandle")), ("ProcessDebugObjectHandle") }, (ULONG)ProcessDebugObjectHandle }, { { sizeof( "ProcessDebugFlags" ) - sizeof( ("ProcessDebugFlags")[0] ), sizeof( "ProcessDebugFlags" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDebugFlags")), ("ProcessDebugFlags") }, (ULONG)ProcessDebugFlags }, { { sizeof( "ProcessHandleTracing" ) - sizeof( ("ProcessHandleTracing")[0] ), sizeof( "ProcessHandleTracing" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessHandleTracing")), ("ProcessHandleTracing") }, (ULONG)ProcessHandleTracing }, { { sizeof( "ProcessIoPriority" ) - sizeof( ("ProcessIoPriority")[0] ), sizeof( "ProcessIoPriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessIoPriority")), ("ProcessIoPriority") }, (ULONG)ProcessIoPriority }, { { sizeof( "ProcessExecuteFlags" ) - sizeof( ("ProcessExecuteFlags")[0] ), sizeof( "ProcessExecuteFlags" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessExecuteFlags")), ("ProcessExecuteFlags") }, (ULONG)ProcessExecuteFlags }, { { sizeof( "ProcessResourceManagement" ) - sizeof( ("ProcessResourceManagement")[0] ), sizeof( "ProcessResourceManagement" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessResourceManagement")), ("ProcessResourceManagement") }, (ULONG)ProcessResourceManagement }, { { sizeof( "ProcessCookie" ) - sizeof( ("ProcessCookie")[0] ), sizeof( "ProcessCookie" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessCookie")), ("ProcessCookie") }, (ULONG)ProcessCookie }, { { sizeof( "ProcessImageInformation" ) - sizeof( ("ProcessImageInformation")[0] ), sizeof( "ProcessImageInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessImageInformation")), ("ProcessImageInformation") }, (ULONG)ProcessImageInformation }, { { sizeof( "ProcessCycleTime" ) - sizeof( ("ProcessCycleTime")[0] ), sizeof( "ProcessCycleTime" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessCycleTime")), ("ProcessCycleTime") }, (ULONG)ProcessCycleTime }, { { sizeof( "ProcessPagePriority" ) - sizeof( ("ProcessPagePriority")[0] ), sizeof( "ProcessPagePriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessPagePriority")), ("ProcessPagePriority") }, (ULONG)ProcessPagePriority }, { { sizeof( "ProcessInstrumentationCallback" ) - sizeof( ("ProcessInstrumentationCallback")[0] ), sizeof( "ProcessInstrumentationCallback" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessInstrumentationCallback")), ("ProcessInstrumentationCallback") }, (ULONG)ProcessInstrumentationCallback }, { { sizeof( "ProcessThreadStackAllocation" ) - sizeof( ("ProcessThreadStackAllocation")[0] ), sizeof( "ProcessThreadStackAllocation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessThreadStackAllocation")), ("ProcessThreadStackAllocation") }, (ULONG)ProcessThreadStackAllocation }, { { sizeof( "ProcessWorkingSetWatchEx" ) - sizeof( ("ProcessWorkingSetWatchEx")[0] ), sizeof( "ProcessWorkingSetWatchEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWorkingSetWatchEx")), ("ProcessWorkingSetWatchEx") }, (ULONG)ProcessWorkingSetWatchEx }, { { sizeof( "ProcessImageFileNameWin32" ) - sizeof( ("ProcessImageFileNameWin32")[0] ), sizeof( "ProcessImageFileNameWin32" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessImageFileNameWin32")), ("ProcessImageFileNameWin32") }, (ULONG)ProcessImageFileNameWin32 }, { { sizeof( "ProcessImageFileMapping" ) - sizeof( ("ProcessImageFileMapping")[0] ), sizeof( "ProcessImageFileMapping" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessImageFileMapping")), ("ProcessImageFileMapping") }, (ULONG)ProcessImageFileMapping }, { { sizeof( "ProcessAffinityUpdateMode" ) - sizeof( ("ProcessAffinityUpdateMode")[0] ), sizeof( "ProcessAffinityUpdateMode" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessAffinityUpdateMode")), ("ProcessAffinityUpdateMode") }, (ULONG)ProcessAffinityUpdateMode }, { { sizeof( "ProcessMemoryAllocationMode" ) - sizeof( ("ProcessMemoryAllocationMode")[0] ), sizeof( "ProcessMemoryAllocationMode" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessMemoryAllocationMode")), ("ProcessMemoryAllocationMode") }, (ULONG)ProcessMemoryAllocationMode }, { { sizeof( "ProcessGroupInformation" ) - sizeof( ("ProcessGroupInformation")[0] ), sizeof( "ProcessGroupInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessGroupInformation")), ("ProcessGroupInformation") }, (ULONG)ProcessGroupInformation }, { { sizeof( "ProcessTokenVirtualizationEnabled" ) - sizeof( ("ProcessTokenVirtualizationEnabled")[0] ), sizeof( "ProcessTokenVirtualizationEnabled" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessTokenVirtualizationEnabled")), ("ProcessTokenVirtualizationEnabled") }, (ULONG)ProcessTokenVirtualizationEnabled }, { { sizeof( "ProcessConsoleHostProcess" ) - sizeof( ("ProcessConsoleHostProcess")[0] ), sizeof( "ProcessConsoleHostProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessConsoleHostProcess")), ("ProcessConsoleHostProcess") }, (ULONG)ProcessConsoleHostProcess }, { { sizeof( "ProcessWindowInformation" ) - sizeof( ("ProcessWindowInformation")[0] ), sizeof( "ProcessWindowInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWindowInformation")), ("ProcessWindowInformation") }, (ULONG)ProcessWindowInformation }, { { sizeof( "ProcessHandleInformation" ) - sizeof( ("ProcessHandleInformation")[0] ), sizeof( "ProcessHandleInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessHandleInformation")), ("ProcessHandleInformation") }, (ULONG)ProcessHandleInformation }, { { sizeof( "ProcessMitigationPolicy" ) - sizeof( ("ProcessMitigationPolicy")[0] ), sizeof( "ProcessMitigationPolicy" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessMitigationPolicy")), ("ProcessMitigationPolicy") }, (ULONG)ProcessMitigationPolicy }, { { sizeof( "ProcessDynamicFunctionTableInformation" ) - sizeof( ("ProcessDynamicFunctionTableInformation")[0] ), sizeof( "ProcessDynamicFunctionTableInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDynamicFunctionTableInformation")), ("ProcessDynamicFunctionTableInformation") }, (ULONG)ProcessDynamicFunctionTableInformation }, { { sizeof( "ProcessHandleCheckingMode" ) - sizeof( ("ProcessHandleCheckingMode")[0] ), sizeof( "ProcessHandleCheckingMode" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessHandleCheckingMode")), ("ProcessHandleCheckingMode") }, (ULONG)ProcessHandleCheckingMode }, { { sizeof( "ProcessKeepAliveCount" ) - sizeof( ("ProcessKeepAliveCount")[0] ), sizeof( "ProcessKeepAliveCount" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessKeepAliveCount")), ("ProcessKeepAliveCount") }, (ULONG)ProcessKeepAliveCount }, { { sizeof( "ProcessRevokeFileHandles" ) - sizeof( ("ProcessRevokeFileHandles")[0] ), sizeof( "ProcessRevokeFileHandles" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessRevokeFileHandles")), ("ProcessRevokeFileHandles") }, (ULONG)ProcessRevokeFileHandles }, { { sizeof( "ProcessWorkingSetControl" ) - sizeof( ("ProcessWorkingSetControl")[0] ), sizeof( "ProcessWorkingSetControl" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWorkingSetControl")), ("ProcessWorkingSetControl") }, (ULONG)ProcessWorkingSetControl }, { { sizeof( "ProcessHandleTable" ) - sizeof( ("ProcessHandleTable")[0] ), sizeof( "ProcessHandleTable" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessHandleTable")), ("ProcessHandleTable") }, (ULONG)ProcessHandleTable }, { { sizeof( "ProcessCheckStackExtentsMode" ) - sizeof( ("ProcessCheckStackExtentsMode")[0] ), sizeof( "ProcessCheckStackExtentsMode" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessCheckStackExtentsMode")), ("ProcessCheckStackExtentsMode") }, (ULONG)ProcessCheckStackExtentsMode }, { { sizeof( "ProcessCommandLineInformation" ) - sizeof( ("ProcessCommandLineInformation")[0] ), sizeof( "ProcessCommandLineInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessCommandLineInformation")), ("ProcessCommandLineInformation") }, (ULONG)ProcessCommandLineInformation }, { { sizeof( "ProcessProtectionInformation" ) - sizeof( ("ProcessProtectionInformation")[0] ), sizeof( "ProcessProtectionInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessProtectionInformation")), ("ProcessProtectionInformation") }, (ULONG)ProcessProtectionInformation }, { { sizeof( "ProcessMemoryExhaustion" ) - sizeof( ("ProcessMemoryExhaustion")[0] ), sizeof( "ProcessMemoryExhaustion" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessMemoryExhaustion")), ("ProcessMemoryExhaustion") }, (ULONG)ProcessMemoryExhaustion }, { { sizeof( "ProcessFaultInformation" ) - sizeof( ("ProcessFaultInformation")[0] ), sizeof( "ProcessFaultInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessFaultInformation")), ("ProcessFaultInformation") }, (ULONG)ProcessFaultInformation }, { { sizeof( "ProcessTelemetryIdInformation" ) - sizeof( ("ProcessTelemetryIdInformation")[0] ), sizeof( "ProcessTelemetryIdInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessTelemetryIdInformation")), ("ProcessTelemetryIdInformation") }, (ULONG)ProcessTelemetryIdInformation }, { { sizeof( "ProcessCommitReleaseInformation" ) - sizeof( ("ProcessCommitReleaseInformation")[0] ), sizeof( "ProcessCommitReleaseInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessCommitReleaseInformation")), ("ProcessCommitReleaseInformation") }, (ULONG)ProcessCommitReleaseInformation }, { { sizeof( "ProcessDefaultCpuSetsInformation" ) - sizeof( ("ProcessDefaultCpuSetsInformation")[0] ), sizeof( "ProcessDefaultCpuSetsInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDefaultCpuSetsInformation")), ("ProcessDefaultCpuSetsInformation") }, (ULONG)ProcessDefaultCpuSetsInformation }, { { sizeof( "ProcessAllowedCpuSetsInformation" ) - sizeof( ("ProcessAllowedCpuSetsInformation")[0] ), sizeof( "ProcessAllowedCpuSetsInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessAllowedCpuSetsInformation")), ("ProcessAllowedCpuSetsInformation") }, (ULONG)ProcessAllowedCpuSetsInformation }, { { sizeof( "ProcessSubsystemProcess" ) - sizeof( ("ProcessSubsystemProcess")[0] ), sizeof( "ProcessSubsystemProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessSubsystemProcess")), ("ProcessSubsystemProcess") }, (ULONG)ProcessSubsystemProcess }, { { sizeof( "ProcessJobMemoryInformation" ) - sizeof( ("ProcessJobMemoryInformation")[0] ), sizeof( "ProcessJobMemoryInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessJobMemoryInformation")), ("ProcessJobMemoryInformation") }, (ULONG)ProcessJobMemoryInformation }, { { sizeof( "ProcessInPrivate" ) - sizeof( ("ProcessInPrivate")[0] ), sizeof( "ProcessInPrivate" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessInPrivate")), ("ProcessInPrivate") }, (ULONG)ProcessInPrivate }, { { sizeof( "ProcessRaiseUMExceptionOnInvalidHandleClose" ) - sizeof( ("ProcessRaiseUMExceptionOnInvalidHandleClose")[0] ), sizeof( "ProcessRaiseUMExceptionOnInvalidHandleClose" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessRaiseUMExceptionOnInvalidHandleClose")), ("ProcessRaiseUMExceptionOnInvalidHandleClose") }, (ULONG)ProcessRaiseUMExceptionOnInvalidHandleClose }, { { sizeof( "ProcessIumChallengeResponse" ) - sizeof( ("ProcessIumChallengeResponse")[0] ), sizeof( "ProcessIumChallengeResponse" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessIumChallengeResponse")), ("ProcessIumChallengeResponse") }, (ULONG)ProcessIumChallengeResponse }, { { sizeof( "ProcessChildProcessInformation" ) - sizeof( ("ProcessChildProcessInformation")[0] ), sizeof( "ProcessChildProcessInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessChildProcessInformation")), ("ProcessChildProcessInformation") }, (ULONG)ProcessChildProcessInformation }, { { sizeof( "ProcessHighGraphicsPriorityInformation" ) - sizeof( ("ProcessHighGraphicsPriorityInformation")[0] ), sizeof( "ProcessHighGraphicsPriorityInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessHighGraphicsPriorityInformation")), ("ProcessHighGraphicsPriorityInformation") }, (ULONG)ProcessHighGraphicsPriorityInformation }, { { sizeof( "ProcessEnergyValues" ) - sizeof( ("ProcessEnergyValues")[0] ), sizeof( "ProcessEnergyValues" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessEnergyValues")), ("ProcessEnergyValues") }, (ULONG)ProcessEnergyValues }, { { sizeof( "ProcessActivityThrottleState" ) - sizeof( ("ProcessActivityThrottleState")[0] ), sizeof( "ProcessActivityThrottleState" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessActivityThrottleState")), ("ProcessActivityThrottleState") }, (ULONG)ProcessActivityThrottleState }, { { sizeof( "ProcessActivityThrottlePolicy" ) - sizeof( ("ProcessActivityThrottlePolicy")[0] ), sizeof( "ProcessActivityThrottlePolicy" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessActivityThrottlePolicy")), ("ProcessActivityThrottlePolicy") }, (ULONG)ProcessActivityThrottlePolicy }, { { sizeof( "ProcessDisableSystemAllowedCpuSets" ) - sizeof( ("ProcessDisableSystemAllowedCpuSets")[0] ), sizeof( "ProcessDisableSystemAllowedCpuSets" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessDisableSystemAllowedCpuSets")), ("ProcessDisableSystemAllowedCpuSets") }, (ULONG)ProcessDisableSystemAllowedCpuSets }, { { sizeof( "ProcessWakeInformation" ) - sizeof( ("ProcessWakeInformation")[0] ), sizeof( "ProcessWakeInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ProcessWakeInformation")), ("ProcessWakeInformation") }, (ULONG)ProcessWakeInformation }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_PROCESSINFOCLASS = { .Id = 23, .Type = AHDT_ENUM, .Name = { sizeof( "PROCESSINFOCLASS" ) - sizeof( ("PROCESSINFOCLASS")[0] ), sizeof( "PROCESSINFOCLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESSINFOCLASS")), ("PROCESSINFOCLASS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_PROCESSINFOCLASS) / sizeof(AvmpHookEnumNameValue_PROCESSINFOCLASS[0])), .Items = AvmpHookEnumNameValue_PROCESSINFOCLASS } };
#line 563 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

enum
{
  ThreadEventPair = 8,
  ThreadHeterogeneousCpuPolicy = 36,
  ThreadContainerId = 37,
  ThreadNameInformation = 38,
  ThreadSelectedCpuSets = 39,
  ThreadSystemThreadInformation = 40,
  ThreadExplicitCaseSensitivity = 43,
  ThreadWorkOnBehalfTicket = 44,
  ThreadDbgkWerReportActive = 46,
  ThreadAttachContainer = 47,
};

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_THREADINFOCLASS[] = { { { sizeof( "ThreadBasicInformation" ) - sizeof( ("ThreadBasicInformation")[0] ), sizeof( "ThreadBasicInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadBasicInformation")), ("ThreadBasicInformation") }, (ULONG)ThreadBasicInformation }, { { sizeof( "ThreadTimes" ) - sizeof( ("ThreadTimes")[0] ), sizeof( "ThreadTimes" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadTimes")), ("ThreadTimes") }, (ULONG)ThreadTimes }, { { sizeof( "ThreadPriority" ) - sizeof( ("ThreadPriority")[0] ), sizeof( "ThreadPriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadPriority")), ("ThreadPriority") }, (ULONG)ThreadPriority }, { { sizeof( "ThreadBasePriority" ) - sizeof( ("ThreadBasePriority")[0] ), sizeof( "ThreadBasePriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadBasePriority")), ("ThreadBasePriority") }, (ULONG)ThreadBasePriority }, { { sizeof( "ThreadAffinityMask" ) - sizeof( ("ThreadAffinityMask")[0] ), sizeof( "ThreadAffinityMask" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadAffinityMask")), ("ThreadAffinityMask") }, (ULONG)ThreadAffinityMask }, { { sizeof( "ThreadImpersonationToken" ) - sizeof( ("ThreadImpersonationToken")[0] ), sizeof( "ThreadImpersonationToken" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadImpersonationToken")), ("ThreadImpersonationToken") }, (ULONG)ThreadImpersonationToken }, { { sizeof( "ThreadDescriptorTableEntry" ) - sizeof( ("ThreadDescriptorTableEntry")[0] ), sizeof( "ThreadDescriptorTableEntry" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadDescriptorTableEntry")), ("ThreadDescriptorTableEntry") }, (ULONG)ThreadDescriptorTableEntry }, { { sizeof( "ThreadEnableAlignmentFaultFixup" ) - sizeof( ("ThreadEnableAlignmentFaultFixup")[0] ), sizeof( "ThreadEnableAlignmentFaultFixup" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadEnableAlignmentFaultFixup")), ("ThreadEnableAlignmentFaultFixup") }, (ULONG)ThreadEnableAlignmentFaultFixup }, { { sizeof( "ThreadEventPair" ) - sizeof( ("ThreadEventPair")[0] ), sizeof( "ThreadEventPair" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadEventPair")), ("ThreadEventPair") }, (ULONG)ThreadEventPair }, { { sizeof( "ThreadQuerySetWin32StartAddress" ) - sizeof( ("ThreadQuerySetWin32StartAddress")[0] ), sizeof( "ThreadQuerySetWin32StartAddress" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadQuerySetWin32StartAddress")), ("ThreadQuerySetWin32StartAddress") }, (ULONG)ThreadQuerySetWin32StartAddress }, { { sizeof( "ThreadZeroTlsCell" ) - sizeof( ("ThreadZeroTlsCell")[0] ), sizeof( "ThreadZeroTlsCell" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadZeroTlsCell")), ("ThreadZeroTlsCell") }, (ULONG)ThreadZeroTlsCell }, { { sizeof( "ThreadPerformanceCount" ) - sizeof( ("ThreadPerformanceCount")[0] ), sizeof( "ThreadPerformanceCount" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadPerformanceCount")), ("ThreadPerformanceCount") }, (ULONG)ThreadPerformanceCount }, { { sizeof( "ThreadAmILastThread" ) - sizeof( ("ThreadAmILastThread")[0] ), sizeof( "ThreadAmILastThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadAmILastThread")), ("ThreadAmILastThread") }, (ULONG)ThreadAmILastThread }, { { sizeof( "ThreadIdealProcessor" ) - sizeof( ("ThreadIdealProcessor")[0] ), sizeof( "ThreadIdealProcessor" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadIdealProcessor")), ("ThreadIdealProcessor") }, (ULONG)ThreadIdealProcessor }, { { sizeof( "ThreadPriorityBoost" ) - sizeof( ("ThreadPriorityBoost")[0] ), sizeof( "ThreadPriorityBoost" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadPriorityBoost")), ("ThreadPriorityBoost") }, (ULONG)ThreadPriorityBoost }, { { sizeof( "ThreadSetTlsArrayAddress" ) - sizeof( ("ThreadSetTlsArrayAddress")[0] ), sizeof( "ThreadSetTlsArrayAddress" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadSetTlsArrayAddress")), ("ThreadSetTlsArrayAddress") }, (ULONG)ThreadSetTlsArrayAddress }, { { sizeof( "ThreadIsIoPending" ) - sizeof( ("ThreadIsIoPending")[0] ), sizeof( "ThreadIsIoPending" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadIsIoPending")), ("ThreadIsIoPending") }, (ULONG)ThreadIsIoPending }, { { sizeof( "ThreadHideFromDebugger" ) - sizeof( ("ThreadHideFromDebugger")[0] ), sizeof( "ThreadHideFromDebugger" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadHideFromDebugger")), ("ThreadHideFromDebugger") }, (ULONG)ThreadHideFromDebugger }, { { sizeof( "ThreadBreakOnTermination" ) - sizeof( ("ThreadBreakOnTermination")[0] ), sizeof( "ThreadBreakOnTermination" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadBreakOnTermination")), ("ThreadBreakOnTermination") }, (ULONG)ThreadBreakOnTermination }, { { sizeof( "ThreadSwitchLegacyState" ) - sizeof( ("ThreadSwitchLegacyState")[0] ), sizeof( "ThreadSwitchLegacyState" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadSwitchLegacyState")), ("ThreadSwitchLegacyState") }, (ULONG)ThreadSwitchLegacyState }, { { sizeof( "ThreadIsTerminated" ) - sizeof( ("ThreadIsTerminated")[0] ), sizeof( "ThreadIsTerminated" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadIsTerminated")), ("ThreadIsTerminated") }, (ULONG)ThreadIsTerminated }, { { sizeof( "ThreadLastSystemCall" ) - sizeof( ("ThreadLastSystemCall")[0] ), sizeof( "ThreadLastSystemCall" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadLastSystemCall")), ("ThreadLastSystemCall") }, (ULONG)ThreadLastSystemCall }, { { sizeof( "ThreadIoPriority" ) - sizeof( ("ThreadIoPriority")[0] ), sizeof( "ThreadIoPriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadIoPriority")), ("ThreadIoPriority") }, (ULONG)ThreadIoPriority }, { { sizeof( "ThreadCycleTime" ) - sizeof( ("ThreadCycleTime")[0] ), sizeof( "ThreadCycleTime" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadCycleTime")), ("ThreadCycleTime") }, (ULONG)ThreadCycleTime }, { { sizeof( "ThreadPagePriority" ) - sizeof( ("ThreadPagePriority")[0] ), sizeof( "ThreadPagePriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadPagePriority")), ("ThreadPagePriority") }, (ULONG)ThreadPagePriority }, { { sizeof( "ThreadActualBasePriority" ) - sizeof( ("ThreadActualBasePriority")[0] ), sizeof( "ThreadActualBasePriority" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadActualBasePriority")), ("ThreadActualBasePriority") }, (ULONG)ThreadActualBasePriority }, { { sizeof( "ThreadTebInformation" ) - sizeof( ("ThreadTebInformation")[0] ), sizeof( "ThreadTebInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadTebInformation")), ("ThreadTebInformation") }, (ULONG)ThreadTebInformation }, { { sizeof( "ThreadCSwitchMon" ) - sizeof( ("ThreadCSwitchMon")[0] ), sizeof( "ThreadCSwitchMon" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadCSwitchMon")), ("ThreadCSwitchMon") }, (ULONG)ThreadCSwitchMon }, { { sizeof( "ThreadCSwitchPmu" ) - sizeof( ("ThreadCSwitchPmu")[0] ), sizeof( "ThreadCSwitchPmu" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadCSwitchPmu")), ("ThreadCSwitchPmu") }, (ULONG)ThreadCSwitchPmu }, { { sizeof( "ThreadWow64Context" ) - sizeof( ("ThreadWow64Context")[0] ), sizeof( "ThreadWow64Context" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadWow64Context")), ("ThreadWow64Context") }, (ULONG)ThreadWow64Context }, { { sizeof( "ThreadGroupInformation" ) - sizeof( ("ThreadGroupInformation")[0] ), sizeof( "ThreadGroupInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadGroupInformation")), ("ThreadGroupInformation") }, (ULONG)ThreadGroupInformation }, { { sizeof( "ThreadUmsInformation" ) - sizeof( ("ThreadUmsInformation")[0] ), sizeof( "ThreadUmsInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadUmsInformation")), ("ThreadUmsInformation") }, (ULONG)ThreadUmsInformation }, { { sizeof( "ThreadCounterProfiling" ) - sizeof( ("ThreadCounterProfiling")[0] ), sizeof( "ThreadCounterProfiling" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadCounterProfiling")), ("ThreadCounterProfiling") }, (ULONG)ThreadCounterProfiling }, { { sizeof( "ThreadIdealProcessorEx" ) - sizeof( ("ThreadIdealProcessorEx")[0] ), sizeof( "ThreadIdealProcessorEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadIdealProcessorEx")), ("ThreadIdealProcessorEx") }, (ULONG)ThreadIdealProcessorEx }, { { sizeof( "ThreadCpuAccountingInformation" ) - sizeof( ("ThreadCpuAccountingInformation")[0] ), sizeof( "ThreadCpuAccountingInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadCpuAccountingInformation")), ("ThreadCpuAccountingInformation") }, (ULONG)ThreadCpuAccountingInformation }, { { sizeof( "ThreadSuspendCount" ) - sizeof( ("ThreadSuspendCount")[0] ), sizeof( "ThreadSuspendCount" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadSuspendCount")), ("ThreadSuspendCount") }, (ULONG)ThreadSuspendCount }, { { sizeof( "ThreadHeterogeneousCpuPolicy" ) - sizeof( ("ThreadHeterogeneousCpuPolicy")[0] ), sizeof( "ThreadHeterogeneousCpuPolicy" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadHeterogeneousCpuPolicy")), ("ThreadHeterogeneousCpuPolicy") }, (ULONG)ThreadHeterogeneousCpuPolicy }, { { sizeof( "ThreadContainerId" ) - sizeof( ("ThreadContainerId")[0] ), sizeof( "ThreadContainerId" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadContainerId")), ("ThreadContainerId") }, (ULONG)ThreadContainerId }, { { sizeof( "ThreadNameInformation" ) - sizeof( ("ThreadNameInformation")[0] ), sizeof( "ThreadNameInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadNameInformation")), ("ThreadNameInformation") }, (ULONG)ThreadNameInformation }, { { sizeof( "ThreadSelectedCpuSets" ) - sizeof( ("ThreadSelectedCpuSets")[0] ), sizeof( "ThreadSelectedCpuSets" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadSelectedCpuSets")), ("ThreadSelectedCpuSets") }, (ULONG)ThreadSelectedCpuSets }, { { sizeof( "ThreadSystemThreadInformation" ) - sizeof( ("ThreadSystemThreadInformation")[0] ), sizeof( "ThreadSystemThreadInformation" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadSystemThreadInformation")), ("ThreadSystemThreadInformation") }, (ULONG)ThreadSystemThreadInformation }, { { sizeof( "ThreadActualGroupAffinity" ) - sizeof( ("ThreadActualGroupAffinity")[0] ), sizeof( "ThreadActualGroupAffinity" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadActualGroupAffinity")), ("ThreadActualGroupAffinity") }, (ULONG)ThreadActualGroupAffinity }, { { sizeof( "ThreadDynamicCodePolicyInfo" ) - sizeof( ("ThreadDynamicCodePolicyInfo")[0] ), sizeof( "ThreadDynamicCodePolicyInfo" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadDynamicCodePolicyInfo")), ("ThreadDynamicCodePolicyInfo") }, (ULONG)ThreadDynamicCodePolicyInfo }, { { sizeof( "ThreadExplicitCaseSensitivity" ) - sizeof( ("ThreadExplicitCaseSensitivity")[0] ), sizeof( "ThreadExplicitCaseSensitivity" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadExplicitCaseSensitivity")), ("ThreadExplicitCaseSensitivity") }, (ULONG)ThreadExplicitCaseSensitivity }, { { sizeof( "ThreadWorkOnBehalfTicket" ) - sizeof( ("ThreadWorkOnBehalfTicket")[0] ), sizeof( "ThreadWorkOnBehalfTicket" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadWorkOnBehalfTicket")), ("ThreadWorkOnBehalfTicket") }, (ULONG)ThreadWorkOnBehalfTicket }, { { sizeof( "ThreadDbgkWerReportActive" ) - sizeof( ("ThreadDbgkWerReportActive")[0] ), sizeof( "ThreadDbgkWerReportActive" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadDbgkWerReportActive")), ("ThreadDbgkWerReportActive") }, (ULONG)ThreadDbgkWerReportActive }, { { sizeof( "ThreadAttachContainer" ) - sizeof( ("ThreadAttachContainer")[0] ), sizeof( "ThreadAttachContainer" ) / sizeof(_RTL_CONSTANT_STRING_type_check("ThreadAttachContainer")), ("ThreadAttachContainer") }, (ULONG)ThreadAttachContainer }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_THREADINFOCLASS = { .Id = 24, .Type = AHDT_ENUM, .Name = { sizeof( "THREADINFOCLASS" ) - sizeof( ("THREADINFOCLASS")[0] ), sizeof( "THREADINFOCLASS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREADINFOCLASS")), ("THREADINFOCLASS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_THREADINFOCLASS) / sizeof(AvmpHookEnumNameValue_THREADINFOCLASS[0])), .Items = AvmpHookEnumNameValue_THREADINFOCLASS } };
#line 629 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_DUPLICATE_OPTIONS[] = { { { sizeof( "DUPLICATE_CLOSE_SOURCE" ) - sizeof( ("DUPLICATE_CLOSE_SOURCE")[0] ), sizeof( "DUPLICATE_CLOSE_SOURCE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DUPLICATE_CLOSE_SOURCE")), ("DUPLICATE_CLOSE_SOURCE") }, (ULONG)0x00000001 }, { { sizeof( "DUPLICATE_SAME_ACCESS" ) - sizeof( ("DUPLICATE_SAME_ACCESS")[0] ), sizeof( "DUPLICATE_SAME_ACCESS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DUPLICATE_SAME_ACCESS")), ("DUPLICATE_SAME_ACCESS") }, (ULONG)0x00000002 }, { { sizeof( "DUPLICATE_SAME_ATTRIBUTES" ) - sizeof( ("DUPLICATE_SAME_ATTRIBUTES")[0] ), sizeof( "DUPLICATE_SAME_ATTRIBUTES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DUPLICATE_SAME_ATTRIBUTES")), ("DUPLICATE_SAME_ATTRIBUTES") }, (ULONG)0x00000004 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_DUPLICATE_OPTIONS = { .Id = 25, .Type = AHDT_ENUM, .Name = { sizeof( "DUPLICATE_OPTIONS" ) - sizeof( ("DUPLICATE_OPTIONS")[0] ), sizeof( "DUPLICATE_OPTIONS" ) / sizeof(_RTL_CONSTANT_STRING_type_check("DUPLICATE_OPTIONS")), ("DUPLICATE_OPTIONS") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_DUPLICATE_OPTIONS) / sizeof(AvmpHookEnumNameValue_DUPLICATE_OPTIONS[0])), .Items = AvmpHookEnumNameValue_DUPLICATE_OPTIONS } };
#line 636 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"








AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_THREAD_CREATE[] = { { { sizeof( "THREAD_CREATE_FLAGS_CREATE_SUSPENDED" ) - sizeof( ("THREAD_CREATE_FLAGS_CREATE_SUSPENDED")[0] ), sizeof( "THREAD_CREATE_FLAGS_CREATE_SUSPENDED" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE_FLAGS_CREATE_SUSPENDED")), ("THREAD_CREATE_FLAGS_CREATE_SUSPENDED") }, (ULONG)0x00000001 }, { { sizeof( "THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH" ) - sizeof( ("THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH")[0] ), sizeof( "THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH")), ("THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH") }, (ULONG)0x00000002 }, { { sizeof( "THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER" ) - sizeof( ("THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER")[0] ), sizeof( "THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER")), ("THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER") }, (ULONG)0x00000004 }, { { sizeof( "THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR" ) - sizeof( ("THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR")[0] ), sizeof( "THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR")), ("THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR") }, (ULONG)0x00000010 }, { { sizeof( "THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET" ) - sizeof( ("THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET")[0] ), sizeof( "THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET")), ("THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET") }, (ULONG)0x00000020 }, { { sizeof( "THREAD_CREATE_FLAGS_INITIAL_THREAD" ) - sizeof( ("THREAD_CREATE_FLAGS_INITIAL_THREAD")[0] ), sizeof( "THREAD_CREATE_FLAGS_INITIAL_THREAD" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE_FLAGS_INITIAL_THREAD")), ("THREAD_CREATE_FLAGS_INITIAL_THREAD") }, (ULONG)0x00000080 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_THREAD_CREATE = { .Id = 26, .Type = AHDT_ENUM, .Name = { sizeof( "THREAD_CREATE" ) - sizeof( ("THREAD_CREATE")[0] ), sizeof( "THREAD_CREATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("THREAD_CREATE")), ("THREAD_CREATE") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_THREAD_CREATE) / sizeof(AvmpHookEnumNameValue_THREAD_CREATE[0])), .Items = AvmpHookEnumNameValue_THREAD_CREATE } };
#line 653 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"







AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_PROCESS_CREATE[] = { { { sizeof( "PROCESS_CREATE_FLAGS_BREAKAWAY" ) - sizeof( ("PROCESS_CREATE_FLAGS_BREAKAWAY")[0] ), sizeof( "PROCESS_CREATE_FLAGS_BREAKAWAY" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_FLAGS_BREAKAWAY")), ("PROCESS_CREATE_FLAGS_BREAKAWAY") }, (ULONG)0x00000001 }, { { sizeof( "PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT" ) - sizeof( ("PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT")[0] ), sizeof( "PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT")), ("PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT") }, (ULONG)0x00000002 }, { { sizeof( "PROCESS_CREATE_FLAGS_INHERIT_HANDLES" ) - sizeof( ("PROCESS_CREATE_FLAGS_INHERIT_HANDLES")[0] ), sizeof( "PROCESS_CREATE_FLAGS_INHERIT_HANDLES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_FLAGS_INHERIT_HANDLES")), ("PROCESS_CREATE_FLAGS_INHERIT_HANDLES") }, (ULONG)0x00000004 }, { { sizeof( "PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE" ) - sizeof( ("PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE")[0] ), sizeof( "PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE")), ("PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE") }, (ULONG)0x00000008 }, { { sizeof( "PROCESS_CREATE_FLAGS_LARGE_PAGES" ) - sizeof( ("PROCESS_CREATE_FLAGS_LARGE_PAGES")[0] ), sizeof( "PROCESS_CREATE_FLAGS_LARGE_PAGES" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE_FLAGS_LARGE_PAGES")), ("PROCESS_CREATE_FLAGS_LARGE_PAGES") }, (ULONG)0x00000010 }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_PROCESS_CREATE = { .Id = 27, .Type = AHDT_ENUM, .Name = { sizeof( "PROCESS_CREATE" ) - sizeof( ("PROCESS_CREATE")[0] ), sizeof( "PROCESS_CREATE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("PROCESS_CREATE")), ("PROCESS_CREATE") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_PROCESS_CREATE) / sizeof(AvmpHookEnumNameValue_PROCESS_CREATE[0])), .Items = AvmpHookEnumNameValue_PROCESS_CREATE } };
#line 668 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_EVENT_TYPE[] = { { { sizeof( "NotificationEvent" ) - sizeof( ("NotificationEvent")[0] ), sizeof( "NotificationEvent" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NotificationEvent")), ("NotificationEvent") }, (ULONG)NotificationEvent }, { { sizeof( "SynchronizationEvent" ) - sizeof( ("SynchronizationEvent")[0] ), sizeof( "SynchronizationEvent" ) / sizeof(_RTL_CONSTANT_STRING_type_check("SynchronizationEvent")), ("SynchronizationEvent") }, (ULONG)SynchronizationEvent }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_EVENT_TYPE = { .Id = 28, .Type = AHDT_ENUM, .Name = { sizeof( "EVENT_TYPE" ) - sizeof( ("EVENT_TYPE")[0] ), sizeof( "EVENT_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("EVENT_TYPE")), ("EVENT_TYPE") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_EVENT_TYPE) / sizeof(AvmpHookEnumNameValue_EVENT_TYPE[0])), .Items = AvmpHookEnumNameValue_EVENT_TYPE } };
#line 674 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"

AVM_HOOK_DEFINITION_ENUM_NAME_VALUE AvmpHookEnumNameValue_WAIT_TYPE[] = { { { sizeof( "WaitAll" ) - sizeof( ("WaitAll")[0] ), sizeof( "WaitAll" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WaitAll")), ("WaitAll") }, (ULONG)WaitAll }, { { sizeof( "WaitAny" ) - sizeof( ("WaitAny")[0] ), sizeof( "WaitAny" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WaitAny")), ("WaitAny") }, (ULONG)WaitAny }, { { sizeof( "WaitNotification" ) - sizeof( ("WaitNotification")[0] ), sizeof( "WaitNotification" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WaitNotification")), ("WaitNotification") }, (ULONG)WaitNotification }, { { sizeof( "WaitDequeue" ) - sizeof( ("WaitDequeue")[0] ), sizeof( "WaitDequeue" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WaitDequeue")), ("WaitDequeue") }, (ULONG)WaitDequeue }, { { 0, 0, ((void *)0) }, 0 } }; __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookEnum_WAIT_TYPE = { .Id = 29, .Type = AHDT_ENUM, .Name = { sizeof( "WAIT_TYPE" ) - sizeof( ("WAIT_TYPE")[0] ), sizeof( "WAIT_TYPE" ) / sizeof(_RTL_CONSTANT_STRING_type_check("WAIT_TYPE")), ("WAIT_TYPE") }, .Enum = { .EnumType = AEVT_INTEGER, .EnumTypeSize = 4, .ItemCount = (sizeof(AvmpHookEnumNameValue_WAIT_TYPE) / sizeof(AvmpHookEnumNameValue_WAIT_TYPE[0])), .Items = AvmpHookEnumNameValue_WAIT_TYPE } };
#line 682 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_enum.inl"
#line 27 "device\\hook.c"
#line 1 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
#line 1 "C:\\Users\\Petr\\Desktop\\avmext\\src\\avmext\\utils/process.h"
#pragma once






 
NTSTATUS
__stdcall
AvmHookGetProcessIdFromProcessHandle(
    HANDLE ProcessHandle,
    PHANDLE ProcessId
  );

 
NTSTATUS
__stdcall
AvmHookGetThreadIdFromThreadHandle(
    HANDLE ThreadHandle,
    PHANDLE ThreadId
  );

 
NTSTATUS
__stdcall
AvmHookGetProcessIdFromThreadHandle(
    HANDLE ThreadHandle,
    PHANDLE ProcessId
  );

#line 2 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"














































































































#pragma region Special





typedef NTSTATUS (__stdcall * pfnRegisterEnums)( void ); NTSTATUS __stdcall AvmpHookRegisterEnums( void ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_RegisterEnums = { .Id = 30, .Type = AHDT_FUNCTION, .Name = { sizeof( "RegisterEnums" ) - sizeof( ("RegisterEnums")[0] ), sizeof( "RegisterEnums" ) / sizeof(_RTL_CONSTANT_STRING_type_check("RegisterEnums")), ("RegisterEnums") }, .Function = { .CategoryName = { sizeof( "Special" ) - sizeof( ("Special")[0] ), sizeof( "Special" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Special")), ("Special") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookRegisterEnums } }; NTSTATUS __stdcall AvmpHookRegisterEnums( void )
#line 123 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_RegisterEnums,
    0,
    AEVT_ENUM, &AvmpHookEnum_NTSTATUS, "Status", 0,
    AEVT_VOID);

  return ((NTSTATUS)0x00000000L);
}

#pragma endregion Special

#pragma region IO





typedef NTSTATUS (__stdcall * pfnNtCreateFile)(   PHANDLE FileHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PIO_STATUS_BLOCK IoStatusBlock,   PLARGE_INTEGER AllocationSize,   ULONG FileAttributes,   ULONG ShareAccess,   ULONG CreateDisposition,   ULONG CreateOptions,   PVOID EaBuffer,   ULONG EaLength ); NTSTATUS __stdcall AvmpHookNtCreateFile(   PHANDLE FileHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PIO_STATUS_BLOCK IoStatusBlock,   PLARGE_INTEGER AllocationSize,   ULONG FileAttributes,   ULONG ShareAccess,   ULONG CreateDisposition,   ULONG CreateOptions,   PVOID EaBuffer,   ULONG EaLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateFile = { .Id = 31, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateFile" ) - sizeof( ("NtCreateFile")[0] ), sizeof( "NtCreateFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateFile")), ("NtCreateFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateFile } }; NTSTATUS __stdcall AvmpHookNtCreateFile(   PHANDLE FileHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PIO_STATUS_BLOCK IoStatusBlock,   PLARGE_INTEGER AllocationSize,   ULONG FileAttributes,   ULONG ShareAccess,   ULONG CreateDisposition,   ULONG CreateOptions,   PVOID EaBuffer,   ULONG EaLength )
#line 156 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateFile)(AvmpHookFunction_NtCreateFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    DesiredAccess,
    ObjectAttributes,
    IoStatusBlock,
    AllocationSize,
    FileAttributes,
    ShareAccess,
    CreateDisposition,
    CreateOptions,
    EaBuffer,
    EaLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedFileName;
  ULONG CapturedFileNameFlags;
  do { *(&CapturedFileNameFlags) = AEVT_HINT_PROBE; (&CapturedFileName)->Buffer = ((void *)0); (&CapturedFileName)->Length = 0; (&CapturedFileName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedFileName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedFileName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedFileName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedFileNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateFile,
    ReturnValue,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", *FileHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_FILE_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedFileNameFlags, CapturedFileName.Length, "FileName", CapturedFileName.Buffer,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_FILE_ATTRIBUTES, "FileAttributes", FileAttributes,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_SHARE_ACCESS, "ShareAccess", ShareAccess,
    AEVT_ENUM, &AvmpHookEnum_CREATE_DISPOSITION, "CreateDisposition", CreateDisposition,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_CREATE_OPTIONS, "CreateOptions", CreateOptions,

    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtOpenFile)(   PHANDLE FileHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG ShareAccess,   ULONG OpenOptions ); NTSTATUS __stdcall AvmpHookNtOpenFile(   PHANDLE FileHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG ShareAccess,   ULONG OpenOptions ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtOpenFile = { .Id = 32, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtOpenFile" ) - sizeof( ("NtOpenFile")[0] ), sizeof( "NtOpenFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtOpenFile")), ("NtOpenFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtOpenFile } }; NTSTATUS __stdcall AvmpHookNtOpenFile(   PHANDLE FileHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG ShareAccess,   ULONG OpenOptions )
#line 207 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtOpenFile)(AvmpHookFunction_NtOpenFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    DesiredAccess,
    ObjectAttributes,
    IoStatusBlock,
    ShareAccess,
    OpenOptions);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedFileName;
  ULONG CapturedFileNameFlags;
  do { *(&CapturedFileNameFlags) = AEVT_HINT_PROBE; (&CapturedFileName)->Buffer = ((void *)0); (&CapturedFileName)->Length = 0; (&CapturedFileName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedFileName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedFileName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedFileName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedFileNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtOpenFile,
    ReturnValue,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),              "FileHandle",        *FileHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS,      &AvmpHookEnum_FILE_ACCESS_MASK,        "DesiredAccess",     DesiredAccess,
    AEVT_UNICODE_STRING | CapturedFileNameFlags, CapturedFileName.Length, "FileName", CapturedFileName.Buffer,
    AEVT_ENUM | AEVT_HINT_FLAGS,      &AvmpHookEnum_SHARE_ACCESS,       "ShareAccess",       ShareAccess,
    AEVT_ENUM | AEVT_HINT_FLAGS,      &AvmpHookEnum_CREATE_OPTIONS,     "OpenOptions",       OpenOptions,

    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtReadFile)(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID Buffer,   ULONG Length,   PLARGE_INTEGER ByteOffset,   PULONG Key ); NTSTATUS __stdcall AvmpHookNtReadFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID Buffer,   ULONG Length,   PLARGE_INTEGER ByteOffset,   PULONG Key ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtReadFile = { .Id = 33, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtReadFile" ) - sizeof( ("NtReadFile")[0] ), sizeof( "NtReadFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtReadFile")), ("NtReadFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtReadFile } }; NTSTATUS __stdcall AvmpHookNtReadFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID Buffer,   ULONG Length,   PLARGE_INTEGER ByteOffset,   PULONG Key )
#line 254 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtReadFile)(AvmpHookFunction_NtReadFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    Event,
    ApcRoutine,
    ApcContext,
    IoStatusBlock,
    Buffer,
    Length,
    ByteOffset,
    Key);


  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtReadFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BufferPointer", Buffer,
    AEVT_BINARY, Length, "Buffer", Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtWriteFile)(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID Buffer,   ULONG Length,   PLARGE_INTEGER ByteOffset,   PULONG Key ); NTSTATUS __stdcall AvmpHookNtWriteFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID Buffer,   ULONG Length,   PLARGE_INTEGER ByteOffset,   PULONG Key ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtWriteFile = { .Id = 34, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtWriteFile" ) - sizeof( ("NtWriteFile")[0] ), sizeof( "NtWriteFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtWriteFile")), ("NtWriteFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtWriteFile } }; NTSTATUS __stdcall AvmpHookNtWriteFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID Buffer,   ULONG Length,   PLARGE_INTEGER ByteOffset,   PULONG Key )
#line 297 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtWriteFile)(AvmpHookFunction_NtWriteFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    Event,
    ApcRoutine,
    ApcContext,
    IoStatusBlock,
    Buffer,
    Length,
    ByteOffset,
    Key);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtWriteFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BufferPointer", Buffer,
    AEVT_BINARY, Length, "Buffer", Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtDeleteFile)(   POBJECT_ATTRIBUTES ObjectAttributes ); NTSTATUS __stdcall AvmpHookNtDeleteFile(   POBJECT_ATTRIBUTES ObjectAttributes ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtDeleteFile = { .Id = 35, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtDeleteFile" ) - sizeof( ("NtDeleteFile")[0] ), sizeof( "NtDeleteFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtDeleteFile")), ("NtDeleteFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtDeleteFile } }; NTSTATUS __stdcall AvmpHookNtDeleteFile(   POBJECT_ATTRIBUTES ObjectAttributes )
#line 331 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtDeleteFile)(AvmpHookFunction_NtDeleteFile.Function.SSDTEntry->OriginalRoutineAddress))(
    ObjectAttributes);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedFileName;
  ULONG CapturedFileNameFlags;
  do { *(&CapturedFileNameFlags) = AEVT_HINT_PROBE; (&CapturedFileName)->Buffer = ((void *)0); (&CapturedFileName)->Length = 0; (&CapturedFileName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedFileName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedFileName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedFileName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedFileNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtDeleteFile,
    ReturnValue,
    AEVT_UNICODE_STRING | CapturedFileNameFlags, CapturedFileName.Length, "FileName", CapturedFileName.Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtQueryInformationFile)(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FileInformation,   ULONG Length,   FILE_INFORMATION_CLASS FileInformationClass ); NTSTATUS __stdcall AvmpHookNtQueryInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FileInformation,   ULONG Length,   FILE_INFORMATION_CLASS FileInformationClass ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueryInformationFile = { .Id = 36, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueryInformationFile" ) - sizeof( ("NtQueryInformationFile")[0] ), sizeof( "NtQueryInformationFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueryInformationFile")), ("NtQueryInformationFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueryInformationFile } }; NTSTATUS __stdcall AvmpHookNtQueryInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FileInformation,   ULONG Length,   FILE_INFORMATION_CLASS FileInformationClass )
#line 363 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueryInformationFile)(AvmpHookFunction_NtQueryInformationFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    IoStatusBlock,
    FileInformation,
    Length,
    FileInformationClass);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueryInformationFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_ENUM, &AvmpHookEnum_FILE_INFORMATION_CLASS, "FileInformationClass", FileInformationClass,
    AEVT_BINARY, Length, "FileInformation", FileInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSetInformationFile)(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FileInformation,   ULONG Length,   FILE_INFORMATION_CLASS FileInformationClass ); NTSTATUS __stdcall AvmpHookNtSetInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FileInformation,   ULONG Length,   FILE_INFORMATION_CLASS FileInformationClass ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSetInformationFile = { .Id = 37, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSetInformationFile" ) - sizeof( ("NtSetInformationFile")[0] ), sizeof( "NtSetInformationFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSetInformationFile")), ("NtSetInformationFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSetInformationFile } }; NTSTATUS __stdcall AvmpHookNtSetInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FileInformation,   ULONG Length,   FILE_INFORMATION_CLASS FileInformationClass )
#line 397 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSetInformationFile)(AvmpHookFunction_NtSetInformationFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    IoStatusBlock,
    FileInformation,
    Length,
    FileInformationClass);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSetInformationFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_ENUM, &AvmpHookEnum_FILE_INFORMATION_CLASS, "FileInformationClass", FileInformationClass,
    AEVT_BINARY, Length, "FileInformation", FileInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtDeviceIoControlFile)(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG IoControlCode,   PVOID InputBuffer,   ULONG InputBufferLength,   PVOID OutputBuffer,   ULONG OutputBufferLength ); NTSTATUS __stdcall AvmpHookNtDeviceIoControlFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG IoControlCode,   PVOID InputBuffer,   ULONG InputBufferLength,   PVOID OutputBuffer,   ULONG OutputBufferLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtDeviceIoControlFile = { .Id = 38, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtDeviceIoControlFile" ) - sizeof( ("NtDeviceIoControlFile")[0] ), sizeof( "NtDeviceIoControlFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtDeviceIoControlFile")), ("NtDeviceIoControlFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtDeviceIoControlFile } }; NTSTATUS __stdcall AvmpHookNtDeviceIoControlFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG IoControlCode,   PVOID InputBuffer,   ULONG InputBufferLength,   PVOID OutputBuffer,   ULONG OutputBufferLength )
#line 436 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtDeviceIoControlFile)(AvmpHookFunction_NtDeviceIoControlFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    Event,
    ApcRoutine,
    ApcContext,
    IoStatusBlock,
    IoControlCode,
    InputBuffer,
    InputBufferLength,
    OutputBuffer,
    OutputBufferLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtDeviceIoControlFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),     "FileHandle",          FileHandle,
    AEVT_INTEGER | AEVT_HINT_HEX,     sizeof(ULONG),      "IoControlCode",       IoControlCode,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID),      "InputBufferPointer",  InputBuffer,
    AEVT_BINARY,                      InputBufferLength,  "InputBuffer",         InputBuffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID),      "OutputBufferPointer", OutputBuffer,
    AEVT_BINARY,                      OutputBufferLength, "OutputBuffer",        OutputBuffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtFsControlFile)(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG FsControlCode,   PVOID InputBuffer,   ULONG InputBufferLength,   PVOID OutputBuffer,   ULONG OutputBufferLength ); NTSTATUS __stdcall AvmpHookNtFsControlFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG FsControlCode,   PVOID InputBuffer,   ULONG InputBufferLength,   PVOID OutputBuffer,   ULONG OutputBufferLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtFsControlFile = { .Id = 39, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtFsControlFile" ) - sizeof( ("NtFsControlFile")[0] ), sizeof( "NtFsControlFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtFsControlFile")), ("NtFsControlFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtFsControlFile } }; NTSTATUS __stdcall AvmpHookNtFsControlFile(   HANDLE FileHandle,   HANDLE Event,   PIO_APC_ROUTINE ApcRoutine,   PVOID ApcContext,   PIO_STATUS_BLOCK IoStatusBlock,   ULONG FsControlCode,   PVOID InputBuffer,   ULONG InputBufferLength,   PVOID OutputBuffer,   ULONG OutputBufferLength )
#line 483 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtFsControlFile)(AvmpHookFunction_NtFsControlFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    Event,
    ApcRoutine,
    ApcContext,
    IoStatusBlock,
    FsControlCode,
    InputBuffer,
    InputBufferLength,
    OutputBuffer,
    OutputBufferLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtFsControlFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_INTEGER | AEVT_HINT_HEX, sizeof(ULONG), "FsControlCode", FsControlCode,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "InputBufferPointer", InputBuffer,
    AEVT_BINARY, InputBufferLength, "InputBuffer", InputBuffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "OutputBufferPointer", OutputBuffer,
    AEVT_BINARY, OutputBufferLength, "OutputBuffer", OutputBuffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtQueryVolumeInformationFile)(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FsInformation,   ULONG Length,   FS_INFORMATION_CLASS FsInformationClass ); NTSTATUS __stdcall AvmpHookNtQueryVolumeInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FsInformation,   ULONG Length,   FS_INFORMATION_CLASS FsInformationClass ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueryVolumeInformationFile = { .Id = 40, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueryVolumeInformationFile" ) - sizeof( ("NtQueryVolumeInformationFile")[0] ), sizeof( "NtQueryVolumeInformationFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueryVolumeInformationFile")), ("NtQueryVolumeInformationFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueryVolumeInformationFile } }; NTSTATUS __stdcall AvmpHookNtQueryVolumeInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FsInformation,   ULONG Length,   FS_INFORMATION_CLASS FsInformationClass )
#line 525 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueryVolumeInformationFile)(AvmpHookFunction_NtQueryVolumeInformationFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    IoStatusBlock,
    FsInformation,
    Length,
    FsInformationClass);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueryVolumeInformationFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_ENUM, &AvmpHookEnum_FS_INFORMATION_CLASS, "FsInformationClass", FsInformationClass,
    AEVT_BINARY, Length, "FsInformation", FsInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSetVolumeInformationFile)(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FsInformation,   ULONG Length,   FS_INFORMATION_CLASS FsInformationClass ); NTSTATUS __stdcall AvmpHookNtSetVolumeInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FsInformation,   ULONG Length,   FS_INFORMATION_CLASS FsInformationClass ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSetVolumeInformationFile = { .Id = 41, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSetVolumeInformationFile" ) - sizeof( ("NtSetVolumeInformationFile")[0] ), sizeof( "NtSetVolumeInformationFile" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSetVolumeInformationFile")), ("NtSetVolumeInformationFile") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSetVolumeInformationFile } }; NTSTATUS __stdcall AvmpHookNtSetVolumeInformationFile(   HANDLE FileHandle,   PIO_STATUS_BLOCK IoStatusBlock,   PVOID FsInformation,   ULONG Length,   FS_INFORMATION_CLASS FsInformationClass )
#line 559 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSetVolumeInformationFile)(AvmpHookFunction_NtSetVolumeInformationFile.Function.SSDTEntry->OriginalRoutineAddress))(
    FileHandle,
    IoStatusBlock,
    FsInformation,
    Length,
    FsInformationClass);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSetVolumeInformationFile,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "FileHandle", FileHandle,
    AEVT_ENUM, &AvmpHookEnum_FS_INFORMATION_CLASS, "FsInformationClass", FsInformationClass,
    AEVT_BINARY, Length, "FsInformation", FsInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtLoadDriver)(   PUNICODE_STRING DriverServiceName ); NTSTATUS __stdcall AvmpHookNtLoadDriver(   PUNICODE_STRING DriverServiceName ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtLoadDriver = { .Id = 42, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtLoadDriver" ) - sizeof( ("NtLoadDriver")[0] ), sizeof( "NtLoadDriver" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtLoadDriver")), ("NtLoadDriver") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtLoadDriver } }; NTSTATUS __stdcall AvmpHookNtLoadDriver(   PUNICODE_STRING DriverServiceName )
#line 589 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtLoadDriver)(AvmpHookFunction_NtLoadDriver.Function.SSDTEntry->OriginalRoutineAddress))(
    DriverServiceName);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedDriverServiceName;
  ULONG CapturedDriverServiceNameFlags;
  do { *(&CapturedDriverServiceNameFlags) = AEVT_HINT_PROBE; (&CapturedDriverServiceName)->Buffer = ((void *)0); (&CapturedDriverServiceName)->Length = 0; (&CapturedDriverServiceName)->MaximumLength = 0; __try { if ((DriverServiceName) && (DriverServiceName)->Buffer) { (&CapturedDriverServiceName)->Buffer = (DriverServiceName)->Buffer; (&CapturedDriverServiceName)->Length = (DriverServiceName)->Length; (&CapturedDriverServiceName)->MaximumLength = (DriverServiceName)->MaximumLength; } } __except (1) { *(&CapturedDriverServiceNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtLoadDriver,
    ReturnValue,
    AEVT_UNICODE_STRING | CapturedDriverServiceNameFlags, CapturedDriverServiceName.Length, "DriverServiceName", CapturedDriverServiceName.Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtUnloadDriver)(   PUNICODE_STRING DriverServiceName ); NTSTATUS __stdcall AvmpHookNtUnloadDriver(   PUNICODE_STRING DriverServiceName ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtUnloadDriver = { .Id = 43, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtUnloadDriver" ) - sizeof( ("NtUnloadDriver")[0] ), sizeof( "NtUnloadDriver" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtUnloadDriver")), ("NtUnloadDriver") }, .Function = { .CategoryName = { sizeof( "IO" ) - sizeof( ("IO")[0] ), sizeof( "IO" ) / sizeof(_RTL_CONSTANT_STRING_type_check("IO")), ("IO") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtUnloadDriver } }; NTSTATUS __stdcall AvmpHookNtUnloadDriver(   PUNICODE_STRING DriverServiceName )
#line 617 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtUnloadDriver)(AvmpHookFunction_NtUnloadDriver.Function.SSDTEntry->OriginalRoutineAddress))(
    DriverServiceName);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedDriverServiceName;
  ULONG CapturedDriverServiceNameFlags;
  do { *(&CapturedDriverServiceNameFlags) = AEVT_HINT_PROBE; (&CapturedDriverServiceName)->Buffer = ((void *)0); (&CapturedDriverServiceName)->Length = 0; (&CapturedDriverServiceName)->MaximumLength = 0; __try { if ((DriverServiceName) && (DriverServiceName)->Buffer) { (&CapturedDriverServiceName)->Buffer = (DriverServiceName)->Buffer; (&CapturedDriverServiceName)->Length = (DriverServiceName)->Length; (&CapturedDriverServiceName)->MaximumLength = (DriverServiceName)->MaximumLength; } } __except (1) { *(&CapturedDriverServiceNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtUnloadDriver,
    ReturnValue,
    AEVT_UNICODE_STRING | CapturedDriverServiceNameFlags, CapturedDriverServiceName.Length, "DriverServiceName", CapturedDriverServiceName.Buffer,
    AEVT_VOID);

  return ReturnValue;
}

#pragma endregion IO

#pragma region Registry





typedef NTSTATUS (__stdcall * pfnNtQueryValueKey)(   HANDLE KeyHandle,   PUNICODE_STRING ValueName,   KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,   PVOID KeyValueInformation,   ULONG Length,   PULONG ResultLength ); NTSTATUS __stdcall AvmpHookNtQueryValueKey(   HANDLE KeyHandle,   PUNICODE_STRING ValueName,   KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,   PVOID KeyValueInformation,   ULONG Length,   PULONG ResultLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueryValueKey = { .Id = 44, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueryValueKey" ) - sizeof( ("NtQueryValueKey")[0] ), sizeof( "NtQueryValueKey" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueryValueKey")), ("NtQueryValueKey") }, .Function = { .CategoryName = { sizeof( "Registry" ) - sizeof( ("Registry")[0] ), sizeof( "Registry" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Registry")), ("Registry") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueryValueKey } }; NTSTATUS __stdcall AvmpHookNtQueryValueKey(   HANDLE KeyHandle,   PUNICODE_STRING ValueName,   KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,   PVOID KeyValueInformation,   ULONG Length,   PULONG ResultLength )
#line 654 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueryValueKey)(AvmpHookFunction_NtQueryValueKey.Function.SSDTEntry->OriginalRoutineAddress))(
    KeyHandle,
    ValueName,
    KeyValueInformationClass,
    KeyValueInformation,
    Length,
    ResultLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedValueName;
  ULONG CapturedValueNameFlags;
  do { *(&CapturedValueNameFlags) = AEVT_HINT_PROBE; (&CapturedValueName)->Buffer = ((void *)0); (&CapturedValueName)->Length = 0; (&CapturedValueName)->MaximumLength = 0; __try { if ((ValueName) && (ValueName)->Buffer) { (&CapturedValueName)->Buffer = (ValueName)->Buffer; (&CapturedValueName)->Length = (ValueName)->Length; (&CapturedValueName)->MaximumLength = (ValueName)->MaximumLength; } } __except (1) { *(&CapturedValueNameFlags) = AEVT_HINT_ERROR; } } while (0);

  ULONG CapturedResultLength;
  do { if (!(ResultLength)) { *(&CapturedResultLength) = 0; break; } __try { *(&CapturedResultLength) = *(ResultLength); } __except (1) { *(&CapturedResultLength) = 0; } } while (0);

  if (
    !(((NTSTATUS)(ReturnValue)) >= 0) &&

    
    
    
    
    ReturnValue != ((NTSTATUS)0x80000005L) &&
    ReturnValue != ((NTSTATUS)0xC0000023L)
    )
  {
    CapturedResultLength = 0;
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueryValueKey,
    ReturnValue,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),                       "KeyHandle",                KeyHandle,
    AEVT_UNICODE_STRING | CapturedValueNameFlags, CapturedValueName.Length,                      "ValueName", CapturedValueName.Buffer,
    AEVT_ENUM,                        &AvmpHookEnum_KEY_VALUE_INFORMATION_CLASS, "KeyValueInformationClass", KeyValueInformationClass,
    AEVT_BINARY, CapturedResultLength, "KeyValueInformation", KeyValueInformation,

    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSetValueKey)(   HANDLE KeyHandle,   PUNICODE_STRING ValueName,   ULONG TitleIndex,   ULONG Type,   PVOID Data,   ULONG DataSize ); NTSTATUS __stdcall AvmpHookNtSetValueKey(   HANDLE KeyHandle,   PUNICODE_STRING ValueName,   ULONG TitleIndex,   ULONG Type,   PVOID Data,   ULONG DataSize ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSetValueKey = { .Id = 45, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSetValueKey" ) - sizeof( ("NtSetValueKey")[0] ), sizeof( "NtSetValueKey" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSetValueKey")), ("NtSetValueKey") }, .Function = { .CategoryName = { sizeof( "Registry" ) - sizeof( ("Registry")[0] ), sizeof( "Registry" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Registry")), ("Registry") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSetValueKey } }; NTSTATUS __stdcall AvmpHookNtSetValueKey(   HANDLE KeyHandle,   PUNICODE_STRING ValueName,   ULONG TitleIndex,   ULONG Type,   PVOID Data,   ULONG DataSize )
#line 714 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSetValueKey)(AvmpHookFunction_NtSetValueKey.Function.SSDTEntry->OriginalRoutineAddress))(
    KeyHandle,
    ValueName,
    TitleIndex,
    Type,
    Data,
    DataSize);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedValueName;
  ULONG CapturedValueNameFlags;
  do { *(&CapturedValueNameFlags) = AEVT_HINT_PROBE; (&CapturedValueName)->Buffer = ((void *)0); (&CapturedValueName)->Length = 0; (&CapturedValueName)->MaximumLength = 0; __try { if ((ValueName) && (ValueName)->Buffer) { (&CapturedValueName)->Buffer = (ValueName)->Buffer; (&CapturedValueName)->Length = (ValueName)->Length; (&CapturedValueName)->MaximumLength = (ValueName)->MaximumLength; } } __except (1) { *(&CapturedValueNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSetValueKey,
    ReturnValue,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),                       "KeyHandle",                KeyHandle,
    AEVT_UNICODE_STRING | CapturedValueNameFlags, CapturedValueName.Length,                      "ValueName", CapturedValueName.Buffer,
    AEVT_ENUM,                        &AvmpHookEnum_REG_TYPE,                    "Type",                     Type,
    AEVT_BINARY,                      DataSize,                             "Data",                     Data,

    AEVT_VOID);

  return ReturnValue;
}

#pragma endregion Registry

#pragma region Memory





typedef NTSTATUS (__stdcall * pfnNtAllocateVirtualMemory)(   HANDLE ProcessHandle,    PVOID *BaseAddress,   ULONG_PTR ZeroBits,   PSIZE_T RegionSize,   ULONG AllocationType,   ULONG Protect ); NTSTATUS __stdcall AvmpHookNtAllocateVirtualMemory(   HANDLE ProcessHandle,    PVOID *BaseAddress,   ULONG_PTR ZeroBits,   PSIZE_T RegionSize,   ULONG AllocationType,   ULONG Protect ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtAllocateVirtualMemory = { .Id = 46, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtAllocateVirtualMemory" ) - sizeof( ("NtAllocateVirtualMemory")[0] ), sizeof( "NtAllocateVirtualMemory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtAllocateVirtualMemory")), ("NtAllocateVirtualMemory") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtAllocateVirtualMemory } }; NTSTATUS __stdcall AvmpHookNtAllocateVirtualMemory(   HANDLE ProcessHandle,    PVOID *BaseAddress,   ULONG_PTR ZeroBits,   PSIZE_T RegionSize,   ULONG AllocationType,   ULONG Protect )
#line 761 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtAllocateVirtualMemory)(AvmpHookFunction_NtAllocateVirtualMemory.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    BaseAddress,
    ZeroBits,
    RegionSize,
    AllocationType,
    Protect);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtAllocateVirtualMemory,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(PVOID), "BaseAddress", BaseAddress,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(SIZE_T), "RegionSize", RegionSize,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_ALLOCATION_TYPE, "AllocationType", AllocationType,
    AEVT_ENUM, &AvmpHookEnum_PAGE_PROTECT, "Protect", Protect,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtFreeVirtualMemory)(   HANDLE ProcessHandle,     PVOID *BaseAddress,   PSIZE_T RegionSize,   ULONG FreeType ); NTSTATUS __stdcall AvmpHookNtFreeVirtualMemory(   HANDLE ProcessHandle,     PVOID *BaseAddress,   PSIZE_T RegionSize,   ULONG FreeType ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtFreeVirtualMemory = { .Id = 47, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtFreeVirtualMemory" ) - sizeof( ("NtFreeVirtualMemory")[0] ), sizeof( "NtFreeVirtualMemory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtFreeVirtualMemory")), ("NtFreeVirtualMemory") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtFreeVirtualMemory } }; NTSTATUS __stdcall AvmpHookNtFreeVirtualMemory(   HANDLE ProcessHandle,     PVOID *BaseAddress,   PSIZE_T RegionSize,   ULONG FreeType )
#line 801 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtFreeVirtualMemory)(AvmpHookFunction_NtFreeVirtualMemory.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    BaseAddress,
    RegionSize,
    FreeType);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtFreeVirtualMemory,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(PVOID), "BaseAddress", BaseAddress,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(SIZE_T), "RegionSize", RegionSize,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_ALLOCATION_TYPE, "FreeType", FreeType,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtReadVirtualMemory)(   HANDLE ProcessHandle,   PVOID BaseAddress,   PVOID Buffer,   SIZE_T BufferSize,   PSIZE_T NumberOfBytesRead ); NTSTATUS __stdcall AvmpHookNtReadVirtualMemory(   HANDLE ProcessHandle,   PVOID BaseAddress,   PVOID Buffer,   SIZE_T BufferSize,   PSIZE_T NumberOfBytesRead ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtReadVirtualMemory = { .Id = 48, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtReadVirtualMemory" ) - sizeof( ("NtReadVirtualMemory")[0] ), sizeof( "NtReadVirtualMemory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtReadVirtualMemory")), ("NtReadVirtualMemory") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtReadVirtualMemory } }; NTSTATUS __stdcall AvmpHookNtReadVirtualMemory(   HANDLE ProcessHandle,   PVOID BaseAddress,   PVOID Buffer,   SIZE_T BufferSize,   PSIZE_T NumberOfBytesRead )
#line 839 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtReadVirtualMemory)(AvmpHookFunction_NtReadVirtualMemory.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    BaseAddress,
    Buffer,
    BufferSize,
    NumberOfBytesRead);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  SIZE_T CapturedNumberOfBytesRead;
  do { if (!(NumberOfBytesRead)) { *(&CapturedNumberOfBytesRead) = 0; break; } __try { *(&CapturedNumberOfBytesRead) = *(NumberOfBytesRead); } __except (1) { *(&CapturedNumberOfBytesRead) = 0; } } while (0);

  SIZE_T BufferToLogSize = 0;
  if ((((NTSTATUS)(ReturnValue)) >= 0))
  {
    BufferToLogSize = CapturedNumberOfBytesRead
      ? CapturedNumberOfBytesRead
      : BufferSize;
  }

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtReadVirtualMemory,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BaseAddress", BaseAddress,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BufferPointer", Buffer,
    AEVT_BINARY, BufferToLogSize, "Buffer", Buffer,
    AEVT_INTEGER, sizeof(SIZE_T), "BufferSize", BufferSize,
    AEVT_INTEGER, sizeof(SIZE_T), "NumberOfBytesRead", CapturedNumberOfBytesRead,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtWriteVirtualMemory)(   HANDLE ProcessHandle,   PVOID BaseAddress,   PVOID Buffer,   SIZE_T BufferSize,   PSIZE_T NumberOfBytesWritten ); NTSTATUS __stdcall AvmpHookNtWriteVirtualMemory(   HANDLE ProcessHandle,   PVOID BaseAddress,   PVOID Buffer,   SIZE_T BufferSize,   PSIZE_T NumberOfBytesWritten ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtWriteVirtualMemory = { .Id = 49, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtWriteVirtualMemory" ) - sizeof( ("NtWriteVirtualMemory")[0] ), sizeof( "NtWriteVirtualMemory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtWriteVirtualMemory")), ("NtWriteVirtualMemory") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtWriteVirtualMemory } }; NTSTATUS __stdcall AvmpHookNtWriteVirtualMemory(   HANDLE ProcessHandle,   PVOID BaseAddress,   PVOID Buffer,   SIZE_T BufferSize,   PSIZE_T NumberOfBytesWritten )
#line 891 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtWriteVirtualMemory)(AvmpHookFunction_NtWriteVirtualMemory.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    BaseAddress,
    Buffer,
    BufferSize,
    NumberOfBytesWritten);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  SIZE_T CapturedNumberOfBytesWritten;
  do { if (!(NumberOfBytesWritten)) { *(&CapturedNumberOfBytesWritten) = 0; break; } __try { *(&CapturedNumberOfBytesWritten) = *(NumberOfBytesWritten); } __except (1) { *(&CapturedNumberOfBytesWritten) = 0; } } while (0);

  SIZE_T BufferToLogSize = 0;
  if ((((NTSTATUS)(ReturnValue)) >= 0))
  {
    BufferToLogSize = CapturedNumberOfBytesWritten
      ? CapturedNumberOfBytesWritten
      : BufferSize;
  }

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  if (ProcessHandleToPid != 0 && ProcessHandleToPid != PsGetCurrentProcessId())
  {
    DbgPrint("[INJECTION] Writing memory from PID: %u to PID: %u\n", PsGetCurrentProcessId(), ProcessHandleToPid);
#line 921 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessHandleToPid);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtWriteVirtualMemory,
    ReturnValue,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BaseAddress", BaseAddress,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BufferPointer", Buffer,
    AEVT_BINARY, BufferToLogSize, "Buffer", Buffer,
    AEVT_INTEGER, sizeof(SIZE_T), "BufferSize", BufferSize,
    AEVT_INTEGER, sizeof(SIZE_T), "NumberOfBytesWritten", CapturedNumberOfBytesWritten,

    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtProtectVirtualMemory)(   HANDLE ProcessHandle,   PVOID *BaseAddress,   PSIZE_T RegionSize,   ULONG NewProtect,   PULONG OldProtect ); NTSTATUS __stdcall AvmpHookNtProtectVirtualMemory(   HANDLE ProcessHandle,   PVOID *BaseAddress,   PSIZE_T RegionSize,   ULONG NewProtect,   PULONG OldProtect ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtProtectVirtualMemory = { .Id = 50, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtProtectVirtualMemory" ) - sizeof( ("NtProtectVirtualMemory")[0] ), sizeof( "NtProtectVirtualMemory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtProtectVirtualMemory")), ("NtProtectVirtualMemory") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtProtectVirtualMemory } }; NTSTATUS __stdcall AvmpHookNtProtectVirtualMemory(   HANDLE ProcessHandle,   PVOID *BaseAddress,   PSIZE_T RegionSize,   ULONG NewProtect,   PULONG OldProtect )
#line 955 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtProtectVirtualMemory)(AvmpHookFunction_NtProtectVirtualMemory.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    BaseAddress,
    RegionSize,
    NewProtect,
    OldProtect);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  PVOID CapturedBaseAddress;
  do { if (!(BaseAddress)) { *(&CapturedBaseAddress) = 0; break; } __try { *(&CapturedBaseAddress) = *(BaseAddress); } __except (1) { *(&CapturedBaseAddress) = 0; } } while (0);

  SIZE_T CapturedRegionSize;
  do { if (!(RegionSize)) { *(&CapturedRegionSize) = 0; break; } __try { *(&CapturedRegionSize) = *(RegionSize); } __except (1) { *(&CapturedRegionSize) = 0; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtProtectVirtualMemory,
    ReturnValue,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "BaseAddress", BaseAddress,
    AEVT_BINARY | AEVT_HINT_INDIRECT_PROCESS, ProcessHandle, CapturedRegionSize, "Buffer", CapturedBaseAddress,
    AEVT_INTEGER, sizeof(SIZE_T), "RegionSize", CapturedRegionSize,
    AEVT_ENUM, &AvmpHookEnum_PAGE_PROTECT, "NewProtect", NewProtect,
    AEVT_ENUM | AEVT_HINT_PROBE, &AvmpHookEnum_PAGE_PROTECT, "OldProtect", OldProtect,

    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtMapViewOfSection)(   HANDLE SectionHandle,   HANDLE ProcessHandle,    PVOID *BaseAddress,   ULONG_PTR ZeroBits,   SIZE_T CommitSize,   PLARGE_INTEGER SectionOffset,   PSIZE_T ViewSize,   SECTION_INHERIT InheritDisposition,   ULONG AllocationType,   ULONG Win32Protect ); NTSTATUS __stdcall AvmpHookNtMapViewOfSection(   HANDLE SectionHandle,   HANDLE ProcessHandle,    PVOID *BaseAddress,   ULONG_PTR ZeroBits,   SIZE_T CommitSize,   PLARGE_INTEGER SectionOffset,   PSIZE_T ViewSize,   SECTION_INHERIT InheritDisposition,   ULONG AllocationType,   ULONG Win32Protect ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtMapViewOfSection = { .Id = 51, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtMapViewOfSection" ) - sizeof( ("NtMapViewOfSection")[0] ), sizeof( "NtMapViewOfSection" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtMapViewOfSection")), ("NtMapViewOfSection") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtMapViewOfSection } }; NTSTATUS __stdcall AvmpHookNtMapViewOfSection(   HANDLE SectionHandle,   HANDLE ProcessHandle,    PVOID *BaseAddress,   ULONG_PTR ZeroBits,   SIZE_T CommitSize,   PLARGE_INTEGER SectionOffset,   PSIZE_T ViewSize,   SECTION_INHERIT InheritDisposition,   ULONG AllocationType,   ULONG Win32Protect )
#line 1009 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtMapViewOfSection)(AvmpHookFunction_NtMapViewOfSection.Function.SSDTEntry->OriginalRoutineAddress))(
    SectionHandle,
    ProcessHandle,
    BaseAddress,
    ZeroBits,
    CommitSize,
    SectionOffset,
    ViewSize,
    InheritDisposition,
    AllocationType,
    Win32Protect);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  PVOID CapturedBaseAddress;
  do { if (!(BaseAddress)) { *(&CapturedBaseAddress) = 0; break; } __try { *(&CapturedBaseAddress) = *(BaseAddress); } __except (1) { *(&CapturedBaseAddress) = 0; } } while (0);

  SIZE_T CapturedViewSize;
  do { if (!(ViewSize)) { *(&CapturedViewSize) = 0; break; } __try { *(&CapturedViewSize) = *(ViewSize); } __except (1) { *(&CapturedViewSize) = 0; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  if (ProcessHandleToPid != 0 && ProcessHandleToPid != PsGetCurrentProcessId())
  {
    DbgPrint("[INJECTION] Mapping view from PID: %u to PID: %u\n", PsGetCurrentProcessId(), ProcessHandleToPid);
#line 1039 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessHandleToPid);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtMapViewOfSection,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),           "SectionHandle",      SectionHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),           "ProcessHandle",      ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE),           "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID),            "BaseAddress",        CapturedBaseAddress,
    AEVT_BINARY | AEVT_HINT_INDIRECT_PROCESS, ProcessHandle, CapturedViewSize, "Buffer", CapturedBaseAddress,
    AEVT_INTEGER,                     sizeof(SIZE_T),           "ViewSize",           CapturedViewSize,
    AEVT_ENUM,                        &AvmpHookEnum_SECTION_INHERIT, "InheritDisposition", InheritDisposition,
    AEVT_ENUM | AEVT_HINT_FLAGS,      &AvmpHookEnum_ALLOCATION_TYPE, "AllocationType",     AllocationType,
    AEVT_ENUM,                        &AvmpHookEnum_PAGE_PROTECT,    "Win32Protect",       Win32Protect,

    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtUnmapViewOfSection)(   HANDLE ProcessHandle,   PVOID BaseAddress ); NTSTATUS __stdcall AvmpHookNtUnmapViewOfSection(   HANDLE ProcessHandle,   PVOID BaseAddress ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtUnmapViewOfSection = { .Id = 52, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtUnmapViewOfSection" ) - sizeof( ("NtUnmapViewOfSection")[0] ), sizeof( "NtUnmapViewOfSection" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtUnmapViewOfSection")), ("NtUnmapViewOfSection") }, .Function = { .CategoryName = { sizeof( "Memory" ) - sizeof( ("Memory")[0] ), sizeof( "Memory" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Memory")), ("Memory") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtUnmapViewOfSection } }; NTSTATUS __stdcall AvmpHookNtUnmapViewOfSection(   HANDLE ProcessHandle,   PVOID BaseAddress )
#line 1071 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtUnmapViewOfSection)(AvmpHookFunction_NtUnmapViewOfSection.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    BaseAddress);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  if (ProcessHandleToPid != 0 && ProcessHandleToPid != PsGetCurrentProcessId())
  {
    DbgPrint("[INJECTION] Unmapping view from PID: %u to PID: %u\n", PsGetCurrentProcessId(), ProcessHandleToPid);
#line 1087 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessHandleToPid);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtUnmapViewOfSection,

    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE),           "ProcessHandle",      ProcessHandle,
    AEVT_INTEGER,                     sizeof(HANDLE),           "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID),            "BaseAddress",        BaseAddress,

    AEVT_VOID);

  return ReturnValue;
}

#pragma endregion Memory

#pragma region Process





typedef NTSTATUS (__stdcall * pfnNtCreateProcess)(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ParentProcess,   BOOLEAN InheritObjectTable,   HANDLE SectionHandle,   HANDLE DebugPort,   HANDLE ExceptionPort ); NTSTATUS __stdcall AvmpHookNtCreateProcess(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ParentProcess,   BOOLEAN InheritObjectTable,   HANDLE SectionHandle,   HANDLE DebugPort,   HANDLE ExceptionPort ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateProcess = { .Id = 53, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateProcess" ) - sizeof( ("NtCreateProcess")[0] ), sizeof( "NtCreateProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateProcess")), ("NtCreateProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateProcess } }; NTSTATUS __stdcall AvmpHookNtCreateProcess(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ParentProcess,   BOOLEAN InheritObjectTable,   HANDLE SectionHandle,   HANDLE DebugPort,   HANDLE ExceptionPort )
#line 1123 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateProcess)(AvmpHookFunction_NtCreateProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    DesiredAccess,
    ObjectAttributes,
    ParentProcess,
    InheritObjectTable,
    SectionHandle,
    DebugPort,
    ExceptionPort);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CapturedProcessHandle;
  do { if (!(ProcessHandle)) { *(&CapturedProcessHandle) = 0; break; } __try { *(&CapturedProcessHandle) = *(ProcessHandle); } __except (1) { *(&CapturedProcessHandle) = 0; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(CapturedProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", CapturedProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_PROCESS_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ParentProcess", ParentProcess,
    AEVT_BOOL, sizeof(BOOLEAN), "InheritObjectTable", InheritObjectTable,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "SectionHandle", SectionHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "DebugPort", DebugPort,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ExceptionPort", ExceptionPort,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtCreateProcessEx)(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ParentProcess,   ULONG Flags,   HANDLE SectionHandle,   HANDLE DebugPort,   HANDLE ExceptionPort,   ULONG JobMemberLevel ); NTSTATUS __stdcall AvmpHookNtCreateProcessEx(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ParentProcess,   ULONG Flags,   HANDLE SectionHandle,   HANDLE DebugPort,   HANDLE ExceptionPort,   ULONG JobMemberLevel ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateProcessEx = { .Id = 54, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateProcessEx" ) - sizeof( ("NtCreateProcessEx")[0] ), sizeof( "NtCreateProcessEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateProcessEx")), ("NtCreateProcessEx") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateProcessEx } }; NTSTATUS __stdcall AvmpHookNtCreateProcessEx(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ParentProcess,   ULONG Flags,   HANDLE SectionHandle,   HANDLE DebugPort,   HANDLE ExceptionPort,   ULONG JobMemberLevel )
#line 1180 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateProcessEx)(AvmpHookFunction_NtCreateProcessEx.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    DesiredAccess,
    ObjectAttributes,
    ParentProcess,
    Flags,
    SectionHandle,
    DebugPort,
    ExceptionPort,
    JobMemberLevel);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CapturedProcessHandle;
  do { if (!(ProcessHandle)) { *(&CapturedProcessHandle) = 0; break; } __try { *(&CapturedProcessHandle) = *(ProcessHandle); } __except (1) { *(&CapturedProcessHandle) = 0; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(CapturedProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateProcessEx,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", CapturedProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_PROCESS_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ParentProcess", ParentProcess,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_PROCESS_CREATE, "Flags", Flags,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "SectionHandle", SectionHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "DebugPort", DebugPort,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ExceptionPort", ExceptionPort,
    AEVT_VOID);

  return ReturnValue;
}





typedef struct _SECTION_IMAGE_INFORMATION
{
  PVOID TransferAddress;
  ULONG ZeroBits;
  SIZE_T MaximumStackSize;
  SIZE_T CommittedStackSize;
  ULONG SubSystemType;
  union
  {
    struct
    {
      USHORT SubSystemMinorVersion;
      USHORT SubSystemMajorVersion;
    };
    ULONG SubSystemVersion;
  };
  union
  {
    struct
    {
      USHORT MajorOperatingSystemVersion;
      USHORT MinorOperatingSystemVersion;
    };
    ULONG OperatingSystemVersion;
  };
  USHORT ImageCharacteristics;
  USHORT DllCharacteristics;
  USHORT Machine;
  BOOLEAN ImageContainsCode;
  union
  {
    UCHAR ImageFlags;
    struct
    {
      UCHAR ComPlusNativeReady : 1;
      UCHAR ComPlusILOnly : 1;
      UCHAR ImageDynamicallyRelocated : 1;
      UCHAR ImageMappedFlat : 1;
      UCHAR BaseBelow4gb : 1;
      UCHAR ComPlusPrefer32bit : 1;
      UCHAR Reserved : 2;
    };
  };
  ULONG LoaderFlags;
  ULONG ImageFileSize;
  ULONG CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION;




typedef struct _CURDIR
{
  UNICODE_STRING DosPath;
  HANDLE Handle;
} CURDIR, *PCURDIR;




typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  USHORT Flags;
  USHORT Length;
  ULONG TimeStamp;
  STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;




typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  ULONG MaximumLength;
  ULONG Length;

  ULONG Flags;
  ULONG DebugFlags;

  HANDLE ConsoleHandle;
  ULONG ConsoleFlags;
  HANDLE StandardInput;
  HANDLE StandardOutput;
  HANDLE StandardError;

  CURDIR CurrentDirectory;
  UNICODE_STRING DllPath;
  UNICODE_STRING ImagePathName;
  UNICODE_STRING CommandLine;
  PVOID Environment;

  ULONG StartingX;
  ULONG StartingY;
  ULONG CountX;
  ULONG CountY;
  ULONG CountCharsX;
  ULONG CountCharsY;
  ULONG FillAttribute;

  ULONG WindowFlags;
  ULONG ShowWindowFlags;
  UNICODE_STRING WindowTitle;
  UNICODE_STRING DesktopInfo;
  UNICODE_STRING ShellInfo;
  UNICODE_STRING RuntimeData;
  RTL_DRIVE_LETTER_CURDIR CurrentDirectories[32];

  ULONG EnvironmentSize;
  ULONG EnvironmentVersion;
  PVOID PackageDependencyData;
  ULONG ProcessGroupId;
  ULONG LoaderThreads;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;

typedef struct _RTL_USER_PROCESS_INFORMATION
{
  ULONG Length;
  HANDLE Process;
  HANDLE Thread;
  CLIENT_ID ClientId;
  SECTION_IMAGE_INFORMATION ImageInformation;
} RTL_USER_PROCESS_INFORMATION, *PRTL_USER_PROCESS_INFORMATION;

typedef enum _PS_CREATE_STATE
{
  PsCreateInitialState,
  PsCreateFailOnFileOpen,
  PsCreateFailOnSectionCreate,
  PsCreateFailExeFormat,
  PsCreateFailMachineMismatch,
  PsCreateFailExeName, 
  PsCreateSuccess,
  PsCreateMaximumStates
} PS_CREATE_STATE;

typedef struct _PS_CREATE_INFO
{
  SIZE_T Size;
  PS_CREATE_STATE State;
  union
  {
    
    struct
    {
      union
      {
        ULONG InitFlags;
        struct
        {
          UCHAR WriteOutputOnExit : 1;
          UCHAR DetectManifest : 1;
          UCHAR IFEOSkipDebugger : 1;
          UCHAR IFEODoNotPropagateKeyState : 1;
          UCHAR SpareBits1 : 4;
          UCHAR SpareBits2 : 8;
          USHORT ProhibitedImageCharacteristics : 16;
        };
      };
      ACCESS_MASK AdditionalFileAccess;
    } InitState;

    
    struct
    {
      HANDLE FileHandle;
    } FailSection;

    
    struct
    {
      USHORT DllCharacteristics;
    } ExeFormat;

    
    struct
    {
      HANDLE IFEOKey;
    } ExeName;

    
    struct
    {
      union
      {
        ULONG OutputFlags;
        struct
        {
          UCHAR ProtectedProcess : 1;
          UCHAR AddressSpaceOverride : 1;
          UCHAR DevOverrideEnabled : 1; 
          UCHAR ManifestDetected : 1;
          UCHAR ProtectedProcessLight : 1;
          UCHAR SpareBits1 : 3;
          UCHAR SpareBits2 : 8;
          USHORT SpareBits3 : 16;
        };
      };
      HANDLE FileHandle;
      HANDLE SectionHandle;
      ULONGLONG UserProcessParametersNative;
      ULONG UserProcessParametersWow64;
      ULONG CurrentParameterFlags;
      ULONGLONG PebAddressNative;
      ULONG PebAddressWow64;
      ULONGLONG ManifestAddress;
      ULONG ManifestSize;
    } SuccessState;
  };
} PS_CREATE_INFO, *PPS_CREATE_INFO;

typedef struct _PS_ATTRIBUTE
{
  ULONG_PTR Attribute;
  SIZE_T Size;
  union
  {
    ULONG_PTR Value;
    PVOID ValuePtr;
  };
  PSIZE_T ReturnLength;
} PS_ATTRIBUTE, *PPS_ATTRIBUTE;

typedef struct _PS_ATTRIBUTE_LIST
{
  SIZE_T TotalLength;
  PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;

typedef NTSTATUS (__stdcall * pfnNtCreateUserProcess)(   PHANDLE ProcessHandle,   PHANDLE ThreadHandle,   ACCESS_MASK ProcessDesiredAccess,   ACCESS_MASK ThreadDesiredAccess,   POBJECT_ATTRIBUTES ProcessObjectAttributes,   POBJECT_ATTRIBUTES ThreadObjectAttributes,   ULONG ProcessFlags,   ULONG ThreadFlags,   PVOID ProcessParameters,   PPS_CREATE_INFO CreateInfo,   PPS_ATTRIBUTE_LIST AttributeList ); NTSTATUS __stdcall AvmpHookNtCreateUserProcess(   PHANDLE ProcessHandle,   PHANDLE ThreadHandle,   ACCESS_MASK ProcessDesiredAccess,   ACCESS_MASK ThreadDesiredAccess,   POBJECT_ATTRIBUTES ProcessObjectAttributes,   POBJECT_ATTRIBUTES ThreadObjectAttributes,   ULONG ProcessFlags,   ULONG ThreadFlags,   PVOID ProcessParameters,   PPS_CREATE_INFO CreateInfo,   PPS_ATTRIBUTE_LIST AttributeList ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateUserProcess = { .Id = 55, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateUserProcess" ) - sizeof( ("NtCreateUserProcess")[0] ), sizeof( "NtCreateUserProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateUserProcess")), ("NtCreateUserProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateUserProcess } }; NTSTATUS __stdcall AvmpHookNtCreateUserProcess(   PHANDLE ProcessHandle,   PHANDLE ThreadHandle,   ACCESS_MASK ProcessDesiredAccess,   ACCESS_MASK ThreadDesiredAccess,   POBJECT_ATTRIBUTES ProcessObjectAttributes,   POBJECT_ATTRIBUTES ThreadObjectAttributes,   ULONG ProcessFlags,   ULONG ThreadFlags,   PVOID ProcessParameters,   PPS_CREATE_INFO CreateInfo,   PPS_ATTRIBUTE_LIST AttributeList )
#line 1468 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateUserProcess)(AvmpHookFunction_NtCreateUserProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    ThreadHandle,
    ProcessDesiredAccess,
    ThreadDesiredAccess,
    ProcessObjectAttributes,
    ThreadObjectAttributes,
    ProcessFlags,
    ThreadFlags,
    ProcessParameters,
    CreateInfo,
    AttributeList);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedProcessObjectName;
  ULONG CapturedProcessObjectNameFlags;
  do { *(&CapturedProcessObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedProcessObjectName)->Buffer = ((void *)0); (&CapturedProcessObjectName)->Length = 0; (&CapturedProcessObjectName)->MaximumLength = 0; __try { if ((ProcessObjectAttributes) && (ProcessObjectAttributes)->ObjectName && (ProcessObjectAttributes)->ObjectName->Buffer) { (&CapturedProcessObjectName)->Buffer = (ProcessObjectAttributes)->ObjectName->Buffer; (&CapturedProcessObjectName)->Length = (ProcessObjectAttributes)->ObjectName->Length; (&CapturedProcessObjectName)->MaximumLength = (ProcessObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedProcessObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  UNICODE_STRING CapturedThreadObjectName;
  ULONG CapturedThreadObjectNameFlags;
  do { *(&CapturedThreadObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedThreadObjectName)->Buffer = ((void *)0); (&CapturedThreadObjectName)->Length = 0; (&CapturedThreadObjectName)->MaximumLength = 0; __try { if ((ThreadObjectAttributes) && (ThreadObjectAttributes)->ObjectName && (ThreadObjectAttributes)->ObjectName->Buffer) { (&CapturedThreadObjectName)->Buffer = (ThreadObjectAttributes)->ObjectName->Buffer; (&CapturedThreadObjectName)->Length = (ThreadObjectAttributes)->ObjectName->Length; (&CapturedThreadObjectName)->MaximumLength = (ThreadObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedThreadObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CaptureadProcessHandle;
  do { if (!(ProcessHandle)) { *(&CaptureadProcessHandle) = 0; break; } __try { *(&CaptureadProcessHandle) = *(ProcessHandle); } __except (1) { *(&CaptureadProcessHandle) = 0; } } while (0);

  HANDLE CaptureadThreadHandle;
  do { if (!(ThreadHandle)) { *(&CaptureadThreadHandle) = 0; break; } __try { *(&CaptureadThreadHandle) = *(ThreadHandle); } __except (1) { *(&CaptureadThreadHandle) = 0; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(CaptureadProcessHandle, &ProcessHandleToPid);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(CaptureadThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateUserProcess,
    ReturnValue,
    AEVT_UNICODE_STRING | CapturedProcessObjectNameFlags, CapturedProcessObjectName.Length, "ProcessObjectName", CapturedProcessObjectName.Buffer,
    AEVT_UNICODE_STRING | CapturedThreadObjectNameFlags, CapturedThreadObjectName.Length, "ThreadObjectName", CapturedThreadObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", CaptureadProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", CaptureadThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_PROCESS_CREATE, "ProcessFlags", ProcessFlags,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_THREAD_CREATE, "ThreadFlags", ThreadFlags,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtOpenProcess)(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PCLIENT_ID ClientId ); NTSTATUS __stdcall AvmpHookNtOpenProcess(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PCLIENT_ID ClientId ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtOpenProcess = { .Id = 56, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtOpenProcess" ) - sizeof( ("NtOpenProcess")[0] ), sizeof( "NtOpenProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtOpenProcess")), ("NtOpenProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtOpenProcess } }; NTSTATUS __stdcall AvmpHookNtOpenProcess(   PHANDLE ProcessHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PCLIENT_ID ClientId )
#line 1532 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtOpenProcess)(AvmpHookFunction_NtOpenProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    DesiredAccess,
    ObjectAttributes,
    ClientId);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CapturedProcessHandle;
  do { if (!(ProcessHandle)) { *(&CapturedProcessHandle) = 0; break; } __try { *(&CapturedProcessHandle) = *(ProcessHandle); } __except (1) { *(&CapturedProcessHandle) = 0; } } while (0);

  PHANDLE CapturedUniqueProcessPointer = ClientId ? &ClientId->UniqueProcess : ((void *)0);
  PHANDLE CapturedUniqueThreadPointer  = ClientId ? &ClientId->UniqueThread  : ((void *)0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(CapturedProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtOpenProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", CapturedProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_PROCESS_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(HANDLE), "ClientIdUniqueProcess", CapturedUniqueProcessPointer,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(HANDLE), "ClientIdUniqueThread", CapturedUniqueThreadPointer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSuspendProcess)(   HANDLE ProcessHandle ); NTSTATUS __stdcall AvmpHookNtSuspendProcess(   HANDLE ProcessHandle ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSuspendProcess = { .Id = 57, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSuspendProcess" ) - sizeof( ("NtSuspendProcess")[0] ), sizeof( "NtSuspendProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSuspendProcess")), ("NtSuspendProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSuspendProcess } }; NTSTATUS __stdcall AvmpHookNtSuspendProcess(   HANDLE ProcessHandle )
#line 1577 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSuspendProcess)(AvmpHookFunction_NtSuspendProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSuspendProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtResumeProcess)(   HANDLE ProcessHandle ); NTSTATUS __stdcall AvmpHookNtResumeProcess(   HANDLE ProcessHandle ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtResumeProcess = { .Id = 58, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtResumeProcess" ) - sizeof( ("NtResumeProcess")[0] ), sizeof( "NtResumeProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtResumeProcess")), ("NtResumeProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtResumeProcess } }; NTSTATUS __stdcall AvmpHookNtResumeProcess(   HANDLE ProcessHandle )
#line 1605 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtResumeProcess)(AvmpHookFunction_NtResumeProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtResumeProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtTerminateProcess)(   HANDLE ProcessHandle,   NTSTATUS ExitStatus ); NTSTATUS __stdcall AvmpHookNtTerminateProcess(   HANDLE ProcessHandle,   NTSTATUS ExitStatus ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtTerminateProcess = { .Id = 59, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtTerminateProcess" ) - sizeof( ("NtTerminateProcess")[0] ), sizeof( "NtTerminateProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtTerminateProcess")), ("NtTerminateProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtTerminateProcess } }; NTSTATUS __stdcall AvmpHookNtTerminateProcess(   HANDLE ProcessHandle,   NTSTATUS ExitStatus )
#line 1634 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtTerminateProcess)(AvmpHookFunction_NtTerminateProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    ExitStatus);

  if (ExGetPreviousMode() == KernelMode)
  {
    return ReturnValue;
  }

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtTerminateProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_ENUM, &AvmpHookEnum_NTSTATUS, "ExitStatus", ExitStatus,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtQueryInformationProcess)(   HANDLE ProcessHandle,   PROCESSINFOCLASS ProcessInformationClass,   PVOID ProcessInformation,   ULONG ProcessInformationLength,   PULONG ReturnLength ); NTSTATUS __stdcall AvmpHookNtQueryInformationProcess(   HANDLE ProcessHandle,   PROCESSINFOCLASS ProcessInformationClass,   PVOID ProcessInformation,   ULONG ProcessInformationLength,   PULONG ReturnLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueryInformationProcess = { .Id = 60, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueryInformationProcess" ) - sizeof( ("NtQueryInformationProcess")[0] ), sizeof( "NtQueryInformationProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueryInformationProcess")), ("NtQueryInformationProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueryInformationProcess } }; NTSTATUS __stdcall AvmpHookNtQueryInformationProcess(   HANDLE ProcessHandle,   PROCESSINFOCLASS ProcessInformationClass,   PVOID ProcessInformation,   ULONG ProcessInformationLength,   PULONG ReturnLength )
#line 1671 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueryInformationProcess)(AvmpHookFunction_NtQueryInformationProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    ProcessInformationClass,
    ProcessInformation,
    ProcessInformationLength,
    ReturnLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  ULONG CapturedReturnLength;
  do { if (!(ReturnLength)) { *(&CapturedReturnLength) = 0; break; } __try { *(&CapturedReturnLength) = *(ReturnLength); } __except (1) { *(&CapturedReturnLength) = 0; } } while (0);

  if (
    !(((NTSTATUS)(ReturnValue)) >= 0) &&

    
    
    
    
    ReturnValue != ((NTSTATUS)0x80000005L) &&
    ReturnValue != ((NTSTATUS)0xC0000023L)
    )
  {
    CapturedReturnLength = 0;
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueryInformationProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_ENUM, &AvmpHookEnum_PROCESSINFOCLASS, "ProcessInformationClass", ProcessInformationClass,
    AEVT_BINARY, CapturedReturnLength, "ProcessInformation", ProcessInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSetInformationProcess)(   HANDLE ProcessHandle,   PROCESSINFOCLASS ProcessInformationClass,   PVOID ProcessInformation,   ULONG ProcessInformationLength ); NTSTATUS __stdcall AvmpHookNtSetInformationProcess(   HANDLE ProcessHandle,   PROCESSINFOCLASS ProcessInformationClass,   PVOID ProcessInformation,   ULONG ProcessInformationLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSetInformationProcess = { .Id = 61, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSetInformationProcess" ) - sizeof( ("NtSetInformationProcess")[0] ), sizeof( "NtSetInformationProcess" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSetInformationProcess")), ("NtSetInformationProcess") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSetInformationProcess } }; NTSTATUS __stdcall AvmpHookNtSetInformationProcess(   HANDLE ProcessHandle,   PROCESSINFOCLASS ProcessInformationClass,   PVOID ProcessInformation,   ULONG ProcessInformationLength )
#line 1725 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSetInformationProcess)(AvmpHookFunction_NtSetInformationProcess.Function.SSDTEntry->OriginalRoutineAddress))(
    ProcessHandle,
    ProcessInformationClass,
    ProcessInformation,
    ProcessInformationLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSetInformationProcess,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_ENUM, &AvmpHookEnum_PROCESSINFOCLASS, "ProcessInformationClass", ProcessInformationClass,
    AEVT_BINARY, ProcessInformationLength, "ProcessInformation", ProcessInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtCreateThread)(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ProcessHandle,   PCLIENT_ID ClientId,   PCONTEXT ThreadContext,   PVOID InitialTeb,   BOOLEAN CreateSuspended ); NTSTATUS __stdcall AvmpHookNtCreateThread(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ProcessHandle,   PCLIENT_ID ClientId,   PCONTEXT ThreadContext,   PVOID InitialTeb,   BOOLEAN CreateSuspended ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateThread = { .Id = 62, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateThread" ) - sizeof( ("NtCreateThread")[0] ), sizeof( "NtCreateThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateThread")), ("NtCreateThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateThread } }; NTSTATUS __stdcall AvmpHookNtCreateThread(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ProcessHandle,   PCLIENT_ID ClientId,   PCONTEXT ThreadContext,   PVOID InitialTeb,   BOOLEAN CreateSuspended )
#line 1765 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateThread)(AvmpHookFunction_NtCreateThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    DesiredAccess,
    ObjectAttributes,
    ProcessHandle,
    ClientId,
    ThreadContext,
    InitialTeb,
    CreateSuspended);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CapturedThreadHandle;
  do { if (!(ThreadHandle)) { *(&CapturedThreadHandle) = 0; break; } __try { *(&CapturedThreadHandle) = *(ThreadHandle); } __except (1) { *(&CapturedThreadHandle) = 0; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(CapturedThreadHandle, &ThreadHandleToTid);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  if (ProcessHandleToPid != 0 && ProcessHandleToPid != PsGetCurrentProcessId())
  {
    DbgPrint("[INJECTION] Thread injection from PID: %u to PID: %u, suspended: %s\n", PsGetCurrentProcessId(), ProcessHandleToPid, CreateSuspended ? "TRUE" : "FALSE");
#line 1798 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessHandleToPid);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", CapturedThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_THREAD_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,


#line 1814 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(PVOID), "ThreadContext->Rip", &ThreadContext->Rip,
#line 1816 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
    AEVT_BOOL, sizeof(BOOLEAN), "CreateSuspended", CreateSuspended,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtCreateThreadEx)(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ProcessHandle,   PVOID StartRoutine,   PVOID Argument,   ULONG CreateFlags,   SIZE_T ZeroBits,   SIZE_T StackSize,   SIZE_T MaximumStackSize,   PPS_ATTRIBUTE_LIST AttributeList ); NTSTATUS __stdcall AvmpHookNtCreateThreadEx(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ProcessHandle,   PVOID StartRoutine,   PVOID Argument,   ULONG CreateFlags,   SIZE_T ZeroBits,   SIZE_T StackSize,   SIZE_T MaximumStackSize,   PPS_ATTRIBUTE_LIST AttributeList ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateThreadEx = { .Id = 63, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateThreadEx" ) - sizeof( ("NtCreateThreadEx")[0] ), sizeof( "NtCreateThreadEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateThreadEx")), ("NtCreateThreadEx") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateThreadEx } }; NTSTATUS __stdcall AvmpHookNtCreateThreadEx(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   HANDLE ProcessHandle,   PVOID StartRoutine,   PVOID Argument,   ULONG CreateFlags,   SIZE_T ZeroBits,   SIZE_T StackSize,   SIZE_T MaximumStackSize,   PPS_ATTRIBUTE_LIST AttributeList )
#line 1841 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateThreadEx)(AvmpHookFunction_NtCreateThreadEx.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    DesiredAccess,
    ObjectAttributes,
    ProcessHandle,
    StartRoutine,
    Argument,
    CreateFlags,
    ZeroBits,
    StackSize,
    MaximumStackSize,
    AttributeList);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CapturedThreadHandle;
  do { if (!(ThreadHandle)) { *(&CapturedThreadHandle) = 0; break; } __try { *(&CapturedThreadHandle) = *(ThreadHandle); } __except (1) { *(&CapturedThreadHandle) = 0; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(CapturedThreadHandle, &ThreadHandleToTid);

  HANDLE ProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(ProcessHandle, &ProcessHandleToPid);

  if (ProcessHandleToPid != 0 && ProcessHandleToPid != PsGetCurrentProcessId())
  {
    DbgPrint("[INJECTION] Thread injection from PID: %u to PID: %u, suspended: %s\n", PsGetCurrentProcessId(), ProcessHandleToPid, (CreateFlags & 0x00000001) ? "TRUE" : "FALSE");
#line 1877 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessHandleToPid);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateThreadEx,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", CapturedThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_THREAD_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ProcessHandle", ProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ProcessHandleToPid", ProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "StartRoutine", StartRoutine,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "Argument", Argument,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_THREAD_CREATE, "CreateFlags", CreateFlags,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtOpenThread)(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PCLIENT_ID ClientId ); NTSTATUS __stdcall AvmpHookNtOpenThread(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PCLIENT_ID ClientId ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtOpenThread = { .Id = 64, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtOpenThread" ) - sizeof( ("NtOpenThread")[0] ), sizeof( "NtOpenThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtOpenThread")), ("NtOpenThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtOpenThread } }; NTSTATUS __stdcall AvmpHookNtOpenThread(   PHANDLE ThreadHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   PCLIENT_ID ClientId )
#line 1910 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtOpenThread)(AvmpHookFunction_NtOpenThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    DesiredAccess,
    ObjectAttributes,
    ClientId);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  HANDLE CapturedThreadHandle;
  do { if (!(ThreadHandle)) { *(&CapturedThreadHandle) = 0; break; } __try { *(&CapturedThreadHandle) = *(ThreadHandle); } __except (1) { *(&CapturedThreadHandle) = 0; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(CapturedThreadHandle, &ThreadHandleToTid);

  PHANDLE CapturedUniqueProcessPointer = ClientId ? &ClientId->UniqueProcess : ((void *)0);
  PHANDLE CapturedUniqueThreadPointer  = ClientId ? &ClientId->UniqueThread  : ((void *)0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtOpenThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", CapturedThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_THREAD_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(HANDLE), "ClientIdUniqueProcess", CapturedUniqueProcessPointer,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(HANDLE), "ClientIdUniqueThread", CapturedUniqueThreadPointer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSuspendThread)(   HANDLE ThreadHandle,   PULONG PreviousSuspendCount ); NTSTATUS __stdcall AvmpHookNtSuspendThread(   HANDLE ThreadHandle,   PULONG PreviousSuspendCount ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSuspendThread = { .Id = 65, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSuspendThread" ) - sizeof( ("NtSuspendThread")[0] ), sizeof( "NtSuspendThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSuspendThread")), ("NtSuspendThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSuspendThread } }; NTSTATUS __stdcall AvmpHookNtSuspendThread(   HANDLE ThreadHandle,   PULONG PreviousSuspendCount )
#line 1956 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSuspendThread)(AvmpHookFunction_NtSuspendThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    PreviousSuspendCount);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSuspendThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(ULONG), "PreviousSuspendCount", PreviousSuspendCount,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtResumeThread)(   HANDLE ThreadHandle,   PULONG PreviousSuspendCount ); NTSTATUS __stdcall AvmpHookNtResumeThread(   HANDLE ThreadHandle,   PULONG PreviousSuspendCount ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtResumeThread = { .Id = 66, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtResumeThread" ) - sizeof( ("NtResumeThread")[0] ), sizeof( "NtResumeThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtResumeThread")), ("NtResumeThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtResumeThread } }; NTSTATUS __stdcall AvmpHookNtResumeThread(   HANDLE ThreadHandle,   PULONG PreviousSuspendCount )
#line 1987 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtResumeThread)(AvmpHookFunction_NtResumeThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    PreviousSuspendCount);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtResumeThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(ULONG), "PreviousSuspendCount", PreviousSuspendCount,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtTerminateThread)(   HANDLE ThreadHandle,   NTSTATUS ExitStatus ); NTSTATUS __stdcall AvmpHookNtTerminateThread(   HANDLE ThreadHandle,   NTSTATUS ExitStatus ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtTerminateThread = { .Id = 67, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtTerminateThread" ) - sizeof( ("NtTerminateThread")[0] ), sizeof( "NtTerminateThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtTerminateThread")), ("NtTerminateThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtTerminateThread } }; NTSTATUS __stdcall AvmpHookNtTerminateThread(   HANDLE ThreadHandle,   NTSTATUS ExitStatus )
#line 2018 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtTerminateThread)(AvmpHookFunction_NtTerminateThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    ExitStatus);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtTerminateThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM, &AvmpHookEnum_NTSTATUS, "ExitStatus", ExitStatus,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtQueryInformationThread)(   HANDLE ThreadHandle,   THREADINFOCLASS ThreadInformationClass,   PVOID ThreadInformation,   ULONG ThreadInformationLength,   PULONG ReturnLength ); NTSTATUS __stdcall AvmpHookNtQueryInformationThread(   HANDLE ThreadHandle,   THREADINFOCLASS ThreadInformationClass,   PVOID ThreadInformation,   ULONG ThreadInformationLength,   PULONG ReturnLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueryInformationThread = { .Id = 68, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueryInformationThread" ) - sizeof( ("NtQueryInformationThread")[0] ), sizeof( "NtQueryInformationThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueryInformationThread")), ("NtQueryInformationThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueryInformationThread } }; NTSTATUS __stdcall AvmpHookNtQueryInformationThread(   HANDLE ThreadHandle,   THREADINFOCLASS ThreadInformationClass,   PVOID ThreadInformation,   ULONG ThreadInformationLength,   PULONG ReturnLength )
#line 2052 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueryInformationThread)(AvmpHookFunction_NtQueryInformationThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    ThreadInformationClass,
    ThreadInformation,
    ThreadInformationLength,
    ReturnLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  ULONG CapturedReturnLength;
  do { if (!(ReturnLength)) { *(&CapturedReturnLength) = 0; break; } __try { *(&CapturedReturnLength) = *(ReturnLength); } __except (1) { *(&CapturedReturnLength) = 0; } } while (0);

  if (
    !(((NTSTATUS)(ReturnValue)) >= 0) &&

    
    
    
    
    ReturnValue != ((NTSTATUS)0x80000005L) &&
    ReturnValue != ((NTSTATUS)0xC0000023L)
    )
  {
    CapturedReturnLength = 0;
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueryInformationThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM, &AvmpHookEnum_THREADINFOCLASS, "ThreadInformationClass", ThreadInformationClass,
    AEVT_BINARY, CapturedReturnLength, "ThreadInformation", ThreadInformation,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSetInformationThread)(   HANDLE ThreadHandle,   THREADINFOCLASS ThreadInformationClass,   PVOID ThreadInformation,   ULONG ThreadInformationLength ); NTSTATUS __stdcall AvmpHookNtSetInformationThread(   HANDLE ThreadHandle,   THREADINFOCLASS ThreadInformationClass,   PVOID ThreadInformation,   ULONG ThreadInformationLength ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSetInformationThread = { .Id = 69, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSetInformationThread" ) - sizeof( ("NtSetInformationThread")[0] ), sizeof( "NtSetInformationThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSetInformationThread")), ("NtSetInformationThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSetInformationThread } }; NTSTATUS __stdcall AvmpHookNtSetInformationThread(   HANDLE ThreadHandle,   THREADINFOCLASS ThreadInformationClass,   PVOID ThreadInformation,   ULONG ThreadInformationLength )
#line 2106 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSetInformationThread)(AvmpHookFunction_NtSetInformationThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    ThreadInformationClass,
    ThreadInformation,
    ThreadInformationLength);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSetInformationThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_ENUM, &AvmpHookEnum_THREADINFOCLASS, "ThreadInformationClass", ThreadInformationClass,
    AEVT_BINARY, ThreadInformationLength, "ThreadInformation", ThreadInformation,
    AEVT_VOID);

  return ReturnValue;
}




typedef NTSTATUS (__stdcall * pfnNtGetContextThread)(   HANDLE ThreadHandle,   PCONTEXT ThreadContext ); NTSTATUS __stdcall AvmpHookNtGetContextThread(   HANDLE ThreadHandle,   PCONTEXT ThreadContext ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtGetContextThread = { .Id = 70, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtGetContextThread" ) - sizeof( ("NtGetContextThread")[0] ), sizeof( "NtGetContextThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtGetContextThread")), ("NtGetContextThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtGetContextThread } }; NTSTATUS __stdcall AvmpHookNtGetContextThread(   HANDLE ThreadHandle,   PCONTEXT ThreadContext )
#line 2139 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtGetContextThread)(AvmpHookFunction_NtGetContextThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    ThreadContext);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtGetContextThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtSetContextThread)(   HANDLE ThreadHandle,   PCONTEXT ThreadContext ); NTSTATUS __stdcall AvmpHookNtSetContextThread(   HANDLE ThreadHandle,   PCONTEXT ThreadContext ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtSetContextThread = { .Id = 71, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtSetContextThread" ) - sizeof( ("NtSetContextThread")[0] ), sizeof( "NtSetContextThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtSetContextThread")), ("NtSetContextThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtSetContextThread } }; NTSTATUS __stdcall AvmpHookNtSetContextThread(   HANDLE ThreadHandle,   PCONTEXT ThreadContext )
#line 2169 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtSetContextThread)(AvmpHookFunction_NtSetContextThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    ThreadContext);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtSetContextThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,


#line 2187 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(PVOID), "ThreadContext->Rip", &ThreadContext->Rip,
#line 2189 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtImpersonateThread)(   HANDLE ServerThreadHandle,   HANDLE ClientThreadHandle,   PSECURITY_QUALITY_OF_SERVICE SecurityQos ); NTSTATUS __stdcall AvmpHookNtImpersonateThread(   HANDLE ServerThreadHandle,   HANDLE ClientThreadHandle,   PSECURITY_QUALITY_OF_SERVICE SecurityQos ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtImpersonateThread = { .Id = 72, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtImpersonateThread" ) - sizeof( ("NtImpersonateThread")[0] ), sizeof( "NtImpersonateThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtImpersonateThread")), ("NtImpersonateThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtImpersonateThread } }; NTSTATUS __stdcall AvmpHookNtImpersonateThread(   HANDLE ServerThreadHandle,   HANDLE ClientThreadHandle,   PSECURITY_QUALITY_OF_SERVICE SecurityQos )
#line 2205 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtImpersonateThread)(AvmpHookFunction_NtImpersonateThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ServerThreadHandle,
    ClientThreadHandle,
    SecurityQos);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ServerThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ServerThreadHandle, &ServerThreadHandleToTid);

  HANDLE ClientThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ClientThreadHandle, &ClientThreadHandleToTid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtImpersonateThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ServerThreadHandle", ServerThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ServerThreadHandleToTid", ServerThreadHandleToTid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ClientThreadHandle", ClientThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ClientThreadHandleToTid", ClientThreadHandleToTid,
    AEVT_VOID);

  return ReturnValue;
}





typedef void (*PPS_APC_ROUTINE)(
    PVOID ApcArgument1,
    PVOID ApcArgument2,
    PVOID ApcArgument3
  );

typedef NTSTATUS (__stdcall * pfnNtQueueApcThread)(   HANDLE ThreadHandle,   PPS_APC_ROUTINE ApcRoutine,   PVOID ApcArgument1,   PVOID ApcArgument2,   PVOID ApcArgument3 ); NTSTATUS __stdcall AvmpHookNtQueueApcThread(   HANDLE ThreadHandle,   PPS_APC_ROUTINE ApcRoutine,   PVOID ApcArgument1,   PVOID ApcArgument2,   PVOID ApcArgument3 ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueueApcThread = { .Id = 73, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueueApcThread" ) - sizeof( ("NtQueueApcThread")[0] ), sizeof( "NtQueueApcThread" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueueApcThread")), ("NtQueueApcThread") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueueApcThread } }; NTSTATUS __stdcall AvmpHookNtQueueApcThread(   HANDLE ThreadHandle,   PPS_APC_ROUTINE ApcRoutine,   PVOID ApcArgument1,   PVOID ApcArgument2,   PVOID ApcArgument3 )
#line 2250 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueueApcThread)(AvmpHookFunction_NtQueueApcThread.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    ApcRoutine,
    ApcArgument1,
    ApcArgument2,
    ApcArgument3);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  HANDLE ProcessIdFromThreadHandle = 0;
  AvmHookGetProcessIdFromThreadHandle(ThreadHandle, &ProcessIdFromThreadHandle);

  if (ProcessIdFromThreadHandle != PsGetCurrentProcessId() && ProcessIdFromThreadHandle != 0)
  {
    DbgPrint("[INJECTION] Queuing APC from PID: %u to PID: %u\n", PsGetCurrentProcessId(), ProcessIdFromThreadHandle);
#line 2272 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessIdFromThreadHandle);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueueApcThread,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcRoutine", ApcRoutine,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcArgument1", ApcArgument1,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcArgument2", ApcArgument2,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcArgument3", ApcArgument3,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtQueueApcThreadEx)(   HANDLE ThreadHandle,   HANDLE UserApcReserveHandle,   PPS_APC_ROUTINE ApcRoutine,   PVOID ApcArgument1,   PVOID ApcArgument2,   PVOID ApcArgument3 ); NTSTATUS __stdcall AvmpHookNtQueueApcThreadEx(   HANDLE ThreadHandle,   HANDLE UserApcReserveHandle,   PPS_APC_ROUTINE ApcRoutine,   PVOID ApcArgument1,   PVOID ApcArgument2,   PVOID ApcArgument3 ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtQueueApcThreadEx = { .Id = 74, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtQueueApcThreadEx" ) - sizeof( ("NtQueueApcThreadEx")[0] ), sizeof( "NtQueueApcThreadEx" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtQueueApcThreadEx")), ("NtQueueApcThreadEx") }, .Function = { .CategoryName = { sizeof( "Process" ) - sizeof( ("Process")[0] ), sizeof( "Process" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Process")), ("Process") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtQueueApcThreadEx } }; NTSTATUS __stdcall AvmpHookNtQueueApcThreadEx(   HANDLE ThreadHandle,   HANDLE UserApcReserveHandle,   PPS_APC_ROUTINE ApcRoutine,   PVOID ApcArgument1,   PVOID ApcArgument2,   PVOID ApcArgument3 )
#line 2304 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtQueueApcThreadEx)(AvmpHookFunction_NtQueueApcThreadEx.Function.SSDTEntry->OriginalRoutineAddress))(
    ThreadHandle,
    UserApcReserveHandle,
    ApcRoutine,
    ApcArgument1,
    ApcArgument2,
    ApcArgument3);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE ThreadHandleToTid = 0;
  AvmHookGetThreadIdFromThreadHandle(ThreadHandle, &ThreadHandleToTid);

  HANDLE ProcessIdFromThreadHandle = 0;
  AvmHookGetProcessIdFromThreadHandle(ThreadHandle, &ProcessIdFromThreadHandle);

  if (ProcessIdFromThreadHandle != PsGetCurrentProcessId() && ProcessIdFromThreadHandle != 0)
  {
    DbgPrint("[INJECTION] Queuing APC from PID: %u to PID: %u\n", PsGetCurrentProcessId(), ProcessIdFromThreadHandle);
#line 2327 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"

    AvmHookAddWatchedProcessId(ProcessIdFromThreadHandle);
  }

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtQueueApcThreadEx,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "ThreadHandle", ThreadHandle,
    AEVT_INTEGER, sizeof(HANDLE), "ThreadHandleToTid", ThreadHandleToTid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "UserApcReserveHandle", UserApcReserveHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcRoutine", ApcRoutine,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcArgument1", ApcArgument1,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcArgument2", ApcArgument2,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(PVOID), "ApcArgument3", ApcArgument3,
    AEVT_VOID);

  return ReturnValue;
}

#pragma endregion Process

#pragma region Synchronization





typedef NTSTATUS (__stdcall * pfnNtCreateMutant)(   PHANDLE MutantHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   BOOLEAN InitialOwner ); NTSTATUS __stdcall AvmpHookNtCreateMutant(   PHANDLE MutantHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   BOOLEAN InitialOwner ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateMutant = { .Id = 75, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateMutant" ) - sizeof( ("NtCreateMutant")[0] ), sizeof( "NtCreateMutant" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateMutant")), ("NtCreateMutant") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateMutant } }; NTSTATUS __stdcall AvmpHookNtCreateMutant(   PHANDLE MutantHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   BOOLEAN InitialOwner )
#line 2362 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateMutant)(AvmpHookFunction_NtCreateMutant.Function.SSDTEntry->OriginalRoutineAddress))(
    MutantHandle,
    DesiredAccess,
    ObjectAttributes,
    InitialOwner);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateMutant,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(HANDLE), "MutantHandle", MutantHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_MUTANT_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_BOOL, sizeof(BOOLEAN), "InitialOwner", InitialOwner,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtOpenMutant)(   PHANDLE MutantHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes ); NTSTATUS __stdcall AvmpHookNtOpenMutant(   PHANDLE MutantHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtOpenMutant = { .Id = 76, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtOpenMutant" ) - sizeof( ("NtOpenMutant")[0] ), sizeof( "NtOpenMutant" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtOpenMutant")), ("NtOpenMutant") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtOpenMutant } }; NTSTATUS __stdcall AvmpHookNtOpenMutant(   PHANDLE MutantHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes )
#line 2398 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtOpenMutant)(AvmpHookFunction_NtOpenMutant.Function.SSDTEntry->OriginalRoutineAddress))(
    MutantHandle,
    DesiredAccess,
    ObjectAttributes);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtOpenMutant,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(HANDLE), "MutantHandle", MutantHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_MUTANT_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtCreateEvent)(   PHANDLE EventHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   EVENT_TYPE EventType,   BOOLEAN InitialState ); NTSTATUS __stdcall AvmpHookNtCreateEvent(   PHANDLE EventHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   EVENT_TYPE EventType,   BOOLEAN InitialState ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateEvent = { .Id = 77, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateEvent" ) - sizeof( ("NtCreateEvent")[0] ), sizeof( "NtCreateEvent" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateEvent")), ("NtCreateEvent") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateEvent } }; NTSTATUS __stdcall AvmpHookNtCreateEvent(   PHANDLE EventHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   EVENT_TYPE EventType,   BOOLEAN InitialState )
#line 2434 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateEvent)(AvmpHookFunction_NtCreateEvent.Function.SSDTEntry->OriginalRoutineAddress))(
    EventHandle,
    DesiredAccess,
    ObjectAttributes,
    EventType,
    InitialState);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateEvent,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(HANDLE), "EventHandle", EventHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_EVENT_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_ENUM, &AvmpHookEnum_EVENT_TYPE, "EventType", EventType,
    AEVT_BOOL, sizeof(BOOLEAN), "InitialState", InitialState,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtOpenEvent)(   PHANDLE EventHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes ); NTSTATUS __stdcall AvmpHookNtOpenEvent(   PHANDLE EventHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtOpenEvent = { .Id = 78, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtOpenEvent" ) - sizeof( ("NtOpenEvent")[0] ), sizeof( "NtOpenEvent" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtOpenEvent")), ("NtOpenEvent") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtOpenEvent } }; NTSTATUS __stdcall AvmpHookNtOpenEvent(   PHANDLE EventHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes )
#line 2472 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtOpenEvent)(AvmpHookFunction_NtOpenEvent.Function.SSDTEntry->OriginalRoutineAddress))(
    EventHandle,
    DesiredAccess,
    ObjectAttributes);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtOpenEvent,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(HANDLE), "EventHandle", EventHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_EVENT_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtCreateSemaphore)(   PHANDLE SemaphoreHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   LONG InitialCount,   LONG MaximumCount ); NTSTATUS __stdcall AvmpHookNtCreateSemaphore(   PHANDLE SemaphoreHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   LONG InitialCount,   LONG MaximumCount ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtCreateSemaphore = { .Id = 79, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtCreateSemaphore" ) - sizeof( ("NtCreateSemaphore")[0] ), sizeof( "NtCreateSemaphore" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtCreateSemaphore")), ("NtCreateSemaphore") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtCreateSemaphore } }; NTSTATUS __stdcall AvmpHookNtCreateSemaphore(   PHANDLE SemaphoreHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes,   LONG InitialCount,   LONG MaximumCount )
#line 2508 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtCreateSemaphore)(AvmpHookFunction_NtCreateSemaphore.Function.SSDTEntry->OriginalRoutineAddress))(
    SemaphoreHandle,
    DesiredAccess,
    ObjectAttributes,
    InitialCount,
    MaximumCount);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtCreateSemaphore,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(HANDLE), "SemaphoreHandle", SemaphoreHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_SEMAPHORE_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_INTEGER, sizeof(LONG), "InitialCount", InitialCount,
    AEVT_INTEGER, sizeof(LONG), "MaximumCount", MaximumCount,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtOpenSemaphore)(   PHANDLE SemaphoreHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes ); NTSTATUS __stdcall AvmpHookNtOpenSemaphore(   PHANDLE SemaphoreHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtOpenSemaphore = { .Id = 80, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtOpenSemaphore" ) - sizeof( ("NtOpenSemaphore")[0] ), sizeof( "NtOpenSemaphore" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtOpenSemaphore")), ("NtOpenSemaphore") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtOpenSemaphore } }; NTSTATUS __stdcall AvmpHookNtOpenSemaphore(   PHANDLE SemaphoreHandle,   ACCESS_MASK DesiredAccess,   POBJECT_ATTRIBUTES ObjectAttributes )
#line 2546 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtOpenSemaphore)(AvmpHookFunction_NtOpenSemaphore.Function.SSDTEntry->OriginalRoutineAddress))(
    SemaphoreHandle,
    DesiredAccess,
    ObjectAttributes);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  UNICODE_STRING CapturedObjectName;
  ULONG CapturedObjectNameFlags;
  do { *(&CapturedObjectNameFlags) = AEVT_HINT_PROBE; (&CapturedObjectName)->Buffer = ((void *)0); (&CapturedObjectName)->Length = 0; (&CapturedObjectName)->MaximumLength = 0; __try { if ((ObjectAttributes) && (ObjectAttributes)->ObjectName && (ObjectAttributes)->ObjectName->Buffer) { (&CapturedObjectName)->Buffer = (ObjectAttributes)->ObjectName->Buffer; (&CapturedObjectName)->Length = (ObjectAttributes)->ObjectName->Length; (&CapturedObjectName)->MaximumLength = (ObjectAttributes)->ObjectName->MaximumLength; } } __except (1) { *(&CapturedObjectNameFlags) = AEVT_HINT_ERROR; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtOpenSemaphore,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE, sizeof(HANDLE), "SemaphoreHandle", SemaphoreHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_SEMAPHORE_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_UNICODE_STRING | CapturedObjectNameFlags, CapturedObjectName.Length, "ObjectName", CapturedObjectName.Buffer,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtWaitForSingleObject)(   HANDLE Handle,   BOOLEAN Alertable,   PLARGE_INTEGER Timeout ); NTSTATUS __stdcall AvmpHookNtWaitForSingleObject(   HANDLE Handle,   BOOLEAN Alertable,   PLARGE_INTEGER Timeout ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtWaitForSingleObject = { .Id = 81, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtWaitForSingleObject" ) - sizeof( ("NtWaitForSingleObject")[0] ), sizeof( "NtWaitForSingleObject" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtWaitForSingleObject")), ("NtWaitForSingleObject") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtWaitForSingleObject } }; NTSTATUS __stdcall AvmpHookNtWaitForSingleObject(   HANDLE Handle,   BOOLEAN Alertable,   PLARGE_INTEGER Timeout )
#line 2580 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtWaitForSingleObject)(AvmpHookFunction_NtWaitForSingleObject.Function.SSDTEntry->OriginalRoutineAddress))(
    Handle,
    Alertable,
    Timeout);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtWaitForSingleObject,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "Handle", Handle,
    AEVT_BOOL, sizeof(BOOLEAN), "Alertable", Alertable,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(LONGLONG), "Timeout", &Timeout->QuadPart,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtWaitForMultipleObjects)(   ULONG Count,   HANDLE Handles[],   WAIT_TYPE WaitType,   BOOLEAN Alertable,   PLARGE_INTEGER Timeout ); NTSTATUS __stdcall AvmpHookNtWaitForMultipleObjects(   ULONG Count,   HANDLE Handles[],   WAIT_TYPE WaitType,   BOOLEAN Alertable,   PLARGE_INTEGER Timeout ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtWaitForMultipleObjects = { .Id = 82, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtWaitForMultipleObjects" ) - sizeof( ("NtWaitForMultipleObjects")[0] ), sizeof( "NtWaitForMultipleObjects" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtWaitForMultipleObjects")), ("NtWaitForMultipleObjects") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtWaitForMultipleObjects } }; NTSTATUS __stdcall AvmpHookNtWaitForMultipleObjects(   ULONG Count,   HANDLE Handles[],   WAIT_TYPE WaitType,   BOOLEAN Alertable,   PLARGE_INTEGER Timeout )
#line 2612 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtWaitForMultipleObjects)(AvmpHookFunction_NtWaitForMultipleObjects.Function.SSDTEntry->OriginalRoutineAddress))(
    Count,
    Handles,
    WaitType,
    Alertable,
    Timeout);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtWaitForMultipleObjects,
    ReturnValue,
    AEVT_INTEGER, sizeof(ULONG), "Count", Count,
    AEVT_BINARY, sizeof(HANDLE) * Count, "Handles", Handles,
    AEVT_ENUM, &AvmpHookEnum_WAIT_TYPE, "WaitType", WaitType,
    AEVT_BOOL, sizeof(BOOLEAN), "Alertable", Alertable,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(LONGLONG), "Timeout", &Timeout->QuadPart,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtDelayExecution)(   BOOLEAN Alertable,   PLARGE_INTEGER DelayInterval ); NTSTATUS __stdcall AvmpHookNtDelayExecution(   BOOLEAN Alertable,   PLARGE_INTEGER DelayInterval ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtDelayExecution = { .Id = 83, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtDelayExecution" ) - sizeof( ("NtDelayExecution")[0] ), sizeof( "NtDelayExecution" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtDelayExecution")), ("NtDelayExecution") }, .Function = { .CategoryName = { sizeof( "Synchronization" ) - sizeof( ("Synchronization")[0] ), sizeof( "Synchronization" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Synchronization")), ("Synchronization") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtDelayExecution } }; NTSTATUS __stdcall AvmpHookNtDelayExecution(   BOOLEAN Alertable,   PLARGE_INTEGER DelayInterval )
#line 2645 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtDelayExecution)(AvmpHookFunction_NtDelayExecution.Function.SSDTEntry->OriginalRoutineAddress))(
    Alertable,
    DelayInterval);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtDelayExecution,
    ReturnValue,
    AEVT_BOOL, sizeof(BOOLEAN), "Alertable", Alertable,
    AEVT_INTEGER | AEVT_HINT_PROBE, sizeof(LONGLONG), "DelayInterval", &DelayInterval->QuadPart,
    AEVT_VOID);

  return ReturnValue;
}

#pragma endregion Synchronization

#pragma region Objects





typedef NTSTATUS (__stdcall * pfnNtDuplicateObject)(   HANDLE SourceProcessHandle,   HANDLE SourceHandle,   HANDLE TargetProcessHandle,   PHANDLE TargetHandle,   ACCESS_MASK DesiredAccess,   ULONG HandleAttributes,   ULONG Options ); NTSTATUS __stdcall AvmpHookNtDuplicateObject(   HANDLE SourceProcessHandle,   HANDLE SourceHandle,   HANDLE TargetProcessHandle,   PHANDLE TargetHandle,   ACCESS_MASK DesiredAccess,   ULONG HandleAttributes,   ULONG Options ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtDuplicateObject = { .Id = 84, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtDuplicateObject" ) - sizeof( ("NtDuplicateObject")[0] ), sizeof( "NtDuplicateObject" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtDuplicateObject")), ("NtDuplicateObject") }, .Function = { .CategoryName = { sizeof( "Objects" ) - sizeof( ("Objects")[0] ), sizeof( "Objects" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Objects")), ("Objects") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtDuplicateObject } }; NTSTATUS __stdcall AvmpHookNtDuplicateObject(   HANDLE SourceProcessHandle,   HANDLE SourceHandle,   HANDLE TargetProcessHandle,   PHANDLE TargetHandle,   ACCESS_MASK DesiredAccess,   ULONG HandleAttributes,   ULONG Options )
#line 2681 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtDuplicateObject)(AvmpHookFunction_NtDuplicateObject.Function.SSDTEntry->OriginalRoutineAddress))(
    SourceProcessHandle,
    SourceHandle,
    TargetProcessHandle,
    TargetHandle,
    DesiredAccess,
    HandleAttributes,
    Options);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  HANDLE SourceProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(SourceProcessHandle, &SourceProcessHandleToPid);

  HANDLE TargetProcessHandleToPid = 0;
  AvmHookGetProcessIdFromProcessHandle(TargetProcessHandle, &TargetProcessHandleToPid);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtDuplicateObject,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "SourceProcessHandle", SourceProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "SourceProcessHandleToPid", SourceProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "SourceHandle", SourceHandle,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "TargetProcessHandle", TargetProcessHandle,
    AEVT_INTEGER, sizeof(HANDLE), "TargetProcessHandleToPid", TargetProcessHandleToPid,
    AEVT_INTEGER | AEVT_HINT_POINTER | AEVT_HINT_PROBE , sizeof(HANDLE), "TargetHandle", TargetHandle,
    AEVT_ENUM | AEVT_HINT_FLAGS, &AvmpHookEnum_GENERIC_ACCESS_MASK, "DesiredAccess", DesiredAccess,
    AEVT_ENUM, &AvmpHookEnum_OBJ_ATTRIBUTES, "HandleAttributes", HandleAttributes,
    AEVT_ENUM, &AvmpHookEnum_DUPLICATE_OPTIONS, "Options", Options,
    AEVT_VOID);

  return ReturnValue;
}





typedef NTSTATUS (__stdcall * pfnNtClose)(   HANDLE Handle ); NTSTATUS __stdcall AvmpHookNtClose(   HANDLE Handle ); __declspec(allocate(".hdef")) AVM_HOOK_DEFINITION AvmpHookFunction_NtClose = { .Id = 85, .Type = AHDT_FUNCTION, .Name = { sizeof( "NtClose" ) - sizeof( ("NtClose")[0] ), sizeof( "NtClose" ) / sizeof(_RTL_CONSTANT_STRING_type_check("NtClose")), ("NtClose") }, .Function = { .CategoryName = { sizeof( "Objects" ) - sizeof( ("Objects")[0] ), sizeof( "Objects" ) / sizeof(_RTL_CONSTANT_STRING_type_check("Objects")), ("Objects") }, .SSDTEntry = ((void *)0), .NewFunctionAddress = (PVOID)&AvmpHookNtClose } }; NTSTATUS __stdcall AvmpHookNtClose(   HANDLE Handle )
#line 2725 "c:\\users\\petr\\desktop\\avmext\\src\\avmext\\device\\hookdef/hook_function.inl"
{
  NTSTATUS ReturnValue = ((pfnNtClose)(AvmpHookFunction_NtClose.Function.SSDTEntry->OriginalRoutineAddress))(
    Handle);

  do { if (ExGetPreviousMode() == KernelMode || !AvmHookIsProcessIdWatched(PsGetCurrentProcessId())) { return ReturnValue; } } while (0);

  AvmQueueFunctionCallEvent(
    &AvmpHookFunction_NtClose,
    ReturnValue,
    AEVT_INTEGER | AEVT_HINT_POINTER, sizeof(HANDLE), "Handle", Handle,
    AEVT_VOID);

  return ReturnValue;
}

#pragma endregion Objects

#line 28 "device\\hook.c"
const ULONG AvmpHookDefinitionLast = 86;

typedef struct _AVM_HOOK_WATCHED_PROCESS
{
  LIST_ENTRY ListEntry;
  HANDLE ProcessId;
} AVM_HOOK_WATCHED_PROCESS, *PAVM_HOOK_WATCHED_PROCESS;





void
__stdcall
AvmpCreateProcessNotifyRoutineEx(
    PEPROCESS Process,
    HANDLE ProcessId,
    PPS_CREATE_NOTIFY_INFO CreateInfo
  )
{
  (Process);

  if (CreateInfo && AvmHookIsProcessIdWatched(CreateInfo->ParentProcessId))
  {
    AvmHookAddWatchedProcessId(ProcessId);

    AvmQueueProcessEvent(
      1,
      ProcessId,
      CreateInfo->ParentProcessId,
      CreateInfo->ImageFileName);
  }
  else if (!CreateInfo && AvmHookIsProcessIdWatched(ProcessId))
  {
    AvmHookRemoveWatchedProcessId(ProcessId);

    AvmQueueProcessEvent(
      0,
      ProcessId,
      0,
      ((void *)0));
  }
}

void
__stdcall
AvmpCreateThreadNofityRoutine(
    HANDLE ProcessId,
    HANDLE ThreadId,
    BOOLEAN Create
  )
{
  if (AvmHookIsProcessIdWatched(ProcessId))
  {
    AvmQueueThreadEvent(
      Create,
      ProcessId,
      ThreadId);
  }
}

void
__stdcall
AvmpLoadImageNotifyRoutine(
    PUNICODE_STRING FullImageName,
    HANDLE ProcessId,
    PIMAGE_INFO ImageInfo
  )
{
  if (AvmHookIsProcessIdWatched(ProcessId))
  {
    AvmQueueLoadImageEvent(
      ProcessId,
      FullImageName,
      ImageInfo);
  }
}





NTSTATUS
__stdcall
AvmHookInitialize(
    PDEVICE_OBJECT DeviceObject
  )
{
  PAVM_DEVICE_EXTENSION DeviceExtension = DeviceObject->DeviceExtension;

  
  
  
  
  DeviceExtension->Hook.DefinitionCount = AvmpHookDefinitionCount;

  PIMAGE_SECTION_HEADER Section = AvmSectionTableFromSectionName(
    RtlImageNtHeader(AvmDriverObject->DriverStart),
    ".hdef");

  DeviceExtension->Hook.DefinitionList = (PAVM_HOOK_DEFINITION)((PUCHAR)AvmDriverObject->DriverStart + Section->VirtualAddress);

  DeviceExtension->Hook.DefinitionIdToDefinitionMap = ExAllocatePoolWithTag(
    NonPagedPoolNx,
    sizeof(PAVM_HOOK_DEFINITION) * DeviceExtension->Hook.DefinitionCount,
    'HmvA');

  if (!DeviceExtension->Hook.DefinitionIdToDefinitionMap)
  {
    return ((NTSTATUS)0xC000009AL);
  }

  
  
  
  __debugbreak();
  DeviceExtension->Hook.FunctionDefinitionBufferSize = AvmpHookCreateFunctionDefinitionBuffer(1);

  
  
  
  DeviceExtension->Hook.FunctionDefinitionBuffer = ExAllocatePoolWithTag(
    NonPagedPoolNx,
    DeviceExtension->Hook.FunctionDefinitionBufferSize,
    'HmvA');

  if (!DeviceExtension->Hook.FunctionDefinitionBuffer)
  {
    return ((NTSTATUS)0xC000009AL);
  }

  
  
  
  AvmpHookCreateFunctionDefinitionBuffer(0);

  
  
  
  InitializeListHead(&DeviceExtension->Hook.WatchedProcessIdList);
  KzInitializeSpinLock(&DeviceExtension->Hook.WatchedProcessIdListLock);
  DeviceExtension->Hook.WatchedProcessCount = 0;

  DbgPrint("[DEBUG] Hook initialized\n");

  return ((NTSTATUS)0x00000000L);
}

void
__stdcall
AvmHookDestroy(
    PDEVICE_OBJECT DeviceObject
  )
{
  PAVM_DEVICE_EXTENSION DeviceExtension = DeviceObject->DeviceExtension;

  
  
  
  AvmHookDisable();

  if (DeviceExtension->Hook.FunctionDefinitionBuffer)
  {
    ExFreePoolWithTag(DeviceExtension->Hook.FunctionDefinitionBuffer, 'HmvA');
    DeviceExtension->Hook.FunctionDefinitionBuffer = ((void *)0);
    DeviceExtension->Hook.FunctionDefinitionBufferSize = 0;
  }

  if (DeviceExtension->Hook.DefinitionIdToDefinitionMap)
  {
    ExFreePoolWithTag(DeviceExtension->Hook.DefinitionIdToDefinitionMap, 'HmvA');
    DeviceExtension->Hook.DefinitionIdToDefinitionMap = ((void *)0);
  }

  DbgPrint("[INFO] Hook destroyed\n");
}

NTSTATUS
__stdcall
AvmHookEnable(
  void
  )
{
  
  
  
  LONG PreviousSources = _InterlockedOr(&AvmDeviceExtension->EventQueue.ActiveSources, 0x00000001);

  if (PreviousSources & 0x00000001)
  {
    return ((NTSTATUS)0x000000FFL);
  }

  NTSTATUS Status;

  
  
  
  Status = PsSetCreateProcessNotifyRoutineEx(&AvmpCreateProcessNotifyRoutineEx, 0);

  if (!(((NTSTATUS)(Status)) >= 0))
  {
    AvmHookDisable();
    return Status;
  }

  
  
  
  Status = PsSetCreateThreadNotifyRoutine(&AvmpCreateThreadNofityRoutine);

  if (!(((NTSTATUS)(Status)) >= 0))
  {
    AvmHookDisable();
    return Status;
  }

  
  
  
  Status = PsSetLoadImageNotifyRoutine(&AvmpLoadImageNotifyRoutine);

  if (!(((NTSTATUS)(Status)) >= 0))
  {
    AvmHookDisable();
    return Status;
  }

  
  
  
  AvmHookResetDescriptionSentStatus();

  return Status;
}

void
__stdcall
AvmHookDisable(
  void
  )
{
  LONG PreviousSources = _InterlockedAnd(&AvmDeviceExtension->EventQueue.ActiveSources, ~0x00000001);

  if (PreviousSources & 0x00000001)
  {
    
    
    
    AvmPatchSSDTUnhookAll();

    
    
    
    PsRemoveLoadImageNotifyRoutine(&AvmpLoadImageNotifyRoutine);
    PsRemoveCreateThreadNotifyRoutine(&AvmpCreateThreadNofityRoutine);
    PsSetCreateProcessNotifyRoutineEx(&AvmpCreateProcessNotifyRoutineEx, 1);

    
    
    
    AvmQueueFlush();

    
    
    
    
    
    
    
    KeSetEvent(&AvmDeviceExtension->EventQueue.QueueEvent, 0, 0);

    
    
    
    AvmHookRemoveAllWatchedProcessIds();

    DbgPrint("[INFO] Hook disabled\n");
  }
}

void
__stdcall
AvmHookResetDescriptionSentStatus(
  void
  )
{
  for (ULONG Index = 0; Index < AvmDeviceExtension->Hook.DefinitionCount; Index++)
  {
    AvmDeviceExtension->Hook.DefinitionList[Index].DescriptionSent = 0;
  }

  DbgPrint("[DEBUG] DescriptionSent resetted\n");
}

NTSTATUS
__stdcall
AvmHookSetFunctionInformation(
  ULONG FunctionId,
  BOOLEAN Enable
  )
{
  if (FunctionId >= AvmDeviceExtension->Hook.DefinitionCount)
  {
    
    
    
    return ((NTSTATUS)0xC000000DL);
  }

  PAVM_HOOK_DEFINITION HookInformation = AvmDeviceExtension->Hook.DefinitionIdToDefinitionMap[FunctionId];

  if (HookInformation->Type != AHDT_FUNCTION)
  {
    
    
    
    return ((NTSTATUS)0xC000000DL);
  }

  NTSTATUS Status = ((NTSTATUS)0x00000000L);

  KeAcquireGuardedMutex(&HookInformation->Function.PatchLock);
  {
    DbgPrint("[INFO] %s FunctionId: %u (%Z)\n", Enable ? "Enabling" : "Disabling", FunctionId, HookInformation->Name);
#line 357 "device\\hook.c"

    if (Enable)
    {
      if (!HookInformation->Function.PatchEnabled)
      {
        Status = AvmPatchSSDTHook(
          &HookInformation->Name,
          HookInformation->Function.NewFunctionAddress,
          &HookInformation->Function.SSDTEntry);
      }
      else
      {
        DbgPrint("[WARNING] Trying to hook already hooked function (id: %u, name: %Z)\n", FunctionId, HookInformation->Name);
#line 373 "device\\hook.c"
      }
    }
    else
    {
      if (HookInformation->Function.PatchEnabled)
      {
        Status = AvmPatchSSDTUnhook(HookInformation->Function.SSDTEntry);
      }
      else
      {
        DbgPrint("[WARNING] Trying to unhook already unhooked function (id: %u, name: %Z)\n", FunctionId, HookInformation->Name);
#line 387 "device\\hook.c"
      }
    }

    HookInformation->Function.PatchEnabled = Enable;
  }
  KeReleaseGuardedMutex(&HookInformation->Function.PatchLock);

  return Status;
}

NTSTATUS
AvmHookAddWatchedProcessId(
  HANDLE ProcessId
  )
{
  PAVM_HOOK_WATCHED_PROCESS NewWatchedProcess = ExAllocatePoolWithTag(
    NonPagedPoolNx,
    sizeof(AVM_HOOK_WATCHED_PROCESS),
    'HmvA');

  if (!NewWatchedProcess)
  {
    return ((NTSTATUS)0xC000009AL);
  }

  KIRQL OldIrql;
  *(&OldIrql) = KeAcquireSpinLockRaiseToDpc(&AvmDeviceExtension->Hook.WatchedProcessIdListLock);
  {
    PLIST_ENTRY NextEntry = AvmDeviceExtension->Hook.WatchedProcessIdList.Blink;
    while (NextEntry != &AvmDeviceExtension->Hook.WatchedProcessIdList)
    {
      PAVM_HOOK_WATCHED_PROCESS WatchedProcess = ((AVM_HOOK_WATCHED_PROCESS *)( (PCHAR)(NextEntry) - (ULONG_PTR)(&((AVM_HOOK_WATCHED_PROCESS *)0)->ListEntry)));
#line 422 "device\\hook.c"

      if (WatchedProcess->ProcessId == ProcessId)
      {
        DbgPrint("[WARNING] Attempt to add already watched PID: %u (WatchedProcessCount: %u)\n", ProcessId, AvmDeviceExtension->Hook.WatchedProcessCount);
#line 429 "device\\hook.c"

        ExFreePoolWithTag(NewWatchedProcess, 'HmvA');
        goto ProcessIdAlreadyWatched;
      }

      NextEntry = NextEntry->Blink;
    }

    
    
    
    NewWatchedProcess->ProcessId = ProcessId;
    InsertTailList(&AvmDeviceExtension->Hook.WatchedProcessIdList, &NewWatchedProcess->ListEntry);
    AvmDeviceExtension->Hook.WatchedProcessCount += 1;

    DbgPrint("[INFO] Added watched PID: %u (WatchedProcessCount: %u)\n", ProcessId, AvmDeviceExtension->Hook.WatchedProcessCount);
#line 448 "device\\hook.c"

  ProcessIdAlreadyWatched:
    ;
  }
  KeReleaseSpinLock(&AvmDeviceExtension->Hook.WatchedProcessIdListLock, OldIrql);

  return ((NTSTATUS)0x00000000L);
}

NTSTATUS
AvmHookRemoveWatchedProcessId(
  HANDLE ProcessId
  )
{
  NTSTATUS Status = ((NTSTATUS)0xC0000225L);

  KIRQL OldIrql;
  *(&OldIrql) = KeAcquireSpinLockRaiseToDpc(&AvmDeviceExtension->Hook.WatchedProcessIdListLock);
  {
    PLIST_ENTRY NextEntry = AvmDeviceExtension->Hook.WatchedProcessIdList.Blink;
    while (NextEntry != &AvmDeviceExtension->Hook.WatchedProcessIdList)
    {
      PAVM_HOOK_WATCHED_PROCESS WatchedProcess = ((AVM_HOOK_WATCHED_PROCESS *)( (PCHAR)(NextEntry) - (ULONG_PTR)(&((AVM_HOOK_WATCHED_PROCESS *)0)->ListEntry)));
#line 474 "device\\hook.c"

      if (WatchedProcess->ProcessId == ProcessId)
      {
        RemoveEntryList(NextEntry);
        ExFreePoolWithTag(WatchedProcess, 'HmvA');

        AvmDeviceExtension->Hook.WatchedProcessCount -= 1;

        DbgPrint("[INFO] Removed watched PID: %u (WatchedProcessCount: %u)\n", ProcessId, AvmDeviceExtension->Hook.WatchedProcessCount);
#line 486 "device\\hook.c"

        Status = ((NTSTATUS)0x00000000L);
        break;
      }

      NextEntry = NextEntry->Blink;
    }
  }
  KeReleaseSpinLock(&AvmDeviceExtension->Hook.WatchedProcessIdListLock, OldIrql);

  return Status;
}

void
__stdcall
AvmHookRemoveAllWatchedProcessIds(
  void
  )
{
  KIRQL OldIrql;
  *(&OldIrql) = KeAcquireSpinLockRaiseToDpc(&AvmDeviceExtension->Hook.WatchedProcessIdListLock);
  {
    PLIST_ENTRY NextEntry = AvmDeviceExtension->Hook.WatchedProcessIdList.Blink;
    while (NextEntry != &AvmDeviceExtension->Hook.WatchedProcessIdList)
    {
      PAVM_HOOK_WATCHED_PROCESS WatchedProcess = ((AVM_HOOK_WATCHED_PROCESS *)( (PCHAR)(NextEntry) - (ULONG_PTR)(&((AVM_HOOK_WATCHED_PROCESS *)0)->ListEntry)));
#line 515 "device\\hook.c"

      RemoveEntryList(NextEntry);
      ExFreePoolWithTag(WatchedProcess, 'HmvA');

      NextEntry = AvmDeviceExtension->Hook.WatchedProcessIdList.Blink;
    }

    DbgPrint("[INFO] Removed all watched PIDs (previous WatchedProcessCount: %u)\n", AvmDeviceExtension->Hook.WatchedProcessCount);
#line 525 "device\\hook.c"

    AvmDeviceExtension->Hook.WatchedProcessCount = 0;
  }
  KeReleaseSpinLock(&AvmDeviceExtension->Hook.WatchedProcessIdListLock, OldIrql);
}

BOOLEAN
__stdcall
AvmHookIsProcessIdWatched(
  HANDLE ProcessId
  )
{
  BOOLEAN Result = 0;

  KIRQL OldIrql;
  *(&OldIrql) = KeAcquireSpinLockRaiseToDpc(&AvmDeviceExtension->Hook.WatchedProcessIdListLock);
  {
    PLIST_ENTRY NextEntry = AvmDeviceExtension->Hook.WatchedProcessIdList.Blink;
    while (NextEntry != &AvmDeviceExtension->Hook.WatchedProcessIdList)
    {
      PAVM_HOOK_WATCHED_PROCESS WatchedProcess = ((AVM_HOOK_WATCHED_PROCESS *)( (PCHAR)(NextEntry) - (ULONG_PTR)(&((AVM_HOOK_WATCHED_PROCESS *)0)->ListEntry)));
#line 549 "device\\hook.c"

      if (WatchedProcess->ProcessId == ProcessId)
      {
        Result = 1;
        break;
      }

      NextEntry = NextEntry->Blink;
    }
  }
  KeReleaseSpinLock(&AvmDeviceExtension->Hook.WatchedProcessIdListLock, OldIrql);

  return Result;
}





ULONG
__stdcall
AvmpHookCreateFunctionDefinitionBuffer(
    BOOLEAN Simulate
  )
{
  PVOID Data = Simulate
    ? ((void *)0)
    : AvmDeviceExtension->Hook.FunctionDefinitionBuffer;

  PVOID DataBegin = Data;

  for (ULONG Index = 0; Index < AvmDeviceExtension->Hook.DefinitionCount; Index++)
  {
    
    
    
    
    PAVM_HOOK_DEFINITION Definition = Simulate
      ? &AvmDeviceExtension->Hook.DefinitionList[Index]
      : AvmDeviceExtension->Hook.DefinitionIdToDefinitionMap[Index];

    if (Simulate)
    {
      
      
      
      
      AvmDeviceExtension->Hook.DefinitionIdToDefinitionMap[Definition->Id] = Definition;

      KeInitializeGuardedMutex(&Definition->DescriptionSentLock);
      Definition->DescriptionSent = 0;

      switch (Definition->Type)
      {
        case AHDT_ENUM:
          ;
          break;

        case AHDT_FUNCTION:
          KeInitializeGuardedMutex(&Definition->Function.PatchLock);
          Definition->Function.PatchEnabled = 0;
          break;

        default:
          (((void) 0), ((!(0)) ? (__annotation(L"Debug", L"AssertFail", L"0"), __int2c(), 0) : 1));
          break;
      }
    }
    else
    {
      DbgPrint("[INFO] Creating function definition (ID: %u, Function name: %Z, Category: %Z)\n", Definition->Id, &Definition->Name, &Definition->Function.CategoryName);
#line 624 "device\\hook.c"
    }

    if (Definition->Type == AHDT_FUNCTION)
    {
      
      
      
      AvmpEventBufferWrite(
        &Data,
        AEVT_STRING,
        Definition->Function.CategoryName.Length,
        Definition->Function.CategoryName.Buffer,
        Simulate);

      
      
      
      AvmpEventBufferWrite(
        &Data,
        AEVT_STRING,
        Definition->Name.Length,
        Definition->Name.Buffer,
        Simulate);

      
      
      
      AvmpEventBufferWrite(&Data,
        AEVT_INTEGER,
        sizeof(Definition->Id),
        (PVOID)Definition->Id,
        Simulate);

      (((void) 0), ((!(Simulate || Index == Definition->Id)) ? (__annotation(L"Debug", L"AssertFail", L"Simulate || Index == Definition->Id"), __int2c(), 0) : 1));
    }
  }

  return (ULONG)((ULONG_PTR)Data - (ULONG_PTR)DataBegin);
}
